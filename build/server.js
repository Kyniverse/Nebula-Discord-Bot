/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 83);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/util/Constants.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("exports.Package = __webpack_require__(/*! ../../package.json */ 49);\n\n/**\n * Options for a client.\n * @typedef {Object} ClientOptions\n * @property {string} [apiRequestMethod='sequential'] One of `sequential` or `burst`. The sequential handler executes\n * all requests in the order they are triggered, whereas the burst handler runs multiple in parallel, and doesn't\n * provide the guarantee of any particular order. Burst mode is more likely to hit a 429 ratelimit error by its nature,\n * and is therefore slightly riskier to use.\n * @property {number} [shardId=0] ID of the shard to run\n * @property {number} [shardCount=0] Total number of shards\n * @property {number} [messageCacheMaxSize=200] Maximum number of messages to cache per channel\n * (-1 or Infinity for unlimited - don't do this without message sweeping, otherwise memory usage will climb\n * indefinitely)\n * @property {number} [messageCacheLifetime=0] How long a message should stay in the cache until it is considered\n * sweepable (in seconds, 0 for forever)\n * @property {number} [messageSweepInterval=0] How frequently to remove messages from the cache that are older than\n * the message cache lifetime (in seconds, 0 for never)\n * @property {boolean} [fetchAllMembers=false] Whether to cache all guild members and users upon startup, as well as\n * upon joining a guild (should be avoided whenever possible)\n * @property {boolean} [disableEveryone=false] Default value for {@link MessageOptions#disableEveryone}\n * @property {boolean} [sync=false] Whether to periodically sync guilds (for user accounts)\n * @property {number} [restWsBridgeTimeout=5000] Maximum time permitted between REST responses and their\n * corresponding websocket events\n * @property {number} [restTimeOffset=500] Extra time in millseconds to wait before continuing to make REST\n * requests (higher values will reduce rate-limiting errors on bad connections)\n * @property {WSEventType[]} [disabledEvents] An array of disabled websocket events. Events in this array will not be\n * processed, potentially resulting in performance improvements for larger bots. Only disable events you are\n * 100% certain you don't need, as many are important, but not obviously so. The safest one to disable with the\n * most impact is typically `TYPING_START`.\n * @property {WebsocketOptions} [ws] Options for the WebSocket\n * @property {HTTPOptions} [http] HTTP options\n */\nexports.DefaultOptions = {\n  apiRequestMethod: 'sequential',\n  shardId: 0,\n  shardCount: 0,\n  messageCacheMaxSize: 200,\n  messageCacheLifetime: 0,\n  messageSweepInterval: 0,\n  fetchAllMembers: false,\n  disableEveryone: false,\n  sync: false,\n  restWsBridgeTimeout: 5000,\n  disabledEvents: [],\n  restTimeOffset: 500,\n\n  /**\n   * WebSocket options (these are left as snake_case to match the API)\n   * @typedef {Object} WebsocketOptions\n   * @property {number} [large_threshold=250] Number of members in a guild to be considered large\n   * @property {boolean} [compress=true] Whether to compress data sent on the connection\n   * (defaults to `false` for browsers)\n   */\n  ws: {\n    large_threshold: 250,\n    compress: __webpack_require__(/*! os */ 95).platform() !== 'browser',\n    properties: {\n      $os: process ? process.platform : 'discord.js',\n      $browser: 'discord.js',\n      $device: 'discord.js',\n      $referrer: '',\n      $referring_domain: '',\n    },\n    version: 6,\n  },\n\n  /**\n   * HTTP options\n   * @typedef {Object} HTTPOptions\n   * @property {number} [version=7] API version to use\n   * @property {string} [api='https://discordapp.com/api'] Base url of the API\n   * @property {string} [cdn='https://cdn.discordapp.com'] Base url of the CDN\n   * @property {string} [invite='https://discord.gg'] Base url of invites\n   */\n  http: {\n    version: 7,\n    host: 'https://discordapp.com',\n    cdn: 'https://cdn.discordapp.com',\n  },\n};\n\nexports.WSCodes = {\n  1000: 'Connection gracefully closed',\n  4004: 'Tried to identify with an invalid token',\n  4010: 'Sharding data provided was invalid',\n  4011: 'Shard would be on too many guilds if connected',\n};\n\nexports.Errors = {\n  NO_TOKEN: 'Request to use token, but token was unavailable to the client.',\n  NO_BOT_ACCOUNT: 'Only bot accounts are able to make use of this feature.',\n  NO_USER_ACCOUNT: 'Only user accounts are able to make use of this feature.',\n  BAD_WS_MESSAGE: 'A bad message was received from the websocket; either bad compression, or not JSON.',\n  TOOK_TOO_LONG: 'Something took too long to do.',\n  NOT_A_PERMISSION: 'Invalid permission string or number.',\n  INVALID_RATE_LIMIT_METHOD: 'Unknown rate limiting method.',\n  BAD_LOGIN: 'Incorrect login details were provided.',\n  INVALID_SHARD: 'Invalid shard settings were provided.',\n  SHARDING_REQUIRED: 'This session would have handled too many guilds - Sharding is required.',\n  INVALID_TOKEN: 'An invalid token was provided.',\n};\n\nconst Endpoints = exports.Endpoints = {\n  User: userID => {\n    if (userID.id) userID = userID.id;\n    const base = `/users/${userID}`;\n    return {\n      toString: () => base,\n      channels: `${base}/channels`,\n      profile: `${base}/profile`,\n      relationships: `${base}/relationships`,\n      settings: `${base}/settings`,\n      Relationship: uID => `${base}/relationships/${uID}`,\n      Guild: guildID => ({\n        toString: () => `${base}/guilds/${guildID}`,\n        settings: `${base}/guilds/${guildID}/settings`,\n      }),\n      Note: id => `${base}/notes/${id}`,\n      Mentions: (limit, roles, everyone, guildID) =>\n        `${base}/mentions?limit=${limit}&roles=${roles}&everyone=${everyone}${guildID ? `&guild_id=${guildID}` : ''}`,\n      Avatar: (root, hash) => {\n        if (userID === '1') return hash;\n        return Endpoints.CDN(root).Avatar(userID, hash);\n      },\n    };\n  },\n  guilds: '/guilds',\n  Guild: guildID => {\n    if (guildID.id) guildID = guildID.id;\n    const base = `/guilds/${guildID}`;\n    return {\n      toString: () => base,\n      prune: `${base}/prune`,\n      embed: `${base}/embed`,\n      bans: `${base}/bans`,\n      integrations: `${base}/integrations`,\n      members: `${base}/members`,\n      channels: `${base}/channels`,\n      invites: `${base}/invites`,\n      roles: `${base}/roles`,\n      emojis: `${base}/emojis`,\n      search: `${base}/messages/search`,\n      voiceRegions: `${base}/regions`,\n      webhooks: `${base}/webhooks`,\n      ack: `${base}/ack`,\n      settings: `${base}/settings`,\n      auditLogs: `${base}/audit-logs`,\n      Emoji: emojiID => `${base}/emojis/${emojiID}`,\n      Icon: (root, hash) => Endpoints.CDN(root).Icon(guildID, hash),\n      Splash: (root, hash) => Endpoints.CDN(root).Splash(guildID, hash),\n      Role: roleID => `${base}/roles/${roleID}`,\n      Member: memberID => {\n        if (memberID.id) memberID = memberID.id;\n        const mbase = `${base}/members/${memberID}`;\n        return {\n          toString: () => mbase,\n          Role: roleID => `${mbase}/roles/${roleID}`,\n          nickname: `${base}/members/@me/nick`,\n        };\n      },\n    };\n  },\n  channels: '/channels',\n  Channel: channelID => {\n    if (channelID.id) channelID = channelID.id;\n    const base = `/channels/${channelID}`;\n    return {\n      toString: () => base,\n      messages: {\n        toString: () => `${base}/messages`,\n        bulkDelete: `${base}/messages/bulk-delete`,\n      },\n      invites: `${base}/invites`,\n      typing: `${base}/typing`,\n      permissions: `${base}/permissions`,\n      webhooks: `${base}/webhooks`,\n      search: `${base}/messages/search`,\n      pins: `${base}/pins`,\n      Icon: (root, hash) => Endpoints.CDN(root).GDMIcon(channelID, hash),\n      Pin: messageID => `${base}/pins/${messageID}`,\n      Recipient: recipientID => `${base}/recipients/${recipientID}`,\n      Message: messageID => {\n        if (messageID.id) messageID = messageID.id;\n        const mbase = `${base}/messages/${messageID}`;\n        return {\n          toString: () => mbase,\n          reactions: `${mbase}/reactions`,\n          ack: `${mbase}/ack`,\n          Reaction: emoji => {\n            const rbase = `${mbase}/reactions/${emoji}`;\n            return {\n              toString: () => rbase,\n              User: userID => `${rbase}/${userID}`,\n            };\n          },\n        };\n      },\n    };\n  },\n  Message: m => exports.Endpoints.Channel(m.channel).Message(m),\n  Member: m => exports.Endpoints.Guild(m.guild).Member(m),\n  CDN(root) {\n    return {\n      Emoji: (emojiID, format = 'png') => `${root}/emojis/${emojiID}.${format}`,\n      Asset: name => `${root}/assets/${name}`,\n      Avatar: (userID, hash) => `${root}/avatars/${userID}/${hash}.${hash.startsWith('a_') ? 'gif' : 'png?size=2048'}`,\n      Icon: (guildID, hash) => `${root}/icons/${guildID}/${hash}.jpg`,\n      GDMIcon: (channelID, hash) => `${root}/channel-icons/${channelID}/${hash}.jpg?size=2048`,\n      Splash: (guildID, hash) => `${root}/splashes/${guildID}/${hash}.jpg`,\n    };\n  },\n  OAUTH2: {\n    Application: appID => {\n      const base = `/oauth2/applications/${appID}`;\n      return {\n        toString: () => base,\n        resetSecret: `${base}/reset`,\n        resetToken: `${base}/bot/reset`,\n      };\n    },\n    App: appID => `/oauth2/authorize?client_id=${appID}`,\n  },\n  login: '/auth/login',\n  logout: '/auth/logout',\n  voiceRegions: '/voice/regions',\n  gateway: {\n    toString: () => '/gateway',\n    bot: '/gateway/bot',\n  },\n  Invite: inviteID => `/invite/${inviteID}?with_counts=true`,\n  inviteLink: id => `https://discord.gg/${id}`,\n  Webhook: (webhookID, token) => `/webhooks/${webhookID}${token ? `/${token}` : ''}`,\n};\n\n\n/**\n * The current status of the client. Here are the available statuses:\n * * READY\n * * CONNECTING\n * * RECONNECTING\n * * IDLE\n * * NEARLY\n * * DISCONNECTED\n * @typedef {number} Status\n */\nexports.Status = {\n  READY: 0,\n  CONNECTING: 1,\n  RECONNECTING: 2,\n  IDLE: 3,\n  NEARLY: 4,\n  DISCONNECTED: 5,\n};\n\n/**\n * The current status of a voice connection. Here are the available statuses:\n * * CONNECTED\n * * CONNECTING\n * * AUTHENTICATING\n * * RECONNECTING\n * * DISCONNECTED\n * @typedef {number} VoiceStatus\n */\nexports.VoiceStatus = {\n  CONNECTED: 0,\n  CONNECTING: 1,\n  AUTHENTICATING: 2,\n  RECONNECTING: 3,\n  DISCONNECTED: 4,\n};\n\nexports.ChannelTypes = {\n  TEXT: 0,\n  DM: 1,\n  VOICE: 2,\n  GROUP_DM: 3,\n  CATEGORY: 4,\n};\n\nexports.OPCodes = {\n  DISPATCH: 0,\n  HEARTBEAT: 1,\n  IDENTIFY: 2,\n  STATUS_UPDATE: 3,\n  VOICE_STATE_UPDATE: 4,\n  VOICE_GUILD_PING: 5,\n  RESUME: 6,\n  RECONNECT: 7,\n  REQUEST_GUILD_MEMBERS: 8,\n  INVALID_SESSION: 9,\n  HELLO: 10,\n  HEARTBEAT_ACK: 11,\n};\n\nexports.VoiceOPCodes = {\n  IDENTIFY: 0,\n  SELECT_PROTOCOL: 1,\n  READY: 2,\n  HEARTBEAT: 3,\n  SESSION_DESCRIPTION: 4,\n  SPEAKING: 5,\n};\n\nexports.Events = {\n  READY: 'ready',\n  RESUME: 'resume',\n  GUILD_CREATE: 'guildCreate',\n  GUILD_DELETE: 'guildDelete',\n  GUILD_UPDATE: 'guildUpdate',\n  GUILD_UNAVAILABLE: 'guildUnavailable',\n  GUILD_AVAILABLE: 'guildAvailable',\n  GUILD_MEMBER_ADD: 'guildMemberAdd',\n  GUILD_MEMBER_REMOVE: 'guildMemberRemove',\n  GUILD_MEMBER_UPDATE: 'guildMemberUpdate',\n  GUILD_MEMBER_AVAILABLE: 'guildMemberAvailable',\n  GUILD_MEMBER_SPEAKING: 'guildMemberSpeaking',\n  GUILD_MEMBERS_CHUNK: 'guildMembersChunk',\n  GUILD_ROLE_CREATE: 'roleCreate',\n  GUILD_ROLE_DELETE: 'roleDelete',\n  GUILD_ROLE_UPDATE: 'roleUpdate',\n  GUILD_EMOJI_CREATE: 'emojiCreate',\n  GUILD_EMOJI_DELETE: 'emojiDelete',\n  GUILD_EMOJI_UPDATE: 'emojiUpdate',\n  GUILD_BAN_ADD: 'guildBanAdd',\n  GUILD_BAN_REMOVE: 'guildBanRemove',\n  CHANNEL_CREATE: 'channelCreate',\n  CHANNEL_DELETE: 'channelDelete',\n  CHANNEL_UPDATE: 'channelUpdate',\n  CHANNEL_PINS_UPDATE: 'channelPinsUpdate',\n  MESSAGE_CREATE: 'message',\n  MESSAGE_DELETE: 'messageDelete',\n  MESSAGE_UPDATE: 'messageUpdate',\n  MESSAGE_BULK_DELETE: 'messageDeleteBulk',\n  MESSAGE_REACTION_ADD: 'messageReactionAdd',\n  MESSAGE_REACTION_REMOVE: 'messageReactionRemove',\n  MESSAGE_REACTION_REMOVE_ALL: 'messageReactionRemoveAll',\n  USER_UPDATE: 'userUpdate',\n  USER_NOTE_UPDATE: 'userNoteUpdate',\n  USER_SETTINGS_UPDATE: 'clientUserSettingsUpdate',\n  USER_GUILD_SETTINGS_UPDATE: 'clientUserGuildSettingsUpdate',\n  PRESENCE_UPDATE: 'presenceUpdate',\n  VOICE_STATE_UPDATE: 'voiceStateUpdate',\n  TYPING_START: 'typingStart',\n  TYPING_STOP: 'typingStop',\n  DISCONNECT: 'disconnect',\n  RECONNECTING: 'reconnecting',\n  ERROR: 'error',\n  WARN: 'warn',\n  DEBUG: 'debug',\n};\n\n/**\n * The type of an activity of a users presence, e.g. `PLAYING`. Here are the available types:\n * * PLAYING\n * * STREAMING\n * * LISTENING\n * * WATCHING\n * @typedef {string} ActivityType\n */\nexports.ActivityTypes = [\n  'PLAYING',\n  'STREAMING',\n  'LISTENING',\n  'WATCHING',\n];\n\n/**\n * The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n * * READY\n * * RESUMED\n * * GUILD_SYNC\n * * GUILD_CREATE\n * * GUILD_DELETE\n * * GUILD_UPDATE\n * * GUILD_MEMBER_ADD\n * * GUILD_MEMBER_REMOVE\n * * GUILD_MEMBER_UPDATE\n * * GUILD_MEMBERS_CHUNK\n * * GUILD_ROLE_CREATE\n * * GUILD_ROLE_DELETE\n * * GUILD_ROLE_UPDATE\n * * GUILD_BAN_ADD\n * * GUILD_BAN_REMOVE\n * * CHANNEL_CREATE\n * * CHANNEL_DELETE\n * * CHANNEL_UPDATE\n * * CHANNEL_PINS_UPDATE\n * * MESSAGE_CREATE\n * * MESSAGE_DELETE\n * * MESSAGE_UPDATE\n * * MESSAGE_DELETE_BULK\n * * MESSAGE_REACTION_ADD\n * * MESSAGE_REACTION_REMOVE\n * * MESSAGE_REACTION_REMOVE_ALL\n * * USER_UPDATE\n * * USER_NOTE_UPDATE\n * * USER_SETTINGS_UPDATE\n * * PRESENCE_UPDATE\n * * VOICE_STATE_UPDATE\n * * TYPING_START\n * * VOICE_SERVER_UPDATE\n * * RELATIONSHIP_ADD\n * * RELATIONSHIP_REMOVE\n * @typedef {string} WSEventType\n */\nexports.WSEvents = {\n  READY: 'READY',\n  RESUMED: 'RESUMED',\n  GUILD_SYNC: 'GUILD_SYNC',\n  GUILD_CREATE: 'GUILD_CREATE',\n  GUILD_DELETE: 'GUILD_DELETE',\n  GUILD_UPDATE: 'GUILD_UPDATE',\n  GUILD_MEMBER_ADD: 'GUILD_MEMBER_ADD',\n  GUILD_MEMBER_REMOVE: 'GUILD_MEMBER_REMOVE',\n  GUILD_MEMBER_UPDATE: 'GUILD_MEMBER_UPDATE',\n  GUILD_MEMBERS_CHUNK: 'GUILD_MEMBERS_CHUNK',\n  GUILD_ROLE_CREATE: 'GUILD_ROLE_CREATE',\n  GUILD_ROLE_DELETE: 'GUILD_ROLE_DELETE',\n  GUILD_ROLE_UPDATE: 'GUILD_ROLE_UPDATE',\n  GUILD_BAN_ADD: 'GUILD_BAN_ADD',\n  GUILD_BAN_REMOVE: 'GUILD_BAN_REMOVE',\n  GUILD_EMOJIS_UPDATE: 'GUILD_EMOJIS_UPDATE',\n  CHANNEL_CREATE: 'CHANNEL_CREATE',\n  CHANNEL_DELETE: 'CHANNEL_DELETE',\n  CHANNEL_UPDATE: 'CHANNEL_UPDATE',\n  CHANNEL_PINS_UPDATE: 'CHANNEL_PINS_UPDATE',\n  MESSAGE_CREATE: 'MESSAGE_CREATE',\n  MESSAGE_DELETE: 'MESSAGE_DELETE',\n  MESSAGE_UPDATE: 'MESSAGE_UPDATE',\n  MESSAGE_DELETE_BULK: 'MESSAGE_DELETE_BULK',\n  MESSAGE_REACTION_ADD: 'MESSAGE_REACTION_ADD',\n  MESSAGE_REACTION_REMOVE: 'MESSAGE_REACTION_REMOVE',\n  MESSAGE_REACTION_REMOVE_ALL: 'MESSAGE_REACTION_REMOVE_ALL',\n  USER_UPDATE: 'USER_UPDATE',\n  USER_NOTE_UPDATE: 'USER_NOTE_UPDATE',\n  USER_SETTINGS_UPDATE: 'USER_SETTINGS_UPDATE',\n  USER_GUILD_SETTINGS_UPDATE: 'USER_GUILD_SETTINGS_UPDATE',\n  PRESENCE_UPDATE: 'PRESENCE_UPDATE',\n  VOICE_STATE_UPDATE: 'VOICE_STATE_UPDATE',\n  TYPING_START: 'TYPING_START',\n  VOICE_SERVER_UPDATE: 'VOICE_SERVER_UPDATE',\n  RELATIONSHIP_ADD: 'RELATIONSHIP_ADD',\n  RELATIONSHIP_REMOVE: 'RELATIONSHIP_REMOVE',\n};\n\n/**\n * The type of a message, e.g. `DEFAULT`. Here are the available types:\n * * DEFAULT\n * * RECIPIENT_ADD\n * * RECIPIENT_REMOVE\n * * CALL\n * * CHANNEL_NAME_CHANGE\n * * CHANNEL_ICON_CHANGE\n * * PINS_ADD\n * * GUILD_MEMBER_JOIN\n * @typedef {string} MessageType\n */\nexports.MessageTypes = [\n  'DEFAULT',\n  'RECIPIENT_ADD',\n  'RECIPIENT_REMOVE',\n  'CALL',\n  'CHANNEL_NAME_CHANGE',\n  'CHANNEL_ICON_CHANGE',\n  'PINS_ADD',\n  'GUILD_MEMBER_JOIN',\n];\n\n/**\n * The type of a message notification setting. Here are the available types:\n * * EVERYTHING\n * * MENTIONS\n * * NOTHING\n * * INHERIT (only for GuildChannel)\n * @typedef {string} MessageNotificationType\n */\nexports.MessageNotificationTypes = [\n  'EVERYTHING',\n  'MENTIONS',\n  'NOTHING',\n  'INHERIT',\n];\n\nexports.DefaultAvatars = {\n  BLURPLE: '6debd47ed13483642cf09e832ed0bc1b',\n  GREY: '322c936a8c8be1b803cd94861bdfa868',\n  GREEN: 'dd4dbc0016779df1378e7812eabaa04d',\n  ORANGE: '0e291f67c9274a1abdddeb3fd919cbaa',\n  RED: '1cbd08c76f8af6dddce02c5138971129',\n};\n\nexports.ExplicitContentFilterTypes = [\n  'DISABLED',\n  'NON_FRIENDS',\n  'FRIENDS_AND_NON_FRIENDS',\n];\n\nexports.UserSettingsMap = {\n  /**\n   * Automatically convert emoticons in your messages to emoji\n   * For example, when you type `:-)` Discord will convert it to 😃\n   * @name ClientUserSettings#convertEmoticons\n   * @type {boolean}\n   */\n  convert_emoticons: 'convertEmoticons',\n\n  /**\n   * If new guilds should automatically disable DMs between you and its members\n   * @name ClientUserSettings#defaultGuildsRestricted\n   * @type {boolean}\n   */\n  default_guilds_restricted: 'defaultGuildsRestricted',\n\n  /**\n   * Automatically detect accounts from services like Steam and Blizzard when you open the Discord client\n   * @name ClientUserSettings#detectPlatformAccounts\n   * @type {boolean}\n   */\n  detect_platform_accounts: 'detectPlatformAccounts',\n\n  /**\n   * Developer Mode exposes context menu items helpful for people writing bots using the Discord API\n   * @name ClientUserSettings#developerMode\n   * @type {boolean}\n   */\n  developer_mode: 'developerMode',\n\n  /**\n   * Allow playback and usage of the `/tts` command\n   * @name ClientUserSettings#enableTTSCommand\n   * @type {boolean}\n   */\n  enable_tts_command: 'enableTTSCommand',\n\n  /**\n   * The theme of the client. Either `light` or `dark`\n   * @name ClientUserSettings#theme\n   * @type {string}\n   */\n  theme: 'theme',\n\n  /**\n   * Last status set in the client\n   * @name ClientUserSettings#status\n   * @type {PresenceStatus}\n   */\n  status: 'status',\n\n  /**\n   * Display currently running game as status message\n   * @name ClientUserSettings#showCurrentGame\n   * @type {boolean}\n   */\n  show_current_game: 'showCurrentGame',\n\n  /**\n   * Display images, videos, and lolcats when uploaded directly to Discord\n   * @name ClientUserSettings#inlineAttachmentMedia\n   * @type {boolean}\n   */\n  inline_attachment_media: 'inlineAttachmentMedia',\n\n  /**\n   * Display images, videos, and lolcats when uploaded posted as links in chat\n   * @name ClientUserSettings#inlineEmbedMedia\n   * @type {boolean}\n   */\n  inline_embed_media: 'inlineEmbedMedia',\n\n  /**\n   * Language the Discord client will use, as an RFC 3066 language identifier\n   * @name ClientUserSettings#locale\n   * @type {string}\n   */\n  locale: 'locale',\n\n  /**\n   * Display messages in compact mode\n   * @name ClientUserSettings#messageDisplayCompact\n   * @type {boolean}\n   */\n  message_display_compact: 'messageDisplayCompact',\n\n  /**\n   * Show emoji reactions on messages\n   * @name ClientUserSettings#renderReactions\n   * @type {boolean}\n   */\n  render_reactions: 'renderReactions',\n\n  /**\n   * Array of snowflake IDs for guilds, in the order they appear in the Discord client\n   * @name ClientUserSettings#guildPositions\n   * @type {Snowflake[]}\n   */\n  guild_positions: 'guildPositions',\n\n  /**\n   * Array of snowflake IDs for guilds which you will not recieve DMs from\n   * @name ClientUserSettings#restrictedGuilds\n   * @type {Snowflake[]}\n   */\n  restricted_guilds: 'restrictedGuilds',\n\n  explicit_content_filter: function explicitContentFilter(type) { // eslint-disable-line func-name-matching\n    /**\n     * Safe direct messaging; force people's messages with images to be scanned before they are sent to you.\n     * One of `DISABLED`, `NON_FRIENDS`, `FRIENDS_AND_NON_FRIENDS`\n     * @name ClientUserSettings#explicitContentFilter\n     * @type {string}\n     */\n    return exports.ExplicitContentFilterTypes[type];\n  },\n  friend_source_flags: function friendSources(flags) { // eslint-disable-line func-name-matching\n    /**\n     * Who can add you as a friend\n     * @name ClientUserSettings#friendSources\n     * @type {Object}\n     * @property {boolean} all Mutual friends and mutual guilds\n     * @property {boolean} mutualGuilds Only mutual guilds\n     * @property {boolean} mutualFriends Only mutual friends\n     */\n    return {\n      all: flags.all || false,\n      mutualGuilds: flags.all ? true : flags.mutual_guilds || false,\n      mutualFriends: flags.all ? true : flags.mutualFriends || false,\n    };\n  },\n};\n\nexports.UserGuildSettingsMap = {\n  message_notifications: function messageNotifications(type) { // eslint-disable-line func-name-matching\n    /**\n     * The type of message that should notify you\n     * @name ClientUserGuildSettings#messageNotifications\n     * @type {MessageNotificationType}\n     */\n    return exports.MessageNotificationTypes[type];\n  },\n  /**\n   * Whether to receive mobile push notifications\n   * @name ClientUserGuildSettings#mobilePush\n   * @type {boolean}\n   */\n  mobile_push: 'mobilePush',\n  /**\n   * Whether the guild is muted\n   * @name ClientUserGuildSettings#muted\n   * @type {boolean}\n   */\n  muted: 'muted',\n  /**\n   * Whether to suppress everyone mention\n   * @name ClientUserGuildSettings#suppressEveryone\n   * @type {boolean}\n   */\n  suppress_everyone: 'suppressEveryone',\n  /**\n   * A collection containing all the channel overrides\n   * @name ClientUserGuildSettings#channelOverrides\n   * @type {Collection<ClientUserChannelOverride>}\n   */\n  channel_overrides: 'channelOverrides',\n};\n\nexports.UserChannelOverrideMap = {\n  message_notifications: function messageNotifications(type) { // eslint-disable-line func-name-matching\n    /**\n     * The type of message that should notify you\n     * @name ClientUserChannelOverride#messageNotifications\n     * @type {MessageNotificationType}\n     */\n    return exports.MessageNotificationTypes[type];\n  },\n  /**\n   * Whether the channel is muted\n   * @name ClientUserChannelOverride#muted\n   * @type {boolean}\n   */\n  muted: 'muted',\n};\n\nexports.Colors = {\n  DEFAULT: 0x000000,\n  AQUA: 0x1ABC9C,\n  GREEN: 0x2ECC71,\n  BLUE: 0x3498DB,\n  PURPLE: 0x9B59B6,\n  GOLD: 0xF1C40F,\n  ORANGE: 0xE67E22,\n  RED: 0xE74C3C,\n  GREY: 0x95A5A6,\n  NAVY: 0x34495E,\n  DARK_AQUA: 0x11806A,\n  DARK_GREEN: 0x1F8B4C,\n  DARK_BLUE: 0x206694,\n  DARK_PURPLE: 0x71368A,\n  DARK_GOLD: 0xC27C0E,\n  DARK_ORANGE: 0xA84300,\n  DARK_RED: 0x992D22,\n  DARK_GREY: 0x979C9F,\n  DARKER_GREY: 0x7F8C8D,\n  LIGHT_GREY: 0xBCC0C0,\n  DARK_NAVY: 0x2C3E50,\n  BLURPLE: 0x7289DA,\n  GREYPLE: 0x99AAB5,\n  DARK_BUT_NOT_BLACK: 0x2C2F33,\n  NOT_QUITE_BLACK: 0x23272A,\n};\n\n/**\n * An error encountered while performing an API request. Here are the potential errors:\n * * UNKNOWN_ACCOUNT\n * * UNKNOWN_APPLICATION\n * * UNKNOWN_CHANNEL\n * * UNKNOWN_GUILD\n * * UNKNOWN_INTEGRATION\n * * UNKNOWN_INVITE\n * * UNKNOWN_MEMBER\n * * UNKNOWN_MESSAGE\n * * UNKNOWN_OVERWRITE\n * * UNKNOWN_PROVIDER\n * * UNKNOWN_ROLE\n * * UNKNOWN_TOKEN\n * * UNKNOWN_USER\n * * UNKNOWN_EMOJI\n * * BOT_PROHIBITED_ENDPOINT\n * * BOT_ONLY_ENDPOINT\n * * MAXIMUM_GUILDS\n * * MAXIMUM_FRIENDS\n * * MAXIMUM_PINS\n * * MAXIMUM_ROLES\n * * MAXIMUM_REACTIONS\n * * UNAUTHORIZED\n * * MISSING_ACCESS\n * * INVALID_ACCOUNT_TYPE\n * * CANNOT_EXECUTE_ON_DM\n * * EMBED_DISABLED\n * * CANNOT_EDIT_MESSAGE_BY_OTHER\n * * CANNOT_SEND_EMPTY_MESSAGE\n * * CANNOT_MESSAGE_USER\n * * CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n * * CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n * * OAUTH2_APPLICATION_BOT_ABSENT\n * * MAXIMUM_OAUTH2_APPLICATIONS\n * * INVALID_OAUTH_STATE\n * * MISSING_PERMISSIONS\n * * INVALID_AUTHENTICATION_TOKEN\n * * NOTE_TOO_LONG\n * * INVALID_BULK_DELETE_QUANTITY\n * * CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n * * CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n * * BULK_DELETE_MESSAGE_TOO_OLD\n * * INVITE_ACCEPTED_TO_GUILD_NOT_CONTANING_BOT\n * * REACTION_BLOCKED\n * @typedef {string} APIError\n */\nexports.APIErrors = {\n  UNKNOWN_ACCOUNT: 10001,\n  UNKNOWN_APPLICATION: 10002,\n  UNKNOWN_CHANNEL: 10003,\n  UNKNOWN_GUILD: 10004,\n  UNKNOWN_INTEGRATION: 10005,\n  UNKNOWN_INVITE: 10006,\n  UNKNOWN_MEMBER: 10007,\n  UNKNOWN_MESSAGE: 10008,\n  UNKNOWN_OVERWRITE: 10009,\n  UNKNOWN_PROVIDER: 10010,\n  UNKNOWN_ROLE: 10011,\n  UNKNOWN_TOKEN: 10012,\n  UNKNOWN_USER: 10013,\n  UNKNOWN_EMOJI: 10014,\n  BOT_PROHIBITED_ENDPOINT: 20001,\n  BOT_ONLY_ENDPOINT: 20002,\n  MAXIMUM_GUILDS: 30001,\n  MAXIMUM_FRIENDS: 30002,\n  MAXIMUM_PINS: 30003,\n  MAXIMUM_ROLES: 30005,\n  MAXIMUM_REACTIONS: 30010,\n  UNAUTHORIZED: 40001,\n  MISSING_ACCESS: 50001,\n  INVALID_ACCOUNT_TYPE: 50002,\n  CANNOT_EXECUTE_ON_DM: 50003,\n  EMBED_DISABLED: 50004,\n  CANNOT_EDIT_MESSAGE_BY_OTHER: 50005,\n  CANNOT_SEND_EMPTY_MESSAGE: 50006,\n  CANNOT_MESSAGE_USER: 50007,\n  CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL: 50008,\n  CHANNEL_VERIFICATION_LEVEL_TOO_HIGH: 50009,\n  OAUTH2_APPLICATION_BOT_ABSENT: 50010,\n  MAXIMUM_OAUTH2_APPLICATIONS: 50011,\n  INVALID_OAUTH_STATE: 50012,\n  MISSING_PERMISSIONS: 50013,\n  INVALID_AUTHENTICATION_TOKEN: 50014,\n  NOTE_TOO_LONG: 50015,\n  INVALID_BULK_DELETE_QUANTITY: 50016,\n  CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL: 50019,\n  CANNOT_EXECUTE_ON_SYSTEM_MESSAGE: 50021,\n  BULK_DELETE_MESSAGE_TOO_OLD: 50034,\n  INVITE_ACCEPTED_TO_GUILD_NOT_CONTANING_BOT: 50036,\n  REACTION_BLOCKED: 90001,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/AbstractHandler.js ***!
  \******************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("class AbstractHandler {\n  constructor(packetManager) {\n    this.packetManager = packetManager;\n  }\n\n  handle(packet) {\n    return packet;\n  }\n}\n\nmodule.exports = AbstractHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvd2Vic29ja2V0L3BhY2tldHMvaGFuZGxlcnMvQWJzdHJhY3RIYW5kbGVyLmpzP2FlMDEiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQWJzdHJhY3RIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IocGFja2V0TWFuYWdlcikge1xuICAgIHRoaXMucGFja2V0TWFuYWdlciA9IHBhY2tldE1hbmFnZXI7XG4gIH1cblxuICBoYW5kbGUocGFja2V0KSB7XG4gICAgcmV0dXJuIHBhY2tldDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFic3RyYWN0SGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9BYnN0cmFjdEhhbmRsZXIuanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/Action.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/*\n\nABOUT ACTIONS\n\nActions are similar to WebSocket Packet Handlers, but since introducing\nthe REST API methods, in order to prevent rewriting code to handle data,\n\"actions\" have been introduced. They're basically what Packet Handlers\nused to be but they're strictly for manipulating data and making sure\nthat WebSocket events don't clash with REST methods.\n\n*/\n\nclass GenericAction {\n  constructor(client) {\n    this.client = client;\n  }\n\n  handle(data) {\n    return data;\n  }\n}\n\nmodule.exports = GenericAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9BY3Rpb24uanM/NDlmMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXG5BQk9VVCBBQ1RJT05TXG5cbkFjdGlvbnMgYXJlIHNpbWlsYXIgdG8gV2ViU29ja2V0IFBhY2tldCBIYW5kbGVycywgYnV0IHNpbmNlIGludHJvZHVjaW5nXG50aGUgUkVTVCBBUEkgbWV0aG9kcywgaW4gb3JkZXIgdG8gcHJldmVudCByZXdyaXRpbmcgY29kZSB0byBoYW5kbGUgZGF0YSxcblwiYWN0aW9uc1wiIGhhdmUgYmVlbiBpbnRyb2R1Y2VkLiBUaGV5J3JlIGJhc2ljYWxseSB3aGF0IFBhY2tldCBIYW5kbGVyc1xudXNlZCB0byBiZSBidXQgdGhleSdyZSBzdHJpY3RseSBmb3IgbWFuaXB1bGF0aW5nIGRhdGEgYW5kIG1ha2luZyBzdXJlXG50aGF0IFdlYlNvY2tldCBldmVudHMgZG9uJ3QgY2xhc2ggd2l0aCBSRVNUIG1ldGhvZHMuXG5cbiovXG5cbmNsYXNzIEdlbmVyaWNBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuXG4gIGhhbmRsZShkYXRhKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHZW5lcmljQWN0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L2FjdGlvbnMvQWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/util/Collection.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n * @extends {Map}\n */\nclass Collection extends Map {\n  constructor(iterable) {\n    super(iterable);\n\n    /**\n     * Cached array for the `array()` method - will be reset to `null` whenever `set()` or `delete()` are called\n     * @name Collection#_array\n     * @type {?Array}\n     * @private\n     */\n    Object.defineProperty(this, '_array', { value: null, writable: true, configurable: true });\n\n    /**\n     * Cached array for the `keyArray()` method - will be reset to `null` whenever `set()` or `delete()` are called\n     * @name Collection#_keyArray\n     * @type {?Array}\n     * @private\n     */\n    Object.defineProperty(this, '_keyArray', { value: null, writable: true, configurable: true });\n  }\n\n  set(key, val) {\n    this._array = null;\n    this._keyArray = null;\n    return super.set(key, val);\n  }\n\n  delete(key) {\n    this._array = null;\n    this._keyArray = null;\n    return super.delete(key);\n  }\n\n  /**\n   * Creates an ordered array of the values of this collection, and caches it internally. The array will only be\n   * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n   * itself. If you don't want this caching behaviour, use `[...collection.values()]` or\n   * `Array.from(collection.values())` instead.\n   * @returns {Array}\n   */\n  array() {\n    if (!this._array || this._array.length !== this.size) this._array = [...this.values()];\n    return this._array;\n  }\n\n  /**\n   * Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\n   * reconstructed if an item is added to or removed from the collection, or if you change the length of the array\n   * itself. If you don't want this caching behaviour, use `[...collection.keys()]` or\n   * `Array.from(collection.keys())` instead.\n   * @returns {Array}\n   */\n  keyArray() {\n    if (!this._keyArray || this._keyArray.length !== this.size) this._keyArray = [...this.keys()];\n    return this._keyArray;\n  }\n\n  /**\n   * Obtains the first value(s) in this collection.\n   * @param {number} [count] Number of values to obtain from the beginning\n   * @returns {*|Array<*>} The single value if `count` is undefined, or an array of values of `count` length\n   */\n  first(count) {\n    if (count === undefined) return this.values().next().value;\n    if (typeof count !== 'number') throw new TypeError('The count must be a number.');\n    if (!Number.isInteger(count) || count < 1) throw new RangeError('The count must be an integer greater than 0.');\n    count = Math.min(this.size, count);\n    const arr = new Array(count);\n    const iter = this.values();\n    for (let i = 0; i < count; i++) arr[i] = iter.next().value;\n    return arr;\n  }\n\n  /**\n   * Obtains the first key(s) in this collection.\n   * @param {number} [count] Number of keys to obtain from the beginning\n   * @returns {*|Array<*>} The single key if `count` is undefined, or an array of keys of `count` length\n   */\n  firstKey(count) {\n    if (count === undefined) return this.keys().next().value;\n    if (typeof count !== 'number') throw new TypeError('The count must be a number.');\n    if (!Number.isInteger(count) || count < 1) throw new RangeError('The count must be an integer greater than 0.');\n    count = Math.min(this.size, count);\n    const arr = new Array(count);\n    const iter = this.keys();\n    for (let i = 0; i < count; i++) arr[i] = iter.next().value;\n    return arr;\n  }\n\n  /**\n   * Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\n   * mechanism applies here as well.\n   * @param {number} [count] Number of values to obtain from the end\n   * @returns {*|Array<*>} The single value if `count` is undefined, or an array of values of `count` length\n   */\n  last(count) {\n    const arr = this.array();\n    if (count === undefined) return arr[arr.length - 1];\n    if (typeof count !== 'number') throw new TypeError('The count must be a number.');\n    if (!Number.isInteger(count) || count < 1) throw new RangeError('The count must be an integer greater than 0.');\n    return arr.slice(-count);\n  }\n\n  /**\n   * Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\n   * mechanism applies here as well.\n   * @param {number} [count] Number of keys to obtain from the end\n   * @returns {*|Array<*>} The single key if `count` is undefined, or an array of keys of `count` length\n   */\n  lastKey(count) {\n    const arr = this.keyArray();\n    if (count === undefined) return arr[arr.length - 1];\n    if (typeof count !== 'number') throw new TypeError('The count must be a number.');\n    if (!Number.isInteger(count) || count < 1) throw new RangeError('The count must be an integer greater than 0.');\n    return arr.slice(-count);\n  }\n\n  /**\n   * Obtains random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\n   * mechanism applies here as well.\n   * @param {number} [count] Number of values to obtain randomly\n   * @returns {*|Array<*>} The single value if `count` is undefined, or an array of values of `count` length\n   */\n  random(count) {\n    let arr = this.array();\n    if (count === undefined) return arr[Math.floor(Math.random() * arr.length)];\n    if (typeof count !== 'number') throw new TypeError('The count must be a number.');\n    if (!Number.isInteger(count) || count < 1) throw new RangeError('The count must be an integer greater than 0.');\n    if (arr.length === 0) return [];\n    const rand = new Array(count);\n    arr = arr.slice();\n    for (let i = 0; i < count; i++) rand[i] = arr.splice(Math.floor(Math.random() * arr.length), 1)[0];\n    return rand;\n  }\n\n  /**\n   * Obtains random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\n   * mechanism applies here as well.\n   * @param {number} [count] Number of keys to obtain randomly\n   * @returns {*|Array<*>} The single key if `count` is undefined, or an array of keys of `count` length\n   */\n  randomKey(count) {\n    let arr = this.keyArray();\n    if (count === undefined) return arr[Math.floor(Math.random() * arr.length)];\n    if (typeof count !== 'number') throw new TypeError('The count must be a number.');\n    if (!Number.isInteger(count) || count < 1) throw new RangeError('The count must be an integer greater than 0.');\n    if (arr.length === 0) return [];\n    const rand = new Array(count);\n    arr = arr.slice();\n    for (let i = 0; i < count; i++) rand[i] = arr.splice(Math.floor(Math.random() * arr.length), 1)[0];\n    return rand;\n  }\n\n  /**\n   * Searches for all items where their specified property's value is identical to the given value\n   * (`item[prop] === value`).\n   * @param {string} prop The property to test against\n   * @param {*} value The expected value\n   * @returns {Array}\n   * @example\n   * collection.findAll('username', 'Bob');\n   */\n  findAll(prop, value) {\n    if (typeof prop !== 'string') throw new TypeError('Key must be a string.');\n    if (typeof value === 'undefined') throw new Error('Value must be specified.');\n    const results = [];\n    for (const item of this.values()) {\n      if (item[prop] === value) results.push(item);\n    }\n    return results;\n  }\n\n  /**\n   * Searches for a single item where its specified property's value is identical to the given value\n   * (`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n   * [Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n   * <warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\n   * should use the `get` method. See\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>\n   * @param {string|Function} propOrFn The property to test against, or the function to test with\n   * @param {*} [value] The expected value - only applicable and required if using a property for the first argument\n   * @returns {*}\n   * @example\n   * collection.find('username', 'Bob');\n   * @example\n   * collection.find(val => val.username === 'Bob');\n   */\n  find(propOrFn, value) {\n    if (typeof propOrFn === 'string') {\n      if (typeof value === 'undefined') throw new Error('Value must be specified.');\n      for (const item of this.values()) {\n        if (item[propOrFn] === value) return item;\n      }\n      return null;\n    } else if (typeof propOrFn === 'function') {\n      for (const [key, val] of this) {\n        if (propOrFn(val, key, this)) return val;\n      }\n      return null;\n    } else {\n      throw new Error('First argument must be a property string or a function.');\n    }\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Searches for the key of a single item where its specified property's value is identical to the given value\n   * (`item[prop] === value`), or the given function returns a truthy value. In the latter case, this is identical to\n   * [Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).\n   * @param {string|Function} propOrFn The property to test against, or the function to test with\n   * @param {*} [value] The expected value - only applicable and required if using a property for the first argument\n   * @returns {*}\n   * @example\n   * collection.findKey('username', 'Bob');\n   * @example\n   * collection.findKey(val => val.username === 'Bob');\n   */\n  /* eslint-enable max-len */\n  findKey(propOrFn, value) {\n    if (typeof propOrFn === 'string') {\n      if (typeof value === 'undefined') throw new Error('Value must be specified.');\n      for (const [key, val] of this) {\n        if (val[propOrFn] === value) return key;\n      }\n      return null;\n    } else if (typeof propOrFn === 'function') {\n      for (const [key, val] of this) {\n        if (propOrFn(val, key, this)) return key;\n      }\n      return null;\n    } else {\n      throw new Error('First argument must be a property string or a function.');\n    }\n  }\n\n  /**\n   * Searches for the existence of a single item where its specified property's value is identical to the given value\n   * (`item[prop] === value`).\n   * <warn>Do not use this to check for an item by its ID. Instead, use `collection.has(id)`. See\n   * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has) for details.</warn>\n   * @param {string} prop The property to test against\n   * @param {*} value The expected value\n   * @returns {boolean}\n   * @example\n   * if (collection.exists('username', 'Bob')) {\n   *  console.log('user here!');\n   * }\n   */\n  exists(prop, value) {\n    return Boolean(this.find(prop, value));\n  }\n\n  /**\n   * Identical to\n   * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n   * but returns a Collection instead of an Array.\n   * @param {Function} fn Function used to test (should return a boolean)\n   * @param {Object} [thisArg] Value to use as `this` when executing function\n   * @returns {Collection}\n   */\n  filter(fn, thisArg) {\n    if (thisArg) fn = fn.bind(thisArg);\n    const results = new Collection();\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) results.set(key, val);\n    }\n    return results;\n  }\n\n  /**\n   * Identical to\n   * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).\n   * @param {Function} fn Function used to test (should return a boolean)\n   * @param {Object} [thisArg] Value to use as `this` when executing function\n   * @returns {Array}\n   */\n  filterArray(fn, thisArg) {\n    if (thisArg) fn = fn.bind(thisArg);\n    const results = [];\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) results.push(val);\n    }\n    return results;\n  }\n\n  /**\n   * Identical to\n   * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n   * @param {Function} fn Function that produces an element of the new array, taking three arguments\n   * @param {*} [thisArg] Value to use as `this` when executing function\n   * @returns {Array}\n   */\n  map(fn, thisArg) {\n    if (thisArg) fn = fn.bind(thisArg);\n    const arr = new Array(this.size);\n    let i = 0;\n    for (const [key, val] of this) arr[i++] = fn(val, key, this);\n    return arr;\n  }\n\n  /**\n   * Identical to\n   * [Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n   * @param {Function} fn Function used to test (should return a boolean)\n   * @param {Object} [thisArg] Value to use as `this` when executing function\n   * @returns {boolean}\n   */\n  some(fn, thisArg) {\n    if (thisArg) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return true;\n    }\n    return false;\n  }\n\n  /**\n   * Identical to\n   * [Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).\n   * @param {Function} fn Function used to test (should return a boolean)\n   * @param {Object} [thisArg] Value to use as `this` when executing function\n   * @returns {boolean}\n   */\n  every(fn, thisArg) {\n    if (thisArg) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (!fn(val, key, this)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Identical to\n   * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n   * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n   * and `collection`\n   * @param {*} [initialValue] Starting value for the accumulator\n   * @returns {*}\n   */\n  reduce(fn, initialValue) {\n    let accumulator;\n    if (typeof initialValue !== 'undefined') {\n      accumulator = initialValue;\n      for (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n    } else {\n      let first = true;\n      for (const [key, val] of this) {\n        if (first) {\n          accumulator = val;\n          first = false;\n          continue;\n        }\n        accumulator = fn(accumulator, val, key, this);\n      }\n    }\n    return accumulator;\n  }\n\n  /**\n   * Creates an identical shallow copy of this collection.\n   * @returns {Collection}\n   * @example const newColl = someColl.clone();\n   */\n  clone() {\n    return new this.constructor(this);\n  }\n\n  /**\n   * Combines this collection with others into a new collection. None of the source collections are modified.\n   * @param {...Collection} collections Collections to merge\n   * @returns {Collection}\n   * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n   */\n  concat(...collections) {\n    const newColl = this.clone();\n    for (const coll of collections) {\n      for (const [key, val] of coll) newColl.set(key, val);\n    }\n    return newColl;\n  }\n\n  /**\n   * Calls the `delete()` method on all items that have it.\n   * @returns {Promise[]}\n   */\n  deleteAll() {\n    const returns = [];\n    for (const item of this.values()) {\n      if (item.delete) returns.push(item.delete());\n    }\n    return returns;\n  }\n\n  /**\n   * Checks if this collection shares identical key-value pairings with another.\n   * This is different to checking for equality using equal-signs, because\n   * the collections may be different objects, but contain the same data.\n   * @param {Collection} collection Collection to compare with\n   * @returns {boolean} Whether the collections have identical contents\n   */\n  equals(collection) {\n    if (!collection) return false;\n    if (this === collection) return true;\n    if (this.size !== collection.size) return false;\n    return !this.find((value, key) => {\n      const testVal = collection.get(key);\n      return testVal !== value || (testVal === undefined && !collection.has(key));\n    });\n  }\n\n  /**\n   * The sort() method sorts the elements of a collection in place and returns the collection.\n   * The sort is not necessarily stable. The default sort order is according to string Unicode code points.\n   * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n   * if omitted, the collection is sorted according to each character's Unicode code point value,\n   * according to the string conversion of each element.\n   * @returns {Collection}\n   */\n  sort(compareFunction = (x, y) => +(x > y) || +(x === y) - 1) {\n    return new Collection([...this.entries()].sort((a, b) => compareFunction(a[1], b[1], a[0], b[0])));\n  }\n}\n\nmodule.exports = Collection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/*!**************************************************!*\
  !*** ./node_modules/discord.js/src/util/Util.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const snekfetch = __webpack_require__(/*! snekfetch */ 27);\nconst Constants = __webpack_require__(/*! ./Constants */ 0);\nconst ConstantsHttp = Constants.DefaultOptions.http;\n\n/**\n * Contains various general-purpose utility methods. These functions are also available on the base `Discord` object.\n */\nclass Util {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * Splits a string into multiple chunks at a designated character that do not exceed a specific length.\n   * @param {string} text Content to split\n   * @param {SplitOptions} [options] Options controlling the behaviour of the split\n   * @returns {string|string[]}\n   */\n  static splitMessage(text, { maxLength = 1950, char = '\\n', prepend = '', append = '' } = {}) {\n    if (text.length <= maxLength) return text;\n    const splitText = text.split(char);\n    if (splitText.length === 1) throw new Error('Message exceeds the max length and contains no split characters.');\n    const messages = [''];\n    let msg = 0;\n    for (let i = 0; i < splitText.length; i++) {\n      if (messages[msg].length + splitText[i].length + 1 > maxLength) {\n        messages[msg] += append;\n        messages.push(prepend);\n        msg++;\n      }\n      messages[msg] += (messages[msg].length > 0 && messages[msg] !== prepend ? char : '') + splitText[i];\n    }\n    return messages;\n  }\n\n  /**\n   * Escapes any Discord-flavour markdown in a string.\n   * @param {string} text Content to escape\n   * @param {boolean} [onlyCodeBlock=false] Whether to only escape codeblocks (takes priority)\n   * @param {boolean} [onlyInlineCode=false] Whether to only escape inline code\n   * @returns {string}\n   */\n  static escapeMarkdown(text, onlyCodeBlock = false, onlyInlineCode = false) {\n    if (onlyCodeBlock) return text.replace(/```/g, '`\\u200b``');\n    if (onlyInlineCode) return text.replace(/\\\\(`|\\\\)/g, '$1').replace(/(`|\\\\)/g, '\\\\$1');\n    return text.replace(/\\\\(\\*|_|`|~|\\\\)/g, '$1').replace(/(\\*|_|`|~|\\\\)/g, '\\\\$1');\n  }\n\n  /**\n   * Gets the recommended shard count from Discord.\n   * @param {string} token Discord auth token\n   * @param {number} [guildsPerShard=1000] Number of guilds per shard\n   * @returns {Promise<number>} The recommended number of shards\n   */\n  static fetchRecommendedShards(token, guildsPerShard = 1000) {\n    return new Promise((resolve, reject) => {\n      if (!token) throw new Error('A token must be provided.');\n      snekfetch.get(`${ConstantsHttp.host}/api/v${ConstantsHttp.version}${Constants.Endpoints.gateway.bot}`)\n        .set('Authorization', `Bot ${token.replace(/^Bot\\s*/i, '')}`)\n        .end((err, res) => {\n          if (err) reject(err);\n          resolve(res.body.shards * (1000 / guildsPerShard));\n        });\n    });\n  }\n\n  /**\n   * Parses emoji info out of a string. The string must be one of:\n   * * A UTF-8 emoji (no ID)\n   * * A URL-encoded UTF-8 emoji (no ID)\n   * * A Discord custom emoji (`<:name:id>` or `<a:name:id>`)\n   * @param {string} text Emoji string to parse\n   * @returns {?Object} Object with `animated`, `name`, and `id` properties\n   * @private\n   */\n  static parseEmoji(text) {\n    if (text.includes('%')) text = decodeURIComponent(text);\n    if (!text.includes(':')) return { animated: false, name: text, id: null };\n    const m = text.match(/<?(a:)?(\\w{2,32}):(\\d{17,19})>?/);\n    if (!m) return null;\n    return { animated: Boolean(m[1]), name: m[2], id: m[3] };\n  }\n\n  /**\n   * Checks whether the arrays are equal, also removes duplicated entries from b.\n   * @param {Array<*>} a Array which will not be modified.\n   * @param {Array<*>} b Array to remove duplicated entries from.\n   * @returns {boolean} Whether the arrays are equal.\n   * @private\n   */\n  static arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a.length !== b.length) return false;\n\n    for (const item of a) {\n      const ind = b.indexOf(item);\n      if (ind !== -1) b.splice(ind, 1);\n    }\n\n    return b.length === 0;\n  }\n\n  /**\n   * Shallow-copies an object with its class/prototype intact.\n   * @param {Object} obj Object to clone\n   * @returns {Object}\n   * @private\n   */\n  static cloneObject(obj) {\n    return Object.assign(Object.create(obj), obj);\n  }\n\n  /**\n   * Sets default properties on an object that aren't already specified.\n   * @param {Object} def Default properties\n   * @param {Object} given Object to assign defaults to\n   * @returns {Object}\n   * @private\n   */\n  static mergeDefault(def, given) {\n    if (!given) return def;\n    for (const key in def) {\n      if (!{}.hasOwnProperty.call(given, key)) {\n        given[key] = def[key];\n      } else if (given[key] === Object(given[key])) {\n        given[key] = this.mergeDefault(def[key], given[key]);\n      }\n    }\n\n    return given;\n  }\n\n  /**\n   * Converts an ArrayBuffer or string to a Buffer.\n   * @param {ArrayBuffer|string} ab ArrayBuffer to convert\n   * @returns {Buffer}\n   * @private\n   */\n  static convertToBuffer(ab) {\n    if (typeof ab === 'string') ab = this.str2ab(ab);\n    return Buffer.from(ab);\n  }\n\n  /**\n   * Converts a string to an ArrayBuffer.\n   * @param {string} str String to convert\n   * @returns {ArrayBuffer}\n   * @private\n   */\n  static str2ab(str) {\n    const buffer = new ArrayBuffer(str.length * 2);\n    const view = new Uint16Array(buffer);\n    for (var i = 0, strLen = str.length; i < strLen; i++) view[i] = str.charCodeAt(i);\n    return buffer;\n  }\n\n  /**\n   * Makes an Error from a plain info object.\n   * @param {Object} obj Error info\n   * @param {string} obj.name Error type\n   * @param {string} obj.message Message for the error\n   * @param {string} obj.stack Stack for the error\n   * @returns {Error}\n   * @private\n   */\n  static makeError(obj) {\n    const err = new Error(obj.message);\n    err.name = obj.name;\n    err.stack = obj.stack;\n    return err;\n  }\n\n  /**\n   * Makes a plain error info object from an Error.\n   * @param {Error} err Error to get info from\n   * @returns {Object}\n   * @private\n   */\n  static makePlainError(err) {\n    const obj = {};\n    obj.name = err.name;\n    obj.message = err.message;\n    obj.stack = err.stack;\n    return obj;\n  }\n\n  /**\n   * Moves an element in an array *in place*.\n   * @param {Array<*>} array Array to modify\n   * @param {*} element Element to move\n   * @param {number} newIndex Index or offset to move the element to\n   * @param {boolean} [offset=false] Move the element by an offset amount rather than to a set index\n   * @returns {number}\n   * @private\n   */\n  static moveElementInArray(array, element, newIndex, offset = false) {\n    const index = array.indexOf(element);\n    newIndex = (offset ? index : 0) + newIndex;\n    if (newIndex > -1 && newIndex < array.length) {\n      const removedElement = array.splice(index, 1)[0];\n      array.splice(newIndex, 0, removedElement);\n    }\n    return array.indexOf(element);\n  }\n}\n\nmodule.exports = Util;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"events\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcImV2ZW50c1wiP2M2OGYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiZXZlbnRzXCJcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/util/Snowflake.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Long = __webpack_require__(/*! long */ 33);\n\n// Discord epoch (2015-01-01T00:00:00.000Z)\nconst EPOCH = 1420070400000;\nlet INCREMENT = 0;\n\n/**\n * A container for useful snowflake-related methods.\n */\nclass SnowflakeUtil {\n  constructor() {\n    throw new Error(`The ${this.constructor.name} class may not be instantiated.`);\n  }\n\n  /**\n   * A Twitter snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n   * ```\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   *\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker ID as 1 and the process ID as 0.</info>\n   * @returns {Snowflake} The generated snowflake\n   */\n  static generate() {\n    if (INCREMENT >= 4095) INCREMENT = 0;\n    const BINARY = `${pad((Date.now() - EPOCH).toString(2), 42)}0000100000${pad((INCREMENT++).toString(2), 12)}`;\n    return Long.fromString(BINARY, 2).toString();\n  }\n\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerID Worker ID in the snowflake\n   * @property {number} processID Process ID in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake} Deconstructed snowflake\n   */\n  static deconstruct(snowflake) {\n    const BINARY = pad(Long.fromString(snowflake).toString(2), 64);\n    const res = {\n      timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,\n      workerID: parseInt(BINARY.substring(42, 47), 2),\n      processID: parseInt(BINARY.substring(47, 52), 2),\n      increment: parseInt(BINARY.substring(52, 64), 2),\n      binary: BINARY,\n    };\n    Object.defineProperty(res, 'date', {\n      get: function get() { return new Date(this.timestamp); },\n      enumerable: true,\n    });\n    return res;\n  }\n}\n\nfunction pad(v, n, c = '0') {\n  return String(v).length >= n ? String(v) : (String(c).repeat(n) + v).slice(-n);\n}\n\nmodule.exports = SnowflakeUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy91dGlsL1Nub3dmbGFrZS5qcz8xNjZmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IExvbmcgPSByZXF1aXJlKCdsb25nJyk7XG5cbi8vIERpc2NvcmQgZXBvY2ggKDIwMTUtMDEtMDFUMDA6MDA6MDAuMDAwWilcbmNvbnN0IEVQT0NIID0gMTQyMDA3MDQwMDAwMDtcbmxldCBJTkNSRU1FTlQgPSAwO1xuXG4vKipcbiAqIEEgY29udGFpbmVyIGZvciB1c2VmdWwgc25vd2ZsYWtlLXJlbGF0ZWQgbWV0aG9kcy5cbiAqL1xuY2xhc3MgU25vd2ZsYWtlVXRpbCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlICR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSBjbGFzcyBtYXkgbm90IGJlIGluc3RhbnRpYXRlZC5gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIFR3aXR0ZXIgc25vd2ZsYWtlLCBleGNlcHQgdGhlIGVwb2NoIGlzIDIwMTUtMDEtMDFUMDA6MDA6MDAuMDAwWlxuICAgKiBgYGBcbiAgICogSWYgd2UgaGF2ZSBhIHNub3dmbGFrZSAnMjY2MjQxOTQ4ODI0NzY0NDE2JyB3ZSBjYW4gcmVwcmVzZW50IGl0IGFzIGJpbmFyeTpcbiAgICpcbiAgICogNjQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMiAgICAgMTcgICAgIDEyICAgICAgICAgIDBcbiAgICogIDAwMDAwMDExMTAxMTAwMDExMTEwMDAwMTEwMTAwMTAwMDEwMTAwMDAwMCAgMDAwMDEgIDAwMDAwICAwMDAwMDAwMDAwMDBcbiAgICogICAgICAgbnVtYmVyIG9mIG1zIHNpbmNlIERpc2NvcmQgZXBvY2ggICAgICAgd29ya2VyICBwaWQgICAgaW5jcmVtZW50XG4gICAqIGBgYFxuICAgKiBAdHlwZWRlZiB7c3RyaW5nfSBTbm93Zmxha2VcbiAgICovXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIERpc2NvcmQgc25vd2ZsYWtlLlxuICAgKiA8aW5mbz5UaGlzIGhhcmRjb2RlcyB0aGUgd29ya2VyIElEIGFzIDEgYW5kIHRoZSBwcm9jZXNzIElEIGFzIDAuPC9pbmZvPlxuICAgKiBAcmV0dXJucyB7U25vd2ZsYWtlfSBUaGUgZ2VuZXJhdGVkIHNub3dmbGFrZVxuICAgKi9cbiAgc3RhdGljIGdlbmVyYXRlKCkge1xuICAgIGlmIChJTkNSRU1FTlQgPj0gNDA5NSkgSU5DUkVNRU5UID0gMDtcbiAgICBjb25zdCBCSU5BUlkgPSBgJHtwYWQoKERhdGUubm93KCkgLSBFUE9DSCkudG9TdHJpbmcoMiksIDQyKX0wMDAwMTAwMDAwJHtwYWQoKElOQ1JFTUVOVCsrKS50b1N0cmluZygyKSwgMTIpfWA7XG4gICAgcmV0dXJuIExvbmcuZnJvbVN0cmluZyhCSU5BUlksIDIpLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogQSBkZWNvbnN0cnVjdGVkIHNub3dmbGFrZS5cbiAgICogQHR5cGVkZWYge09iamVjdH0gRGVjb25zdHJ1Y3RlZFNub3dmbGFrZVxuICAgKiBAcHJvcGVydHkge251bWJlcn0gdGltZXN0YW1wIFRpbWVzdGFtcCB0aGUgc25vd2ZsYWtlIHdhcyBjcmVhdGVkXG4gICAqIEBwcm9wZXJ0eSB7RGF0ZX0gZGF0ZSBEYXRlIHRoZSBzbm93Zmxha2Ugd2FzIGNyZWF0ZWRcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHdvcmtlcklEIFdvcmtlciBJRCBpbiB0aGUgc25vd2ZsYWtlXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwcm9jZXNzSUQgUHJvY2VzcyBJRCBpbiB0aGUgc25vd2ZsYWtlXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbmNyZW1lbnQgSW5jcmVtZW50IGluIHRoZSBzbm93Zmxha2VcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IGJpbmFyeSBCaW5hcnkgcmVwcmVzZW50YXRpb24gb2YgdGhlIHNub3dmbGFrZVxuICAgKi9cblxuICAvKipcbiAgICogRGVjb25zdHJ1Y3RzIGEgRGlzY29yZCBzbm93Zmxha2UuXG4gICAqIEBwYXJhbSB7U25vd2ZsYWtlfSBzbm93Zmxha2UgU25vd2ZsYWtlIHRvIGRlY29uc3RydWN0XG4gICAqIEByZXR1cm5zIHtEZWNvbnN0cnVjdGVkU25vd2ZsYWtlfSBEZWNvbnN0cnVjdGVkIHNub3dmbGFrZVxuICAgKi9cbiAgc3RhdGljIGRlY29uc3RydWN0KHNub3dmbGFrZSkge1xuICAgIGNvbnN0IEJJTkFSWSA9IHBhZChMb25nLmZyb21TdHJpbmcoc25vd2ZsYWtlKS50b1N0cmluZygyKSwgNjQpO1xuICAgIGNvbnN0IHJlcyA9IHtcbiAgICAgIHRpbWVzdGFtcDogcGFyc2VJbnQoQklOQVJZLnN1YnN0cmluZygwLCA0MiksIDIpICsgRVBPQ0gsXG4gICAgICB3b3JrZXJJRDogcGFyc2VJbnQoQklOQVJZLnN1YnN0cmluZyg0MiwgNDcpLCAyKSxcbiAgICAgIHByb2Nlc3NJRDogcGFyc2VJbnQoQklOQVJZLnN1YnN0cmluZyg0NywgNTIpLCAyKSxcbiAgICAgIGluY3JlbWVudDogcGFyc2VJbnQoQklOQVJZLnN1YnN0cmluZyg1MiwgNjQpLCAyKSxcbiAgICAgIGJpbmFyeTogQklOQVJZLFxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcywgJ2RhdGUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsgcmV0dXJuIG5ldyBEYXRlKHRoaXMudGltZXN0YW1wKTsgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxufVxuXG5mdW5jdGlvbiBwYWQodiwgbiwgYyA9ICcwJykge1xuICByZXR1cm4gU3RyaW5nKHYpLmxlbmd0aCA+PSBuID8gU3RyaW5nKHYpIDogKFN0cmluZyhjKS5yZXBlYXQobikgKyB2KS5zbGljZSgtbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU25vd2ZsYWtlVXRpbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3V0aWwvU25vd2ZsYWtlLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!*********************************************************!*\
  !*** ./node_modules/discord.js/src/util/Permissions.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst util = __webpack_require__(/*! util */ 9);\n\n/**\n * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\n * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\n * that override their default permissions.\n */\nclass Permissions {\n  /**\n   * @param {GuildMember} [member] Member the permissions are for **(deprecated)**\n   * @param {number|PermissionResolvable[]} permissions Permissions or bitfield to read from\n   */\n  constructor(member, permissions) {\n    permissions = typeof member === 'object' && !(member instanceof Array) ? permissions : member;\n\n    /**\n     * Member the permissions are for\n     * @type {GuildMember}\n     * @deprecated\n     */\n    this._member = typeof member === 'object' ? member : null;\n\n    /**\n     * Bitfield of the packed permissions\n     * @type {number}\n     */\n    this.bitfield = typeof permissions === 'number' ? permissions : this.constructor.resolve(permissions);\n  }\n\n  get member() {\n    return this._member;\n  }\n\n  set member(value) {\n    this._member = value;\n  }\n\n  /**\n   * Bitfield of the packed permissions\n   * @type {number}\n   * @see {@link Permissions#bitfield}\n   * @deprecated\n   * @readonly\n   */\n  get raw() {\n    return this.bitfield;\n  }\n\n  set raw(raw) {\n    this.bitfield = raw;\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or multiple permissions.\n   * @param {PermissionResolvable|PermissionResolvable[]} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  has(permission, checkAdmin = true) {\n    if (permission instanceof Array) return permission.every(p => this.has(p, checkAdmin));\n    permission = this.constructor.resolve(permission);\n    if (checkAdmin && (this.bitfield & this.constructor.FLAGS.ADMINISTRATOR) > 0) return true;\n    return (this.bitfield & permission) === permission;\n  }\n\n  /**\n   * Gets all given permissions that are missing from the bitfield.\n   * @param {PermissionResolvable[]} permissions Permissions to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {PermissionResolvable[]}\n   */\n  missing(permissions, checkAdmin = true) {\n    return permissions.filter(p => !this.has(p, checkAdmin));\n  }\n\n  /**\n   * Adds permissions to this one, creating a new instance to represent the new bitfield.\n   * @param {...PermissionResolvable} permissions Permissions to add\n   * @returns {Permissions}\n   */\n  add(...permissions) {\n    let total = 0;\n    for (let p = 0; p < permissions.length; p++) {\n      const perm = this.constructor.resolve(permissions[p]);\n      if ((this.bitfield & perm) !== perm) total |= perm;\n    }\n    return new this.constructor(this.member, this.bitfield | total);\n  }\n\n  /**\n   * Removes permissions to this one, creating a new instance to represent the new bitfield.\n   * @param {...PermissionResolvable} permissions Permissions to remove\n   * @returns {Permissions}\n   */\n  remove(...permissions) {\n    let total = 0;\n    for (let p = 0; p < permissions.length; p++) {\n      const perm = this.constructor.resolve(permissions[p]);\n      if ((this.bitfield & perm) === perm) total |= perm;\n    }\n    return new this.constructor(this.member, this.bitfield & ~total);\n  }\n\n  /**\n   * Gets an object mapping permission name (like `VIEW_CHANNEL`) to a {@link boolean} indicating whether the\n   * permission is available.\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {Object}\n   */\n  serialize(checkAdmin = true) {\n    const serialized = {};\n    for (const perm in this.constructor.FLAGS) serialized[perm] = this.has(perm, checkAdmin);\n    return serialized;\n  }\n\n  /**\n   * Checks whether the user has a certain permission, e.g. `READ_MESSAGES`.\n   * @param {PermissionResolvable} permission The permission to check for\n   * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permission\n   * @returns {boolean}\n   * @see {@link Permissions#has}\n   * @deprecated\n   */\n  hasPermission(permission, explicit = false) {\n    return this.has(permission, !explicit);\n  }\n\n  /**\n   * Checks whether the user has all specified permissions.\n   * @param {PermissionResolvable[]} permissions The permissions to check for\n   * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permissions\n   * @returns {boolean}\n   * @see {@link Permissions#has}\n   * @deprecated\n   */\n  hasPermissions(permissions, explicit = false) {\n    return this.has(permissions, !explicit);\n  }\n\n  /**\n   * Checks whether the user has all specified permissions, and lists any missing permissions.\n   * @param {PermissionResolvable[]} permissions The permissions to check for\n   * @param {boolean} [explicit=false] Whether to require the user to explicitly have the exact permissions\n   * @returns {PermissionResolvable[]}\n   * @see {@link Permissions#missing}\n   * @deprecated\n   */\n  missingPermissions(permissions, explicit = false) {\n    return this.missing(permissions, !explicit);\n  }\n\n  /**\n   * Data that can be resolved to give a permission number. This can be:\n   * * A string (see {@link Permissions.FLAGS})\n   * * A permission number\n   * @typedef {string|number} PermissionResolvable\n   */\n\n  /**\n   * Resolves permissions to their numeric form.\n   * @param {PermissionResolvable|PermissionResolvable[]} permission - Permission(s) to resolve\n   * @returns {number}\n   */\n  static resolve(permission) {\n    if (permission instanceof Array) return permission.map(p => this.resolve(p)).reduce((prev, p) => prev | p, 0);\n    if (typeof permission === 'string') permission = this.FLAGS[permission];\n    if (typeof permission !== 'number' || permission < 1) throw new RangeError(Constants.Errors.NOT_A_PERMISSION);\n    return permission;\n  }\n}\n\n/**\n * Numeric permission flags. All available properties:\n * - `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n * - `CREATE_INSTANT_INVITE` (create invitations to the guild)\n * - `KICK_MEMBERS`\n * - `BAN_MEMBERS`\n * - `MANAGE_CHANNELS` (edit and reorder channels)\n * - `MANAGE_GUILD` (edit the guild information, region, etc.)\n * - `ADD_REACTIONS` (add new reactions to messages)\n * - `VIEW_AUDIT_LOG`\n * - `VIEW_CHANNEL`\n * - `READ_MESSAGES` **(deprecated)**\n * - `SEND_MESSAGES`\n * - `SEND_TTS_MESSAGES`\n * - `MANAGE_MESSAGES` (delete messages and reactions)\n * - `EMBED_LINKS` (links posted will have a preview embedded)\n * - `ATTACH_FILES`\n * - `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n * - `MENTION_EVERYONE`\n * - `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n * - `EXTERNAL_EMOJIS` **(deprecated)**\n * - `CONNECT` (connect to a voice channel)\n * - `SPEAK` (speak in a voice channel)\n * - `MUTE_MEMBERS` (mute members across all voice channels)\n * - `DEAFEN_MEMBERS` (deafen members across all voice channels)\n * - `MOVE_MEMBERS` (move members between voice channels)\n * - `USE_VAD` (use voice activity detection)\n * - `CHANGE_NICKNAME`\n * - `MANAGE_NICKNAMES` (change other members' nicknames)\n * - `MANAGE_ROLES`\n * - `MANAGE_ROLES_OR_PERMISSIONS` **(deprecated)**\n * - `MANAGE_WEBHOOKS`\n * - `MANAGE_EMOJIS`\n * @type {Object}\n * @see {@link https://discordapp.com/developers/docs/topics/permissions}\n */\nPermissions.FLAGS = {\n  CREATE_INSTANT_INVITE: 1 << 0,\n  KICK_MEMBERS: 1 << 1,\n  BAN_MEMBERS: 1 << 2,\n  ADMINISTRATOR: 1 << 3,\n  MANAGE_CHANNELS: 1 << 4,\n  MANAGE_GUILD: 1 << 5,\n  ADD_REACTIONS: 1 << 6,\n  VIEW_AUDIT_LOG: 1 << 7,\n\n  VIEW_CHANNEL: 1 << 10,\n  READ_MESSAGES: 1 << 10,\n  SEND_MESSAGES: 1 << 11,\n  SEND_TTS_MESSAGES: 1 << 12,\n  MANAGE_MESSAGES: 1 << 13,\n  EMBED_LINKS: 1 << 14,\n  ATTACH_FILES: 1 << 15,\n  READ_MESSAGE_HISTORY: 1 << 16,\n  MENTION_EVERYONE: 1 << 17,\n  EXTERNAL_EMOJIS: 1 << 18,\n  USE_EXTERNAL_EMOJIS: 1 << 18,\n\n  CONNECT: 1 << 20,\n  SPEAK: 1 << 21,\n  MUTE_MEMBERS: 1 << 22,\n  DEAFEN_MEMBERS: 1 << 23,\n  MOVE_MEMBERS: 1 << 24,\n  USE_VAD: 1 << 25,\n\n  CHANGE_NICKNAME: 1 << 26,\n  MANAGE_NICKNAMES: 1 << 27,\n  MANAGE_ROLES: 1 << 28,\n  MANAGE_ROLES_OR_PERMISSIONS: 1 << 28,\n  MANAGE_WEBHOOKS: 1 << 29,\n  MANAGE_EMOJIS: 1 << 30,\n};\n\n/**\n * Bitfield representing every permission combined\n * @type {number}\n */\nPermissions.ALL = Object.keys(Permissions.FLAGS).reduce((all, p) => all | Permissions.FLAGS[p], 0);\n\n/**\n * Bitfield representing the default permissions for users\n * @type {number}\n */\nPermissions.DEFAULT = 104324097;\n\n/**\n * @class EvaluatedPermissions\n * @classdesc The final evaluated permissions for a member in a channel\n * @see {@link Permissions}\n * @deprecated\n */\n\nPermissions.prototype.hasPermission = util.deprecate(Permissions.prototype.hasPermission,\n  'EvaluatedPermissions#hasPermission is deprecated, use Permissions#has instead');\nPermissions.prototype.hasPermissions = util.deprecate(Permissions.prototype.hasPermissions,\n  'EvaluatedPermissions#hasPermissions is deprecated, use Permissions#has instead');\nPermissions.prototype.missingPermissions = util.deprecate(Permissions.prototype.missingPermissions,\n  'EvaluatedPermissions#missingPermissions is deprecated, use Permissions#missing instead');\nObject.defineProperty(Permissions.prototype, 'member', {\n  get: util\n    .deprecate(Object.getOwnPropertyDescriptor(Permissions.prototype, 'member').get,\n      'EvaluatedPermissions#member is deprecated'),\n});\n\nmodule.exports = Permissions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"path\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInBhdGhcIj81YjJhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInBhdGhcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJwYXRoXCJcbi8vIG1vZHVsZSBpZCA9IDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"util\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInV0aWxcIj83MGM1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInV0aWxcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJ1dGlsXCJcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Role.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Snowflake = __webpack_require__(/*! ../util/Snowflake */ 6);\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ 7);\nconst util = __webpack_require__(/*! util */ 9);\n\n/**\n * Represents a role on Discord.\n */\nclass Role {\n  constructor(guild, data) {\n    /**\n     * The client that instantiated the role\n     * @name Role#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: guild.client });\n\n    /**\n     * The guild that the role belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    if (data) this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of the role (unique to the guild it is part of)\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the role\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The base 10 color of the role\n     * @type {number}\n     */\n    this.color = data.color;\n\n    /**\n     * If true, users that are part of this role will appear in a separate category in the users list\n     * @type {boolean}\n     */\n    this.hoist = data.hoist;\n\n    /**\n     * The position of the role from the API\n     * @type {number}\n     */\n    this.position = data.position;\n\n    /**\n     * The permissions bitfield of the role\n     * @type {number}\n     */\n    this.permissions = data.permissions;\n\n    /**\n     * Whether or not the role is managed by an external service\n     * @type {boolean}\n     */\n    this.managed = data.managed;\n\n    /**\n     * Whether or not the role can be mentioned by anyone\n     * @type {boolean}\n     */\n    this.mentionable = data.mentionable;\n  }\n\n  /**\n   * The timestamp the role was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the role was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The hexadecimal version of the role color, with a leading hashtag\n   * @type {string}\n   * @readonly\n   */\n  get hexColor() {\n    let col = this.color.toString(16);\n    while (col.length < 6) col = `0${col}`;\n    return `#${col}`;\n  }\n\n  /**\n   * The cached guild members that have this role\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    return this.guild.members.filter(m => m.roles.has(this.id));\n  }\n\n  /**\n   * Whether the role is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    if (this.managed) return false;\n    const clientMember = this.guild.member(this.client.user);\n    if (!clientMember.permissions.has(Permissions.FLAGS.MANAGE_ROLES_OR_PERMISSIONS)) return false;\n    return clientMember.highestRole.comparePositionTo(this) > 0;\n  }\n\n  /**\n   * The position of the role in the role manager\n   * @type {number}\n   * @readonly\n   */\n  get calculatedPosition() {\n    const sorted = this.guild._sortedRoles;\n    return sorted.array().indexOf(sorted.get(this.id));\n  }\n\n  /**\n   * Get an object mapping permission names to whether or not the role enables that permission.\n   * @returns {Object<string, boolean>}\n   * @example\n   * // Print the serialized role permissions\n   * console.log(role.serialize());\n   */\n  serialize() {\n    return new Permissions(this.permissions).serialize();\n  }\n\n  /**\n   * Checks if the role has a permission.\n   * @param {PermissionResolvable|PermissionResolvable[]} permission Permission(s) to check for\n   * @param {boolean} [explicit=false] Whether to require the role to explicitly have the exact permission\n   * **(deprecated)**\n   * @param {boolean} [checkAdmin] Whether to allow the administrator permission to override\n   * (takes priority over `explicit`)\n   * @returns {boolean}\n   * @example\n   * // See if a role can ban a member\n   * if (role.hasPermission('BAN_MEMBERS')) {\n   *   console.log('This role can ban members');\n   * } else {\n   *   console.log('This role can\\'t ban members');\n   * }\n   */\n  hasPermission(permission, explicit = false, checkAdmin) {\n    return new Permissions(this.permissions).has(\n      permission, typeof checkAdmin !== 'undefined' ? checkAdmin : !explicit\n    );\n  }\n\n  /**\n   * Checks if the role has all specified permissions.\n   * @param {PermissionResolvable[]} permissions The permissions to check for\n   * @param {boolean} [explicit=false] Whether to require the role to explicitly have the exact permissions\n   * @returns {boolean}\n   * @deprecated\n   */\n  hasPermissions(permissions, explicit = false) {\n    return new Permissions(this.permissions).has(permissions, !explicit);\n  }\n\n  /**\n   * Compares this role's position to another role's.\n   * @param {Role} role Role to compare to this one\n   * @returns {number} Negative number if the this role's position is lower (other role's is higher),\n   * positive number if the this one is higher (other's is lower), 0 if equal\n   */\n  comparePositionTo(role) {\n    return this.constructor.comparePositions(this, role);\n  }\n\n  /**\n   * The data for a role.\n   * @typedef {Object} RoleData\n   * @property {string} [name] The name of the role\n   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether or not the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {PermissionResolvable[]|number} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether or not the role should be mentionable\n   */\n\n  /**\n   * Edits the role.\n   * @param {RoleData} data The new data for the role\n   * @param {string} [reason] The reason for editing this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Edit name of a role\n   * role.edit({ name: 'New Name' })\n   *   .then(updated => console.log(`Edited role name from ${role.name} to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    return this.client.rest.methods.updateGuildRole(this, data, reason);\n  }\n\n  /**\n   * Set a new name for the role.\n   * @param {string} name The new name of the role\n   * @param {string} [reason] Reason for changing the role's name\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the name of the role\n   * role.setName('New Name')\n   *   .then(updated => console.log(`Edited role name from ${role.name} to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Set a new color for the role.\n   * @param {ColorResolvable} color The color of the role\n   * @param {string} [reason] Reason for changing the role's color\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the color of a role\n   * role.setColor('#FF0000')\n   *   .then(updated => console.log(`Set color of role to ${role.color}`))\n   *   .catch(console.error);\n   */\n  setColor(color, reason) {\n    return this.edit({ color }, reason);\n  }\n\n  /**\n   * Set whether or not the role should be hoisted.\n   * @param {boolean} hoist Whether or not to hoist the role\n   * @param {string} [reason] Reason for setting whether or not the role should be hoisted\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the hoist of the role\n   * role.setHoist(true)\n   *   .then(updated => console.log(`Role hoisted: ${updated.hoist}`))\n   *   .catch(console.error);\n   */\n  setHoist(hoist, reason) {\n    return this.edit({ hoist }, reason);\n  }\n\n  /**\n   * Set the position of the role.\n   * @param {number} position The position of the role\n   * @param {boolean} [relative=false] Move the position relative to its current value\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the position of the role\n   * role.setPosition(1)\n   *   .then(updated => console.log(`Role position: ${updated.position}`))\n   *   .catch(console.error);\n   */\n  setPosition(position, relative) {\n    return this.guild.setRolePosition(this, position, relative).then(() => this);\n  }\n\n  /**\n   * Set the permissions of the role.\n   * @param {string[]} permissions The permissions of the role\n   * @param {string} [reason] Reason for changing the role's permissions\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the permissions of the role\n   * role.setPermissions(['KICK_MEMBERS', 'BAN_MEMBERS'])\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   */\n  setPermissions(permissions, reason) {\n    return this.edit({ permissions }, reason);\n  }\n\n  /**\n   * Set whether this role is mentionable.\n   * @param {boolean} mentionable Whether this role should be mentionable\n   * @param {string} [reason] Reason for setting whether or not this role should be mentionable\n   * @returns {Promise<Role>}\n   * @example\n   * // Make the role mentionable\n   * role.setMentionable(true, 'Role needs to be pinged')\n   *   .then(updated => console.log(`Role mentionable: ${updated.mentionable}`))\n   *   .catch(console.error);\n   */\n  setMentionable(mentionable, reason) {\n    return this.edit({ mentionable }, reason);\n  }\n\n  /**\n   * Deletes the role.\n   * @param {string} [reason] Reason for deleting the role\n   * @returns {Promise<Role>}\n   * @example\n   * // Delete a role\n   * role.delete('The role needed to go')\n   *   .then(deleted => console.log(`Deleted role ${deleted.name}`))\n   *   .catch(console.error);\n   */\n  delete(reason) {\n    return this.client.rest.methods.deleteGuildRole(this, reason);\n  }\n\n  /**\n   * Whether this role equals another role. It compares all properties, so for most operations\n   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Role} role Role to compare with\n   * @returns {boolean}\n   */\n  equals(role) {\n    return role &&\n      this.id === role.id &&\n      this.name === role.name &&\n      this.color === role.color &&\n      this.hoist === role.hoist &&\n      this.position === role.position &&\n      this.permissions === role.permissions &&\n      this.managed === role.managed;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the role mention rather than the Role object.\n   * @returns {string}\n   */\n  toString() {\n    if (this.id === this.guild.id) return '@everyone';\n    return `<@&${this.id}>`;\n  }\n\n  /**\n   * Compares the positions of two roles.\n   * @param {Role} role1 First role to compare\n   * @param {Role} role2 Second role to compare\n   * @returns {number} Negative number if the first role's position is lower (second role's is higher),\n   * positive number if the first's is higher (second's is lower), 0 if equal\n   */\n  static comparePositions(role1, role2) {\n    if (role1.position === role2.position) return role2.id - role1.id;\n    return role1.position - role2.position;\n  }\n}\n\nRole.prototype.hasPermissions = util\n  .deprecate(Role.prototype.hasPermissions,\n    'Role#hasPermissions is deprecated - use Role#hasPermission instead, it now takes an array');\n\nmodule.exports = Role;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/*!********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/User.js ***!
  \********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const TextBasedChannel = __webpack_require__(/*! ./interfaces/TextBasedChannel */ 15);\nconst Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst Presence = __webpack_require__(/*! ./Presence */ 12).Presence;\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ 6);\n\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n */\nclass User {\n  constructor(client, data) {\n    /**\n     * The client that created the instance of the user\n     * @name User#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    if (data) this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of the user\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The username of the user\n     * @type {string}\n     */\n    this.username = data.username;\n\n    /**\n     * A discriminator based on username for the user\n     * @type {string}\n     */\n    this.discriminator = data.discriminator;\n\n    /**\n     * The ID of the user's avatar\n     * @type {string}\n     */\n    this.avatar = data.avatar;\n\n    /**\n     * Whether or not the user is a bot\n     * @type {boolean}\n     */\n    this.bot = Boolean(data.bot);\n\n    /**\n     * The ID of the last message sent by the user, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = null;\n\n    /**\n     * The Message object of the last message sent by the user, if one was sent\n     * @type {?Message}\n     */\n    this.lastMessage = null;\n  }\n\n  patch(data) {\n    for (const prop of ['id', 'username', 'discriminator', 'avatar', 'bot']) {\n      if (typeof data[prop] !== 'undefined') this[prop] = data[prop];\n    }\n    if (data.token) this.client.token = data.token;\n  }\n\n  /**\n   * The timestamp the user was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the user was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The presence of this user\n   * @type {Presence}\n   * @readonly\n   */\n  get presence() {\n    if (this.client.presences.has(this.id)) return this.client.presences.get(this.id);\n    for (const guild of this.client.guilds.values()) {\n      if (guild.presences.has(this.id)) return guild.presences.get(this.id);\n    }\n    return new Presence();\n  }\n\n  /**\n   * A link to the user's avatar\n   * @type {?string}\n   * @readonly\n   */\n  get avatarURL() {\n    if (!this.avatar) return null;\n    return Constants.Endpoints.User(this).Avatar(this.client.options.http.cdn, this.avatar);\n  }\n\n  /**\n   * A link to the user's default avatar\n   * @type {string}\n   * @readonly\n   */\n  get defaultAvatarURL() {\n    const avatars = Object.keys(Constants.DefaultAvatars);\n    const avatar = avatars[this.discriminator % avatars.length];\n    return Constants.Endpoints.CDN(this.client.options.http.host).Asset(`${Constants.DefaultAvatars[avatar]}.png`);\n  }\n\n  /**\n   * A link to the user's avatar if they have one. Otherwise a link to their default avatar will be returned\n   * @type {string}\n   * @readonly\n   */\n  get displayAvatarURL() {\n    return this.avatarURL || this.defaultAvatarURL;\n  }\n\n  /**\n   * The Discord \"tag\" for this user\n   * @type {string}\n   * @readonly\n   */\n  get tag() {\n    return `${this.username}#${this.discriminator}`;\n  }\n\n  /**\n   * The note that is set for the user\n   * <warn>This is only available when using a user account.</warn>\n   * @type {?string}\n   * @readonly\n   */\n  get note() {\n    return this.client.user.notes.get(this.id) || null;\n  }\n\n  /**\n   * Check whether the user is typing in a channel.\n   * @param {ChannelResolvable} channel The channel to check in\n   * @returns {boolean}\n   */\n  typingIn(channel) {\n    channel = this.client.resolver.resolveChannel(channel);\n    return channel._typing.has(this.id);\n  }\n\n  /**\n   * Get the time that the user started typing.\n   * @param {ChannelResolvable} channel The channel to get the time in\n   * @returns {?Date}\n   */\n  typingSinceIn(channel) {\n    channel = this.client.resolver.resolveChannel(channel);\n    return channel._typing.has(this.id) ? new Date(channel._typing.get(this.id).since) : null;\n  }\n\n  /**\n   * Get the amount of time the user has been typing in a channel for (in milliseconds), or -1 if they're not typing.\n   * @param {ChannelResolvable} channel The channel to get the time in\n   * @returns {number}\n   */\n  typingDurationIn(channel) {\n    channel = this.client.resolver.resolveChannel(channel);\n    return channel._typing.has(this.id) ? channel._typing.get(this.id).elapsedTime : -1;\n  }\n\n  /**\n   * The DM between the client's user and this user\n   * @type {?DMChannel}\n   * @readonly\n   */\n  get dmChannel() {\n    return this.client.channels.filter(c => c.type === 'dm').find(c => c.recipient.id === this.id);\n  }\n\n  /**\n   * Creates a DM channel between the client and the user.\n   * @returns {Promise<DMChannel>}\n   */\n  createDM() {\n    return this.client.rest.methods.createDM(this);\n  }\n\n  /**\n   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.client.rest.methods.deleteChannel(this);\n  }\n\n  /**\n   * Sends a friend request to the user.\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<User>}\n   */\n  addFriend() {\n    return this.client.rest.methods.addFriend(this);\n  }\n\n  /**\n   * Removes the user from your friends.\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<User>}\n   */\n  removeFriend() {\n    return this.client.rest.methods.removeFriend(this);\n  }\n\n  /**\n   * Blocks the user.\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<User>}\n   */\n  block() {\n    return this.client.rest.methods.blockUser(this);\n  }\n\n  /**\n   * Unblocks the user.\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<User>}\n   */\n  unblock() {\n    return this.client.rest.methods.unblockUser(this);\n  }\n\n  /**\n   * Get the profile of the user.\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<UserProfile>}\n   */\n  fetchProfile() {\n    return this.client.rest.methods.fetchUserProfile(this);\n  }\n\n  /**\n   * Sets a note for the user.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {string} note The note to set for the user\n   * @returns {Promise<User>}\n   */\n  setNote(note) {\n    return this.client.rest.methods.setNote(this, note);\n  }\n\n  /**\n   * Checks if the user is equal to another. It compares ID, username, discriminator, avatar, and bot flags.\n   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n   * @param {User} user User to compare with\n   * @returns {boolean}\n   */\n  equals(user) {\n    let equal = user &&\n      this.id === user.id &&\n      this.username === user.username &&\n      this.discriminator === user.discriminator &&\n      this.avatar === user.avatar &&\n      this.bot === Boolean(user.bot);\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the user's mention instead of the User object.\n   * @returns {string}\n   * @example\n   * // logs: Hello from <@123456789>!\n   * console.log(`Hello from ${user}!`);\n   */\n  toString() {\n    return `<@${this.id}>`;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n  sendMessage() {}\n  sendEmbed() {}\n  sendFile() {}\n  sendCode() {}\n}\n\nTextBasedChannel.applyToClass(User);\n\nmodule.exports = User;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/*!************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Presence.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * Represents a user's presence.\n */\nclass Presence {\n  constructor(data = {}) {\n    /**\n     * The status of the presence:\n     *\n     * * **`online`** - user is online\n     * * **`offline`** - user is offline or invisible\n     * * **`idle`** - user is AFK\n     * * **`dnd`** - user is in Do not Disturb\n     * @type {string}\n     */\n    this.status = data.status || 'offline';\n\n    /**\n     * The game that the user is playing\n     * @type {?Game}\n     */\n    this.game = data.game ? new Game(data.game) : null;\n  }\n\n  update(data) {\n    this.status = data.status || this.status;\n    this.game = data.game ? new Game(data.game) : null;\n  }\n\n  /**\n   * Whether this presence is equal to another\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n  equals(presence) {\n    return this === presence || (\n      presence &&\n      this.status === presence.status &&\n      this.game ? this.game.equals(presence.game) : !presence.game\n    );\n  }\n}\n\n/**\n * Represents a game that is part of a user's presence.\n */\nclass Game {\n  constructor(data) {\n    /**\n     * The name of the game being played\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The type of the game status\n     * @type {number}\n     */\n    this.type = data.type;\n\n    /**\n     * If the game is being streamed, a link to the stream\n     * @type {?string}\n     */\n    this.url = data.url || null;\n  }\n\n  /**\n   * Whether or not the game is being streamed\n   * @type {boolean}\n   * @readonly\n   */\n  get streaming() {\n    return this.type === 1;\n  }\n\n  /**\n   * Whether this game is equal to another game\n   * @param {Game} game The game to compare with\n   * @returns {boolean}\n   */\n  equals(game) {\n    return this === game || (\n      game &&\n      this.name === game.name &&\n      this.type === game.type &&\n      this.url === game.url\n    );\n  }\n}\n\nexports.Presence = Presence;\nexports.Game = Game;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9QcmVzZW5jZS5qcz9mN2UwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVwcmVzZW50cyBhIHVzZXIncyBwcmVzZW5jZS5cbiAqL1xuY2xhc3MgUHJlc2VuY2Uge1xuICBjb25zdHJ1Y3RvcihkYXRhID0ge30pIHtcbiAgICAvKipcbiAgICAgKiBUaGUgc3RhdHVzIG9mIHRoZSBwcmVzZW5jZTpcbiAgICAgKlxuICAgICAqICogKipgb25saW5lYCoqIC0gdXNlciBpcyBvbmxpbmVcbiAgICAgKiAqICoqYG9mZmxpbmVgKiogLSB1c2VyIGlzIG9mZmxpbmUgb3IgaW52aXNpYmxlXG4gICAgICogKiAqKmBpZGxlYCoqIC0gdXNlciBpcyBBRktcbiAgICAgKiAqICoqYGRuZGAqKiAtIHVzZXIgaXMgaW4gRG8gbm90IERpc3R1cmJcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3RhdHVzID0gZGF0YS5zdGF0dXMgfHwgJ29mZmxpbmUnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGdhbWUgdGhhdCB0aGUgdXNlciBpcyBwbGF5aW5nXG4gICAgICogQHR5cGUgez9HYW1lfVxuICAgICAqL1xuICAgIHRoaXMuZ2FtZSA9IGRhdGEuZ2FtZSA/IG5ldyBHYW1lKGRhdGEuZ2FtZSkgOiBudWxsO1xuICB9XG5cbiAgdXBkYXRlKGRhdGEpIHtcbiAgICB0aGlzLnN0YXR1cyA9IGRhdGEuc3RhdHVzIHx8IHRoaXMuc3RhdHVzO1xuICAgIHRoaXMuZ2FtZSA9IGRhdGEuZ2FtZSA/IG5ldyBHYW1lKGRhdGEuZ2FtZSkgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBwcmVzZW5jZSBpcyBlcXVhbCB0byBhbm90aGVyXG4gICAqIEBwYXJhbSB7UHJlc2VuY2V9IHByZXNlbmNlIFRoZSBwcmVzZW5jZSB0byBjb21wYXJlIHdpdGhcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHMocHJlc2VuY2UpIHtcbiAgICByZXR1cm4gdGhpcyA9PT0gcHJlc2VuY2UgfHwgKFxuICAgICAgcHJlc2VuY2UgJiZcbiAgICAgIHRoaXMuc3RhdHVzID09PSBwcmVzZW5jZS5zdGF0dXMgJiZcbiAgICAgIHRoaXMuZ2FtZSA/IHRoaXMuZ2FtZS5lcXVhbHMocHJlc2VuY2UuZ2FtZSkgOiAhcHJlc2VuY2UuZ2FtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgZ2FtZSB0aGF0IGlzIHBhcnQgb2YgYSB1c2VyJ3MgcHJlc2VuY2UuXG4gKi9cbmNsYXNzIEdhbWUge1xuICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGdhbWUgYmVpbmcgcGxheWVkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgZ2FtZSBzdGF0dXNcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IGRhdGEudHlwZTtcblxuICAgIC8qKlxuICAgICAqIElmIHRoZSBnYW1lIGlzIGJlaW5nIHN0cmVhbWVkLCBhIGxpbmsgdG8gdGhlIHN0cmVhbVxuICAgICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudXJsID0gZGF0YS51cmwgfHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgZ2FtZSBpcyBiZWluZyBzdHJlYW1lZFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgc3RyZWFtaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnR5cGUgPT09IDE7XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGlzIGdhbWUgaXMgZXF1YWwgdG8gYW5vdGhlciBnYW1lXG4gICAqIEBwYXJhbSB7R2FtZX0gZ2FtZSBUaGUgZ2FtZSB0byBjb21wYXJlIHdpdGhcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHMoZ2FtZSkge1xuICAgIHJldHVybiB0aGlzID09PSBnYW1lIHx8IChcbiAgICAgIGdhbWUgJiZcbiAgICAgIHRoaXMubmFtZSA9PT0gZ2FtZS5uYW1lICYmXG4gICAgICB0aGlzLnR5cGUgPT09IGdhbWUudHlwZSAmJlxuICAgICAgdGhpcy51cmwgPT09IGdhbWUudXJsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnRzLlByZXNlbmNlID0gUHJlc2VuY2U7XG5leHBvcnRzLkdhbWUgPSBHYW1lO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9QcmVzZW5jZS5qc1xuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/*!***********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Channel.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Snowflake = __webpack_require__(/*! ../util/Snowflake */ 6);\n\n/**\n * Represents any channel on Discord.\n */\nclass Channel {\n  constructor(client, data) {\n    /**\n     * The client that instantiated the Channel\n     * @name Channel#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The type of the channel, either:\n     * * `dm` - a DM channel\n     * * `group` - a Group DM channel\n     * * `text` - a guild text channel\n     * * `voice` - a guild voice channel\n     * * `category` - a guild category channel\n     * @type {string}\n     */\n    this.type = null;\n\n    if (data) this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The unique ID of the channel\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the channel was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Deletes the channel.\n   * @returns {Promise<Channel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.client.rest.methods.deleteChannel(this);\n  }\n}\n\nmodule.exports = Channel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9DaGFubmVsLmpzPzQ4NDciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU25vd2ZsYWtlID0gcmVxdWlyZSgnLi4vdXRpbC9Tbm93Zmxha2UnKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFueSBjaGFubmVsIG9uIERpc2NvcmQuXG4gKi9cbmNsYXNzIENoYW5uZWwge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY2xpZW50IHRoYXQgaW5zdGFudGlhdGVkIHRoZSBDaGFubmVsXG4gICAgICogQG5hbWUgQ2hhbm5lbCNjbGllbnRcbiAgICAgKiBAdHlwZSB7Q2xpZW50fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY2xpZW50JywgeyB2YWx1ZTogY2xpZW50IH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGNoYW5uZWwsIGVpdGhlcjpcbiAgICAgKiAqIGBkbWAgLSBhIERNIGNoYW5uZWxcbiAgICAgKiAqIGBncm91cGAgLSBhIEdyb3VwIERNIGNoYW5uZWxcbiAgICAgKiAqIGB0ZXh0YCAtIGEgZ3VpbGQgdGV4dCBjaGFubmVsXG4gICAgICogKiBgdm9pY2VgIC0gYSBndWlsZCB2b2ljZSBjaGFubmVsXG4gICAgICogKiBgY2F0ZWdvcnlgIC0gYSBndWlsZCBjYXRlZ29yeSBjaGFubmVsXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSBudWxsO1xuXG4gICAgaWYgKGRhdGEpIHRoaXMuc2V0dXAoZGF0YSk7XG4gIH1cblxuICBzZXR1cChkYXRhKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBJRCBvZiB0aGUgY2hhbm5lbFxuICAgICAqIEB0eXBlIHtTbm93Zmxha2V9XG4gICAgICovXG4gICAgdGhpcy5pZCA9IGRhdGEuaWQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRpbWVzdGFtcCB0aGUgY2hhbm5lbCB3YXMgY3JlYXRlZCBhdFxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBjcmVhdGVkVGltZXN0YW1wKCkge1xuICAgIHJldHVybiBTbm93Zmxha2UuZGVjb25zdHJ1Y3QodGhpcy5pZCkudGltZXN0YW1wO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lIHRoZSBjaGFubmVsIHdhcyBjcmVhdGVkXG4gICAqIEB0eXBlIHtEYXRlfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBjcmVhdGVkQXQoKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMuY3JlYXRlZFRpbWVzdGFtcCk7XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlcyB0aGUgY2hhbm5lbC5cbiAgICogQHJldHVybnMge1Byb21pc2U8Q2hhbm5lbD59XG4gICAqIEBleGFtcGxlXG4gICAqIC8vIERlbGV0ZSB0aGUgY2hhbm5lbFxuICAgKiBjaGFubmVsLmRlbGV0ZSgpXG4gICAqICAgLnRoZW4oY29uc29sZS5sb2cpXG4gICAqICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgKi9cbiAgZGVsZXRlKCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5yZXN0Lm1ldGhvZHMuZGVsZXRlQ2hhbm5lbCh0aGlzKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENoYW5uZWw7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9zdHJ1Y3R1cmVzL0NoYW5uZWwuanNcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable node/no-deprecated-api */\nvar buffer = __webpack_require__(/*! buffer */ 146)\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanM/NWY3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWRlcHJlY2F0ZWQtYXBpICovXG52YXIgYnVmZmVyID0gcmVxdWlyZSgnYnVmZmVyJylcbnZhciBCdWZmZXIgPSBidWZmZXIuQnVmZmVyXG5cbi8vIGFsdGVybmF0aXZlIHRvIHVzaW5nIE9iamVjdC5rZXlzIGZvciBvbGQgYnJvd3NlcnNcbmZ1bmN0aW9uIGNvcHlQcm9wcyAoc3JjLCBkc3QpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgIGRzdFtrZXldID0gc3JjW2tleV1cbiAgfVxufVxuaWYgKEJ1ZmZlci5mcm9tICYmIEJ1ZmZlci5hbGxvYyAmJiBCdWZmZXIuYWxsb2NVbnNhZmUgJiYgQnVmZmVyLmFsbG9jVW5zYWZlU2xvdykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGJ1ZmZlclxufSBlbHNlIHtcbiAgLy8gQ29weSBwcm9wZXJ0aWVzIGZyb20gcmVxdWlyZSgnYnVmZmVyJylcbiAgY29weVByb3BzKGJ1ZmZlciwgZXhwb3J0cylcbiAgZXhwb3J0cy5CdWZmZXIgPSBTYWZlQnVmZmVyXG59XG5cbmZ1bmN0aW9uIFNhZmVCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIENvcHkgc3RhdGljIG1ldGhvZHMgZnJvbSBCdWZmZXJcbmNvcHlQcm9wcyhCdWZmZXIsIFNhZmVCdWZmZXIpXG5cblNhZmVCdWZmZXIuZnJvbSA9IGZ1bmN0aW9uIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuU2FmZUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgdmFyIGJ1ZiA9IEJ1ZmZlcihzaXplKVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICBidWYuZmlsbChmaWxsKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBidWYuZmlsbCgwKVxuICB9XG4gIHJldHVybiBidWZcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKHNpemUpXG59XG5cblNhZmVCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBidWZmZXIuU2xvd0J1ZmZlcihzaXplKVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc2FmZS1idWZmZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/interfaces/TextBasedChannel.js ***!
  \*******************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const path = __webpack_require__(/*! path */ 8);\nconst Message = __webpack_require__(/*! ../Message */ 16);\nconst MessageCollector = __webpack_require__(/*! ../MessageCollector */ 56);\nconst Collection = __webpack_require__(/*! ../../util/Collection */ 3);\nconst Attachment = __webpack_require__(/*! ../../structures/Attachment */ 21);\nconst RichEmbed = __webpack_require__(/*! ../../structures/RichEmbed */ 20);\nconst Snowflake = __webpack_require__(/*! ../../util/Snowflake */ 6);\nconst util = __webpack_require__(/*! util */ 9);\n\n/**\n * Interface for classes that have text-channel-like features.\n * @interface\n */\nclass TextBasedChannel {\n  constructor() {\n    /**\n     * A collection containing the messages sent to this channel\n     * @type {Collection<Snowflake, Message>}\n     */\n    this.messages = new Collection();\n\n    /**\n     * The ID of the last message in the channel, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = null;\n\n    /**\n     * The Message object of the last message in the channel, if one was sent\n     * @type {?Message}\n     */\n    this.lastMessage = null;\n  }\n\n  /**\n   * Options provided when sending or editing a message.\n   * @typedef {Object} MessageOptions\n   * @property {boolean} [tts=false] Whether or not the message should be spoken aloud\n   * @property {string} [nonce=''] The nonce for the message\n   * @property {RichEmbed|Object} [embed] An embed for the message\n   * (see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)\n   * @property {boolean} [disableEveryone=this.client.options.disableEveryone] Whether or not @everyone and @here\n   * should be replaced with plain-text\n   * @property {FileOptions|BufferResolvable|Attachment} [file] A file to send with the message **(deprecated)**\n   * @property {FileOptions[]|BufferResolvable[]|Attachment[]} [files] Files to send with the message\n   * @property {string|boolean} [code] Language for optional codeblock formatting to apply\n   * @property {boolean|SplitOptions} [split=false] Whether or not the message should be split into multiple messages if\n   * it exceeds the character limit. If an object is provided, these are the options for splitting the message\n   * @property {UserResolvable} [reply] User to reply to (prefixes the message with a mention, except in DMs)\n   */\n\n  /**\n   * @typedef {Object} FileOptions\n   * @property {BufferResolvable} attachment File to attach\n   * @property {string} [name='file.jpg'] Filename of the attachment\n   */\n\n  /**\n   * Options for splitting a message.\n   * @typedef {Object} SplitOptions\n   * @property {number} [maxLength=1950] Maximum character length per message piece\n   * @property {string} [char='\\n'] Character to split the message with\n   * @property {string} [prepend=''] Text to prepend to every piece except the first\n   * @property {string} [append=''] Text to append to every piece except the last\n   */\n\n  /**\n   * Send a message to this channel.\n   * @param {StringResolvable} [content] Text for the message\n   * @param {MessageOptions|Attachment|RichEmbed} [options] Options for the message,\n   * can also be just a RichEmbed or Attachment\n   * @returns {Promise<Message|Message[]>}\n   * @example\n   * // Send a basic message\n   * channel.send('hello!')\n   *   .then(message => console.log(`Sent message: ${message.content}`))\n   *   .catch(console.error);\n   * @example\n   * // Send a remote file\n   * channel.send({\n   *   files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send a local file\n   * channel.send({\n   *   files: [{\n   *     attachment: 'entire/path/to/file.jpg',\n   *     name: 'file.jpg'\n   *   }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send an embed with a local image inside\n   * channel.send('This is an embed', {\n   *   embed: {\n   *     thumbnail: {\n   *          url: 'attachment://file.jpg'\n   *       }\n   *    },\n   *    files: [{\n   *       attachment: 'entire/path/to/file.jpg',\n   *       name: 'file.jpg'\n   *    }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  // eslint-disable-next-line complexity\n  send(content, options) {\n    if (!options && typeof content === 'object' && !(content instanceof Array)) {\n      options = content;\n      content = '';\n    } else if (!options) {\n      options = {};\n    }\n\n    if (options instanceof Attachment) options = { files: [options.file] };\n    if (options instanceof RichEmbed) options = { embed: options };\n\n    if (options.embed && options.embed.file) {\n      if (options.files) options.files.push(options.embed.file);\n      else options.files = [options.embed.file];\n    }\n\n    if (options.file) {\n      if (options.files) options.files.push(options.file);\n      else options.files = [options.file];\n    }\n\n    if (options.files) {\n      for (let i = 0; i < options.files.length; i++) {\n        let file = options.files[i];\n        if (typeof file === 'string' || Buffer.isBuffer(file)) file = { attachment: file };\n        if (!file.name) {\n          if (typeof file.attachment === 'string') {\n            file.name = path.basename(file.attachment);\n          } else if (file.attachment && file.attachment.path) {\n            file.name = path.basename(file.attachment.path);\n          } else if (file instanceof Attachment) {\n            file = { attachment: file.file, name: path.basename(file.file) || 'file.jpg' };\n          } else {\n            file.name = 'file.jpg';\n          }\n        } else if (file instanceof Attachment) {\n          file = file.file;\n        }\n        options.files[i] = file;\n      }\n\n      return Promise.all(options.files.map(file =>\n        this.client.resolver.resolveFile(file.attachment).then(resource => {\n          file.file = resource;\n          return file;\n        })\n      )).then(files => this.client.rest.methods.sendMessage(this, content, options, files));\n    }\n\n    return this.client.rest.methods.sendMessage(this, content, options);\n  }\n\n  /**\n   * Gets a single message from this channel, regardless of it being cached or not. Since the single message fetching\n   * endpoint is reserved for bot accounts, this abstracts the `fetchMessages` method to obtain the single message when\n   * using a user account.\n   * @param {Snowflake} messageID ID of the message to get\n   * @returns {Promise<Message>}\n   * @example\n   * // Get message\n   * channel.fetchMessage('99539446449315840')\n   *   .then(message => console.log(message.content))\n   *   .catch(console.error);\n   */\n  fetchMessage(messageID) {\n    if (!this.client.user.bot) {\n      return this.fetchMessages({ limit: 1, around: messageID }).then(messages => {\n        const msg = messages.get(messageID);\n        if (!msg) throw new Error('Message not found.');\n        return msg;\n      });\n    }\n    return this.client.rest.methods.getChannelMessage(this, messageID).then(data => {\n      const msg = data instanceof Message ? data : new Message(this, data, this.client);\n      this._cacheMessage(msg);\n      return msg;\n    });\n  }\n\n  /**\n   * The parameters to pass in when requesting previous messages from a channel. `around`, `before` and\n   * `after` are mutually exclusive. All the parameters are optional.\n   * @typedef {Object} ChannelLogsQueryOptions\n   * @property {number} [limit=50] Number of messages to acquire\n   * @property {Snowflake} [before] ID of a message to get the messages that were posted before it\n   * @property {Snowflake} [after] ID of a message to get the messages that were posted after it\n   * @property {Snowflake} [around] ID of a message to get the messages that were posted around it\n   */\n\n  /**\n   * Gets the past messages sent in this channel. Resolves with a collection mapping message ID's to Message objects.\n   * @param {ChannelLogsQueryOptions} [options={}] Query parameters to pass in\n   * @returns {Promise<Collection<Snowflake, Message>>}\n   * @example\n   * // Get messages\n   * channel.fetchMessages({ limit: 10 })\n   *   .then(messages => console.log(`Received ${messages.size} messages`))\n   *   .catch(console.error);\n   */\n  fetchMessages(options = {}) {\n    return this.client.rest.methods.getChannelMessages(this, options).then(data => {\n      const messages = new Collection();\n      for (const message of data) {\n        const msg = new Message(this, message, this.client);\n        messages.set(message.id, msg);\n        this._cacheMessage(msg);\n      }\n      return messages;\n    });\n  }\n\n  /**\n   * Fetches the pinned messages of this channel and returns a collection of them.\n   * @returns {Promise<Collection<Snowflake, Message>>}\n   */\n  fetchPinnedMessages() {\n    return this.client.rest.methods.getChannelPinnedMessages(this).then(data => {\n      const messages = new Collection();\n      for (const message of data) {\n        const msg = new Message(this, message, this.client);\n        messages.set(message.id, msg);\n        this._cacheMessage(msg);\n      }\n      return messages;\n    });\n  }\n\n  /**\n   * @typedef {Object} MessageSearchOptions\n   * @property {string} [content] Message content\n   * @property {Snowflake} [maxID] Maximum ID for the filter\n   * @property {Snowflake} [minID] Minimum ID for the filter\n   * @property {string} [has] One of `link`, `embed`, `file`, `video`, `image`, or `sound`,\n   * or add `-` to negate (e.g. `-file`)\n   * @property {ChannelResolvable} [channel] Channel to limit search to (only for guild search endpoint)\n   * @property {UserResolvable} [author] Author to limit search\n   * @property {string} [authorType] One of `user`, `bot`, `webhook`, or add `-` to negate (e.g. `-webhook`)\n   * @property {string} [sortBy='recent'] `recent` or `relevant`\n   * @property {string} [sortOrder='desc'] `asc` or `desc`\n   * @property {number} [contextSize=2] How many messages to get around the matched message (0 to 2)\n   * @property {number} [limit=25] Maximum number of results to get (1 to 25)\n   * @property {number} [offset=0] Offset the \"pages\" of results (since you can only see 25 at a time)\n   * @property {UserResolvable} [mentions] Mentioned user filter\n   * @property {boolean} [mentionsEveryone] If everyone is mentioned\n   * @property {string} [linkHostname] Filter links by hostname\n   * @property {string} [embedProvider] The name of an embed provider\n   * @property {string} [embedType] one of `image`, `video`, `url`, `rich`\n   * @property {string} [attachmentFilename] The name of an attachment\n   * @property {string} [attachmentExtension] The extension of an attachment\n   * @property {Date} [before] Date to find messages before\n   * @property {Date} [after] Date to find messages before\n   * @property {Date} [during] Date to find messages during (range of date to date + 24 hours)\n   * @property {boolean} [nsfw=false] Include results from NSFW channels\n   */\n\n  /**\n   * @typedef {Object} MessageSearchResult\n   * @property {number} totalResults Total result count\n   * @property {Message[][]} messages Array of message results\n   * The message which has triggered the result will have the `hit` property set to `true`\n   */\n\n  /**\n   * Performs a search within the channel.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {MessageSearchOptions} [options={}] Options to pass to the search\n   * @returns {Promise<MessageSearchResult>}\n   * @example\n   * channel.search({\n   *   content: 'discord.js',\n   *   before: '2016-11-17'\n   * }).then(res => {\n   *   const hit = res.messages[0].find(m => m.hit).content;\n   *   console.log(`I found: **${hit}**, total results: ${res.totalResults}`);\n   * }).catch(console.error);\n   */\n  search(options = {}) {\n    return this.client.rest.methods.search(this, options);\n  }\n\n  /**\n   * Starts a typing indicator in the channel.\n   * @param {number} [count] The number of times startTyping should be considered to have been called\n   * @example\n   * // Start typing in a channel\n   * channel.startTyping();\n   */\n  startTyping(count) {\n    if (typeof count !== 'undefined' && count < 1) throw new RangeError('Count must be at least 1.');\n    if (this.client.user._typing.has(this.id)) {\n      const entry = this.client.user._typing.get(this.id);\n      entry.count = count || entry.count + 1;\n      return;\n    }\n\n    const entry = {\n      count: count || 1,\n      interval: this.client.setInterval(() => {\n        this.client.rest.methods.sendTyping(this.id).catch(() => {\n          this.client.clearInterval(entry.interval);\n          this.client.user._typing.delete(this.id);\n        });\n      }, 9000),\n    };\n    this.client.rest.methods.sendTyping(this.id).catch(() => {\n      this.client.clearInterval(entry.interval);\n      this.client.user._typing.delete(this.id);\n    });\n    this.client.user._typing.set(this.id, entry);\n  }\n\n  /**\n   * Stops the typing indicator in the channel.\n   * The indicator will only stop if this is called as many times as startTyping().\n   * <info>It can take a few seconds for the client user to stop typing.</info>\n   * @param {boolean} [force=false] Whether or not to reset the call count and force the indicator to stop\n   * @example\n   * // Reduce the typing count by one and stop typing if it reached 0\n   * channel.stopTyping();\n   * @example\n   * // Force typing to fully stop in a channel\n   * channel.stopTyping(true);\n   */\n  stopTyping(force = false) {\n    if (this.client.user._typing.has(this.id)) {\n      const entry = this.client.user._typing.get(this.id);\n      entry.count--;\n      if (entry.count <= 0 || force) {\n        this.client.clearInterval(entry.interval);\n        this.client.user._typing.delete(this.id);\n      }\n    }\n  }\n\n  /**\n   * Whether or not the typing indicator is being shown in the channel\n   * @type {boolean}\n   * @readonly\n   */\n  get typing() {\n    return this.client.user._typing.has(this.id);\n  }\n\n  /**\n   * Number of times `startTyping` has been called\n   * @type {number}\n   * @readonly\n   */\n  get typingCount() {\n    if (this.client.user._typing.has(this.id)) return this.client.user._typing.get(this.id).count;\n    return 0;\n  }\n\n  /**\n   * Creates a Message Collector\n   * @param {CollectorFilter} filter The filter to create the collector with\n   * @param {MessageCollectorOptions} [options={}] The options to pass to the collector\n   * @returns {MessageCollector}\n   * @deprecated\n   */\n  createCollector(filter, options) {\n    return this.createMessageCollector(filter, options);\n  }\n\n  /**\n   * Creates a Message Collector.\n   * @param {CollectorFilter} filter The filter to create the collector with\n   * @param {MessageCollectorOptions} [options={}] The options to pass to the collector\n   * @returns {MessageCollector}\n   * @example\n   * // Create a message collector\n   * const filter = m => m.content.includes('discord');\n   * const collector = channel.createMessageCollector(filter, { time: 15000 });\n   * collector.on('collect', m => console.log(`Collected ${m.content}`));\n   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));\n   */\n  createMessageCollector(filter, options = {}) {\n    return new MessageCollector(this, filter, options);\n  }\n\n  /**\n   * An object containing the same properties as CollectorOptions, but a few more:\n   * @typedef {MessageCollectorOptions} AwaitMessagesOptions\n   * @property {string[]} [errors] Stop/end reasons that cause the promise to reject\n   */\n\n  /**\n   * Similar to createCollector but in promise form. Resolves with a collection of messages that pass the specified\n   * filter.\n   * @param {CollectorFilter} filter The filter function to use\n   * @param {AwaitMessagesOptions} [options={}] Optional options to pass to the internal collector\n   * @returns {Promise<Collection<Snowflake, Message>>}\n   * @example\n   * // Await !vote messages\n   * const filter = m => m.content.startsWith('!vote');\n   * // Errors: ['time'] treats ending because of the time limit as an error\n   * channel.awaitMessages(filter, { max: 4, time: 60000, errors: ['time'] })\n   *   .then(collected => console.log(collected.size))\n   *   .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));\n   */\n  awaitMessages(filter, options = {}) {\n    return new Promise((resolve, reject) => {\n      const collector = this.createCollector(filter, options);\n      collector.once('end', (collection, reason) => {\n        if (options.errors && options.errors.includes(reason)) {\n          reject(collection);\n        } else {\n          resolve(collection);\n        }\n      });\n    });\n  }\n\n  /**\n   * Bulk delete given messages that are newer than two weeks.\n   * <warn>This is only available when using a bot account.</warn>\n   * @param {Collection<Snowflake, Message>|Message[]|number} messages Messages or number of messages to delete\n   * @param {boolean} [filterOld=false] Filter messages to remove those which are older than two weeks automatically\n   * @returns {Promise<Collection<Snowflake, Message>>} Deleted messages\n   * @example\n   * // Bulk delete messages\n   * channel.bulkDelete(5)\n   *   .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n   *   .catch(console.error);\n   */\n  bulkDelete(messages, filterOld = false) {\n    if (messages instanceof Collection) messages = [...messages.values()];\n    if (messages instanceof Array) {\n      if (filterOld) {\n        messages = messages.filter(m => Date.now() - Snowflake.deconstruct(m.id).date.getTime() < 1209600000);\n      }\n      if (messages.length === 0) return new Collection();\n      if (messages.length === 1) {\n        return messages[0].delete().then(() => new Collection([[messages[0].id, messages[0]]]));\n      }\n      return this.client.rest.methods.bulkDeleteMessages(this, messages);\n    }\n    if (!isNaN(messages)) return this.fetchMessages({ limit: messages }).then(msgs => this.bulkDelete(msgs, filterOld));\n    throw new TypeError('The messages must be an Array, Collection, or number.');\n  }\n\n  /**\n   * Marks all messages in this channel as read.\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<TextChannel|GroupDMChannel|DMChannel>}\n   */\n  acknowledge() {\n    if (!this.lastMessageID) return Promise.resolve(this);\n    return this.client.rest.methods.ackTextChannel(this);\n  }\n\n  _cacheMessage(message) {\n    const maxSize = this.client.options.messageCacheMaxSize;\n    if (maxSize === 0) return null;\n    if (this.messages.size >= maxSize && maxSize > 0) this.messages.delete(this.messages.firstKey());\n    this.messages.set(message.id, message);\n    return message;\n  }\n}\n\n/** @lends TextBasedChannel.prototype */\nconst Deprecated = {\n  /**\n   * Send a message to this channel.\n   * @param {StringResolvable} [content] Text for the message\n   * @param {MessageOptions} [options={}] Options for the message\n   * @returns {Promise<Message|Message[]>}\n   * @deprecated\n   * @example\n   * // Send a message\n   * channel.sendMessage('hello!')\n   *  .then(message => console.log(`Sent message: ${message.content}`))\n   *  .catch(console.error);\n   */\n  sendMessage(content, options) {\n    return this.send(content, options);\n  },\n\n  /**\n   * Send an embed to this channel.\n   * @param {RichEmbed|Object} embed Embed for the message\n   * @param {string} [content] Text for the message\n   * @param {MessageOptions} [options] Options for the message\n   * @returns {Promise<Message>}\n   * @deprecated\n   */\n  sendEmbed(embed, content, options) {\n    if (!options && typeof content === 'object' && !(content instanceof Array)) {\n      options = content;\n      content = '';\n    } else if (!options) {\n      options = {};\n    }\n    return this.send(content, Object.assign(options, { embed }));\n  },\n\n  /**\n   * Send files to this channel.\n   * @param {FileOptions[]|string[]} files Files to send with the message\n   * @param {StringResolvable} [content] Text for the message\n   * @param {MessageOptions} [options] Options for the message\n   * @returns {Promise<Message>}\n   * @deprecated\n   */\n  sendFiles(files, content, options = {}) {\n    return this.send(content, Object.assign(options, { files }));\n  },\n\n  /**\n   * Send a file to this channel.\n   * @param {BufferResolvable} attachment File to send\n   * @param {string} [name='file.jpg'] Name and extension of the file\n   * @param {StringResolvable} [content] Text for the message\n   * @param {MessageOptions} [options] Options for the message\n   * @returns {Promise<Message>}\n   * @deprecated\n   */\n  sendFile(attachment, name, content, options = {}) {\n    return this.send({ files: [{ attachment, name }], content, options });\n  },\n\n  /**\n   * Send a code block to this channel.\n   * @param {string} lang Language for the code block\n   * @param {StringResolvable} content Content of the code block\n   * @param {MessageOptions} [options] Options for the message\n   * @returns {Promise<Message|Message[]>}\n   * @deprecated\n   */\n  sendCode(lang, content, options = {}) {\n    return this.send(content, Object.assign(options, { code: lang }));\n  },\n};\n\nfor (const key of Object.keys(Deprecated)) {\n  TextBasedChannel.prototype[key] = util.deprecate(Deprecated[key], `TextChannel#${key}: use TextChannel#send instead`);\n}\n\nexports.applyToClass = (structure, full = false, ignore = []) => {\n  const props = ['send', 'sendMessage', 'sendEmbed', 'sendFile', 'sendFiles', 'sendCode'];\n  if (full) {\n    props.push(\n      '_cacheMessage',\n      'acknowledge',\n      'fetchMessages',\n      'fetchMessage',\n      'search',\n      'bulkDelete',\n      'startTyping',\n      'stopTyping',\n      'typing',\n      'typingCount',\n      'fetchPinnedMessages',\n      'createCollector',\n      'createMessageCollector',\n      'awaitMessages'\n    );\n  }\n  for (const prop of props) {\n    if (ignore.includes(prop)) continue;\n    Object.defineProperty(structure.prototype, prop, Object.getOwnPropertyDescriptor(TextBasedChannel.prototype, prop));\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/*!***********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Message.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Mentions = __webpack_require__(/*! ./MessageMentions */ 51);\nconst Attachment = __webpack_require__(/*! ./MessageAttachment */ 52);\nconst Embed = __webpack_require__(/*! ./MessageEmbed */ 53);\nconst RichEmbed = __webpack_require__(/*! ./RichEmbed */ 20);\nconst MessageReaction = __webpack_require__(/*! ./MessageReaction */ 54);\nconst ReactionCollector = __webpack_require__(/*! ./ReactionCollector */ 55);\nconst Util = __webpack_require__(/*! ../util/Util */ 4);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ 7);\nlet GuildMember;\n\n/**\n * Represents a message on Discord.\n */\nclass Message {\n  constructor(channel, data, client) {\n    /**\n     * The client that instantiated the Message\n     * @name Message#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The channel that the message was sent in\n     * @type {TextChannel|DMChannel|GroupDMChannel}\n     */\n    this.channel = channel;\n\n    if (data) this.setup(data);\n  }\n\n  setup(data) { // eslint-disable-line complexity\n    /**\n     * The ID of the message\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of the message\n     * @type {MessageType}\n     */\n    this.type = Constants.MessageTypes[data.type];\n\n    /**\n     * The content of the message\n     * @type {string}\n     */\n    this.content = data.content;\n\n    /**\n     * The author of the message\n     * @type {User}\n     */\n    this.author = this.client.dataManager.newUser(data.author);\n\n    /**\n     * Represents the author of the message as a guild member\n     * Only available if the message comes from a guild where the author is still a member\n     * @type {?GuildMember}\n     */\n    this.member = this.guild ? this.guild.member(this.author) || null : null;\n\n    /**\n     * Whether or not this message is pinned\n     * @type {boolean}\n     */\n    this.pinned = data.pinned;\n\n    /**\n     * Whether or not the message was Text-To-Speech\n     * @type {boolean}\n     */\n    this.tts = data.tts;\n\n    /**\n     * A random number or string used for checking message delivery\n     * @type {string}\n     */\n    this.nonce = data.nonce;\n\n    /**\n     * Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)\n     * @type {boolean}\n     */\n    this.system = data.type === 6;\n\n    /**\n     * A list of embeds in the message - e.g. YouTube Player\n     * @type {MessageEmbed[]}\n     */\n    this.embeds = data.embeds.map(e => new Embed(this, e));\n\n    /**\n     * A collection of attachments in the message - e.g. Pictures - mapped by their ID\n     * @type {Collection<Snowflake, MessageAttachment>}\n     */\n    this.attachments = new Collection();\n    for (const attachment of data.attachments) this.attachments.set(attachment.id, new Attachment(this, attachment));\n\n    /**\n     * The timestamp the message was sent at\n     * @type {number}\n     */\n    this.createdTimestamp = new Date(data.timestamp).getTime();\n\n    /**\n     * The timestamp the message was last edited at (if applicable)\n     * @type {?number}\n     */\n    this.editedTimestamp = data.edited_timestamp ? new Date(data.edited_timestamp).getTime() : null;\n\n    /**\n     * A collection of reactions to this message, mapped by the reaction ID\n     * @type {Collection<Snowflake, MessageReaction>}\n     */\n    this.reactions = new Collection();\n    if (data.reactions && data.reactions.length > 0) {\n      for (const reaction of data.reactions) {\n        const id = reaction.emoji.id ? `${reaction.emoji.name}:${reaction.emoji.id}` : reaction.emoji.name;\n        this.reactions.set(id, new MessageReaction(this, reaction.emoji, reaction.count, reaction.me));\n      }\n    }\n\n    /**\n     * All valid mentions that the message contains\n     * @type {MessageMentions}\n     */\n    this.mentions = new Mentions(this, data.mentions, data.mention_roles, data.mention_everyone);\n\n    /**\n     * ID of the webhook that sent the message, if applicable\n     * @type {?Snowflake}\n     */\n    this.webhookID = data.webhook_id || null;\n\n    /**\n     * Whether this message is a hit in a search\n     * @type {?boolean}\n     */\n    this.hit = typeof data.hit === 'boolean' ? data.hit : null;\n\n    /**\n     * The previous versions of the message, sorted with the most recent first\n     * @type {Message[]}\n     * @private\n     */\n    this._edits = [];\n  }\n\n  /**\n   * Updates the message.\n   * @param {Object} data Raw Discord message update data\n   * @private\n   */\n  patch(data) {\n    const clone = Util.cloneObject(this);\n    this._edits.unshift(clone);\n\n    this.editedTimestamp = new Date(data.edited_timestamp).getTime();\n    if ('content' in data) this.content = data.content;\n    if ('pinned' in data) this.pinned = data.pinned;\n    if ('tts' in data) this.tts = data.tts;\n    if ('embeds' in data) this.embeds = data.embeds.map(e => new Embed(this, e));\n    else this.embeds = this.embeds.slice();\n\n    if ('attachments' in data) {\n      this.attachments = new Collection();\n      for (const attachment of data.attachments) this.attachments.set(attachment.id, new Attachment(this, attachment));\n    } else {\n      this.attachments = new Collection(this.attachments);\n    }\n\n    this.mentions = new Mentions(\n      this,\n      'mentions' in data ? data.mentions : this.mentions.users,\n      'mentions_roles' in data ? data.mentions_roles : this.mentions.roles,\n      'mention_everyone' in data ? data.mention_everyone : this.mentions.everyone\n    );\n  }\n\n  /**\n   * The time the message was sent\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the message was last edited at (if applicable)\n   * @type {?Date}\n   * @readonly\n   */\n  get editedAt() {\n    return this.editedTimestamp ? new Date(this.editedTimestamp) : null;\n  }\n\n  /**\n   * The guild the message was sent in (if in a guild channel)\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.channel.guild || null;\n  }\n\n  /**\n   * The message contents with all mentions replaced by the equivalent text.\n   * If mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.\n   * @type {string}\n   * @readonly\n   */\n  get cleanContent() {\n    return this.content\n      .replace(/@(everyone|here)/g, '@\\u200b$1')\n      .replace(/<@!?[0-9]+>/g, input => {\n        const id = input.replace(/<|!|>|@/g, '');\n        if (this.channel.type === 'dm' || this.channel.type === 'group') {\n          return this.client.users.has(id) ? `@${this.client.users.get(id).username}` : input;\n        }\n\n        const member = this.channel.guild.members.get(id);\n        if (member) {\n          if (member.nickname) return `@${member.nickname}`;\n          return `@${member.user.username}`;\n        } else {\n          const user = this.client.users.get(id);\n          if (user) return `@${user.username}`;\n          return input;\n        }\n      })\n      .replace(/<#[0-9]+>/g, input => {\n        const channel = this.client.channels.get(input.replace(/<|#|>/g, ''));\n        if (channel) return `#${channel.name}`;\n        return input;\n      })\n      .replace(/<@&[0-9]+>/g, input => {\n        if (this.channel.type === 'dm' || this.channel.type === 'group') return input;\n        const role = this.guild.roles.get(input.replace(/<|@|>|&/g, ''));\n        if (role) return `@${role.name}`;\n        return input;\n      });\n  }\n\n  /**\n   * Creates a reaction collector.\n   * @param {CollectorFilter} filter The filter to apply\n   * @param {ReactionCollectorOptions} [options={}] Options to send to the collector\n   * @returns {ReactionCollector}\n   * @example\n   * // Create a reaction collector\n   * const filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'\n   * const collector = message.createReactionCollector(filter, { time: 15000 });\n   * collector.on('collect', r => console.log(`Collected ${r.emoji.name}`));\n   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));\n   */\n  createReactionCollector(filter, options = {}) {\n    return new ReactionCollector(this, filter, options);\n  }\n\n  /**\n   * An object containing the same properties as CollectorOptions, but a few more:\n   * @typedef {ReactionCollectorOptions} AwaitReactionsOptions\n   * @property {string[]} [errors] Stop/end reasons that cause the promise to reject\n   */\n\n  /**\n   * Similar to createMessageCollector but in promise form.\n   * Resolves with a collection of reactions that pass the specified filter.\n   * @param {CollectorFilter} filter The filter function to use\n   * @param {AwaitReactionsOptions} [options={}] Optional options to pass to the internal collector\n   * @returns {Promise<Collection<string, MessageReaction>>}\n   * @example\n   * // Create a reaction collector\n   * const filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someID'\n   * message.awaitReactions(filter, { time: 15000 })\n   *   .then(collected => console.log(`Collected ${collected.size} reactions`))\n   *   .catch(console.error);\n   */\n  awaitReactions(filter, options = {}) {\n    return new Promise((resolve, reject) => {\n      const collector = this.createReactionCollector(filter, options);\n      collector.once('end', (reactions, reason) => {\n        if (options.errors && options.errors.includes(reason)) reject(reactions);\n        else resolve(reactions);\n      });\n    });\n  }\n\n  /**\n   * An array of cached versions of the message, including the current version\n   * Sorted from latest (first) to oldest (last)\n   * @type {Message[]}\n   * @readonly\n   */\n  get edits() {\n    const copy = this._edits.slice();\n    copy.unshift(this);\n    return copy;\n  }\n\n  /**\n   * Whether the message is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    return this.author.id === this.client.user.id;\n  }\n\n  /**\n   * Whether the message is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    return this.author.id === this.client.user.id || (this.guild &&\n      this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_MESSAGES)\n    );\n  }\n\n  /**\n   * Whether the message is pinnable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get pinnable() {\n    return !this.guild ||\n      this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_MESSAGES);\n  }\n\n  /**\n   * Whether or not a user, channel or role is mentioned in this message.\n   * @param {GuildChannel|User|Role|string} data Either a guild channel, user or a role object, or a string representing\n   * the ID of any of these\n   * @returns {boolean}\n   */\n  isMentioned(data) {\n    data = data && data.id ? data.id : data;\n    return this.mentions.users.has(data) || this.mentions.channels.has(data) || this.mentions.roles.has(data);\n  }\n\n  /**\n   * Whether or not a guild member is mentioned in this message. Takes into account\n   * user mentions, role mentions, and @everyone/@here mentions.\n   * @param {GuildMember|User} member The member/user to check for a mention of\n   * @returns {boolean}\n   */\n  isMemberMentioned(member) {\n    // Lazy-loading is used here to get around a circular dependency that breaks things\n    if (!GuildMember) GuildMember = __webpack_require__(/*! ./GuildMember */ 18);\n    if (this.mentions.everyone) return true;\n    if (this.mentions.users.has(member.id)) return true;\n    if (member instanceof GuildMember && member.roles.some(r => this.mentions.roles.has(r.id))) return true;\n    return false;\n  }\n\n  /**\n   * Options that can be passed into editMessage.\n   * @typedef {Object} MessageEditOptions\n   * @property {Object} [embed] An embed to be added/edited\n   * @property {string|boolean} [code] Language for optional codeblock formatting to apply\n   */\n\n  /**\n   * Edit the content of the message.\n   * @param {StringResolvable} [content] The new content for the message\n   * @param {MessageEditOptions|RichEmbed} [options] The options to provide\n   * @returns {Promise<Message>}\n   * @example\n   * // Update the content of a message\n   * message.edit('This is my new content!')\n   *   .then(msg => console.log(`New message content: ${msg}`))\n   *   .catch(console.error);\n   */\n  edit(content, options) {\n    if (!options && typeof content === 'object' && !(content instanceof Array)) {\n      options = content;\n      content = '';\n    } else if (!options) {\n      options = {};\n    }\n    if (options instanceof RichEmbed) options = { embed: options };\n    return this.client.rest.methods.updateMessage(this, content, options);\n  }\n\n  /**\n   * Edit the content of the message, with a code block.\n   * @param {string} lang The language for the code block\n   * @param {StringResolvable} content The new content for the message\n   * @returns {Promise<Message>}\n   * @deprecated\n   */\n  editCode(lang, content) {\n    content = Util.escapeMarkdown(this.client.resolver.resolveString(content), true);\n    return this.edit(`\\`\\`\\`${lang || ''}\\n${content}\\n\\`\\`\\``);\n  }\n\n  /**\n   * Pins this message to the channel's pinned messages.\n   * @returns {Promise<Message>}\n   */\n  pin() {\n    return this.client.rest.methods.pinMessage(this);\n  }\n\n  /**\n   * Unpins this message from the channel's pinned messages.\n   * @returns {Promise<Message>}\n   */\n  unpin() {\n    return this.client.rest.methods.unpinMessage(this);\n  }\n\n  /**\n   * Add a reaction to the message.\n   * @param {string|Emoji|ReactionEmoji} emoji The emoji to react with\n   * @returns {Promise<MessageReaction>}\n   * @example\n   * // React to a message with a unicode emoji\n   * message.react('🤔')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // React to a message with a custom emoji\n   * message.react(message.guild.emojis.get('123456789012345678'))\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  react(emoji) {\n    emoji = this.client.resolver.resolveEmojiIdentifier(emoji);\n    if (!emoji) throw new TypeError('Emoji must be a string or Emoji/ReactionEmoji');\n\n    return this.client.rest.methods.addMessageReaction(this, emoji);\n  }\n\n  /**\n   * Remove all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n  clearReactions() {\n    return this.client.rest.methods.removeMessageReactions(this);\n  }\n\n  /**\n   * Deletes the message.\n   * @param {number} [timeout=0] How long to wait to delete the message in milliseconds\n   * @returns {Promise<Message>}\n   * @example\n   * // Delete a message\n   * message.delete()\n   *   .then(msg => console.log(`Deleted message from ${msg.author.username}`))\n   *   .catch(console.error);\n   */\n  delete(timeout = 0) {\n    if (timeout <= 0) {\n      return this.client.rest.methods.deleteMessage(this);\n    } else {\n      return new Promise(resolve => {\n        this.client.setTimeout(() => {\n          resolve(this.delete());\n        }, timeout);\n      });\n    }\n  }\n\n  /**\n   * Reply to the message.\n   * @param {StringResolvable} [content] The content for the message\n   * @param {MessageOptions} [options] The options to provide\n   * @returns {Promise<Message|Message[]>}\n   * @example\n   * // Reply to a message\n   * message.reply('Hey, I\\'m a reply!')\n   *   .then(sent => console.log(`Sent a reply to ${sent.author.username}`))\n   *   .catch(console.error);\n   */\n  reply(content, options) {\n    if (!options && typeof content === 'object' && !(content instanceof Array)) {\n      options = content;\n      content = '';\n    } else if (!options) {\n      options = {};\n    }\n    return this.channel.send(content, Object.assign(options, { reply: this.member || this.author }));\n  }\n\n  /**\n   * Marks the message as read.\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<Message>}\n   */\n  acknowledge() {\n    return this.client.rest.methods.ackMessage(this);\n  }\n\n  /**\n   * Fetches the webhook used to create this message.\n   * @returns {Promise<?Webhook>}\n   */\n  fetchWebhook() {\n    if (!this.webhookID) return Promise.reject(new Error('The message was not sent by a webhook.'));\n    return this.client.fetchWebhook(this.webhookID);\n  }\n\n  /**\n   * Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\n   * without checking all the properties, use `message.id === message2.id`, which is much more efficient. This\n   * method allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.\n   * @param {Message} message The message to compare it to\n   * @param {Object} rawData Raw data passed through the WebSocket about this message\n   * @returns {boolean}\n   */\n  equals(message, rawData) {\n    if (!message) return false;\n    const embedUpdate = !message.author && !message.attachments;\n    if (embedUpdate) return this.id === message.id && this.embeds.length === message.embeds.length;\n\n    let equal = this.id === message.id &&\n        this.author.id === message.author.id &&\n        this.content === message.content &&\n        this.tts === message.tts &&\n        this.nonce === message.nonce &&\n        this.embeds.length === message.embeds.length &&\n        this.attachments.length === message.attachments.length;\n\n    if (equal && rawData) {\n      equal = this.mentions.everyone === message.mentions.everyone &&\n        this.createdTimestamp === new Date(rawData.timestamp).getTime() &&\n        this.editedTimestamp === new Date(rawData.edited_timestamp).getTime();\n    }\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the message's content instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Message: This is a message!\n   * console.log(`Message: ${message}`);\n   */\n  toString() {\n    return this.content;\n  }\n\n  _addReaction(emoji, user) {\n    const emojiID = emoji.id ? `${emoji.name}:${emoji.id}` : emoji.name;\n    let reaction;\n    if (this.reactions.has(emojiID)) {\n      reaction = this.reactions.get(emojiID);\n      if (!reaction.me) reaction.me = user.id === this.client.user.id;\n    } else {\n      reaction = new MessageReaction(this, emoji, 0, user.id === this.client.user.id);\n      this.reactions.set(emojiID, reaction);\n    }\n    if (!reaction.users.has(user.id)) {\n      reaction.users.set(user.id, user);\n      reaction.count++;\n    }\n    return reaction;\n  }\n\n  _removeReaction(emoji, user) {\n    const emojiID = emoji.id ? `${emoji.name}:${emoji.id}` : emoji.name;\n    if (this.reactions.has(emojiID)) {\n      const reaction = this.reactions.get(emojiID);\n      if (reaction.users.has(user.id)) {\n        reaction.users.delete(user.id);\n        reaction.count--;\n        if (user.id === this.client.user.id) reaction.me = false;\n        if (reaction.count <= 0) this.reactions.delete(emojiID);\n        return reaction;\n      }\n    }\n    return null;\n  }\n\n  _clearReactions() {\n    this.reactions.clear();\n  }\n}\n\nmodule.exports = Message;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/*!*********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Emoji.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ 6);\n\n/**\n * Represents a custom emoji.\n */\nclass Emoji {\n  constructor(guild, data) {\n    /**\n     * The client that instantiated this object\n     * @name Emoji#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: guild.client });\n\n    /**\n     * The guild this emoji is part of\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of the emoji\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the emoji\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * Whether or not this emoji requires colons surrounding it\n     * @type {boolean}\n     */\n    this.requiresColons = data.require_colons;\n\n    /**\n     * Whether this emoji is managed by an external service\n     * @type {boolean}\n     */\n    this.managed = data.managed;\n\n    /**\n     * Whether this emoji is animated\n     * @type {boolean}\n     */\n    this.animated = data.animated;\n\n    this._roles = data.roles;\n  }\n\n  /**\n   * The timestamp the emoji was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the emoji was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A collection of roles this emoji is active for (empty if all), mapped by role ID\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get roles() {\n    const roles = new Collection();\n    for (const role of this._roles) {\n      if (this.guild.roles.has(role)) roles.set(role, this.guild.roles.get(role));\n    }\n    return roles;\n  }\n\n  /**\n   * The URL to the emoji file\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return Constants.Endpoints.CDN(this.client.options.http.cdn).Emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * Data for editing an emoji.\n   * @typedef {Object} EmojiEditData\n   * @property {string} [name] The name of the emoji\n   * @property {Collection<Snowflake, Role>|Array<Snowflake|Role>} [roles] Roles to restrict emoji to\n   */\n\n  /**\n   * Edits the emoji.\n   * @param {EmojiEditData} data The new data for the emoji\n   * @param {string} [reason] Reason for editing this emoji\n   * @returns {Promise<Emoji>}\n   * @example\n   * // Edit an emoji\n   * emoji.edit({name: 'newemoji'})\n   *   .then(e => console.log(`Edited emoji ${e}`))\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    return this.client.rest.methods.updateEmoji(this, data, reason);\n  }\n\n  /**\n   * Set the name of the emoji.\n   * @param {string} name The new name for the emoji\n   * @param {string} [reason] The reason for changing the emoji's name\n   * @returns {Promise<Emoji>}\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Add a role to the list of roles that can use this emoji.\n   * @param {Role} role The role to add\n   * @returns {Promise<Emoji>}\n   */\n  addRestrictedRole(role) {\n    return this.addRestrictedRoles([role]);\n  }\n\n  /**\n   * Add multiple roles to the list of roles that can use this emoji.\n   * @param {Role[]} roles Roles to add\n   * @returns {Promise<Emoji>}\n   */\n  addRestrictedRoles(roles) {\n    const newRoles = new Collection(this.roles);\n    for (const role of roles) {\n      if (this.guild.roles.has(role.id)) newRoles.set(role.id, role);\n    }\n    return this.edit({ roles: newRoles });\n  }\n\n  /**\n   * Remove a role from the list of roles that can use this emoji.\n   * @param {Role} role The role to remove\n   * @returns {Promise<Emoji>}\n   */\n  removeRestrictedRole(role) {\n    return this.removeRestrictedRoles([role]);\n  }\n\n  /**\n   * Remove multiple roles from the list of roles that can use this emoji.\n   * @param {Role[]} roles Roles to remove\n   * @returns {Promise<Emoji>}\n   */\n  removeRestrictedRoles(roles) {\n    const newRoles = new Collection(this.roles);\n    for (const role of roles) {\n      if (newRoles.has(role.id)) newRoles.delete(role.id);\n    }\n    return this.edit({ roles: newRoles });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the emoji mention rather than the object.\n   * @returns {string}\n   * @example\n   * // Send an emoji:\n   * const emoji = guild.emojis.first();\n   * msg.reply(`Hello! ${emoji}`);\n   */\n  toString() {\n    if (!this.id || !this.requiresColons) {\n      return this.name;\n    }\n\n    return `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>`;\n  }\n\n  /**\n   * Whether this emoji is the same as another one.\n   * @param {Emoji|Object} other The emoji to compare it to\n   * @returns {boolean} Whether the emoji is equal to the given emoji or not\n   */\n  equals(other) {\n    if (other instanceof Emoji) {\n      return (\n        other.id === this.id &&\n        other.name === this.name &&\n        other.managed === this.managed &&\n        other.requiresColons === this.requiresColons\n      );\n    } else {\n      return (\n        other.id === this.id &&\n        other.name === this.name\n      );\n    }\n  }\n}\n\nmodule.exports = Emoji;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildMember.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const TextBasedChannel = __webpack_require__(/*! ./interfaces/TextBasedChannel */ 15);\nconst Role = __webpack_require__(/*! ./Role */ 10);\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ 7);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst Presence = __webpack_require__(/*! ./Presence */ 12).Presence;\nconst util = __webpack_require__(/*! util */ 9);\n\n/**\n * Represents a member of a guild on Discord.\n * @implements {TextBasedChannel}\n */\nclass GuildMember {\n  constructor(guild, data) {\n    /**\n     * The client that instantiated this GuildMember\n     * @name GuildMember#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: guild.client });\n\n    /**\n     * The guild that this member is part of\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The user that this guild member instance Represents\n     * @type {User}\n     */\n    this.user = {};\n\n    this._roles = [];\n    if (data) this.setup(data);\n\n    /**\n     * The ID of the last message sent by the member in their guild, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageID = null;\n\n    /**\n     * The Message object of the last message sent by the member in their guild, if one was sent\n     * @type {?Message}\n     */\n    this.lastMessage = null;\n  }\n\n  setup(data) {\n    /**\n     * Whether this member is deafened server-wide\n     * @type {boolean}\n     */\n    this.serverDeaf = data.deaf;\n\n    /**\n     * Whether this member is muted server-wide\n     * @type {boolean}\n     */\n    this.serverMute = data.mute;\n\n    /**\n     * Whether this member is self-muted\n     * @type {boolean}\n     */\n    this.selfMute = data.self_mute;\n\n    /**\n     * Whether this member is self-deafened\n     * @type {boolean}\n     */\n    this.selfDeaf = data.self_deaf;\n\n    /**\n     * The voice session ID of this member, if any\n     * @type {?Snowflake}\n     */\n    this.voiceSessionID = data.session_id;\n\n    /**\n     * The voice channel ID of this member, if any\n     * @type {?Snowflake}\n     */\n    this.voiceChannelID = data.channel_id;\n\n    /**\n     * Whether this member is speaking\n     * @type {boolean}\n     */\n    this.speaking = false;\n\n    /**\n     * The nickname of this guild member, if they have one\n     * @type {?string}\n     */\n    this.nickname = data.nick || null;\n\n    /**\n     * The timestamp the member joined the guild at\n     * @type {number}\n     */\n    this.joinedTimestamp = new Date(data.joined_at).getTime();\n\n    this.user = data.user;\n    this._roles = data.roles;\n  }\n\n  /**\n   * The time the member joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The presence of this guild member\n   * @type {Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.frozenPresence || this.guild.presences.get(this.id) || new Presence();\n  }\n\n  /**\n   * A list of roles that are applied to this GuildMember, mapped by the role ID\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get roles() {\n    const list = new Collection();\n    const everyoneRole = this.guild.roles.get(this.guild.id);\n\n    if (everyoneRole) list.set(everyoneRole.id, everyoneRole);\n\n    for (const roleID of this._roles) {\n      const role = this.guild.roles.get(roleID);\n      if (role) list.set(role.id, role);\n    }\n\n    return list;\n  }\n\n  /**\n   * The role of the member with the highest position\n   * @type {Role}\n   * @readonly\n   */\n  get highestRole() {\n    return this.roles.reduce((prev, role) => !prev || role.comparePositionTo(prev) > 0 ? role : prev);\n  }\n\n  /**\n   * The role of the member used to set their color\n   * @type {?Role}\n   * @readonly\n   */\n  get colorRole() {\n    const coloredRoles = this.roles.filter(role => role.color);\n    if (!coloredRoles.size) return null;\n    return coloredRoles.reduce((prev, role) => !prev || role.comparePositionTo(prev) > 0 ? role : prev);\n  }\n\n  /**\n   * The displayed color of the member in base 10\n   * @type {number}\n   * @readonly\n   */\n  get displayColor() {\n    const role = this.colorRole;\n    return (role && role.color) || 0;\n  }\n\n  /**\n   * The displayed color of the member in hexadecimal\n   * @type {string}\n   * @readonly\n   */\n  get displayHexColor() {\n    const role = this.colorRole;\n    return (role && role.hexColor) || '#000000';\n  }\n\n  /**\n   * The role of the member used to hoist them in a separate category in the users list\n   * @type {?Role}\n   * @readonly\n   */\n  get hoistRole() {\n    const hoistedRoles = this.roles.filter(role => role.hoist);\n    if (!hoistedRoles.size) return null;\n    return hoistedRoles.reduce((prev, role) => !prev || role.comparePositionTo(prev) > 0 ? role : prev);\n  }\n\n  /**\n   * Whether this member is muted in any way\n   * @type {boolean}\n   * @readonly\n   */\n  get mute() {\n    return this.selfMute || this.serverMute;\n  }\n\n  /**\n   * Whether this member is deafened in any way\n   * @type {boolean}\n   * @readonly\n   */\n  get deaf() {\n    return this.selfDeaf || this.serverDeaf;\n  }\n\n  /**\n   * The voice channel this member is in, if any\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get voiceChannel() {\n    return this.guild.channels.get(this.voiceChannelID);\n  }\n\n  /**\n   * The ID of this user\n   * @type {Snowflake}\n   * @readonly\n   */\n  get id() {\n    return this.user.id;\n  }\n\n  /**\n   * The nickname of the member, or their username if they don't have one\n   * @type {string}\n   * @readonly\n   */\n  get displayName() {\n    return this.nickname || this.user.username;\n  }\n\n  /**\n   * The overall set of permissions for the guild member, taking only roles into account\n   * @type {Permissions}\n   * @readonly\n   */\n  get permissions() {\n    if (this.user.id === this.guild.ownerID) return new Permissions(this, Permissions.ALL);\n\n    let permissions = 0;\n    const roles = this.roles;\n    for (const role of roles.values()) permissions |= role.permissions;\n\n    return new Permissions(this, permissions);\n  }\n\n  /**\n   * Whether the member is kickable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get kickable() {\n    if (this.user.id === this.guild.ownerID) return false;\n    if (this.user.id === this.client.user.id) return false;\n    const clientMember = this.guild.member(this.client.user);\n    if (!clientMember.permissions.has(Permissions.FLAGS.KICK_MEMBERS)) return false;\n    return clientMember.highestRole.comparePositionTo(this.highestRole) > 0;\n  }\n\n  /**\n   * Whether the member is bannable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get bannable() {\n    if (this.user.id === this.guild.ownerID) return false;\n    if (this.user.id === this.client.user.id) return false;\n    const clientMember = this.guild.member(this.client.user);\n    if (!clientMember.permissions.has(Permissions.FLAGS.BAN_MEMBERS)) return false;\n    return clientMember.highestRole.comparePositionTo(this.highestRole) > 0;\n  }\n\n  /**\n   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\n   * taking into account roles and permission overwrites.\n   * @param {ChannelResolvable} channel The guild channel to use as context\n   * @returns {?Permissions}\n   */\n  permissionsIn(channel) {\n    channel = this.client.resolver.resolveChannel(channel);\n    if (!channel || !channel.guild) throw new Error('Could not resolve channel to a guild channel.');\n    return channel.permissionsFor(this);\n  }\n\n  /**\n   * Checks if any of the member's roles have a permission.\n   * @param {PermissionResolvable|PermissionResolvable[]} permission Permission(s) to check for\n   * @param {boolean} [explicit=false] Whether to require the role to explicitly have the exact permission\n   * **(deprecated)**\n   * @param {boolean} [checkAdmin] Whether to allow the administrator permission to override\n   * (takes priority over `explicit`)\n   * @param {boolean} [checkOwner] Whether to allow being the guild's owner to override\n   * (takes priority over `explicit`)\n   * @returns {boolean}\n   */\n  hasPermission(permission, explicit = false, checkAdmin, checkOwner) {\n    if (typeof checkAdmin === 'undefined') checkAdmin = !explicit;\n    if (typeof checkOwner === 'undefined') checkOwner = !explicit;\n    if (checkOwner && this.user.id === this.guild.ownerID) return true;\n    return this.roles.some(r => r.hasPermission(permission, undefined, checkAdmin));\n  }\n\n  /**\n   * Checks whether the roles of the member allows them to perform specific actions.\n   * @param {PermissionResolvable[]} permissions The permissions to check for\n   * @param {boolean} [explicit=false] Whether to require the member to explicitly have the exact permissions\n   * @returns {boolean}\n   * @deprecated\n   */\n  hasPermissions(permissions, explicit = false) {\n    if (!explicit && this.user.id === this.guild.ownerID) return true;\n    return this.hasPermission(permissions, explicit);\n  }\n\n  /**\n   * Checks whether the roles of the member allows them to perform specific actions, and lists any missing permissions.\n   * @param {PermissionResolvable[]} permissions The permissions to check for\n   * @param {boolean} [explicit=false] Whether to require the member to explicitly have the exact permissions\n   * @returns {PermissionResolvable[]}\n   */\n  missingPermissions(permissions, explicit = false) {\n    return this.permissions.missing(permissions, explicit);\n  }\n\n  /**\n   * The data for editing a guild member.\n   * @typedef {Object} GuildMemberEditData\n   * @property {string} [nick] The nickname to set for the member\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles or role IDs to apply\n   * @property {boolean} [mute] Whether or not the member should be muted\n   * @property {boolean} [deaf] Whether or not the member should be deafened\n   * @property {ChannelResolvable} [channel] Channel to move member to (if they are connected to voice)\n   */\n\n  /**\n   * Edit a guild member.\n   * @param {GuildMemberEditData} data The data to edit the member with\n   * @param {string} [reason] Reason for editing this user\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Set a member's nickname and clear their roles\n   * message.member.edit({\n   *   nick: 'Cool Name',\n   *   roles: []\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    return this.client.rest.methods.updateGuildMember(this, data, reason);\n  }\n\n  /**\n   * Mute/unmute a user.\n   * @param {boolean} mute Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Mute a member with a reason\n   * message.member.setMute(true, 'It needed to be done')\n   *   .then(() => console.log(`Muted ${message.member.displayName}`)))\n   *   .catch(console.error);\n   */\n  setMute(mute, reason) {\n    return this.edit({ mute }, reason);\n  }\n\n  /**\n   * Deafen/undeafen a user.\n   * @param {boolean} deaf Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Deafen a member\n   * message.member.setDeaf(true)\n   *   .then(() => console.log(`Deafened ${message.member.displayName}`))\n   *   .catch(console.error);\n   */\n  setDeaf(deaf, reason) {\n    return this.edit({ deaf }, reason);\n  }\n\n  /**\n   * Moves the guild member to the given channel.\n   * @param {ChannelResolvable} channel The channel to move the member to\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Moves a member to a voice channel\n   * member.setVoiceChannel('174674066072928256')\n   *   .then(() => console.log(`Moved ${member.displayName}`))\n   *   .catch(console.error);\n   */\n  setVoiceChannel(channel) {\n    return this.edit({ channel });\n  }\n\n  /**\n   * Sets the roles applied to the member.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to apply\n   * @param {string} [reason] Reason for applying the roles\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Set the member's roles to a single role\n   * guildMember.setRoles(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all of the member's roles\n   * guildMember.setRoles([])\n   *   .then(member => console.log(`${member.displayName} now has ${member.roles.size} roles`))\n   *   .catch(console.error);\n   */\n  setRoles(roles, reason) {\n    return this.edit({ roles }, reason);\n  }\n\n  /**\n   * Adds a single role to the member.\n   * @param {RoleResolvable} role The role or ID of the role to add\n   * @param {string} [reason] Reason for adding the role\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Give a role to a member\n   * message.member.addRole('193654001089118208')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  addRole(role, reason) {\n    if (!(role instanceof Role)) role = this.guild.roles.get(role);\n    if (!role) return Promise.reject(new TypeError('Supplied parameter was neither a Role nor a Snowflake.'));\n    return this.client.rest.methods.addMemberRole(this, role, reason);\n  }\n\n  /**\n   * Adds multiple roles to the member.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to add\n   * @param {string} [reason] Reason for adding the roles\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Gives a member a few roles\n   * message.member.addRoles(['193654001089118208', '369308579892690945'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  addRoles(roles, reason) {\n    let allRoles;\n    if (roles instanceof Collection) {\n      allRoles = this._roles.slice();\n      for (const role of roles.values()) allRoles.push(role.id);\n    } else {\n      allRoles = this._roles.concat(roles);\n    }\n    return this.edit({ roles: allRoles }, reason);\n  }\n\n  /**\n   * Removes a single role from the member.\n   * @param {RoleResolvable} role The role or ID of the role to remove\n   * @param {string} [reason] Reason for removing the role\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Remove a role from a member\n   * message.member.removeRole('193654001089118208')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  removeRole(role, reason) {\n    if (!(role instanceof Role)) role = this.guild.roles.get(role);\n    if (!role) return Promise.reject(new TypeError('Supplied parameter was neither a Role nor a Snowflake.'));\n    return this.client.rest.methods.removeMemberRole(this, role, reason);\n  }\n\n  /**\n   * Removes multiple roles from the member.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role IDs to remove\n   * @param {string} [reason] Reason for removing the roles\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Removes a few roles from the member\n   * message.member.removeRoles(['193654001089118208', '369308579892690945'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  removeRoles(roles, reason) {\n    const allRoles = this._roles.slice();\n    if (roles instanceof Collection) {\n      for (const role of roles.values()) {\n        const index = allRoles.indexOf(role.id);\n        if (index >= 0) allRoles.splice(index, 1);\n      }\n    } else {\n      for (const role of roles) {\n        const index = allRoles.indexOf(role instanceof Role ? role.id : role);\n        if (index >= 0) allRoles.splice(index, 1);\n      }\n    }\n    return this.edit({ roles: allRoles }, reason);\n  }\n\n  /**\n   * Set the nickname for the guild member.\n   * @param {string} nick The nickname for the guild member\n   * @param {string} [reason] Reason for setting the nickname\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Update the member's nickname\n   * message.member.setNickname('Cool Name')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  setNickname(nick, reason) {\n    return this.edit({ nick }, reason);\n  }\n\n  /**\n   * Creates a DM channel between the client and the member.\n   * @returns {Promise<DMChannel>}\n   */\n  createDM() {\n    return this.user.createDM();\n  }\n\n  /**\n   * Deletes any DMs with this guild member.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.user.deleteDM();\n  }\n\n  /**\n   * Kick this member from the guild.\n   * @param {string} [reason] Reason for kicking user\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Kick a member\n   * member.kick()\n   *   .then(() => console.log(`Kicked ${member.displayName}`))\n   *   .catch(console.error);\n   */\n  kick(reason) {\n    return this.client.rest.methods.kickGuildMember(this.guild, this, reason);\n  }\n\n  /**\n   * Ban this guild member.\n   * @param {Object|number|string} [options] Ban options. If a number, the number of days to delete messages for, if a\n   * string, the ban reason. Supplying an object allows you to do both.\n   * @param {number} [options.days=0] Number of days of messages to delete\n   * @param {string} [options.reason] Reason for banning\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Ban a guild member\n   * member.ban(7)\n   *   .then(() => console.log(`Banned ${member.displayName}`))\n   *   .catch(console.error);\n   */\n  ban(options) {\n    return this.guild.ban(this, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the user's mention instead of the Member object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789>!\n   * console.log(`Hello from ${member}!`);\n   */\n  toString() {\n    return `<@${this.nickname ? '!' : ''}${this.user.id}>`;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n  sendMessage() {}\n  sendEmbed() {}\n  sendFile() {}\n  sendCode() {}\n}\n\nTextBasedChannel.applyToClass(GuildMember);\n\nGuildMember.prototype.hasPermissions = util.deprecate(GuildMember.prototype.hasPermissions,\n  'GuildMember#hasPermissions is deprecated - use GuildMember#hasPermission, it now takes an array');\n\nmodule.exports = GuildMember;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildChannel.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Channel = __webpack_require__(/*! ./Channel */ 13);\nconst Role = __webpack_require__(/*! ./Role */ 10);\nconst PermissionOverwrites = __webpack_require__(/*! ./PermissionOverwrites */ 62);\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ 7);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst Constants = __webpack_require__(/*! ../util/Constants */ 0);\n\n/**\n * Represents a guild channel (i.e. text channels and voice channels).\n * @extends {Channel}\n */\nclass GuildChannel extends Channel {\n  constructor(guild, data) {\n    super(guild.client, data);\n\n    /**\n     * The guild the channel is in\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The name of the guild channel\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The position of the channel in the list\n     * @type {number}\n     */\n    this.position = data.position;\n\n    /**\n     * The ID of the category parent of this channel\n     * @type {?Snowflake}\n     */\n    this.parentID = data.parent_id;\n\n    /**\n     * A map of permission overwrites in this channel for roles and users\n     * @type {Collection<Snowflake, PermissionOverwrites>}\n     */\n    this.permissionOverwrites = new Collection();\n    if (data.permission_overwrites) {\n      for (const overwrite of data.permission_overwrites) {\n        this.permissionOverwrites.set(overwrite.id, new PermissionOverwrites(this, overwrite));\n      }\n    }\n  }\n\n  /**\n   * The position of the channel\n   * @type {number}\n   * @readonly\n   */\n  get calculatedPosition() {\n    const sorted = this.guild._sortedChannels(this.type);\n    return sorted.array().indexOf(sorted.get(this.id));\n  }\n\n  /**\n   * The category parent of this channel\n   * @type {?CategoryChannel}\n   * @readonly\n   */\n  get parent() {\n    return this.guild.channels.get(this.parentID) || null;\n  }\n\n  /**\n   * Gets the overall set of permissions for a user in this channel, taking into account roles and permission\n   * overwrites.\n   * @param {GuildMemberResolvable} member The user that you want to obtain the overall permissions for\n   * @returns {?Permissions}\n   */\n  permissionsFor(member) {\n    member = this.client.resolver.resolveGuildMember(this.guild, member);\n    if (!member) return null;\n    if (member.id === this.guild.ownerID) return new Permissions(member, Permissions.ALL);\n\n    let permissions = 0;\n\n    const roles = member.roles;\n    for (const role of roles.values()) permissions |= role.permissions;\n\n    const admin = Boolean(permissions & Permissions.FLAGS.ADMINISTRATOR);\n    if (admin) return new Permissions(Permissions.ALL);\n\n    const overwrites = this.overwritesFor(member, true, roles);\n\n    if (overwrites.everyone) {\n      permissions &= ~overwrites.everyone.deny;\n      permissions |= overwrites.everyone.allow;\n    }\n\n    let allow = 0;\n    for (const overwrite of overwrites.roles) {\n      permissions &= ~overwrite.deny;\n      allow |= overwrite.allow;\n    }\n    permissions |= allow;\n\n    if (overwrites.member) {\n      permissions &= ~overwrites.member.deny;\n      permissions |= overwrites.member.allow;\n    }\n\n    return new Permissions(member, permissions);\n  }\n\n  overwritesFor(member, verified = false, roles = null) {\n    if (!verified) member = this.client.resolver.resolveGuildMember(this.guild, member);\n    if (!member) return [];\n\n    roles = roles || member.roles;\n    const roleOverwrites = [];\n    let memberOverwrites;\n    let everyoneOverwrites;\n\n    for (const overwrite of this.permissionOverwrites.values()) {\n      if (overwrite.id === this.guild.id) {\n        everyoneOverwrites = overwrite;\n      } else if (roles.has(overwrite.id)) {\n        roleOverwrites.push(overwrite);\n      } else if (overwrite.id === member.id) {\n        memberOverwrites = overwrite;\n      }\n    }\n\n    return {\n      everyone: everyoneOverwrites,\n      roles: roleOverwrites,\n      member: memberOverwrites,\n    };\n  }\n\n  /**\n   * An object mapping permission flags to `true` (enabled) or `false` (disabled).\n   * ```js\n   * {\n   *  'SEND_MESSAGES': true,\n   *  'ATTACH_FILES': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * Overwrites the permissions for a user or role in this channel.\n   * @param {Role|Snowflake|UserResolvable} userOrRole The user or role to update\n   * @param {PermissionOverwriteOptions} options The configuration for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Overwrite permissions for a message author\n   * message.channel.overwritePermissions(message.author, {\n   *   SEND_MESSAGES: false\n   * })\n   *   .then(updated => console.log(updated.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  overwritePermissions(userOrRole, options, reason) {\n    const payload = {\n      allow: 0,\n      deny: 0,\n    };\n\n    if (userOrRole instanceof Role) {\n      payload.type = 'role';\n    } else if (this.guild.roles.has(userOrRole)) {\n      userOrRole = this.guild.roles.get(userOrRole);\n      payload.type = 'role';\n    } else {\n      userOrRole = this.client.resolver.resolveUser(userOrRole);\n      payload.type = 'member';\n      if (!userOrRole) return Promise.reject(new TypeError('Supplied parameter was neither a User nor a Role.'));\n    }\n\n    payload.id = userOrRole.id;\n\n    const prevOverwrite = this.permissionOverwrites.get(userOrRole.id);\n\n    if (prevOverwrite) {\n      payload.allow = prevOverwrite.allow;\n      payload.deny = prevOverwrite.deny;\n    }\n\n    for (const perm in options) {\n      if (options[perm] === true) {\n        payload.allow |= Permissions.FLAGS[perm] || 0;\n        payload.deny &= ~(Permissions.FLAGS[perm] || 0);\n      } else if (options[perm] === false) {\n        payload.allow &= ~(Permissions.FLAGS[perm] || 0);\n        payload.deny |= Permissions.FLAGS[perm] || 0;\n      } else if (options[perm] === null) {\n        payload.allow &= ~(Permissions.FLAGS[perm] || 0);\n        payload.deny &= ~(Permissions.FLAGS[perm] || 0);\n      }\n    }\n\n    return this.client.rest.methods.setChannelOverwrite(this, payload, reason).then(() => this);\n  }\n\n  /**\n   * The data for a guild channel.\n   * @typedef {Object} ChannelData\n   * @property {string} [name] The name of the channel\n   * @property {number} [position] The position of the channel\n   * @property {string} [topic] The topic of the text channel\n   * @property {number} [bitrate] The bitrate of the voice channel\n   * @property {number} [userLimit] The user limit of the channel\n   */\n\n  /**\n   * Edits the channel.\n   * @param {ChannelData} data The new data for the channel\n   * @param {string} [reason] Reason for editing this channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Edit a channel\n   * channel.edit({ name: 'new-channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    return this.client.rest.methods.updateChannel(this, data, reason).then(() => this);\n  }\n\n  /**\n   * Set a new name for the guild channel.\n   * @param {string} name The new name for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's name\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel name\n   * channel.setName('not_general')\n   *   .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Set a new position for the guild channel.\n   * @param {number} position The new position for the guild channel\n   * @param {boolean} [relative=false] Move the position relative to its current value\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel position\n   * channel.setPosition(2)\n   *   .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n   *   .catch(console.error);\n   */\n  setPosition(position, relative) {\n    return this.guild.setChannelPosition(this, position, relative);\n  }\n\n  /**\n   * Set a new parent for the guild channel.\n   * @param {CategoryChannel|SnowFlake} parent The new parent for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's parent\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Sets the parent of a channel\n   * channel.setParent('174674066072928256')\n   *   .then(updated => console.log(`Set the category of ${updated.name} to ${updated.parent.name}`))\n   *   .catch(console.error);\n   */\n  setParent(parent, reason) {\n    parent = this.client.resolver.resolveChannelID(parent);\n    return this.edit({ parent }, reason);\n  }\n\n  /**\n   * Set a new topic for the guild channel.\n   * @param {string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel topic\n   * channel.setTopic('Needs more rate limiting')\n   *   .then(updated => console.log(`Channel's new topic is ${updated.topic}`))\n   *   .catch(console.error);\n   */\n  setTopic(topic, reason) {\n    return this.edit({ topic }, reason);\n  }\n\n  /**\n   * Create an invite to this guild channel.\n   * <warn>This is only available when using a bot account.</warn>\n   * @param {Object} [options={}] Options for the invite\n   * @param {boolean} [options.temporary=false] Whether members that joined via the invite should be automatically\n   * kicked after 24 hours if they have not yet received a role\n   * @param {number} [options.maxAge=86400] How long the invite should last (in seconds, 0 for forever)\n   * @param {number} [options.maxUses=0] Maximum number of uses\n   * @param {boolean} [options.unique=false] Create a unique invite, or use an existing one with similar settings\n   * @param {string} [reason] Reason for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options = {}, reason) {\n    return this.client.rest.methods.createChannelInvite(this, options, reason);\n  }\n\n  /**\n   * Clone this channel.\n   * @param {string} [name=this.name] Optional name for the new channel, otherwise it has the name of this channel\n   * @param {boolean} [withPermissions=true] Whether to clone the channel with this channel's permission overwrites\n   * @param {boolean} [withTopic=true] Whether to clone the channel with this channel's topic\n   * @param {string} [reason] Reason for cloning this channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Clone a channel\n   * channel.clone(undefined, true, false, 'Needed a clone')\n   *   .then(clone => console.log(`Cloned ${channel.name} to make a channel called ${clone.name}`))\n   *   .catch(console.error);\n   */\n  clone(name = this.name, withPermissions = true, withTopic = true, reason) {\n    return this.guild.createChannel(name, this.type, withPermissions ? this.permissionOverwrites : [], reason)\n      .then(channel => withTopic ? channel.setTopic(this.topic) : channel);\n  }\n\n  /**\n   * Deletes this channel.\n   * @param {string} [reason] Reason for deleting this channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Delete the channel\n   * channel.delete('Making room for new channels')\n   *   .then(deleted => console.log(`Deleted ${deleted.name} to make room for new channels`))\n   *   .catch(console.error);\n   */\n  delete(reason) {\n    return this.client.rest.methods.deleteChannel(this, reason);\n  }\n\n  /**\n   * Checks if this channel has the same type, topic, position, name, overwrites and ID as another channel.\n   * In most cases, a simple `channel.id === channel2.id` will do, and is much faster too.\n   * @param {GuildChannel} channel Channel to compare with\n   * @returns {boolean}\n   */\n  equals(channel) {\n    let equal = channel &&\n      this.id === channel.id &&\n      this.type === channel.type &&\n      this.topic === channel.topic &&\n      this.position === channel.position &&\n      this.name === channel.name;\n\n    if (equal) {\n      if (this.permissionOverwrites && channel.permissionOverwrites) {\n        equal = this.permissionOverwrites.equals(channel.permissionOverwrites);\n      } else {\n        equal = !this.permissionOverwrites && !channel.permissionOverwrites;\n      }\n    }\n\n    return equal;\n  }\n\n  /**\n   * Whether the channel is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    return this.id !== this.guild.id &&\n      this.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS);\n  }\n\n  /**\n   * Whether the channel is muted\n   * <warn>This is only available when using a user account.</warn>\n   * @type {?boolean}\n   * @readonly\n   */\n  get muted() {\n    if (this.client.user.bot) return null;\n    try {\n      return this.client.user.guildSettings.get(this.guild.id).channelOverrides.get(this.id).muted;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  /**\n   * The type of message that should notify you\n   * <warn>This is only available when using a user account.</warn>\n   * @type {?MessageNotificationType}\n   * @readonly\n   */\n  get messageNotifications() {\n    if (this.client.user.bot) return null;\n    try {\n      return this.client.user.guildSettings.get(this.guild.id).channelOverrides.get(this.id).messageNotifications;\n    } catch (err) {\n      return Constants.MessageNotificationTypes[3];\n    }\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>\n   * console.log(`Hello from ${channel}`);\n   * @example\n   * // Logs: Hello from <#123456789012345678>\n   * console.log('Hello from ' + channel);\n   */\n  toString() {\n    return `<#${this.id}>`;\n  }\n}\n\nmodule.exports = GuildChannel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/RichEmbed.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Attachment = __webpack_require__(/*! ./Attachment */ 21);\nlet ClientDataResolver;\n\n/**\n * A rich embed to be sent with a message with a fluent interface for creation.\n * @param {Object} [data] Data to set in the rich embed\n */\nclass RichEmbed {\n  constructor(data = {}) {\n    /**\n     * Title for this Embed\n     * @type {string}\n     */\n    this.title = data.title;\n\n    /**\n     * Description for this Embed\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * URL for this Embed\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * Color for this Embed\n     * @type {number}\n     */\n    this.color = data.color;\n\n    /**\n     * Author for this Embed\n     * @type {Object}\n     */\n    this.author = data.author;\n\n    /**\n     * Timestamp for this Embed\n     * @type {Date}\n     */\n    this.timestamp = data.timestamp;\n\n    /**\n     * Fields for this Embed\n     * @type {Object[]}\n     */\n    this.fields = data.fields || [];\n\n    /**\n     * Thumbnail for this Embed\n     * @type {Object}\n     */\n    this.thumbnail = data.thumbnail;\n\n    /**\n     * Image for this Embed\n     * @type {Object}\n     */\n    this.image = data.image;\n\n    /**\n     * Footer for this Embed\n     * @type {Object}\n     */\n    this.footer = data.footer;\n\n    /**\n     * File to upload alongside this Embed\n     * @type {FileOptions|string|Attachment}\n     */\n    this.file = data.file;\n  }\n\n  /**\n   * Sets the title of this embed.\n   * @param {StringResolvable} title The title\n   * @returns {RichEmbed} This embed\n   */\n  setTitle(title) {\n    title = resolveString(title);\n    if (title.length > 256) throw new RangeError('RichEmbed titles may not exceed 256 characters.');\n    this.title = title;\n    return this;\n  }\n\n  /**\n   * Sets the description of this embed.\n   * @param {StringResolvable} description The description\n   * @returns {RichEmbed} This embed\n   */\n  setDescription(description) {\n    description = resolveString(description);\n    if (description.length > 2048) throw new RangeError('RichEmbed descriptions may not exceed 2048 characters.');\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the URL of this embed.\n   * @param {string} url The URL\n   * @returns {RichEmbed} This embed\n   */\n  setURL(url) {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Sets the color of this embed.\n   * @param {ColorResolvable} color The color of the embed\n   * @returns {RichEmbed} This embed\n   */\n  setColor(color) {\n    if (!ClientDataResolver) ClientDataResolver = __webpack_require__(/*! ../client/ClientDataResolver */ 34);\n    this.color = ClientDataResolver.resolveColor(color);\n    return this;\n  }\n\n  /**\n   * Sets the author of this embed.\n   * @param {StringResolvable} name The name of the author\n   * @param {string} [icon] The icon URL of the author\n   * @param {string} [url] The URL of the author\n   * @returns {RichEmbed} This embed\n   */\n  setAuthor(name, icon, url) {\n    this.author = { name: resolveString(name), icon_url: icon, url };\n    return this;\n  }\n\n  /**\n   * Sets the timestamp of this embed.\n   * @param {Date} [timestamp=current date] The timestamp\n   * @returns {RichEmbed} This embed\n   */\n  setTimestamp(timestamp = new Date()) {\n    this.timestamp = timestamp;\n    return this;\n  }\n\n  /**\n   * Adds a field to the embed (max 25).\n   * @param {StringResolvable} name The name of the field\n   * @param {StringResolvable} value The value of the field\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {RichEmbed} This embed\n   */\n  addField(name, value, inline = false) {\n    if (this.fields.length >= 25) throw new RangeError('RichEmbeds may not exceed 25 fields.');\n    name = resolveString(name);\n    if (name.length > 256) throw new RangeError('RichEmbed field names may not exceed 256 characters.');\n    if (!/\\S/.test(name)) throw new RangeError('RichEmbed field names may not be empty.');\n    value = resolveString(value);\n    if (value.length > 1024) throw new RangeError('RichEmbed field values may not exceed 1024 characters.');\n    if (!/\\S/.test(value)) throw new RangeError('RichEmbed field values may not be empty.');\n    this.fields.push({ name, value, inline });\n    return this;\n  }\n\n  /**\n   * Convenience function for `<RichEmbed>.addField('\\u200B', '\\u200B', inline)`.\n   * @param {boolean} [inline=false] Set the field to display inline\n   * @returns {RichEmbed} This embed\n   */\n  addBlankField(inline = false) {\n    return this.addField('\\u200B', '\\u200B', inline);\n  }\n\n  /**\n   * Set the thumbnail of this embed.\n   * @param {string} url The URL of the thumbnail\n   * @returns {RichEmbed} This embed\n   */\n  setThumbnail(url) {\n    this.thumbnail = { url };\n    return this;\n  }\n\n  /**\n   * Set the image of this embed.\n   * @param {string} url The URL of the image\n   * @returns {RichEmbed} This embed\n   */\n  setImage(url) {\n    this.image = { url };\n    return this;\n  }\n\n  /**\n   * Sets the footer of this embed.\n   * @param {StringResolvable} text The text of the footer\n   * @param {string} [icon] The icon URL of the footer\n   * @returns {RichEmbed} This embed\n   */\n  setFooter(text, icon) {\n    text = resolveString(text);\n    if (text.length > 2048) throw new RangeError('RichEmbed footer text may not exceed 2048 characters.');\n    this.footer = { text, icon_url: icon };\n    return this;\n  }\n\n  /**\n   * Sets the file to upload alongside the embed. This file can be accessed via `attachment://fileName.extension` when\n   * setting an embed image or author/footer icons. Only one file may be attached.\n   * @param {FileOptions|string|Attachment} file Local path or URL to the file to attach,\n   * or valid FileOptions for a file to attach\n   * @returns {RichEmbed} This embed\n   */\n  attachFile(file) {\n    if (this.file) throw new RangeError('You may not upload more than one file at once.');\n    if (file instanceof Attachment) file = file.file;\n    this.file = file;\n    return this;\n  }\n}\n\nmodule.exports = RichEmbed;\n\nfunction resolveString(data) {\n  if (typeof data === 'string') return data;\n  if (data instanceof Array) return data.join('\\n');\n  return String(data);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Attachment.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * Represents an attachment in a message.\n * @param {BufferResolvable|Stream} file The file\n * @param {string} [name] The name of the file, if any\n */\nclass Attachment {\n  constructor(file, name) {\n    this.file = null;\n    if (name) this.setAttachment(file, name);\n    else this._attach(file);\n  }\n\n  /**\n    * The name of the file\n    * @type {?string}\n    * @readonly\n    */\n  get name() {\n    return this.file.name;\n  }\n\n  /**\n    * The file\n    * @type {?BufferResolvable|Stream}\n    * @readonly\n    */\n  get attachment() {\n    return this.file.attachment;\n  }\n\n  /**\n    * Set the file of this attachment.\n    * @param {BufferResolvable|Stream} file The file\n    * @param {string} name The name of the file\n    * @returns {Attachment} This attachment\n    */\n  setAttachment(file, name) {\n    this.file = { attachment: file, name };\n    return this;\n  }\n\n  /**\n    * Set the file of this attachment.\n    * @param {BufferResolvable|Stream} attachment The file\n    * @returns {Attachment} This attachment\n    */\n  setFile(attachment) {\n    this.file = { attachment };\n    return this;\n  }\n\n  /**\n    * Set the name of this attachment.\n    * @param {string} name The name of the image\n    * @returns {Attachment} This attachment\n    */\n  setName(name) {\n    this.file.name = name;\n    return this;\n  }\n\n  /**\n    * Set the file of this attachment.\n    * @param {BufferResolvable|Stream} file The file\n    * @param {string} name The name of the file\n    * @returns {void}\n    * @private\n    */\n  _attach(file, name) {\n    if (typeof file === 'string') this.file = file;\n    else this.setAttachment(file, name);\n  }\n}\n\nmodule.exports = Attachment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9BdHRhY2htZW50LmpzPzQ0NzAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXByZXNlbnRzIGFuIGF0dGFjaG1lbnQgaW4gYSBtZXNzYWdlLlxuICogQHBhcmFtIHtCdWZmZXJSZXNvbHZhYmxlfFN0cmVhbX0gZmlsZSBUaGUgZmlsZVxuICogQHBhcmFtIHtzdHJpbmd9IFtuYW1lXSBUaGUgbmFtZSBvZiB0aGUgZmlsZSwgaWYgYW55XG4gKi9cbmNsYXNzIEF0dGFjaG1lbnQge1xuICBjb25zdHJ1Y3RvcihmaWxlLCBuYW1lKSB7XG4gICAgdGhpcy5maWxlID0gbnVsbDtcbiAgICBpZiAobmFtZSkgdGhpcy5zZXRBdHRhY2htZW50KGZpbGUsIG5hbWUpO1xuICAgIGVsc2UgdGhpcy5fYXR0YWNoKGZpbGUpO1xuICB9XG5cbiAgLyoqXG4gICAgKiBUaGUgbmFtZSBvZiB0aGUgZmlsZVxuICAgICogQHR5cGUgez9zdHJpbmd9XG4gICAgKiBAcmVhZG9ubHlcbiAgICAqL1xuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5maWxlLm5hbWU7XG4gIH1cblxuICAvKipcbiAgICAqIFRoZSBmaWxlXG4gICAgKiBAdHlwZSB7P0J1ZmZlclJlc29sdmFibGV8U3RyZWFtfVxuICAgICogQHJlYWRvbmx5XG4gICAgKi9cbiAgZ2V0IGF0dGFjaG1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZS5hdHRhY2htZW50O1xuICB9XG5cbiAgLyoqXG4gICAgKiBTZXQgdGhlIGZpbGUgb2YgdGhpcyBhdHRhY2htZW50LlxuICAgICogQHBhcmFtIHtCdWZmZXJSZXNvbHZhYmxlfFN0cmVhbX0gZmlsZSBUaGUgZmlsZVxuICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGZpbGVcbiAgICAqIEByZXR1cm5zIHtBdHRhY2htZW50fSBUaGlzIGF0dGFjaG1lbnRcbiAgICAqL1xuICBzZXRBdHRhY2htZW50KGZpbGUsIG5hbWUpIHtcbiAgICB0aGlzLmZpbGUgPSB7IGF0dGFjaG1lbnQ6IGZpbGUsIG5hbWUgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgICogU2V0IHRoZSBmaWxlIG9mIHRoaXMgYXR0YWNobWVudC5cbiAgICAqIEBwYXJhbSB7QnVmZmVyUmVzb2x2YWJsZXxTdHJlYW19IGF0dGFjaG1lbnQgVGhlIGZpbGVcbiAgICAqIEByZXR1cm5zIHtBdHRhY2htZW50fSBUaGlzIGF0dGFjaG1lbnRcbiAgICAqL1xuICBzZXRGaWxlKGF0dGFjaG1lbnQpIHtcbiAgICB0aGlzLmZpbGUgPSB7IGF0dGFjaG1lbnQgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgICogU2V0IHRoZSBuYW1lIG9mIHRoaXMgYXR0YWNobWVudC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbWFnZVxuICAgICogQHJldHVybnMge0F0dGFjaG1lbnR9IFRoaXMgYXR0YWNobWVudFxuICAgICovXG4gIHNldE5hbWUobmFtZSkge1xuICAgIHRoaXMuZmlsZS5uYW1lID0gbmFtZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgICogU2V0IHRoZSBmaWxlIG9mIHRoaXMgYXR0YWNobWVudC5cbiAgICAqIEBwYXJhbSB7QnVmZmVyUmVzb2x2YWJsZXxTdHJlYW19IGZpbGUgVGhlIGZpbGVcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBmaWxlXG4gICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAqIEBwcml2YXRlXG4gICAgKi9cbiAgX2F0dGFjaChmaWxlLCBuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBmaWxlID09PSAnc3RyaW5nJykgdGhpcy5maWxlID0gZmlsZTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0YWNobWVudChmaWxlLCBuYW1lKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF0dGFjaG1lbnQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9zdHJ1Y3R1cmVzL0F0dGFjaG1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/*!*********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Guild.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const util = __webpack_require__(/*! util */ 9);\nconst Long = __webpack_require__(/*! long */ 33);\nconst User = __webpack_require__(/*! ./User */ 11);\nconst Role = __webpack_require__(/*! ./Role */ 10);\nconst Emoji = __webpack_require__(/*! ./Emoji */ 17);\nconst Presence = __webpack_require__(/*! ./Presence */ 12).Presence;\nconst GuildMember = __webpack_require__(/*! ./GuildMember */ 18);\nconst Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst Util = __webpack_require__(/*! ../util/Util */ 4);\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ 6);\n\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with `guild.available`.</info>\n */\nclass Guild {\n  constructor(client, data) {\n    /**\n     * The client that created the instance of the guild\n     * @name Guild#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * A collection of members that are in this guild. The key is the member's ID, the value is the member\n     * @type {Collection<Snowflake, GuildMember>}\n     */\n    this.members = new Collection();\n\n    /**\n     * A collection of channels that are in this guild. The key is the channel's ID, the value is the channel\n     * @type {Collection<Snowflake, GuildChannel>}\n     */\n    this.channels = new Collection();\n\n    /**\n     * A collection of roles that are in this guild. The key is the role's ID, the value is the role\n     * @type {Collection<Snowflake, Role>}\n     */\n    this.roles = new Collection();\n\n    /**\n     * A collection of presences in this guild\n     * @type {Collection<Snowflake, Presence>}\n     */\n    this.presences = new Collection();\n\n    if (!data) return;\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n\n      /**\n       * The Unique ID of the guild, useful for comparisons\n       * @type {Snowflake}\n       */\n      this.id = data.id;\n    } else {\n      this.setup(data);\n      if (!data.channels) this.available = false;\n    }\n  }\n\n  /**\n   * Sets up the guild.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n  setup(data) {\n    /**\n     * The name of the guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The hash of the guild icon\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The hash of the guild splash image (VIP only)\n     * @type {?string}\n     */\n    this.splash = data.splash;\n\n    /**\n     * The region the guild is located in\n     * @type {string}\n     */\n    this.region = data.region;\n\n    /**\n     * The full amount of members in this guild as of `READY`\n     * @type {number}\n     */\n    this.memberCount = data.member_count || this.memberCount;\n\n    /**\n     * Whether the guild is \"large\" (has more than 250 members)\n     * @type {boolean}\n     */\n    this.large = Boolean('large' in data ? data.large : this.large);\n\n    /**\n     * An array of guild features\n     * @type {Object[]}\n     */\n    this.features = data.features;\n\n    /**\n     * The ID of the application that created this guild (if applicable)\n     * @type {?Snowflake}\n     */\n    this.applicationID = data.application_id;\n\n    /**\n     * The time in seconds before a user is counted as \"away from keyboard\"\n     * @type {?number}\n     */\n    this.afkTimeout = data.afk_timeout;\n\n    /**\n     * The ID of the voice channel where AFK members are moved\n     * @type {?string}\n     */\n    this.afkChannelID = data.afk_channel_id;\n\n    /**\n     * The ID of the system channel\n     * @type {?Snowflake}\n     */\n    this.systemChannelID = data.system_channel_id;\n\n    /**\n     * Whether embedded images are enabled on this guild\n     * @type {boolean}\n     */\n    this.embedEnabled = data.embed_enabled;\n\n    /**\n     * The verification level of the guild\n     * @type {number}\n     */\n    this.verificationLevel = data.verification_level;\n\n    /**\n     * The explicit content filter level of the guild\n     * @type {number}\n     */\n    this.explicitContentFilter = data.explicit_content_filter;\n\n    /**\n     * The timestamp the client user joined the guild at\n     * @type {number}\n     */\n    this.joinedTimestamp = data.joined_at ? new Date(data.joined_at).getTime() : this.joinedTimestamp;\n\n    this.id = data.id;\n    this.available = !data.unavailable;\n    this.features = data.features || this.features || [];\n\n    if (data.members) {\n      this.members.clear();\n      for (const guildUser of data.members) this._addMember(guildUser, false);\n    }\n\n    if (data.owner_id) {\n      /**\n       * The user ID of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerID = data.owner_id;\n    }\n\n    if (data.channels) {\n      this.channels.clear();\n      for (const channel of data.channels) this.client.dataManager.newChannel(channel, this);\n    }\n\n    if (data.roles) {\n      this.roles.clear();\n      for (const role of data.roles) {\n        const newRole = new Role(this, role);\n        this.roles.set(newRole.id, newRole);\n      }\n    }\n\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this._setPresence(presence.user.id, presence);\n      }\n    }\n\n    this._rawVoiceStates = new Collection();\n    if (data.voice_states) {\n      for (const voiceState of data.voice_states) {\n        this._rawVoiceStates.set(voiceState.user_id, voiceState);\n        const member = this.members.get(voiceState.user_id);\n        if (member) {\n          member.serverMute = voiceState.mute;\n          member.serverDeaf = voiceState.deaf;\n          member.selfMute = voiceState.self_mute;\n          member.selfDeaf = voiceState.self_deaf;\n          member.voiceSessionID = voiceState.session_id;\n          member.voiceChannelID = voiceState.channel_id;\n          this.channels.get(voiceState.channel_id).members.set(member.user.id, member);\n        }\n      }\n    }\n\n    if (!this.emojis) {\n      /**\n       * A collection of emojis that are in this guild\n       * The key is the emoji's ID, the value is the emoji\n       * @type {Collection<Snowflake, Emoji>}\n       */\n      this.emojis = new Collection();\n      for (const emoji of data.emojis) this.emojis.set(emoji.id, new Emoji(this, emoji));\n    } else {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis,\n      });\n    }\n  }\n\n  /**\n   * The timestamp the guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the guild was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The URL to this guild's icon\n   * @type {?string}\n   * @readonly\n   */\n  get iconURL() {\n    if (!this.icon) return null;\n    return Constants.Endpoints.Guild(this).Icon(this.client.options.http.cdn, this.icon);\n  }\n\n  /**\n   * The acronym that shows up in place of a guild icon.\n   * @type {string}\n   * @readonly\n   */\n  get nameAcronym() {\n    return this.name.replace(/\\w+/g, name => name[0]).replace(/\\s/g, '');\n  }\n\n  /**\n   * The URL to this guild's splash\n   * @type {?string}\n   * @readonly\n   */\n  get splashURL() {\n    if (!this.splash) return null;\n    return Constants.Endpoints.Guild(this).Splash(this.client.options.http.cdn, this.splash);\n  }\n\n  /**\n   * The owner of the guild\n   * @type {GuildMember}\n   * @readonly\n   */\n  get owner() {\n    return this.members.get(this.ownerID);\n  }\n\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get afkChannel() {\n    return this.client.channels.get(this.afkChannelID) || null;\n  }\n\n  /**\n   * System channel for this guild\n   * @type {?GuildChannel}\n   * @readonly\n   */\n  get systemChannel() {\n    return this.client.channels.get(this.systemChannelID) || null;\n  }\n\n  /**\n   * If the client is connected to any voice channel in this guild, this will be the relevant VoiceConnection\n   * @type {?VoiceConnection}\n   * @readonly\n   */\n  get voiceConnection() {\n    if (this.client.browser) return null;\n    return this.client.voice.connections.get(this.id) || null;\n  }\n\n  /**\n   * The position of this guild\n   * <warn>This is only available when using a user account.</warn>\n   * @type {?number}\n   * @readonly\n   */\n  get position() {\n    if (this.client.user.bot) return null;\n    if (!this.client.user.settings.guildPositions) return null;\n    return this.client.user.settings.guildPositions.indexOf(this.id);\n  }\n\n  /**\n   * Whether the guild is muted\n   * <warn>This is only available when using a user account.</warn>\n   * @type {?boolean}\n   * @readonly\n   */\n  get muted() {\n    if (this.client.user.bot) return null;\n    try {\n      return this.client.user.guildSettings.get(this.id).muted;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  /**\n   * The type of message that should notify you\n   * <warn>This is only available when using a user account.</warn>\n   * @type {?MessageNotificationType}\n   * @readonly\n   */\n  get messageNotifications() {\n    if (this.client.user.bot) return null;\n    try {\n      return this.client.user.guildSettings.get(this.id).messageNotifications;\n    } catch (err) {\n      return null;\n    }\n  }\n\n  /**\n   * Whether to receive mobile push notifications\n   * <warn>This is only available when using a user account.</warn>\n   * @type {?boolean}\n   * @readonly\n   */\n  get mobilePush() {\n    if (this.client.user.bot) return null;\n    try {\n      return this.client.user.guildSettings.get(this.id).mobilePush;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  /**\n   * Whether to suppress everyone messages\n   * <warn>This is only available when using a user account.</warn>\n   * @type {?boolean}\n   * @readonly\n   */\n  get suppressEveryone() {\n    if (this.client.user.bot) return null;\n    try {\n      return this.client.user.guildSettings.get(this.id).suppressEveryone;\n    } catch (err) {\n      return null;\n    }\n  }\n\n  /**\n   * The `@everyone` role of the guild\n   * @type {Role}\n   * @readonly\n   */\n  get defaultRole() {\n    return this.roles.get(this.id);\n  }\n\n  /**\n   * The client user as a GuildMember of this guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get me() {\n    return this.members.get(this.client.user.id);\n  }\n\n  /**\n   * Fetches a collection of roles in the current guild sorted by position\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   * @private\n   */\n  get _sortedRoles() {\n    return this._sortPositionWithID(this.roles);\n  }\n\n  /**\n   * Returns the GuildMember form of a User object, if the user is present in the guild.\n   * @param {UserResolvable} user The user that you want to obtain the GuildMember of\n   * @returns {?GuildMember}\n   * @example\n   * // Get the guild member of a user\n   * const member = guild.member(message.author);\n   */\n  member(user) {\n    return this.client.resolver.resolveGuildMember(this, user);\n  }\n\n  /**\n   * Fetch a collection of banned users in this guild.\n   * @returns {Promise<Collection<Snowflake, User>>}\n   * @example\n   * // Fetch bans in guild\n   * guild.fetchBans()\n   *   .then(bans => console.log(`This guild has ${bans.size} bans`))\n   *   .catch(console.error);\n   */\n  fetchBans() {\n    return this.client.rest.methods.getGuildBans(this)\n      .then(bans => {\n        const users = new Collection();\n        for (const ban of bans.values()) users.set(ban.user.id, ban.user);\n        return users;\n      });\n  }\n\n  /**\n   * Fetch a collection of invites to this guild.\n   * Resolves with a collection mapping invites by their codes.\n   * @returns {Promise<Collection<string, Invite>>}\n   * @example\n   * // Fetch invites\n   * guild.fetchInvites()\n   *   .then(invites => console.log(`Fetched ${invites.size} invites`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch invite creator by their id\n   * guild.fetchInvites()\n   *  .then(invites => console.log(invites.find(invite => invite.inviter.id === '84484653687267328')))\n   *  .then(console.error);\n   */\n  fetchInvites() {\n    return this.client.rest.methods.getGuildInvites(this);\n  }\n\n  /**\n   * Fetch all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n  fetchWebhooks() {\n    return this.client.rest.methods.getGuildWebhooks(this);\n  }\n\n  /**\n   * Fetch available voice regions.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   * @example\n   * // Fetch voice regions\n   * guild.fetchVoiceRegions()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  fetchVoiceRegions() {\n    return this.client.rest.methods.fetchVoiceRegions(this.id);\n  }\n\n  /**\n   * Fetch audit logs for this guild.\n   * @param {Object} [options={}] Options for fetching audit logs\n   * @param {Snowflake|GuildAuditLogsEntry} [options.before] Limit to entries from before specified entry\n   * @param {Snowflake|GuildAuditLogsEntry} [options.after] Limit to entries from after specified entry\n   * @param {number} [options.limit] Limit number of entries\n   * @param {UserResolvable} [options.user] Only show entries involving this user\n   * @param {string|number} [options.type] Only show entries involving this action type\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n  fetchAuditLogs(options) {\n    return this.client.rest.methods.getGuildAuditLogs(this, options);\n  }\n\n  /**\n   * Adds a user to the guild using OAuth2. Requires the `CREATE_INSTANT_INVITE` permission.\n   * @param {UserResolvable} user User to add to the guild\n   * @param {Object} options Options for the addition\n   * @param {string} options.accessToken An OAuth2 access token for the user with the `guilds.join` scope granted to the\n   * bot's application\n   * @param {string} [options.nick] Nickname to give the member (requires `MANAGE_NICKNAMES`)\n   * @param {Collection<Snowflake, Role>|Role[]|Snowflake[]} [options.roles] Roles to add to the member\n   * (requires `MANAGE_ROLES`)\n   * @param {boolean} [options.mute] Whether the member should be muted (requires `MUTE_MEMBERS`)\n   * @param {boolean} [options.deaf] Whether the member should be deafened (requires `DEAFEN_MEMBERS`)\n   * @returns {Promise<GuildMember>}\n   */\n  addMember(user, options) {\n    if (this.members.has(user.id)) return Promise.resolve(this.members.get(user.id));\n    return this.client.rest.methods.putGuildMember(this, user, options);\n  }\n\n  /**\n   * Fetch a single guild member from a user.\n   * @param {UserResolvable} user The user to fetch the member for\n   * @param {boolean} [cache=true] Insert the member into the members cache\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Fetch a guild member\n   * guild.fetchMember(message.author)\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  fetchMember(user, cache = true) {\n    user = this.client.resolver.resolveUser(user);\n    if (!user) return Promise.reject(new Error('Invalid or uncached id provided.'));\n    if (this.members.has(user.id)) return Promise.resolve(this.members.get(user.id));\n    return this.client.rest.methods.getGuildMember(this, user, cache);\n  }\n\n  /**\n   * Fetches all the members in the guild, even if they are offline. If the guild has less than 250 members,\n   * this should not be necessary.\n   * @param {string} [query=''] Limit fetch to members with similar usernames\n   * @param {number} [limit=0] Maximum number of members to request\n   * @returns {Promise<Guild>}\n   * @example\n   * // Fetch guild members\n   * guild.fetchMembers()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetches a maximum of 1 member with the given query\n   * guild.fetchMembers('hydrabolt', 1)\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  fetchMembers(query = '', limit = 0) {\n    return new Promise((resolve, reject) => {\n      if (this.memberCount === this.members.size) {\n        resolve(this);\n        return;\n      }\n      this.client.ws.send({\n        op: Constants.OPCodes.REQUEST_GUILD_MEMBERS,\n        d: {\n          guild_id: this.id,\n          query,\n          limit,\n        },\n      });\n      const handler = (members, guild) => {\n        if (guild.id !== this.id) return;\n        if (this.memberCount === this.members.size || members.length < 1000) {\n          this.client.removeListener(Constants.Events.GUILD_MEMBERS_CHUNK, handler);\n          resolve(this);\n        }\n      };\n      this.client.on(Constants.Events.GUILD_MEMBERS_CHUNK, handler);\n      this.client.setTimeout(() => reject(new Error('Members didn\\'t arrive in time.')), 120 * 1000);\n    });\n  }\n\n  /**\n   * Performs a search within the entire guild.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {MessageSearchOptions} [options={}] Options to pass to the search\n   * @returns {Promise<MessageSearchResult>}\n   * @example\n   * guild.search({\n   *   content: 'discord.js',\n   *   before: '2016-11-17'\n   * })\n   *   .then(res => {\n   *     const hit = res.messages[0].find(m => m.hit).content;\n   *     console.log(`I found: **${hit}**, total results: ${res.totalResults}`);\n   *   })\n   *   .catch(console.error);\n   */\n  search(options = {}) {\n    return this.client.rest.methods.search(this, options);\n  }\n\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditData\n   * @property {string} [name] The name of the guild\n   * @property {string} [region] The region of the guild\n   * @property {number} [verificationLevel] The verification level of the guild\n   * @property {number} [explicitContentFilter] The level of the explicit content filter\n   * @property {ChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {ChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {Base64Resolvable} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {Base64Resolvable} [splash] The splash screen of the guild\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditData} data The data to update the guild with\n   * @param {string} [reason] Reason for editing the guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name and region\n   * guild.edit({\n   *   name: 'Discord Guild',\n   *   region: 'london',\n   * })\n   *   .then(g => console.log(`Changed guild name to ${g} and region to ${g.region}`))\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    const _data = {};\n    if (data.name) _data.name = data.name;\n    if (data.region) _data.region = data.region;\n    if (typeof data.verificationLevel !== 'undefined') _data.verification_level = Number(data.verificationLevel);\n    if (typeof data.afkChannel !== 'undefined') {\n      _data.afk_channel_id = this.client.resolver.resolveChannelID(data.afkChannel);\n    }\n    if (typeof data.systemChannel !== 'undefined') {\n      _data.system_channel_id = this.client.resolver.resolveChannelID(data.systemChannel);\n    }\n    if (data.afkTimeout) _data.afk_timeout = Number(data.afkTimeout);\n    if (typeof data.icon !== 'undefined') _data.icon = data.icon;\n    if (data.owner) _data.owner_id = this.client.resolver.resolveUser(data.owner).id;\n    if (typeof data.splash !== 'undefined') _data.splash = data.splash;\n    if (typeof data.explicitContentFilter !== 'undefined') {\n      _data.explicit_content_filter = Number(data.explicitContentFilter);\n    }\n    return this.client.rest.methods.updateGuild(this, _data, reason);\n  }\n\n  /**\n   * Edit the level of the explicit content filter.\n   * @param {number} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({ explicitContentFilter }, reason);\n  }\n\n  /**\n   * Edit the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(g => console.log(`Updated guild name to ${g}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Edit the region of the guild.\n   * @param {string} region The new region of the guild\n   * @param {string} [reason] Reason for changing the guild's region\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild region\n   * guild.setRegion('london')\n   *  .then(g => console.log(`Updated guild region to ${g.region}`))\n   *  .catch(console.error);\n   */\n  setRegion(region, reason) {\n    return this.edit({ region }, reason);\n  }\n\n  /**\n   * Edit the verification level of the guild.\n   * @param {number} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(g => console.log(`Updated guild verification level to ${g.verificationLevel}`))\n   *  .catch(console.error);\n   */\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({ verificationLevel }, reason);\n  }\n\n  /**\n   * Edit the AFK channel of the guild.\n   * @param {ChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(g => console.log(`Updated guild AFK channel to ${g.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({ afkChannel }, reason);\n  }\n\n  /**\n   * Edit the system channel of the guild.\n   * @param {ChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   */\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({ systemChannel }, reason);\n  }\n\n  /**\n   * Edit the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(g => console.log(`Updated guild AFK timeout to ${g.afkTimeout}`))\n   *  .catch(console.error);\n   */\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({ afkTimeout }, reason);\n  }\n\n  /**\n   * Set a new guild icon.\n   * @param {Base64Resolvable|BufferResolvable} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(console.log)\n   *  .catch(console.error);\n   */\n  setIcon(icon, reason) {\n    return this.client.resolver.resolveImage(icon).then(data => this.edit({ icon: data, reason }));\n  }\n\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.first())\n   *  .then(g => console.log(`Updated the guild owner to ${g.owner.displayName}`))\n   *  .catch(console.error);\n   */\n  setOwner(owner, reason) {\n    return this.edit({ owner }, reason);\n  }\n\n  /**\n   * Set a new guild splash screen.\n   * @param {BufferResolvable|Base64Resolvable} splash The new splash screen of the guild\n   * @param {string} [reason] Reason for changing the guild's splash screen\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(console.log)\n   *  .catch(console.error);\n   */\n  setSplash(splash) {\n    return this.client.resolver.resolveImage(splash).then(data => this.edit({ splash: data }));\n  }\n\n  /**\n   * Sets the position of the guild in the guild listing.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {number} position Absolute or relative position\n   * @param {boolean} [relative=false] Whether to position relatively or absolutely\n   * @returns {Promise<Guild>}\n   */\n  setPosition(position, relative) {\n    if (this.client.user.bot) {\n      return Promise.reject(new Error('Setting guild position is only available for user accounts'));\n    }\n    return this.client.user.settings.setGuildPosition(this, position, relative);\n  }\n\n  /**\n   * Marks all messages in this guild as read.\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {Promise<Guild>}\n   */\n  acknowledge() {\n    return this.client.rest.methods.ackGuild(this);\n  }\n\n  /**\n   * Allow direct messages from guild members.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {boolean} allow Whether to allow direct messages\n   * @returns {Promise<Guild>}\n   */\n  allowDMs(allow) {\n    const settings = this.client.user.settings;\n    if (allow) return settings.removeRestrictedGuild(this);\n    else return settings.addRestrictedGuild(this);\n  }\n\n  /**\n   * Bans a user from the guild.\n   * @param {UserResolvable} user The user to ban\n   * @param {Object|number|string} [options] Ban options. If a number, the number of days to delete messages for, if a\n   * string, the ban reason. Supplying an object allows you to do both.\n   * @param {number} [options.days=0] Number of days of messages to delete\n   * @param {string} [options.reason] Reason for banning\n   * @returns {Promise<GuildMember|User|string>} Result object will be resolved as specifically as possible.\n   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\n   * be resolved, the user ID will be the result.\n   * @example\n   * // Ban a user by ID\n   * guild.ban('some user ID')\n   *   .then(user => console.log(`Banned ${user.username || user.id || user} from ${guild}`))\n   *   .catch(console.error);\n   * @example\n   * // Ban a user by object with reason and days\n   * guild.ban(user, { days: 7, reason: 'He needed to go' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  ban(user, options = {}) {\n    if (typeof options === 'number') {\n      options = { reason: null, 'delete-message-days': options };\n    } else if (typeof options === 'string') {\n      options = { reason: options, 'delete-message-days': 0 };\n    }\n    if (options.days) options['delete-message-days'] = options.days;\n    return this.client.rest.methods.banGuildMember(this, user, options);\n  }\n\n  /**\n   * Unbans a user from the guild.\n   * @param {UserResolvable} user The user to unban\n   * @param {string} [reason] Reason for unbanning the user\n   * @returns {Promise<User>}\n   * @example\n   * // Unban a user by ID (or with a user/guild member object)\n   * guild.unban('some user ID')\n   *   .then(user => console.log(`Unbanned ${user.username} from ${guild}`))\n   *   .catch(console.error);\n   */\n  unban(user, reason) {\n    return this.client.rest.methods.unbanGuildMember(this, user, reason);\n  }\n\n  /**\n   * Prunes members from the guild based on how long they have been inactive.\n   * @param {number} days Number of days of inactivity required to kick\n   * @param {boolean} [dry=false] If true, will return number of users that will be kicked, without actually doing it\n   * @param {string} [reason] Reason for this prune\n   * @returns {Promise<number>} The number of members that were/will be kicked\n   * @example\n   * // See how many members will be pruned\n   * guild.pruneMembers(12, true)\n   *   .then(pruned => console.log(`This will prune ${pruned} people!`))\n   *   .catch(console.error);\n   * @example\n   * // Actually prune the members\n   * guild.pruneMembers(12)\n   *   .then(pruned => console.log(`I just pruned ${pruned} people!`))\n   *   .catch(console.error);\n   */\n  pruneMembers(days, dry = false, reason) {\n    if (typeof days !== 'number') throw new TypeError('Days must be a number.');\n    return this.client.rest.methods.pruneGuildMembers(this, days, dry, reason);\n  }\n\n  /**\n   * Syncs this guild (already done automatically every 30 seconds).\n   * <warn>This is only available when using a user account.</warn>\n   */\n  sync() {\n    if (!this.client.user.bot) this.client.syncGuilds([this]);\n  }\n\n  /**\n   * Can be used to overwrite permissions when creating a channel.\n   * @typedef {Object} ChannelCreationOverwrites\n   * @property {PermissionResolvable[]|number} [allow] The permissions to allow\n   * @property {PermissionResolvable[]|number} [deny] The permissions to deny\n   * @property {RoleResolvable|UserResolvable} id ID of the role or member this overwrite is for\n   */\n\n  /**\n   * Creates a new channel in the guild.\n   * @param {string} name The name of the new channel\n   * @param {string} [type='text'] The type of the new channel, either `text` or `voice` or `category`\n   * @param {Array<PermissionOverwrites|ChannelCreationOverwrites>} [overwrites] Permission overwrites\n   * @param {string} [reason] Reason for creating this channel\n   * @returns {Promise<CategoryChannel|TextChannel|VoiceChannel>}\n   * @example\n   * // Create a new text channel\n   * guild.createChannel('new-general', 'text')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Create a new category channel with permission overwrites\n   * guild.createChannel('new-category', 'category', [{\n   *   id: guild.id,\n   *   deny: ['MANAGE_MESSAGES'],\n   *   allow: ['SEND_MESSAGES']\n   * }])\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  createChannel(name, type, overwrites, reason) {\n    return this.client.rest.methods.createChannel(this, name, type, overwrites, reason);\n  }\n\n  /**\n   * The data needed for updating a channel's position.\n   * @typedef {Object} ChannelPosition\n   * @property {ChannelResolvable} channel Channel to update\n   * @property {number} position New position for the channel\n   */\n\n  /**\n   * Batch-updates the guild's channels' positions.\n   * @param {ChannelPosition[]} channelPositions Channel positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.updateChannels([{ channel: channelID, position: newChannelIndex }])\n   *   .then(g => console.log(`Updated channel positions for ${g}`))\n   *   .catch(console.error);\n   */\n  setChannelPositions(channelPositions) {\n    return this.client.rest.methods.updateChannelPositions(this.id, channelPositions);\n  }\n\n  /**\n   * Creates a new role in the guild with given information.\n   * @param {RoleData} [data] The data to update the role with\n   * @param {string} [reason] Reason for creating this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Create a new role\n   * guild.createRole()\n   *   .then(role => console.log(`Created new role with name ${role.name}`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new role with data\n   * guild.createRole({\n   *   name: 'Super Cool People',\n   *   color: 'BLUE',\n   * })\n   *   .then(role => console.log(`Created new role with name ${role.name} and color ${role.color}`))\n   *   .catch(console.error)\n   */\n  createRole(data = {}, reason) {\n    return this.client.rest.methods.createGuildRole(this, data, reason);\n  }\n\n  /**\n   * Creates a new custom emoji in the guild.\n   * @param {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n   * @param {string} name The name for the emoji\n   * @param {Collection<Snowflake, Role>|Role[]} [roles] Roles to limit the emoji to\n   * @param {string} [reason] Reason for creating the emoji\n   * @returns {Promise<Emoji>} The created emoji\n   * @example\n   * // Create a new emoji from a url\n   * guild.createEmoji('https://i.imgur.com/w3duR07.png', 'rip')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new emoji from a file on your computer\n   * guild.createEmoji('./memes/banana.png', 'banana')\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}`))\n   *   .catch(console.error);\n   */\n  createEmoji(attachment, name, roles, reason) {\n    if (typeof attachment === 'string' && attachment.startsWith('data:')) {\n      return this.client.rest.methods.createEmoji(this, attachment, name, roles, reason);\n    } else {\n      return this.client.resolver.resolveImage(attachment).then(data =>\n        this.client.rest.methods.createEmoji(this, data, name, roles, reason)\n      );\n    }\n  }\n\n  /**\n   * Delete an emoji.\n   * @param {Emoji|string} emoji The emoji to delete\n   * @param {string} [reason] Reason for deleting the emoji\n   * @returns {Promise}\n   */\n  deleteEmoji(emoji, reason) {\n    if (!(emoji instanceof Emoji)) emoji = this.emojis.get(emoji);\n    return this.client.rest.methods.deleteEmoji(emoji, reason);\n  }\n\n  /**\n   * Causes the client to leave the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(g => console.log(`Left the guild ${g}`))\n   *   .catch(console.error);\n   */\n  leave() {\n    return this.client.rest.methods.leaveGuild(this);\n  }\n\n  /**\n   * Causes the client to delete the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(g => console.log(`Deleted the guild ${g}`))\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.client.rest.methods.deleteGuild(this);\n  }\n\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n  equals(guild) {\n    let equal =\n      guild &&\n      this.id === guild.id &&\n      this.available === !guild.unavailable &&\n      this.splash === guild.splash &&\n      this.region === guild.region &&\n      this.name === guild.name &&\n      this.memberCount === guild.member_count &&\n      this.large === guild.large &&\n      this.icon === guild.icon &&\n      Util.arraysEqual(this.features, guild.features) &&\n      this.ownerID === guild.owner_id &&\n      this.verificationLevel === guild.verification_level &&\n      this.embedEnabled === guild.embed_enabled;\n\n    if (equal) {\n      if (this.embedChannel) {\n        if (this.embedChannel.id !== guild.embed_channel_id) equal = false;\n      } else if (guild.embed_channel_id) {\n        equal = false;\n      }\n    }\n\n    return equal;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the guild's name instead of the guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${guild}!`);\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log('Hello from ' + guild + '!');\n   */\n  toString() {\n    return this.name;\n  }\n\n  _addMember(guildUser, emitEvent = true) {\n    const existing = this.members.has(guildUser.user.id);\n    if (!(guildUser.user instanceof User)) guildUser.user = this.client.dataManager.newUser(guildUser.user);\n\n    guildUser.joined_at = guildUser.joined_at || 0;\n    const member = new GuildMember(this, guildUser);\n    this.members.set(member.id, member);\n\n    if (this._rawVoiceStates && this._rawVoiceStates.has(member.user.id)) {\n      const voiceState = this._rawVoiceStates.get(member.user.id);\n      member.serverMute = voiceState.mute;\n      member.serverDeaf = voiceState.deaf;\n      member.selfMute = voiceState.self_mute;\n      member.selfDeaf = voiceState.self_deaf;\n      member.voiceSessionID = voiceState.session_id;\n      member.voiceChannelID = voiceState.channel_id;\n      if (this.client.channels.has(voiceState.channel_id)) {\n        this.client.channels.get(voiceState.channel_id).members.set(member.user.id, member);\n      } else {\n        this.client.emit('warn', `Member ${member.id} added in guild ${this.id} with an uncached voice channel`);\n      }\n    }\n\n    /**\n     * Emitted whenever a user joins a guild.\n     * @event Client#guildMemberAdd\n     * @param {GuildMember} member The member that has joined a guild\n     */\n    if (this.client.ws.connection.status === Constants.Status.READY && emitEvent && !existing) {\n      this.client.emit(Constants.Events.GUILD_MEMBER_ADD, member);\n    }\n\n    return member;\n  }\n\n  _updateMember(member, data) {\n    const oldMember = Util.cloneObject(member);\n\n    if (data.roles) member._roles = data.roles;\n    if (typeof data.nick !== 'undefined') member.nickname = data.nick;\n\n    const notSame = member.nickname !== oldMember.nickname || !Util.arraysEqual(member._roles, oldMember._roles);\n\n    if (this.client.ws.connection.status === Constants.Status.READY && notSame) {\n      /**\n       * Emitted whenever a guild member changes - i.e. new role, removed role, nickname.\n       * @event Client#guildMemberUpdate\n       * @param {GuildMember} oldMember The member before the update\n       * @param {GuildMember} newMember The member after the update\n       */\n      this.client.emit(Constants.Events.GUILD_MEMBER_UPDATE, oldMember, member);\n    }\n\n    return {\n      old: oldMember,\n      mem: member,\n    };\n  }\n\n  _removeMember(guildMember) {\n    this.members.delete(guildMember.id);\n  }\n\n  _memberSpeakUpdate(user, speaking) {\n    const member = this.members.get(user);\n    if (member && member.speaking !== speaking) {\n      member.speaking = speaking;\n      /**\n       * Emitted once a guild member starts/stops speaking.\n       * @event Client#guildMemberSpeaking\n       * @param {GuildMember} member The member that started/stopped speaking\n       * @param {boolean} speaking Whether or not the member is speaking\n       */\n      this.client.emit(Constants.Events.GUILD_MEMBER_SPEAKING, member, speaking);\n    }\n  }\n\n  _setPresence(id, presence) {\n    if (this.presences.get(id)) {\n      this.presences.get(id).update(presence);\n      return;\n    }\n    this.presences.set(id, new Presence(presence));\n  }\n\n  /**\n   * Set the position of a role in this guild.\n   * @param {string|Role} role The role to edit, can be a role object or a role ID\n   * @param {number} position The new position of the role\n   * @param {boolean} [relative=false] Position Moves the role relative to its current position\n   * @returns {Promise<Guild>}\n   */\n  setRolePosition(role, position, relative = false) {\n    if (typeof role === 'string') {\n      role = this.roles.get(role);\n      if (!role) return Promise.reject(new Error('Supplied role is not a role or snowflake.'));\n    }\n\n    position = Number(position);\n    if (isNaN(position)) return Promise.reject(new Error('Supplied position is not a number.'));\n\n    let updatedRoles = this._sortedRoles.array();\n\n    Util.moveElementInArray(updatedRoles, role, position, relative);\n\n    updatedRoles = updatedRoles.map((r, i) => ({ id: r.id, position: i }));\n    return this.client.rest.methods.setRolePositions(this.id, updatedRoles);\n  }\n\n  /**\n   * Set the position of a channel in this guild.\n   * @param {string|GuildChannel} channel The channel to edit, can be a channel object or a channel ID\n   * @param {number} position The new position of the channel\n   * @param {boolean} [relative=false] Position Moves the channel relative to its current position\n   * @returns {Promise<Guild>}\n   */\n  setChannelPosition(channel, position, relative = false) {\n    if (typeof channel === 'string') {\n      channel = this.channels.get(channel);\n      if (!channel) return Promise.reject(new Error('Supplied channel is not a channel or snowflake.'));\n    }\n\n    position = Number(position);\n    if (isNaN(position)) return Promise.reject(new Error('Supplied position is not a number.'));\n\n    let updatedChannels = this._sortedChannels(channel.type).array();\n\n    Util.moveElementInArray(updatedChannels, channel, position, relative);\n\n    updatedChannels = updatedChannels.map((r, i) => ({ id: r.id, position: i }));\n    return this.client.rest.methods.setChannelPositions(this.id, updatedChannels);\n  }\n\n  /**\n   * Fetches a collection of channels in the current guild sorted by position.\n   * @param {string} type The channel type\n   * @returns {Collection<Snowflake, GuildChannel>}\n   * @private\n   */\n  _sortedChannels(type) {\n    return this._sortPositionWithID(this.channels.filter(c => {\n      if (type === 'voice' && c.type === 'voice') return true;\n      else if (type !== 'voice' && c.type !== 'voice') return true;\n      else return type === c.type;\n    }));\n  }\n\n  /**\n   * Sorts a collection by object position or ID if the positions are equivalent.\n   * Intended to be identical to Discord's sorting method.\n   * @param {Collection} collection The collection to sort\n   * @returns {Collection}\n   * @private\n   */\n  _sortPositionWithID(collection) {\n    return collection.sort((a, b) =>\n      a.position !== b.position ?\n        a.position - b.position :\n        Long.fromString(a.id).sub(Long.fromString(b.id)).toNumber()\n    );\n  }\n}\n\n/**\n * The `#general` TextChannel of the guild\n * @name Guild#defaultChannel\n * @type {TextChannel}\n * @readonly\n * @deprecated\n */\nObject.defineProperty(Guild.prototype, 'defaultChannel', {\n  get: util.deprecate(function defaultChannel() {\n    return this.channels.get(this.id);\n  }, 'Guild#defaultChannel: This property is obsolete, will be removed in v12.0.0, and may not function as expected.'),\n});\n\nmodule.exports = Guild;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/*!***********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Webhook.js ***!
  \***********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const path = __webpack_require__(/*! path */ 8);\nconst Util = __webpack_require__(/*! ../util/Util */ 4);\nconst Attachment = __webpack_require__(/*! ./Attachment */ 21);\nconst RichEmbed = __webpack_require__(/*! ./RichEmbed */ 20);\n\n/**\n * Represents a webhook.\n */\nclass Webhook {\n  constructor(client, dataOrID, token) {\n    if (client) {\n      /**\n       * The client that instantiated the webhook\n       * @name Webhook#client\n       * @type {Client}\n       * @readonly\n       */\n      Object.defineProperty(this, 'client', { value: client });\n      if (dataOrID) this.setup(dataOrID);\n    } else {\n      this.id = dataOrID;\n      this.token = token;\n      Object.defineProperty(this, 'client', { value: this });\n    }\n  }\n\n  setup(data) {\n    /**\n     * The name of the webhook\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The token for the webhook\n     * @type {string}\n     */\n    this.token = data.token;\n\n    /**\n     * The avatar for the webhook\n     * @type {?string}\n     */\n    this.avatar = data.avatar;\n\n    /**\n     * The ID of the webhook\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The guild the webhook belongs to\n     * @type {Snowflake}\n     */\n    this.guildID = data.guild_id;\n\n    /**\n     * The channel the webhook belongs to\n     * @type {Snowflake}\n     */\n    this.channelID = data.channel_id;\n\n    if (data.user) {\n      /**\n       * The owner of the webhook\n       * @type {?User|Object}\n       */\n      this.owner = this.client.users ? this.client.users.get(data.user.id) : data.user;\n    } else {\n      this.owner = null;\n    }\n  }\n\n  /**\n   * Options that can be passed into send, sendMessage, sendFile, sendEmbed, and sendCode.\n   * @typedef {Object} WebhookMessageOptions\n   * @property {string} [username=this.name] Username override for the message\n   * @property {string} [avatarURL] Avatar URL override for the message\n   * @property {boolean} [tts=false] Whether or not the message should be spoken aloud\n   * @property {string} [nonce=''] The nonce for the message\n   * @property {Array<RichEmbed|Object>} [embeds] An array of embeds for the message\n   * (see [here](https://discordapp.com/developers/docs/resources/channel#embed-object) for more details)\n   * @property {boolean} [disableEveryone=this.client.options.disableEveryone] Whether or not @everyone and @here\n   * should be replaced with plain-text\n   * @property {FileOptions|BufferResolvable|Attachment} [file] A file to send with the message **(deprecated)**\n   * @property {FileOptions[]|BufferResolvable[]|Attachment[]} [files] Files to send with the message\n   * @property {string|boolean} [code] Language for optional codeblock formatting to apply\n   * @property {boolean|SplitOptions} [split=false] Whether or not the message should be split into multiple messages if\n   * it exceeds the character limit. If an object is provided, these are the options for splitting the message.\n   */\n\n  /**\n   * Send a message with this webhook.\n   * @param {StringResolvable} content The content to send\n   * @param {WebhookMessageOptions|Attachment|RichEmbed} [options] The options to provide,\n   * can also be just a RichEmbed or Attachment\n   * @returns {Promise<Message|Message[]|Object|Object[]>}\n   * @example\n   * // Send a basic message\n   * webhook.send('hello!')\n   *   .then(message => console.log(`Sent message: ${message.content}`))\n   *   .catch(console.error);\n   * @example\n   * // Send a remote file\n   * webhook.send({\n   *   files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send a local file\n   * webhook.send({\n   *   files: [{\n   *     attachment: 'entire/path/to/file.jpg',\n   *     name: 'file.jpg'\n   *   }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send an embed with a local image inside\n   * webhook.send('This is an embed', {\n   *   embeds: [{\n   *     thumbnail: {\n   *          url: 'attachment://file.jpg'\n   *       }\n   *    }],\n   *    files: [{\n   *       attachment: 'entire/path/to/file.jpg',\n   *       name: 'file.jpg'\n   *    }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  send(content, options) { // eslint-disable-line complexity\n    if (!options && typeof content === 'object' && !(content instanceof Array)) {\n      options = content;\n      content = '';\n    } else if (!options) {\n      options = {};\n    }\n\n    if (options instanceof Attachment) options = { files: [options] };\n    if (options instanceof RichEmbed) options = { embeds: [options] };\n\n    if (content) {\n      content = this.client.resolver.resolveString(content);\n      let { split, code, disableEveryone } = options;\n      if (split && typeof split !== 'object') split = {};\n      if (typeof code !== 'undefined' && (typeof code !== 'boolean' || code === true)) {\n        content = Util.escapeMarkdown(content, true);\n        content = `\\`\\`\\`${typeof code !== 'boolean' ? code || '' : ''}\\n${content}\\n\\`\\`\\``;\n        if (split) {\n          split.prepend = `\\`\\`\\`${typeof code !== 'boolean' ? code || '' : ''}\\n`;\n          split.append = '\\n```';\n        }\n      }\n      if (disableEveryone || (typeof disableEveryone === 'undefined' && this.client.options.disableEveryone)) {\n        content = content.replace(/@(everyone|here)/g, '@\\u200b$1');\n      }\n\n      if (split) content = Util.splitMessage(content, split);\n    }\n\n    if (options.file) {\n      if (options.files) options.files.push(options.file);\n      else options.files = [options.file];\n    }\n\n    if (options.embeds) {\n      const files = [];\n      for (const embed of options.embeds) {\n        if (embed.file) files.push(embed.file);\n      }\n      if (options.files) options.files.push(...files);\n      else options.files = files;\n    }\n\n    if (options.files) {\n      for (let i = 0; i < options.files.length; i++) {\n        let file = options.files[i];\n        if (typeof file === 'string' || Buffer.isBuffer(file)) file = { attachment: file };\n        if (!file.name) {\n          if (typeof file.attachment === 'string') {\n            file.name = path.basename(file.attachment);\n          } else if (file.attachment && file.attachment.path) {\n            file.name = path.basename(file.attachment.path);\n          } else if (file instanceof Attachment) {\n            file = { attachment: file.file, name: path.basename(file.file) || 'file.jpg' };\n          } else {\n            file.name = 'file.jpg';\n          }\n        } else if (file instanceof Attachment) {\n          file = file.file;\n        }\n        options.files[i] = file;\n      }\n\n      return Promise.all(options.files.map(file =>\n        this.client.resolver.resolveFile(file.attachment).then(resource => {\n          file.file = resource;\n          return file;\n        })\n      )).then(files => this.client.rest.methods.sendWebhookMessage(this, content, options, files));\n    }\n\n    return this.client.rest.methods.sendWebhookMessage(this, content, options);\n  }\n\n  /**\n   * Send a message with this webhook\n   * @param {StringResolvable} content The content to send\n   * @param {WebhookMessageOptions} [options={}] The options to provide\n   * @returns {Promise<Message|Message[]>}\n   * @deprecated\n   * @example\n   * // Send a message\n   * webhook.sendMessage('hello!')\n   *  .then(message => console.log(`Sent message: ${message.content}`))\n   *  .catch(console.error);\n   */\n  sendMessage(content, options = {}) {\n    return this.send(content, options);\n  }\n\n  /**\n   * Send a file with this webhook.\n   * @param {BufferResolvable} attachment The file to send\n   * @param {string} [name='file.jpg'] The name and extension of the file\n   * @param {StringResolvable} [content] Text message to send with the attachment\n   * @param {WebhookMessageOptions} [options] The options to provide\n   * @returns {Promise<Message>}\n   * @deprecated\n   */\n  sendFile(attachment, name, content, options = {}) {\n    return this.send(content, Object.assign(options, { file: { attachment, name } }));\n  }\n\n  /**\n   * Send a code block with this webhook.\n   * @param {string} lang Language for the code block\n   * @param {StringResolvable} content Content of the code block\n   * @param {WebhookMessageOptions} options The options to provide\n   * @returns {Promise<Message|Message[]>}\n   * @deprecated\n   */\n  sendCode(lang, content, options = {}) {\n    return this.send(content, Object.assign(options, { code: lang }));\n  }\n\n  /**\n   * Send a raw slack message with this webhook.\n   * @param {Object} body The raw body to send\n   * @returns {Promise}\n   * @example\n   * // Send a slack message\n   * webhook.sendSlackMessage({\n   *   'username': 'Wumpus',\n   *   'attachments': [{\n   *     'pretext': 'this looks pretty cool',\n   *     'color': '#F0F',\n   *     'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n   *     'footer': 'Powered by sneks',\n   *     'ts': Date.now() / 1000\n   *   }]\n   * }).catch(console.error);\n   */\n  sendSlackMessage(body) {\n    return this.client.rest.methods.sendSlackWebhookMessage(this, body);\n  }\n\n  /**\n   * Edit the webhook.\n   * @param {string} name The new name for the webhook\n   * @param {BufferResolvable} [avatar] The new avatar for the webhook\n   * @returns {Promise<Webhook>}\n   */\n  edit(name = this.name, avatar) {\n    if (avatar) {\n      return this.client.resolver.resolveImage(avatar).then(data =>\n        this.client.rest.methods.editWebhook(this, name, data)\n      );\n    }\n    return this.client.rest.methods.editWebhook(this, name);\n  }\n\n  /**\n   * Delete the webhook.\n   * @param {string} [reason] Reason for deleting the webhook\n   * @returns {Promise}\n   */\n  delete(reason) {\n    return this.client.rest.methods.deleteWebhook(this, reason);\n  }\n}\n\nmodule.exports = Webhook;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"crypto\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjcnlwdG9cIj9lZjQ5Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImNyeXB0b1wiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcImNyeXB0b1wiXG4vLyBtb2R1bGUgaWQgPSAyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/*!***************************************************!*\
  !*** ./node_modules/ws/lib/permessage-deflate.js ***!
  \***************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst safeBuffer = __webpack_require__(/*! safe-buffer */ 14);\nconst Limiter = __webpack_require__(/*! async-limiter */ 147);\nconst zlib = __webpack_require__(/*! zlib */ 28);\n\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ 41);\n\nconst Buffer = safeBuffer.Buffer;\n\nconst TRAILER = Buffer.from([0x00, 0x00, 0xff, 0xff]);\nconst EMPTY_BLOCK = Buffer.from([0x00]);\n\nconst kWriteInProgress = Symbol('write-in-progress');\nconst kPendingClose = Symbol('pending-close');\nconst kTotalLength = Symbol('total-length');\nconst kCallback = Symbol('callback');\nconst kBuffers = Symbol('buffers');\nconst kError = Symbol('error');\nconst kOwner = Symbol('owner');\n\n//\n// We limit zlib concurrency, which prevents severe memory fragmentation\n// as documented in https://github.com/nodejs/node/issues/8871#issuecomment-250915913\n// and https://github.com/websockets/ws/issues/1202\n//\n// Intentionally global; it's the global thread pool that's an issue.\n//\nlet zlibLimiter;\n\n/**\n * permessage-deflate implementation.\n */\nclass PerMessageDeflate {\n  /**\n   * Creates a PerMessageDeflate instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Boolean} options.serverNoContextTakeover Request/accept disabling\n   *     of server context takeover\n   * @param {Boolean} options.clientNoContextTakeover Advertise/acknowledge\n   *     disabling of client context takeover\n   * @param {(Boolean|Number)} options.serverMaxWindowBits Request/confirm the\n   *     use of a custom server window size\n   * @param {(Boolean|Number)} options.clientMaxWindowBits Advertise support\n   *     for, or request, a custom client window size\n   * @param {Object} options.zlibDeflateOptions Options to pass to zlib on deflate\n   * @param {Object} options.zlibInflateOptions Options to pass to zlib on inflate\n   * @param {Number} options.threshold Size (in bytes) below which messages\n   *     should not be compressed\n   * @param {Number} options.concurrencyLimit The number of concurrent calls to\n   *     zlib\n   * @param {Boolean} isServer Create the instance in either server or client\n   *     mode\n   * @param {Number} maxPayload The maximum allowed message length\n   */\n  constructor (options, isServer, maxPayload) {\n    this._maxPayload = maxPayload | 0;\n    this._options = options || {};\n    this._threshold = this._options.threshold !== undefined\n      ? this._options.threshold\n      : 1024;\n    this._isServer = !!isServer;\n    this._deflate = null;\n    this._inflate = null;\n\n    this.params = null;\n\n    if (!zlibLimiter) {\n      const concurrency = this._options.concurrencyLimit !== undefined\n        ? this._options.concurrencyLimit\n        : 10;\n      zlibLimiter = new Limiter({ concurrency });\n    }\n  }\n\n  /**\n   * @type {String}\n   */\n  static get extensionName () {\n    return 'permessage-deflate';\n  }\n\n  /**\n   * Create an extension negotiation offer.\n   *\n   * @return {Object} Extension parameters\n   * @public\n   */\n  offer () {\n    const params = {};\n\n    if (this._options.serverNoContextTakeover) {\n      params.server_no_context_takeover = true;\n    }\n    if (this._options.clientNoContextTakeover) {\n      params.client_no_context_takeover = true;\n    }\n    if (this._options.serverMaxWindowBits) {\n      params.server_max_window_bits = this._options.serverMaxWindowBits;\n    }\n    if (this._options.clientMaxWindowBits) {\n      params.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits == null) {\n      params.client_max_window_bits = true;\n    }\n\n    return params;\n  }\n\n  /**\n   * Accept an extension negotiation offer/response.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Object} Accepted configuration\n   * @public\n   */\n  accept (configurations) {\n    configurations = this.normalizeParams(configurations);\n\n    this.params = this._isServer\n      ? this.acceptAsServer(configurations)\n      : this.acceptAsClient(configurations);\n\n    return this.params;\n  }\n\n  /**\n   * Releases all resources used by the extension.\n   *\n   * @public\n   */\n  cleanup () {\n    if (this._inflate) {\n      if (this._inflate[kWriteInProgress]) {\n        this._inflate[kPendingClose] = true;\n      } else {\n        this._inflate.close();\n        this._inflate = null;\n      }\n    }\n    if (this._deflate) {\n      if (this._deflate[kWriteInProgress]) {\n        this._deflate[kPendingClose] = true;\n      } else {\n        this._deflate.close();\n        this._deflate = null;\n      }\n    }\n  }\n\n  /**\n   *  Accept an extension negotiation offer.\n   *\n   * @param {Array} offers The extension negotiation offers\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsServer (offers) {\n    const opts = this._options;\n    const accepted = offers.find((params) => {\n      if (\n        (opts.serverNoContextTakeover === false &&\n          params.server_no_context_takeover) ||\n        (params.server_max_window_bits &&\n          (opts.serverMaxWindowBits === false ||\n            (typeof opts.serverMaxWindowBits === 'number' &&\n              opts.serverMaxWindowBits > params.server_max_window_bits))) ||\n        (typeof opts.clientMaxWindowBits === 'number' &&\n          !params.client_max_window_bits)\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (!accepted) {\n      throw new Error('None of the extension offers can be accepted');\n    }\n\n    if (opts.serverNoContextTakeover) {\n      accepted.server_no_context_takeover = true;\n    }\n    if (opts.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n    if (typeof opts.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = opts.serverMaxWindowBits;\n    }\n    if (typeof opts.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = opts.clientMaxWindowBits;\n    } else if (\n      accepted.client_max_window_bits === true ||\n      opts.clientMaxWindowBits === false\n    ) {\n      delete accepted.client_max_window_bits;\n    }\n\n    return accepted;\n  }\n\n  /**\n   * Accept the extension negotiation response.\n   *\n   * @param {Array} response The extension negotiation response\n   * @return {Object} Accepted configuration\n   * @private\n   */\n  acceptAsClient (response) {\n    const params = response[0];\n\n    if (\n      this._options.clientNoContextTakeover === false &&\n      params.client_no_context_takeover\n    ) {\n      throw new Error('Unexpected parameter \"client_no_context_takeover\"');\n    }\n\n    if (!params.client_max_window_bits) {\n      if (typeof this._options.clientMaxWindowBits === 'number') {\n        params.client_max_window_bits = this._options.clientMaxWindowBits;\n      }\n    } else if (\n      this._options.clientMaxWindowBits === false ||\n      (typeof this._options.clientMaxWindowBits === 'number' &&\n        params.client_max_window_bits > this._options.clientMaxWindowBits)\n    ) {\n      throw new Error(\n        'Unexpected or invalid parameter \"client_max_window_bits\"'\n      );\n    }\n\n    return params;\n  }\n\n  /**\n   * Normalize parameters.\n   *\n   * @param {Array} configurations The extension negotiation offers/reponse\n   * @return {Array} The offers/response with normalized parameters\n   * @private\n   */\n  normalizeParams (configurations) {\n    configurations.forEach((params) => {\n      Object.keys(params).forEach((key) => {\n        var value = params[key];\n\n        if (value.length > 1) {\n          throw new Error(`Parameter \"${key}\" must have only a single value`);\n        }\n\n        value = value[0];\n\n        if (key === 'client_max_window_bits') {\n          if (value !== true) {\n            const num = +value;\n            if (!Number.isInteger(num) || num < 8 || num > 15) {\n              throw new TypeError(\n                `Invalid value for parameter \"${key}\": ${value}`\n              );\n            }\n            value = num;\n          } else if (!this._isServer) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else if (key === 'server_max_window_bits') {\n          const num = +value;\n          if (!Number.isInteger(num) || num < 8 || num > 15) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n          value = num;\n        } else if (\n          key === 'client_no_context_takeover' ||\n          key === 'server_no_context_takeover'\n        ) {\n          if (value !== true) {\n            throw new TypeError(\n              `Invalid value for parameter \"${key}\": ${value}`\n            );\n          }\n        } else {\n          throw new Error(`Unknown parameter \"${key}\"`);\n        }\n\n        params[key] = value;\n      });\n    });\n\n    return configurations;\n  }\n\n  /**\n   * Decompress data. Concurrency limited by async-limiter.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  decompress (data, fin, callback) {\n    zlibLimiter.push((done) => {\n      this._decompress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Compress data. Concurrency limited by async-limiter.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @public\n   */\n  compress (data, fin, callback) {\n    zlibLimiter.push((done) => {\n      this._compress(data, fin, (err, result) => {\n        done();\n        callback(err, result);\n      });\n    });\n  }\n\n  /**\n   * Decompress data.\n   *\n   * @param {Buffer} data Compressed data\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _decompress (data, fin, callback) {\n    const endpoint = this._isServer ? 'client' : 'server';\n\n    if (!this._inflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits = typeof this.params[key] !== 'number'\n        ? zlib.Z_DEFAULT_WINDOWBITS\n        : this.params[key];\n\n      this._inflate = zlib.createInflateRaw(\n        Object.assign(\n          {},\n          this._options.zlibInflateOptions,\n          { windowBits }\n        )\n      );\n      this._inflate[kTotalLength] = 0;\n      this._inflate[kBuffers] = [];\n      this._inflate[kOwner] = this;\n      this._inflate.on('error', inflateOnError);\n      this._inflate.on('data', inflateOnData);\n    }\n\n    this._inflate[kCallback] = callback;\n    this._inflate[kWriteInProgress] = true;\n\n    this._inflate.write(data);\n    if (fin) this._inflate.write(TRAILER);\n\n    this._inflate.flush(() => {\n      const err = this._inflate[kError];\n\n      if (err) {\n        this._inflate.close();\n        this._inflate = null;\n        callback(err);\n        return;\n      }\n\n      const data = bufferUtil.concat(\n        this._inflate[kBuffers],\n        this._inflate[kTotalLength]\n      );\n\n      if (\n        (fin && this.params[`${endpoint}_no_context_takeover`]) ||\n        this._inflate[kPendingClose]\n      ) {\n        this._inflate.close();\n        this._inflate = null;\n      } else {\n        this._inflate[kWriteInProgress] = false;\n        this._inflate[kTotalLength] = 0;\n        this._inflate[kBuffers] = [];\n      }\n\n      callback(null, data);\n    });\n  }\n\n  /**\n   * Compress data.\n   *\n   * @param {Buffer} data Data to compress\n   * @param {Boolean} fin Specifies whether or not this is the last fragment\n   * @param {Function} callback Callback\n   * @private\n   */\n  _compress (data, fin, callback) {\n    if (!data || data.length === 0) {\n      process.nextTick(callback, null, EMPTY_BLOCK);\n      return;\n    }\n\n    const endpoint = this._isServer ? 'server' : 'client';\n\n    if (!this._deflate) {\n      const key = `${endpoint}_max_window_bits`;\n      const windowBits = typeof this.params[key] !== 'number'\n        ? zlib.Z_DEFAULT_WINDOWBITS\n        : this.params[key];\n\n      this._deflate = zlib.createDeflateRaw(\n        Object.assign(\n          // TODO deprecate memLevel/level and recommend zlibDeflateOptions instead\n          {\n            memLevel: this._options.memLevel,\n            level: this._options.level\n          },\n          this._options.zlibDeflateOptions,\n          { windowBits }\n        )\n      );\n\n      this._deflate[kTotalLength] = 0;\n      this._deflate[kBuffers] = [];\n\n      //\n      // `zlib.DeflateRaw` emits an `'error'` event only when an attempt to use\n      // it is made after it has already been closed. This cannot happen here,\n      // so we only add a listener for the `'data'` event.\n      //\n      this._deflate.on('data', deflateOnData);\n    }\n\n    this._deflate[kWriteInProgress] = true;\n\n    this._deflate.write(data);\n    this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {\n      var data = bufferUtil.concat(\n        this._deflate[kBuffers],\n        this._deflate[kTotalLength]\n      );\n\n      if (fin) data = data.slice(0, data.length - 4);\n\n      if (\n        (fin && this.params[`${endpoint}_no_context_takeover`]) ||\n        this._deflate[kPendingClose]\n      ) {\n        this._deflate.close();\n        this._deflate = null;\n      } else {\n        this._deflate[kWriteInProgress] = false;\n        this._deflate[kTotalLength] = 0;\n        this._deflate[kBuffers] = [];\n      }\n\n      callback(null, data);\n    });\n  }\n}\n\nmodule.exports = PerMessageDeflate;\n\n/**\n * The listener of the `zlib.DeflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction deflateOnData (chunk) {\n  this[kBuffers].push(chunk);\n  this[kTotalLength] += chunk.length;\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'data'` event.\n *\n * @param {Buffer} chunk A chunk of data\n * @private\n */\nfunction inflateOnData (chunk) {\n  this[kTotalLength] += chunk.length;\n\n  if (\n    this[kOwner]._maxPayload < 1 ||\n    this[kTotalLength] <= this[kOwner]._maxPayload\n  ) {\n    this[kBuffers].push(chunk);\n    return;\n  }\n\n  this[kError] = new RangeError('Max payload size exceeded');\n  this[kError].closeCode = 1009;\n  this.removeListener('data', inflateOnData);\n  this.reset();\n}\n\n/**\n * The listener of the `zlib.InflateRaw` stream `'error'` event.\n *\n * @param {Error} err The emitted error\n * @private\n */\nfunction inflateOnError (err) {\n  //\n  // There is no need to call `Zlib#close()` as the handle is automatically\n  // closed when an error is emitted.\n  //\n  this[kOwner]._inflate = null;\n  this[kCallback](err);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/*!******************************************!*\
  !*** ./node_modules/ws/lib/constants.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst safeBuffer = __webpack_require__(/*! safe-buffer */ 14);\n\nconst Buffer = safeBuffer.Buffer;\n\nexports.BINARY_TYPES = ['nodebuffer', 'arraybuffer', 'fragments'];\nexports.GUID = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';\nexports.EMPTY_BUFFER = Buffer.alloc(0);\nexports.NOOP = () => {};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3MvbGliL2NvbnN0YW50cy5qcz9hNGQ2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc2FmZUJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJyk7XG5cbmNvbnN0IEJ1ZmZlciA9IHNhZmVCdWZmZXIuQnVmZmVyO1xuXG5leHBvcnRzLkJJTkFSWV9UWVBFUyA9IFsnbm9kZWJ1ZmZlcicsICdhcnJheWJ1ZmZlcicsICdmcmFnbWVudHMnXTtcbmV4cG9ydHMuR1VJRCA9ICcyNThFQUZBNS1FOTE0LTQ3REEtOTVDQS1DNUFCMERDODVCMTEnO1xuZXhwb3J0cy5FTVBUWV9CVUZGRVIgPSBCdWZmZXIuYWxsb2MoMCk7XG5leHBvcnRzLk5PT1AgPSAoKSA9PiB7fTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dzL2xpYi9jb25zdGFudHMuanNcbi8vIG1vZHVsZSBpZCA9IDI2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/*!****************************************!*\
  !*** ./node_modules/snekfetch/esm.mjs ***!
  \****************************************/
/*! exports provided: default, version, METHODS, acl, bind, checkout, connect, copy, delete, get, head, link, lock, merge, mkactivity, mkcalendar, mkcol, move, notify, options, patch, post, propfind, proppatch, purge, put, rebind, report, search, subscribe, trace, unbind, unlink, unlock, unsubscribe, brew */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"delete\", function() { return _delete; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index_js__ = __webpack_require__(/*! ./index.js */ 85);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__index_js__);\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (__WEBPACK_IMPORTED_MODULE_0__index_js___default.a);\n\nconst version = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.version;\n/* harmony export (immutable) */ __webpack_exports__[\"version\"] = version;\n\nconst METHODS = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.METHODS;\n/* harmony export (immutable) */ __webpack_exports__[\"METHODS\"] = METHODS;\n\n\nconst acl = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.acl;\n/* harmony export (immutable) */ __webpack_exports__[\"acl\"] = acl;\n\nconst bind = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.bind;\n/* harmony export (immutable) */ __webpack_exports__[\"bind\"] = bind;\n\nconst checkout = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.checkout;\n/* harmony export (immutable) */ __webpack_exports__[\"checkout\"] = checkout;\n\nconst connect = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.connect;\n/* harmony export (immutable) */ __webpack_exports__[\"connect\"] = connect;\n\nconst copy = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.copy;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n\nconst _delete = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.delete;\n\nconst get = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.get;\n/* harmony export (immutable) */ __webpack_exports__[\"get\"] = get;\n\nconst head = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.head;\n/* harmony export (immutable) */ __webpack_exports__[\"head\"] = head;\n\nconst link = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.link;\n/* harmony export (immutable) */ __webpack_exports__[\"link\"] = link;\n\nconst lock = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.lock;\n/* harmony export (immutable) */ __webpack_exports__[\"lock\"] = lock;\n\nconst merge = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.merge;\n/* harmony export (immutable) */ __webpack_exports__[\"merge\"] = merge;\n\nconst mkactivity = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.mkactivity;\n/* harmony export (immutable) */ __webpack_exports__[\"mkactivity\"] = mkactivity;\n\nconst mkcalendar = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.mkcalendar;\n/* harmony export (immutable) */ __webpack_exports__[\"mkcalendar\"] = mkcalendar;\n\nconst mkcol = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.mkcol;\n/* harmony export (immutable) */ __webpack_exports__[\"mkcol\"] = mkcol;\n\nconst move = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.move;\n/* harmony export (immutable) */ __webpack_exports__[\"move\"] = move;\n\nconst notify = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.notify;\n/* harmony export (immutable) */ __webpack_exports__[\"notify\"] = notify;\n\nconst options = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.options;\n/* harmony export (immutable) */ __webpack_exports__[\"options\"] = options;\n\nconst patch = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.patch;\n/* harmony export (immutable) */ __webpack_exports__[\"patch\"] = patch;\n\nconst post = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.post;\n/* harmony export (immutable) */ __webpack_exports__[\"post\"] = post;\n\nconst propfind = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.propfind;\n/* harmony export (immutable) */ __webpack_exports__[\"propfind\"] = propfind;\n\nconst proppatch = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.proppatch;\n/* harmony export (immutable) */ __webpack_exports__[\"proppatch\"] = proppatch;\n\nconst purge = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.purge;\n/* harmony export (immutable) */ __webpack_exports__[\"purge\"] = purge;\n\nconst put = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.put;\n/* harmony export (immutable) */ __webpack_exports__[\"put\"] = put;\n\nconst rebind = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.rebind;\n/* harmony export (immutable) */ __webpack_exports__[\"rebind\"] = rebind;\n\nconst report = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.report;\n/* harmony export (immutable) */ __webpack_exports__[\"report\"] = report;\n\nconst search = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.search;\n/* harmony export (immutable) */ __webpack_exports__[\"search\"] = search;\n\nconst subscribe = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.subscribe;\n/* harmony export (immutable) */ __webpack_exports__[\"subscribe\"] = subscribe;\n\nconst trace = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.trace;\n/* harmony export (immutable) */ __webpack_exports__[\"trace\"] = trace;\n\nconst unbind = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.unbind;\n/* harmony export (immutable) */ __webpack_exports__[\"unbind\"] = unbind;\n\nconst unlink = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.unlink;\n/* harmony export (immutable) */ __webpack_exports__[\"unlink\"] = unlink;\n\nconst unlock = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.unlock;\n/* harmony export (immutable) */ __webpack_exports__[\"unlock\"] = unlock;\n\nconst unsubscribe = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.unsubscribe;\n/* harmony export (immutable) */ __webpack_exports__[\"unsubscribe\"] = unsubscribe;\n\nconst brew = __WEBPACK_IMPORTED_MODULE_0__index_js___default.a.brew;\n/* harmony export (immutable) */ __webpack_exports__[\"brew\"] = brew;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL2VzbS5tanM/YjJlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU25la2ZldGNoIGZyb20gJy4vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBTbmVrZmV0Y2g7XG5cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gU25la2ZldGNoLnZlcnNpb247XG5leHBvcnQgY29uc3QgTUVUSE9EUyA9IFNuZWtmZXRjaC5NRVRIT0RTO1xuXG5leHBvcnQgY29uc3QgYWNsID0gU25la2ZldGNoLmFjbDtcbmV4cG9ydCBjb25zdCBiaW5kID0gU25la2ZldGNoLmJpbmQ7XG5leHBvcnQgY29uc3QgY2hlY2tvdXQgPSBTbmVrZmV0Y2guY2hlY2tvdXQ7XG5leHBvcnQgY29uc3QgY29ubmVjdCA9IFNuZWtmZXRjaC5jb25uZWN0O1xuZXhwb3J0IGNvbnN0IGNvcHkgPSBTbmVrZmV0Y2guY29weTtcbmNvbnN0IF9kZWxldGUgPSBTbmVrZmV0Y2guZGVsZXRlO1xuZXhwb3J0IHsgX2RlbGV0ZSBhcyBkZWxldGUgfTtcbmV4cG9ydCBjb25zdCBnZXQgPSBTbmVrZmV0Y2guZ2V0O1xuZXhwb3J0IGNvbnN0IGhlYWQgPSBTbmVrZmV0Y2guaGVhZDtcbmV4cG9ydCBjb25zdCBsaW5rID0gU25la2ZldGNoLmxpbms7XG5leHBvcnQgY29uc3QgbG9jayA9IFNuZWtmZXRjaC5sb2NrO1xuZXhwb3J0IGNvbnN0IG1lcmdlID0gU25la2ZldGNoLm1lcmdlO1xuZXhwb3J0IGNvbnN0IG1rYWN0aXZpdHkgPSBTbmVrZmV0Y2gubWthY3Rpdml0eTtcbmV4cG9ydCBjb25zdCBta2NhbGVuZGFyID0gU25la2ZldGNoLm1rY2FsZW5kYXI7XG5leHBvcnQgY29uc3QgbWtjb2wgPSBTbmVrZmV0Y2gubWtjb2w7XG5leHBvcnQgY29uc3QgbW92ZSA9IFNuZWtmZXRjaC5tb3ZlO1xuZXhwb3J0IGNvbnN0IG5vdGlmeSA9IFNuZWtmZXRjaC5ub3RpZnk7XG5leHBvcnQgY29uc3Qgb3B0aW9ucyA9IFNuZWtmZXRjaC5vcHRpb25zO1xuZXhwb3J0IGNvbnN0IHBhdGNoID0gU25la2ZldGNoLnBhdGNoO1xuZXhwb3J0IGNvbnN0IHBvc3QgPSBTbmVrZmV0Y2gucG9zdDtcbmV4cG9ydCBjb25zdCBwcm9wZmluZCA9IFNuZWtmZXRjaC5wcm9wZmluZDtcbmV4cG9ydCBjb25zdCBwcm9wcGF0Y2ggPSBTbmVrZmV0Y2gucHJvcHBhdGNoO1xuZXhwb3J0IGNvbnN0IHB1cmdlID0gU25la2ZldGNoLnB1cmdlO1xuZXhwb3J0IGNvbnN0IHB1dCA9IFNuZWtmZXRjaC5wdXQ7XG5leHBvcnQgY29uc3QgcmViaW5kID0gU25la2ZldGNoLnJlYmluZDtcbmV4cG9ydCBjb25zdCByZXBvcnQgPSBTbmVrZmV0Y2gucmVwb3J0O1xuZXhwb3J0IGNvbnN0IHNlYXJjaCA9IFNuZWtmZXRjaC5zZWFyY2g7XG5leHBvcnQgY29uc3Qgc3Vic2NyaWJlID0gU25la2ZldGNoLnN1YnNjcmliZTtcbmV4cG9ydCBjb25zdCB0cmFjZSA9IFNuZWtmZXRjaC50cmFjZTtcbmV4cG9ydCBjb25zdCB1bmJpbmQgPSBTbmVrZmV0Y2gudW5iaW5kO1xuZXhwb3J0IGNvbnN0IHVubGluayA9IFNuZWtmZXRjaC51bmxpbms7XG5leHBvcnQgY29uc3QgdW5sb2NrID0gU25la2ZldGNoLnVubG9jaztcbmV4cG9ydCBjb25zdCB1bnN1YnNjcmliZSA9IFNuZWtmZXRjaC51bnN1YnNjcmliZTtcbmV4cG9ydCBjb25zdCBicmV3ID0gU25la2ZldGNoLmJyZXc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zbmVrZmV0Y2gvZXNtLm1qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFBQTtBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"zlib\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ6bGliXCI/MzdiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ6bGliXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiemxpYlwiXG4vLyBtb2R1bGUgaWQgPSAyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"http\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwXCI/OGU0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJodHRwXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiaHR0cFwiXG4vLyBtb2R1bGUgaWQgPSAyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"url\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJ1cmxcIj9jYWVjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInVybFwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcInVybFwiXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"stream\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJzdHJlYW1cIj9jOTNiIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInN0cmVhbVwiKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcInN0cmVhbVwiXG4vLyBtb2R1bGUgaWQgPSAzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"fs\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJmc1wiPzJlMDkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZnNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJmc1wiXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/*!***************************************!*\
  !*** ./node_modules/long/src/long.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/ClientDataResolver.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const path = __webpack_require__(/*! path */ 8);\nconst fs = __webpack_require__(/*! fs */ 32);\nconst snekfetch = __webpack_require__(/*! snekfetch */ 27);\n\nconst Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst convertToBuffer = __webpack_require__(/*! ../util/Util */ 4).convertToBuffer;\nconst User = __webpack_require__(/*! ../structures/User */ 11);\nconst Message = __webpack_require__(/*! ../structures/Message */ 16);\nconst Guild = __webpack_require__(/*! ../structures/Guild */ 22);\nconst Channel = __webpack_require__(/*! ../structures/Channel */ 13);\nconst GuildMember = __webpack_require__(/*! ../structures/GuildMember */ 18);\nconst Emoji = __webpack_require__(/*! ../structures/Emoji */ 17);\nconst ReactionEmoji = __webpack_require__(/*! ../structures/ReactionEmoji */ 35);\nconst Role = __webpack_require__(/*! ../structures/Role */ 10);\n\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them, e.g.\n * extracting a User from a Message object.\n * @private\n */\nclass ClientDataResolver {\n  /**\n   * @param {Client} client The client the resolver is for\n   */\n  constructor(client) {\n    this.client = client;\n  }\n\n  /**\n   * Data that resolves to give a User object. This can be:\n   * * A User object\n   * * A Snowflake\n   * * A Message object (resolves to the message author)\n   * * A Guild object (owner of the guild)\n   * * A GuildMember object\n   * @typedef {User|Snowflake|Message|Guild|GuildMember} UserResolvable\n   */\n\n  /**\n   * Resolves a UserResolvable to a User object.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?User}\n   */\n  resolveUser(user) {\n    if (user instanceof User) return user;\n    if (typeof user === 'string') return this.client.users.get(user) || null;\n    if (user instanceof GuildMember) return user.user;\n    if (user instanceof Message) return user.author;\n    if (user instanceof Guild) return user.owner;\n    return null;\n  }\n\n  /**\n   * Resolves a UserResolvable to a user ID string.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveUserID(user) {\n    if (user instanceof User || user instanceof GuildMember) return user.id;\n    if (typeof user === 'string') return user || null;\n    if (user instanceof Message) return user.author.id;\n    if (user instanceof Guild) return user.ownerID;\n    return null;\n  }\n\n  /**\n   * Data that resolves to give a Guild object. This can be:\n   * * A Guild object\n   * * A Snowflake\n   * @typedef {Guild|Snowflake} GuildResolvable\n   */\n\n  /**\n   * Resolves a GuildResolvable to a Guild object.\n   * @param {GuildResolvable} guild The GuildResolvable to identify\n   * @returns {?Guild}\n   */\n  resolveGuild(guild) {\n    if (guild instanceof Guild) return guild;\n    if (typeof guild === 'string') return this.client.guilds.get(guild) || null;\n    return null;\n  }\n\n  /**\n   * Data that resolves to give a GuildMember object. This can be:\n   * * A GuildMember object\n   * * A User object\n   * @typedef {GuildMember|User} GuildMemberResolvable\n   */\n\n  /**\n   * Resolves a GuildMemberResolvable to a GuildMember object.\n   * @param {GuildResolvable} guild The guild that the member is part of\n   * @param {UserResolvable} user The user that is part of the guild\n   * @returns {?GuildMember}\n   */\n  resolveGuildMember(guild, user) {\n    if (user instanceof GuildMember) return user;\n    guild = this.resolveGuild(guild);\n    user = this.resolveUser(user);\n    if (!guild || !user) return null;\n    return guild.members.get(user.id) || null;\n  }\n\n  /**\n   * Data that can be resolved to a Role object. This can be:\n   * * A Role\n   * * A Snowflake\n   * @typedef {Role|Snowflake} RoleResolvable\n   */\n\n  /**\n    * Resolves a RoleResolvable to a Role object.\n    * @param {GuildResolvable} guild The guild that this role is part of\n    * @param {RoleResolvable} role The role resolvable to resolve\n    * @returns {?Role}\n    */\n  resolveRole(guild, role) {\n    if (role instanceof Role) return role;\n    guild = this.resolveGuild(guild);\n    if (!guild) return null;\n    if (typeof role === 'string') return guild.roles.get(role);\n    return null;\n  }\n\n  /**\n   * Data that can be resolved to give a Channel object. This can be:\n   * * A Channel object\n   * * A Message object (the channel the message was sent in)\n   * * A Guild object (the #general channel)\n   * * A Snowflake\n   * @typedef {Channel|Guild|Message|Snowflake} ChannelResolvable\n   */\n\n  /**\n   * Resolves a ChannelResolvable to a Channel object.\n   * @param {ChannelResolvable} channel The channel resolvable to resolve\n   * @returns {?Channel}\n   */\n  resolveChannel(channel) {\n    if (channel instanceof Channel) return channel;\n    if (typeof channel === 'string') return this.client.channels.get(channel) || null;\n    if (channel instanceof Message) return channel.channel;\n    if (channel instanceof Guild) return channel.channels.get(channel.id) || null;\n    return null;\n  }\n\n  /**\n   * Resolves a ChannelResolvable to a channel ID.\n   * @param {ChannelResolvable} channel The channel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveChannelID(channel) {\n    if (channel instanceof Channel) return channel.id;\n    if (typeof channel === 'string') return channel;\n    if (channel instanceof Message) return channel.channel.id;\n    if (channel instanceof Guild) return channel.defaultChannel.id;\n    return null;\n  }\n\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n  resolveInviteCode(data) {\n    const inviteRegex = /discord(?:app\\.com\\/invite|\\.gg)\\/([\\w-]{2,255})/i;\n    const match = inviteRegex.exec(data);\n    if (match && match[1]) return match[1];\n    return data;\n  }\n\n  /**\n   * Data that can be resolved to give a string. This can be:\n   * * A string\n   * * An array (joined with a new line delimiter to give a string)\n   * * Any value\n   * @typedef {string|Array|*} StringResolvable\n   */\n\n  /**\n   * Resolves a StringResolvable to a string.\n   * @param {StringResolvable} data The string resolvable to resolve\n   * @returns {string}\n   */\n  resolveString(data) {\n    if (typeof data === 'string') return data;\n    if (data instanceof Array) return data.join('\\n');\n    return String(data);\n  }\n\n\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n  resolveImage(image) {\n    if (!image) return Promise.resolve(null);\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return Promise.resolve(image);\n    }\n    return this.resolveFile(image).then(this.resolveBase64);\n  }\n\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n  resolveBase64(data) {\n    if (data instanceof Buffer) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n\n  /**\n    * Data that can be resolved to give a Buffer. This can be:\n    * * A Buffer\n    * * The path to a local file\n    * * A URL\n    * * A Stream\n    * @typedef {string|Buffer} BufferResolvable\n    */\n\n  /**\n    * @external Stream\n    * @see {@link https://nodejs.org/api/stream.html}\n    */\n\n  /**\n    * Resolves a BufferResolvable to a Buffer.\n    * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n    * @returns {Promise<Buffer>}\n    */\n  resolveFile(resource) {\n    if (resource instanceof Buffer) return Promise.resolve(resource);\n    if (this.client.browser && resource instanceof ArrayBuffer) return Promise.resolve(convertToBuffer(resource));\n\n    if (typeof resource === 'string') {\n      return new Promise((resolve, reject) => {\n        if (/^https?:\\/\\//.test(resource)) {\n          snekfetch.get(resource)\n            .end((err, res) => {\n              if (err) return reject(err);\n              if (!(res.body instanceof Buffer)) return reject(new TypeError('The response body isn\\'t a Buffer.'));\n              return resolve(res.body);\n            });\n        } else {\n          const file = path.resolve(resource);\n          fs.stat(file, (err, stats) => {\n            if (err) return reject(err);\n            if (!stats || !stats.isFile()) return reject(new Error(`The file could not be found: ${file}`));\n            fs.readFile(file, (err2, data) => {\n              if (err2) reject(err2); else resolve(data);\n            });\n            return null;\n          });\n        }\n      });\n    } else if (resource.pipe && typeof resource.pipe === 'function') {\n      return new Promise((resolve, reject) => {\n        const buffers = [];\n        resource.once('error', reject);\n        resource.on('data', data => buffers.push(data));\n        resource.once('end', () => resolve(Buffer.concat(buffers)));\n      });\n    }\n\n    return Promise.reject(new TypeError('The resource must be a string or Buffer.'));\n  }\n\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * A custom emoji ID\n   * * An Emoji object\n   * * A ReactionEmoji object\n   * @typedef {string|Emoji|ReactionEmoji} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n  resolveEmojiIdentifier(emoji) {\n    if (emoji instanceof Emoji || emoji instanceof ReactionEmoji) return emoji.identifier;\n    if (typeof emoji === 'string') {\n      if (this.client.emojis.has(emoji)) return this.client.emojis.get(emoji).identifier;\n      else if (!emoji.includes('%')) return encodeURIComponent(emoji);\n      else return emoji;\n    }\n    return null;\n  }\n\n  /**\n   * Can be a Hex Literal, Hex String, Number, RGB Array, or one of the following\n   * ```\n   * [\n   *   'DEFAULT',\n   *   'AQUA',\n   *   'GREEN',\n   *   'BLUE',\n   *   'PURPLE',\n   *   'GOLD',\n   *   'ORANGE',\n   *   'RED',\n   *   'GREY',\n   *   'DARKER_GREY',\n   *   'NAVY',\n   *   'DARK_AQUA',\n   *   'DARK_GREEN',\n   *   'DARK_BLUE',\n   *   'DARK_PURPLE',\n   *   'DARK_GOLD',\n   *   'DARK_ORANGE',\n   *   'DARK_RED',\n   *   'DARK_GREY',\n   *   'LIGHT_GREY',\n   *   'DARK_NAVY',\n   *   'RANDOM',\n   * ]\n   * ```\n   * or something like\n   * ```\n   * [255, 0, 255]\n   * ```\n   * for purple\n   * @typedef {string|number|Array} ColorResolvable\n   */\n\n  /**\n   * Resolves a ColorResolvable into a color number.\n   * @param {ColorResolvable} color Color to resolve\n   * @returns {number} A color\n   */\n  static resolveColor(color) {\n    if (typeof color === 'string') {\n      if (color === 'RANDOM') return Math.floor(Math.random() * (0xFFFFFF + 1));\n      if (color === 'DEFAULT') return 0;\n      color = Constants.Colors[color] || parseInt(color.replace('#', ''), 16);\n    } else if (color instanceof Array) {\n      color = (color[0] << 16) + (color[1] << 8) + color[2];\n    }\n\n    if (color < 0 || color > 0xFFFFFF) {\n      throw new RangeError('Color must be within the range 0 - 16777215 (0xFFFFFF).');\n    } else if (color && isNaN(color)) {\n      throw new TypeError('Unable to convert color to a number.');\n    }\n\n    return color;\n  }\n\n  /**\n   * @param {ColorResolvable} color Color to resolve\n   * @returns {number} A color\n   */\n  resolveColor(color) {\n    return this.constructor.resolveColor(color);\n  }\n}\n\nmodule.exports = ClientDataResolver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L0NsaWVudERhdGFSZXNvbHZlci5qcz84NzEyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBzbmVrZmV0Y2ggPSByZXF1aXJlKCdzbmVrZmV0Y2gnKTtcblxuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vdXRpbC9Db25zdGFudHMnKTtcbmNvbnN0IGNvbnZlcnRUb0J1ZmZlciA9IHJlcXVpcmUoJy4uL3V0aWwvVXRpbCcpLmNvbnZlcnRUb0J1ZmZlcjtcbmNvbnN0IFVzZXIgPSByZXF1aXJlKCcuLi9zdHJ1Y3R1cmVzL1VzZXInKTtcbmNvbnN0IE1lc3NhZ2UgPSByZXF1aXJlKCcuLi9zdHJ1Y3R1cmVzL01lc3NhZ2UnKTtcbmNvbnN0IEd1aWxkID0gcmVxdWlyZSgnLi4vc3RydWN0dXJlcy9HdWlsZCcpO1xuY29uc3QgQ2hhbm5lbCA9IHJlcXVpcmUoJy4uL3N0cnVjdHVyZXMvQ2hhbm5lbCcpO1xuY29uc3QgR3VpbGRNZW1iZXIgPSByZXF1aXJlKCcuLi9zdHJ1Y3R1cmVzL0d1aWxkTWVtYmVyJyk7XG5jb25zdCBFbW9qaSA9IHJlcXVpcmUoJy4uL3N0cnVjdHVyZXMvRW1vamknKTtcbmNvbnN0IFJlYWN0aW9uRW1vamkgPSByZXF1aXJlKCcuLi9zdHJ1Y3R1cmVzL1JlYWN0aW9uRW1vamknKTtcbmNvbnN0IFJvbGUgPSByZXF1aXJlKCcuLi9zdHJ1Y3R1cmVzL1JvbGUnKTtcblxuLyoqXG4gKiBUaGUgRGF0YVJlc29sdmVyIGlkZW50aWZpZXMgZGlmZmVyZW50IG9iamVjdHMgYW5kIHRyaWVzIHRvIHJlc29sdmUgYSBzcGVjaWZpYyBwaWVjZSBvZiBpbmZvcm1hdGlvbiBmcm9tIHRoZW0sIGUuZy5cbiAqIGV4dHJhY3RpbmcgYSBVc2VyIGZyb20gYSBNZXNzYWdlIG9iamVjdC5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENsaWVudERhdGFSZXNvbHZlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50IFRoZSBjbGllbnQgdGhlIHJlc29sdmVyIGlzIGZvclxuICAgKi9cbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICAvKipcbiAgICogRGF0YSB0aGF0IHJlc29sdmVzIHRvIGdpdmUgYSBVc2VyIG9iamVjdC4gVGhpcyBjYW4gYmU6XG4gICAqICogQSBVc2VyIG9iamVjdFxuICAgKiAqIEEgU25vd2ZsYWtlXG4gICAqICogQSBNZXNzYWdlIG9iamVjdCAocmVzb2x2ZXMgdG8gdGhlIG1lc3NhZ2UgYXV0aG9yKVxuICAgKiAqIEEgR3VpbGQgb2JqZWN0IChvd25lciBvZiB0aGUgZ3VpbGQpXG4gICAqICogQSBHdWlsZE1lbWJlciBvYmplY3RcbiAgICogQHR5cGVkZWYge1VzZXJ8U25vd2ZsYWtlfE1lc3NhZ2V8R3VpbGR8R3VpbGRNZW1iZXJ9IFVzZXJSZXNvbHZhYmxlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyBhIFVzZXJSZXNvbHZhYmxlIHRvIGEgVXNlciBvYmplY3QuXG4gICAqIEBwYXJhbSB7VXNlclJlc29sdmFibGV9IHVzZXIgVGhlIFVzZXJSZXNvbHZhYmxlIHRvIGlkZW50aWZ5XG4gICAqIEByZXR1cm5zIHs/VXNlcn1cbiAgICovXG4gIHJlc29sdmVVc2VyKHVzZXIpIHtcbiAgICBpZiAodXNlciBpbnN0YW5jZW9mIFVzZXIpIHJldHVybiB1c2VyO1xuICAgIGlmICh0eXBlb2YgdXNlciA9PT0gJ3N0cmluZycpIHJldHVybiB0aGlzLmNsaWVudC51c2Vycy5nZXQodXNlcikgfHwgbnVsbDtcbiAgICBpZiAodXNlciBpbnN0YW5jZW9mIEd1aWxkTWVtYmVyKSByZXR1cm4gdXNlci51c2VyO1xuICAgIGlmICh1c2VyIGluc3RhbmNlb2YgTWVzc2FnZSkgcmV0dXJuIHVzZXIuYXV0aG9yO1xuICAgIGlmICh1c2VyIGluc3RhbmNlb2YgR3VpbGQpIHJldHVybiB1c2VyLm93bmVyO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIGEgVXNlclJlc29sdmFibGUgdG8gYSB1c2VyIElEIHN0cmluZy5cbiAgICogQHBhcmFtIHtVc2VyUmVzb2x2YWJsZX0gdXNlciBUaGUgVXNlclJlc29sdmFibGUgdG8gaWRlbnRpZnlcbiAgICogQHJldHVybnMgez9Tbm93Zmxha2V9XG4gICAqL1xuICByZXNvbHZlVXNlcklEKHVzZXIpIHtcbiAgICBpZiAodXNlciBpbnN0YW5jZW9mIFVzZXIgfHwgdXNlciBpbnN0YW5jZW9mIEd1aWxkTWVtYmVyKSByZXR1cm4gdXNlci5pZDtcbiAgICBpZiAodHlwZW9mIHVzZXIgPT09ICdzdHJpbmcnKSByZXR1cm4gdXNlciB8fCBudWxsO1xuICAgIGlmICh1c2VyIGluc3RhbmNlb2YgTWVzc2FnZSkgcmV0dXJuIHVzZXIuYXV0aG9yLmlkO1xuICAgIGlmICh1c2VyIGluc3RhbmNlb2YgR3VpbGQpIHJldHVybiB1c2VyLm93bmVySUQ7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogRGF0YSB0aGF0IHJlc29sdmVzIHRvIGdpdmUgYSBHdWlsZCBvYmplY3QuIFRoaXMgY2FuIGJlOlxuICAgKiAqIEEgR3VpbGQgb2JqZWN0XG4gICAqICogQSBTbm93Zmxha2VcbiAgICogQHR5cGVkZWYge0d1aWxkfFNub3dmbGFrZX0gR3VpbGRSZXNvbHZhYmxlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyBhIEd1aWxkUmVzb2x2YWJsZSB0byBhIEd1aWxkIG9iamVjdC5cbiAgICogQHBhcmFtIHtHdWlsZFJlc29sdmFibGV9IGd1aWxkIFRoZSBHdWlsZFJlc29sdmFibGUgdG8gaWRlbnRpZnlcbiAgICogQHJldHVybnMgez9HdWlsZH1cbiAgICovXG4gIHJlc29sdmVHdWlsZChndWlsZCkge1xuICAgIGlmIChndWlsZCBpbnN0YW5jZW9mIEd1aWxkKSByZXR1cm4gZ3VpbGQ7XG4gICAgaWYgKHR5cGVvZiBndWlsZCA9PT0gJ3N0cmluZycpIHJldHVybiB0aGlzLmNsaWVudC5ndWlsZHMuZ2V0KGd1aWxkKSB8fCBudWxsO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIERhdGEgdGhhdCByZXNvbHZlcyB0byBnaXZlIGEgR3VpbGRNZW1iZXIgb2JqZWN0LiBUaGlzIGNhbiBiZTpcbiAgICogKiBBIEd1aWxkTWVtYmVyIG9iamVjdFxuICAgKiAqIEEgVXNlciBvYmplY3RcbiAgICogQHR5cGVkZWYge0d1aWxkTWVtYmVyfFVzZXJ9IEd1aWxkTWVtYmVyUmVzb2x2YWJsZVxuICAgKi9cblxuICAvKipcbiAgICogUmVzb2x2ZXMgYSBHdWlsZE1lbWJlclJlc29sdmFibGUgdG8gYSBHdWlsZE1lbWJlciBvYmplY3QuXG4gICAqIEBwYXJhbSB7R3VpbGRSZXNvbHZhYmxlfSBndWlsZCBUaGUgZ3VpbGQgdGhhdCB0aGUgbWVtYmVyIGlzIHBhcnQgb2ZcbiAgICogQHBhcmFtIHtVc2VyUmVzb2x2YWJsZX0gdXNlciBUaGUgdXNlciB0aGF0IGlzIHBhcnQgb2YgdGhlIGd1aWxkXG4gICAqIEByZXR1cm5zIHs/R3VpbGRNZW1iZXJ9XG4gICAqL1xuICByZXNvbHZlR3VpbGRNZW1iZXIoZ3VpbGQsIHVzZXIpIHtcbiAgICBpZiAodXNlciBpbnN0YW5jZW9mIEd1aWxkTWVtYmVyKSByZXR1cm4gdXNlcjtcbiAgICBndWlsZCA9IHRoaXMucmVzb2x2ZUd1aWxkKGd1aWxkKTtcbiAgICB1c2VyID0gdGhpcy5yZXNvbHZlVXNlcih1c2VyKTtcbiAgICBpZiAoIWd1aWxkIHx8ICF1c2VyKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gZ3VpbGQubWVtYmVycy5nZXQodXNlci5pZCkgfHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEYXRhIHRoYXQgY2FuIGJlIHJlc29sdmVkIHRvIGEgUm9sZSBvYmplY3QuIFRoaXMgY2FuIGJlOlxuICAgKiAqIEEgUm9sZVxuICAgKiAqIEEgU25vd2ZsYWtlXG4gICAqIEB0eXBlZGVmIHtSb2xlfFNub3dmbGFrZX0gUm9sZVJlc29sdmFibGVcbiAgICovXG5cbiAgLyoqXG4gICAgKiBSZXNvbHZlcyBhIFJvbGVSZXNvbHZhYmxlIHRvIGEgUm9sZSBvYmplY3QuXG4gICAgKiBAcGFyYW0ge0d1aWxkUmVzb2x2YWJsZX0gZ3VpbGQgVGhlIGd1aWxkIHRoYXQgdGhpcyByb2xlIGlzIHBhcnQgb2ZcbiAgICAqIEBwYXJhbSB7Um9sZVJlc29sdmFibGV9IHJvbGUgVGhlIHJvbGUgcmVzb2x2YWJsZSB0byByZXNvbHZlXG4gICAgKiBAcmV0dXJucyB7P1JvbGV9XG4gICAgKi9cbiAgcmVzb2x2ZVJvbGUoZ3VpbGQsIHJvbGUpIHtcbiAgICBpZiAocm9sZSBpbnN0YW5jZW9mIFJvbGUpIHJldHVybiByb2xlO1xuICAgIGd1aWxkID0gdGhpcy5yZXNvbHZlR3VpbGQoZ3VpbGQpO1xuICAgIGlmICghZ3VpbGQpIHJldHVybiBudWxsO1xuICAgIGlmICh0eXBlb2Ygcm9sZSA9PT0gJ3N0cmluZycpIHJldHVybiBndWlsZC5yb2xlcy5nZXQocm9sZSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogRGF0YSB0aGF0IGNhbiBiZSByZXNvbHZlZCB0byBnaXZlIGEgQ2hhbm5lbCBvYmplY3QuIFRoaXMgY2FuIGJlOlxuICAgKiAqIEEgQ2hhbm5lbCBvYmplY3RcbiAgICogKiBBIE1lc3NhZ2Ugb2JqZWN0ICh0aGUgY2hhbm5lbCB0aGUgbWVzc2FnZSB3YXMgc2VudCBpbilcbiAgICogKiBBIEd1aWxkIG9iamVjdCAodGhlICNnZW5lcmFsIGNoYW5uZWwpXG4gICAqICogQSBTbm93Zmxha2VcbiAgICogQHR5cGVkZWYge0NoYW5uZWx8R3VpbGR8TWVzc2FnZXxTbm93Zmxha2V9IENoYW5uZWxSZXNvbHZhYmxlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyBhIENoYW5uZWxSZXNvbHZhYmxlIHRvIGEgQ2hhbm5lbCBvYmplY3QuXG4gICAqIEBwYXJhbSB7Q2hhbm5lbFJlc29sdmFibGV9IGNoYW5uZWwgVGhlIGNoYW5uZWwgcmVzb2x2YWJsZSB0byByZXNvbHZlXG4gICAqIEByZXR1cm5zIHs/Q2hhbm5lbH1cbiAgICovXG4gIHJlc29sdmVDaGFubmVsKGNoYW5uZWwpIHtcbiAgICBpZiAoY2hhbm5lbCBpbnN0YW5jZW9mIENoYW5uZWwpIHJldHVybiBjaGFubmVsO1xuICAgIGlmICh0eXBlb2YgY2hhbm5lbCA9PT0gJ3N0cmluZycpIHJldHVybiB0aGlzLmNsaWVudC5jaGFubmVscy5nZXQoY2hhbm5lbCkgfHwgbnVsbDtcbiAgICBpZiAoY2hhbm5lbCBpbnN0YW5jZW9mIE1lc3NhZ2UpIHJldHVybiBjaGFubmVsLmNoYW5uZWw7XG4gICAgaWYgKGNoYW5uZWwgaW5zdGFuY2VvZiBHdWlsZCkgcmV0dXJuIGNoYW5uZWwuY2hhbm5lbHMuZ2V0KGNoYW5uZWwuaWQpIHx8IG51bGw7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgYSBDaGFubmVsUmVzb2x2YWJsZSB0byBhIGNoYW5uZWwgSUQuXG4gICAqIEBwYXJhbSB7Q2hhbm5lbFJlc29sdmFibGV9IGNoYW5uZWwgVGhlIGNoYW5uZWwgcmVzb2x2YWJsZSB0byByZXNvbHZlXG4gICAqIEByZXR1cm5zIHs/U25vd2ZsYWtlfVxuICAgKi9cbiAgcmVzb2x2ZUNoYW5uZWxJRChjaGFubmVsKSB7XG4gICAgaWYgKGNoYW5uZWwgaW5zdGFuY2VvZiBDaGFubmVsKSByZXR1cm4gY2hhbm5lbC5pZDtcbiAgICBpZiAodHlwZW9mIGNoYW5uZWwgPT09ICdzdHJpbmcnKSByZXR1cm4gY2hhbm5lbDtcbiAgICBpZiAoY2hhbm5lbCBpbnN0YW5jZW9mIE1lc3NhZ2UpIHJldHVybiBjaGFubmVsLmNoYW5uZWwuaWQ7XG4gICAgaWYgKGNoYW5uZWwgaW5zdGFuY2VvZiBHdWlsZCkgcmV0dXJuIGNoYW5uZWwuZGVmYXVsdENoYW5uZWwuaWQ7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogRGF0YSB0aGF0IGNhbiBiZSByZXNvbHZlZCB0byBnaXZlIGFuIGludml0ZSBjb2RlLiBUaGlzIGNhbiBiZTpcbiAgICogKiBBbiBpbnZpdGUgY29kZVxuICAgKiAqIEFuIGludml0ZSBVUkxcbiAgICogQHR5cGVkZWYge3N0cmluZ30gSW52aXRlUmVzb2x2YWJsZVxuICAgKi9cblxuICAvKipcbiAgICogUmVzb2x2ZXMgSW52aXRlUmVzb2x2YWJsZSB0byBhbiBpbnZpdGUgY29kZS5cbiAgICogQHBhcmFtIHtJbnZpdGVSZXNvbHZhYmxlfSBkYXRhIFRoZSBpbnZpdGUgcmVzb2x2YWJsZSB0byByZXNvbHZlXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICByZXNvbHZlSW52aXRlQ29kZShkYXRhKSB7XG4gICAgY29uc3QgaW52aXRlUmVnZXggPSAvZGlzY29yZCg/OmFwcFxcLmNvbVxcL2ludml0ZXxcXC5nZylcXC8oW1xcdy1dezIsMjU1fSkvaTtcbiAgICBjb25zdCBtYXRjaCA9IGludml0ZVJlZ2V4LmV4ZWMoZGF0YSk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSByZXR1cm4gbWF0Y2hbMV07XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICAvKipcbiAgICogRGF0YSB0aGF0IGNhbiBiZSByZXNvbHZlZCB0byBnaXZlIGEgc3RyaW5nLiBUaGlzIGNhbiBiZTpcbiAgICogKiBBIHN0cmluZ1xuICAgKiAqIEFuIGFycmF5IChqb2luZWQgd2l0aCBhIG5ldyBsaW5lIGRlbGltaXRlciB0byBnaXZlIGEgc3RyaW5nKVxuICAgKiAqIEFueSB2YWx1ZVxuICAgKiBAdHlwZWRlZiB7c3RyaW5nfEFycmF5fCp9IFN0cmluZ1Jlc29sdmFibGVcbiAgICovXG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIGEgU3RyaW5nUmVzb2x2YWJsZSB0byBhIHN0cmluZy5cbiAgICogQHBhcmFtIHtTdHJpbmdSZXNvbHZhYmxlfSBkYXRhIFRoZSBzdHJpbmcgcmVzb2x2YWJsZSB0byByZXNvbHZlXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICByZXNvbHZlU3RyaW5nKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSByZXR1cm4gZGF0YTtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5KSByZXR1cm4gZGF0YS5qb2luKCdcXG4nKTtcbiAgICByZXR1cm4gU3RyaW5nKGRhdGEpO1xuICB9XG5cblxuICAvKipcbiAgICogUmVzb2x2ZXMgYSBCYXNlNjRSZXNvbHZhYmxlLCBhIHN0cmluZywgb3IgYSBCdWZmZXJSZXNvbHZhYmxlIHRvIGEgQmFzZSA2NCBpbWFnZS5cbiAgICogQHBhcmFtIHtCdWZmZXJSZXNvbHZhYmxlfEJhc2U2NFJlc29sdmFibGV9IGltYWdlIFRoZSBpbWFnZSB0byBiZSByZXNvbHZlZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTw/c3RyaW5nPn1cbiAgICovXG4gIHJlc29sdmVJbWFnZShpbWFnZSkge1xuICAgIGlmICghaW1hZ2UpIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgaWYgKHR5cGVvZiBpbWFnZSA9PT0gJ3N0cmluZycgJiYgaW1hZ2Uuc3RhcnRzV2l0aCgnZGF0YTonKSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShpbWFnZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlc29sdmVGaWxlKGltYWdlKS50aGVuKHRoaXMucmVzb2x2ZUJhc2U2NCk7XG4gIH1cblxuICAvKipcbiAgICogRGF0YSB0aGF0IHJlc29sdmVzIHRvIGdpdmUgYSBCYXNlNjQgc3RyaW5nLCB0eXBpY2FsbHkgZm9yIGltYWdlIHVwbG9hZGluZy4gVGhpcyBjYW4gYmU6XG4gICAqICogQSBCdWZmZXJcbiAgICogKiBBIGJhc2U2NCBzdHJpbmdcbiAgICogQHR5cGVkZWYge0J1ZmZlcnxzdHJpbmd9IEJhc2U2NFJlc29sdmFibGVcbiAgICovXG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIGEgQmFzZTY0UmVzb2x2YWJsZSB0byBhIEJhc2UgNjQgaW1hZ2UuXG4gICAqIEBwYXJhbSB7QmFzZTY0UmVzb2x2YWJsZX0gZGF0YSBUaGUgYmFzZSA2NCByZXNvbHZhYmxlIHlvdSB3YW50IHRvIHJlc29sdmVcbiAgICogQHJldHVybnMgez9zdHJpbmd9XG4gICAqL1xuICByZXNvbHZlQmFzZTY0KGRhdGEpIHtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEJ1ZmZlcikgcmV0dXJuIGBkYXRhOmltYWdlL2pwZztiYXNlNjQsJHtkYXRhLnRvU3RyaW5nKCdiYXNlNjQnKX1gO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAgKiBEYXRhIHRoYXQgY2FuIGJlIHJlc29sdmVkIHRvIGdpdmUgYSBCdWZmZXIuIFRoaXMgY2FuIGJlOlxuICAgICogKiBBIEJ1ZmZlclxuICAgICogKiBUaGUgcGF0aCB0byBhIGxvY2FsIGZpbGVcbiAgICAqICogQSBVUkxcbiAgICAqICogQSBTdHJlYW1cbiAgICAqIEB0eXBlZGVmIHtzdHJpbmd8QnVmZmVyfSBCdWZmZXJSZXNvbHZhYmxlXG4gICAgKi9cblxuICAvKipcbiAgICAqIEBleHRlcm5hbCBTdHJlYW1cbiAgICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvc3RyZWFtLmh0bWx9XG4gICAgKi9cblxuICAvKipcbiAgICAqIFJlc29sdmVzIGEgQnVmZmVyUmVzb2x2YWJsZSB0byBhIEJ1ZmZlci5cbiAgICAqIEBwYXJhbSB7QnVmZmVyUmVzb2x2YWJsZXxTdHJlYW19IHJlc291cmNlIFRoZSBidWZmZXIgb3Igc3RyZWFtIHJlc29sdmFibGUgdG8gcmVzb2x2ZVxuICAgICogQHJldHVybnMge1Byb21pc2U8QnVmZmVyPn1cbiAgICAqL1xuICByZXNvbHZlRmlsZShyZXNvdXJjZSkge1xuICAgIGlmIChyZXNvdXJjZSBpbnN0YW5jZW9mIEJ1ZmZlcikgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXNvdXJjZSk7XG4gICAgaWYgKHRoaXMuY2xpZW50LmJyb3dzZXIgJiYgcmVzb3VyY2UgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgcmV0dXJuIFByb21pc2UucmVzb2x2ZShjb252ZXJ0VG9CdWZmZXIocmVzb3VyY2UpKTtcblxuICAgIGlmICh0eXBlb2YgcmVzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAoL15odHRwcz86XFwvXFwvLy50ZXN0KHJlc291cmNlKSkge1xuICAgICAgICAgIHNuZWtmZXRjaC5nZXQocmVzb3VyY2UpXG4gICAgICAgICAgICAuZW5kKChlcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgIGlmICghKHJlcy5ib2R5IGluc3RhbmNlb2YgQnVmZmVyKSkgcmV0dXJuIHJlamVjdChuZXcgVHlwZUVycm9yKCdUaGUgcmVzcG9uc2UgYm9keSBpc25cXCd0IGEgQnVmZmVyLicpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzLmJvZHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgZmlsZSA9IHBhdGgucmVzb2x2ZShyZXNvdXJjZSk7XG4gICAgICAgICAgZnMuc3RhdChmaWxlLCAoZXJyLCBzdGF0cykgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgaWYgKCFzdGF0cyB8fCAhc3RhdHMuaXNGaWxlKCkpIHJldHVybiByZWplY3QobmV3IEVycm9yKGBUaGUgZmlsZSBjb3VsZCBub3QgYmUgZm91bmQ6ICR7ZmlsZX1gKSk7XG4gICAgICAgICAgICBmcy5yZWFkRmlsZShmaWxlLCAoZXJyMiwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgICBpZiAoZXJyMikgcmVqZWN0KGVycjIpOyBlbHNlIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHJlc291cmNlLnBpcGUgJiYgdHlwZW9mIHJlc291cmNlLnBpcGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgcmVzb3VyY2Uub25jZSgnZXJyb3InLCByZWplY3QpO1xuICAgICAgICByZXNvdXJjZS5vbignZGF0YScsIGRhdGEgPT4gYnVmZmVycy5wdXNoKGRhdGEpKTtcbiAgICAgICAgcmVzb3VyY2Uub25jZSgnZW5kJywgKCkgPT4gcmVzb2x2ZShCdWZmZXIuY29uY2F0KGJ1ZmZlcnMpKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignVGhlIHJlc291cmNlIG11c3QgYmUgYSBzdHJpbmcgb3IgQnVmZmVyLicpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEYXRhIHRoYXQgY2FuIGJlIHJlc29sdmVkIHRvIGdpdmUgYW4gZW1vamkgaWRlbnRpZmllci4gVGhpcyBjYW4gYmU6XG4gICAqICogVGhlIHVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgYW4gZW1vamlcbiAgICogKiBBIGN1c3RvbSBlbW9qaSBJRFxuICAgKiAqIEFuIEVtb2ppIG9iamVjdFxuICAgKiAqIEEgUmVhY3Rpb25FbW9qaSBvYmplY3RcbiAgICogQHR5cGVkZWYge3N0cmluZ3xFbW9qaXxSZWFjdGlvbkVtb2ppfSBFbW9qaUlkZW50aWZpZXJSZXNvbHZhYmxlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyBhbiBFbW9qaVJlc29sdmFibGUgdG8gYW4gZW1vamkgaWRlbnRpZmllci5cbiAgICogQHBhcmFtIHtFbW9qaUlkZW50aWZpZXJSZXNvbHZhYmxlfSBlbW9qaSBUaGUgZW1vamkgcmVzb2x2YWJsZSB0byByZXNvbHZlXG4gICAqIEByZXR1cm5zIHs/c3RyaW5nfVxuICAgKi9cbiAgcmVzb2x2ZUVtb2ppSWRlbnRpZmllcihlbW9qaSkge1xuICAgIGlmIChlbW9qaSBpbnN0YW5jZW9mIEVtb2ppIHx8IGVtb2ppIGluc3RhbmNlb2YgUmVhY3Rpb25FbW9qaSkgcmV0dXJuIGVtb2ppLmlkZW50aWZpZXI7XG4gICAgaWYgKHR5cGVvZiBlbW9qaSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0aGlzLmNsaWVudC5lbW9qaXMuaGFzKGVtb2ppKSkgcmV0dXJuIHRoaXMuY2xpZW50LmVtb2ppcy5nZXQoZW1vamkpLmlkZW50aWZpZXI7XG4gICAgICBlbHNlIGlmICghZW1vamkuaW5jbHVkZXMoJyUnKSkgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChlbW9qaSk7XG4gICAgICBlbHNlIHJldHVybiBlbW9qaTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ2FuIGJlIGEgSGV4IExpdGVyYWwsIEhleCBTdHJpbmcsIE51bWJlciwgUkdCIEFycmF5LCBvciBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgKiBgYGBcbiAgICogW1xuICAgKiAgICdERUZBVUxUJyxcbiAgICogICAnQVFVQScsXG4gICAqICAgJ0dSRUVOJyxcbiAgICogICAnQkxVRScsXG4gICAqICAgJ1BVUlBMRScsXG4gICAqICAgJ0dPTEQnLFxuICAgKiAgICdPUkFOR0UnLFxuICAgKiAgICdSRUQnLFxuICAgKiAgICdHUkVZJyxcbiAgICogICAnREFSS0VSX0dSRVknLFxuICAgKiAgICdOQVZZJyxcbiAgICogICAnREFSS19BUVVBJyxcbiAgICogICAnREFSS19HUkVFTicsXG4gICAqICAgJ0RBUktfQkxVRScsXG4gICAqICAgJ0RBUktfUFVSUExFJyxcbiAgICogICAnREFSS19HT0xEJyxcbiAgICogICAnREFSS19PUkFOR0UnLFxuICAgKiAgICdEQVJLX1JFRCcsXG4gICAqICAgJ0RBUktfR1JFWScsXG4gICAqICAgJ0xJR0hUX0dSRVknLFxuICAgKiAgICdEQVJLX05BVlknLFxuICAgKiAgICdSQU5ET00nLFxuICAgKiBdXG4gICAqIGBgYFxuICAgKiBvciBzb21ldGhpbmcgbGlrZVxuICAgKiBgYGBcbiAgICogWzI1NSwgMCwgMjU1XVxuICAgKiBgYGBcbiAgICogZm9yIHB1cnBsZVxuICAgKiBAdHlwZWRlZiB7c3RyaW5nfG51bWJlcnxBcnJheX0gQ29sb3JSZXNvbHZhYmxlXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXNvbHZlcyBhIENvbG9yUmVzb2x2YWJsZSBpbnRvIGEgY29sb3IgbnVtYmVyLlxuICAgKiBAcGFyYW0ge0NvbG9yUmVzb2x2YWJsZX0gY29sb3IgQ29sb3IgdG8gcmVzb2x2ZVxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBBIGNvbG9yXG4gICAqL1xuICBzdGF0aWMgcmVzb2x2ZUNvbG9yKGNvbG9yKSB7XG4gICAgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChjb2xvciA9PT0gJ1JBTkRPTScpIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoMHhGRkZGRkYgKyAxKSk7XG4gICAgICBpZiAoY29sb3IgPT09ICdERUZBVUxUJykgcmV0dXJuIDA7XG4gICAgICBjb2xvciA9IENvbnN0YW50cy5Db2xvcnNbY29sb3JdIHx8IHBhcnNlSW50KGNvbG9yLnJlcGxhY2UoJyMnLCAnJyksIDE2KTtcbiAgICB9IGVsc2UgaWYgKGNvbG9yIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGNvbG9yID0gKGNvbG9yWzBdIDw8IDE2KSArIChjb2xvclsxXSA8PCA4KSArIGNvbG9yWzJdO1xuICAgIH1cblxuICAgIGlmIChjb2xvciA8IDAgfHwgY29sb3IgPiAweEZGRkZGRikge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0NvbG9yIG11c3QgYmUgd2l0aGluIHRoZSByYW5nZSAwIC0gMTY3NzcyMTUgKDB4RkZGRkZGKS4nKTtcbiAgICB9IGVsc2UgaWYgKGNvbG9yICYmIGlzTmFOKGNvbG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGNvbnZlcnQgY29sb3IgdG8gYSBudW1iZXIuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Q29sb3JSZXNvbHZhYmxlfSBjb2xvciBDb2xvciB0byByZXNvbHZlXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IEEgY29sb3JcbiAgICovXG4gIHJlc29sdmVDb2xvcihjb2xvcikge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnJlc29sdmVDb2xvcihjb2xvcik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnREYXRhUmVzb2x2ZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvQ2xpZW50RGF0YVJlc29sdmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ReactionEmoji.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * Represents a limited emoji set used for both custom and unicode emojis. Custom emojis\n * will use this class opposed to the Emoji class when the client doesn't know enough\n * information about them.\n */\nclass ReactionEmoji {\n  constructor(reaction, name, id) {\n    /**\n     * The message reaction this emoji refers to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n\n    /**\n     * The name of this reaction emoji\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * The ID of this reaction emoji\n     * @type {?Snowflake}\n     */\n    this.id = id;\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * Creates the text required to form a graphical emoji on Discord.\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used is ${reaction.emoji}`);\n   * @returns {string}\n   */\n  toString() {\n    return this.id ? `<:${this.name}:${this.id}>` : this.name;\n  }\n}\n\nmodule.exports = ReactionEmoji;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9SZWFjdGlvbkVtb2ppLmpzP2YyMzUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXByZXNlbnRzIGEgbGltaXRlZCBlbW9qaSBzZXQgdXNlZCBmb3IgYm90aCBjdXN0b20gYW5kIHVuaWNvZGUgZW1vamlzLiBDdXN0b20gZW1vamlzXG4gKiB3aWxsIHVzZSB0aGlzIGNsYXNzIG9wcG9zZWQgdG8gdGhlIEVtb2ppIGNsYXNzIHdoZW4gdGhlIGNsaWVudCBkb2Vzbid0IGtub3cgZW5vdWdoXG4gKiBpbmZvcm1hdGlvbiBhYm91dCB0aGVtLlxuICovXG5jbGFzcyBSZWFjdGlvbkVtb2ppIHtcbiAgY29uc3RydWN0b3IocmVhY3Rpb24sIG5hbWUsIGlkKSB7XG4gICAgLyoqXG4gICAgICogVGhlIG1lc3NhZ2UgcmVhY3Rpb24gdGhpcyBlbW9qaSByZWZlcnMgdG9cbiAgICAgKiBAdHlwZSB7TWVzc2FnZVJlYWN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMucmVhY3Rpb24gPSByZWFjdGlvbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoaXMgcmVhY3Rpb24gZW1vamlcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhpcyByZWFjdGlvbiBlbW9qaVxuICAgICAqIEB0eXBlIHs/U25vd2ZsYWtlfVxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgaWRlbnRpZmllciBvZiB0aGlzIGVtb2ppLCB1c2VkIGZvciBtZXNzYWdlIHJlYWN0aW9uc1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBpZGVudGlmaWVyKCkge1xuICAgIGlmICh0aGlzLmlkKSByZXR1cm4gYCR7dGhpcy5uYW1lfToke3RoaXMuaWR9YDtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMubmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgdGV4dCByZXF1aXJlZCB0byBmb3JtIGEgZ3JhcGhpY2FsIGVtb2ppIG9uIERpc2NvcmQuXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIFNlbmQgdGhlIGVtb2ppIHVzZWQgaW4gYSByZWFjdGlvbiB0byB0aGUgY2hhbm5lbCB0aGUgcmVhY3Rpb24gaXMgcGFydCBvZlxuICAgKiByZWFjdGlvbi5tZXNzYWdlLmNoYW5uZWwuc2VuZChgVGhlIGVtb2ppIHVzZWQgaXMgJHtyZWFjdGlvbi5lbW9qaX1gKTtcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmlkID8gYDw6JHt0aGlzLm5hbWV9OiR7dGhpcy5pZH0+YCA6IHRoaXMubmFtZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0aW9uRW1vamk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9zdHJ1Y3R1cmVzL1JlYWN0aW9uRW1vamkuanNcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/interfaces/Collector.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Collection = __webpack_require__(/*! ../../util/Collection */ 3);\nconst EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter;\n\n/**\n * Filter to be applied to the collector.\n * @typedef {Function} CollectorFilter\n * @param {...*} args Any arguments received by the listener\n * @param {Collection} collection The items collected by this collector\n * @returns {boolean}\n */\n\n/**\n * Options to be applied to the collector.\n * @typedef {Object} CollectorOptions\n * @property {number} [time] How long to run the collector for\n */\n\n/**\n * Abstract class for defining a new Collector.\n * @abstract\n */\nclass Collector extends EventEmitter {\n  constructor(client, filter, options = {}) {\n    super();\n\n    /**\n     * The client\n     * @name Collector#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The filter applied to this collector\n     * @type {CollectorFilter}\n     */\n    this.filter = filter;\n\n    /**\n     * The options of this collector\n     * @type {CollectorOptions}\n     */\n    this.options = options;\n\n    /**\n     * The items collected by this collector\n     * @type {Collection}\n     */\n    this.collected = new Collection();\n\n    /**\n     * Whether this collector has finished collecting\n     * @type {boolean}\n     */\n    this.ended = false;\n\n    /**\n     * Timeout for cleanup\n     * @type {?Timeout}\n     * @private\n     */\n    this._timeout = null;\n\n    /**\n     * Call this to handle an event as a collectable element\n     * Accepts any event data as parameters\n     * @type {Function}\n     * @private\n     */\n    this.listener = this._handle.bind(this);\n    if (options.time) this._timeout = this.client.setTimeout(() => this.stop('time'), options.time);\n  }\n\n  /**\n   * @param {...*} args The arguments emitted by the listener\n   * @emits Collector#collect\n   * @private\n   */\n  _handle(...args) {\n    const collect = this.handle(...args);\n    if (!collect || !this.filter(...args, this.collected)) return;\n\n    this.collected.set(collect.key, collect.value);\n\n    /**\n     * Emitted whenever an element is collected.\n     * @event Collector#collect\n     * @param {*} element The element that got collected\n     * @param {Collector} collector The collector\n     */\n    this.emit('collect', collect.value, this);\n\n    const post = this.postCheck(...args);\n    if (post) this.stop(post);\n  }\n\n  /**\n   * Return a promise that resolves with the next collected element;\n   * rejects with collected elements if the collector finishes without receving a next element\n   * @type {Promise}\n   * @readonly\n   */\n  get next() {\n    return new Promise((resolve, reject) => {\n      if (this.ended) {\n        reject(this.collected);\n        return;\n      }\n\n      const cleanup = () => {\n        this.removeListener('collect', onCollect);\n        this.removeListener('end', onEnd);\n      };\n\n      const onCollect = item => {\n        cleanup();\n        resolve(item);\n      };\n\n      const onEnd = () => {\n        cleanup();\n        reject(this.collected); // eslint-disable-line prefer-promise-reject-errors\n      };\n\n      this.on('collect', onCollect);\n      this.on('end', onEnd);\n    });\n  }\n\n  /**\n   * Stop this collector and emit the `end` event.\n   * @param {string} [reason='user'] The reason this collector is ending\n   * @emits Collector#end\n   */\n  stop(reason = 'user') {\n    if (this.ended) return;\n\n    if (this._timeout) this.client.clearTimeout(this._timeout);\n    this.ended = true;\n    this.cleanup();\n\n    /**\n     * Emitted when the collector is finished collecting.\n     * @event Collector#end\n     * @param {Collection} collected The elements collected by the collector\n     * @param {string} reason The reason the collector ended\n     */\n    this.emit('end', this.collected, reason);\n  }\n\n  /* eslint-disable no-empty-function, valid-jsdoc */\n  /**\n   * Handles incoming events from the `listener` function. Returns null if the event should not be collected,\n   * or returns an object describing the data that should be stored.\n   * @see Collector#listener\n   * @param {...*} args Any args the event listener emits\n   * @returns {?{key: string, value}} Data to insert into collection, if any\n   * @abstract\n   */\n  handle() {}\n\n  /**\n   * This method runs after collection to see if the collector should finish.\n   * @param {...*} args Any args the event listener emits\n   * @returns {?string} Reason to end the collector, if any\n   * @abstract\n   */\n  postCheck() {}\n\n  /**\n   * Called when the collector is ending.\n   * @abstract\n   */\n  cleanup() {}\n  /* eslint-enable no-empty-function, valid-jsdoc */\n}\n\nmodule.exports = Collector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/*!**********************************************************!*\
  !*** ./node_modules/discord.js/src/structures/Invite.js ***!
  \**********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const PartialGuild = __webpack_require__(/*! ./PartialGuild */ 57);\nconst PartialGuildChannel = __webpack_require__(/*! ./PartialGuildChannel */ 58);\nconst Constants = __webpack_require__(/*! ../util/Constants */ 0);\n\n/**\n * Represents an invitation to a guild channel.\n * <warn>The only guaranteed properties are `code`, `guild` and `channel`. Other properties can be missing.</warn>\n */\nclass Invite {\n  constructor(client, data) {\n    /**\n     * The client that instantiated the invite\n     * @name Invite#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The guild the invite is for. If this guild is already known, this will be a guild object. If the guild is\n     * unknown, this will be a PartialGuild object\n     * @type {Guild|PartialGuild}\n     */\n    this.guild = this.client.guilds.get(data.guild.id) || new PartialGuild(this.client, data.guild);\n\n    /**\n     * The code for this invite\n     * @type {string}\n     */\n    this.code = data.code;\n\n    /**\n     * The approximate number of online members of the guild this invite is for\n     * @type {number}\n     */\n    this.presenceCount = data.approximate_presence_count;\n\n    /**\n     * The approximate total number of members of the guild this invite is for\n     * @type {number}\n     */\n    this.memberCount = data.approximate_member_count;\n\n    /**\n     * The number of text channels the guild this invite goes to has\n     * @type {number}\n     */\n    this.textChannelCount = data.guild.text_channel_count;\n\n    /**\n     * The number of voice channels the guild this invite goes to has\n     * @type {number}\n     */\n    this.voiceChannelCount = data.guild.voice_channel_count;\n\n    /**\n     * Whether or not this invite is temporary\n     * @type {boolean}\n     */\n    this.temporary = data.temporary;\n\n    /**\n     * The maximum age of the invite, in seconds\n     * @type {?number}\n     */\n    this.maxAge = data.max_age;\n\n    /**\n     * How many times this invite has been used\n     * @type {number}\n     */\n    this.uses = data.uses;\n\n    /**\n     * The maximum uses of this invite\n     * @type {number}\n     */\n    this.maxUses = data.max_uses;\n\n    if (data.inviter) {\n      /**\n       * The user who created this invite\n       * @type {User}\n       */\n      this.inviter = this.client.dataManager.newUser(data.inviter);\n    }\n\n    /**\n     * The channel the invite is for. If this channel is already known, this will be a GuildChannel object.\n     * If the channel is unknown, this will be a PartialGuildChannel object.\n     * @type {GuildChannel|PartialGuildChannel}\n     */\n    this.channel = this.client.channels.get(data.channel.id) || new PartialGuildChannel(this.client, data.channel);\n\n    /**\n     * The timestamp the invite was created at\n     * @type {number}\n     */\n    this.createdTimestamp = new Date(data.created_at).getTime();\n  }\n\n  /**\n   * The time the invite was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The timestamp the invite will expire at\n   * @type {number}\n   * @readonly\n   */\n  get expiresTimestamp() {\n    return this.createdTimestamp + (this.maxAge * 1000);\n  }\n\n  /**\n   * The time the invite will expire\n   * @type {Date}\n   * @readonly\n   */\n  get expiresAt() {\n    return new Date(this.expiresTimestamp);\n  }\n\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return Constants.Endpoints.inviteLink(this.code);\n  }\n\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n  delete(reason) {\n    return this.client.rest.methods.deleteInvite(this, reason);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n  toString() {\n    return this.url;\n  }\n}\n\nmodule.exports = Invite;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9JbnZpdGUuanM/MGNmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQYXJ0aWFsR3VpbGQgPSByZXF1aXJlKCcuL1BhcnRpYWxHdWlsZCcpO1xuY29uc3QgUGFydGlhbEd1aWxkQ2hhbm5lbCA9IHJlcXVpcmUoJy4vUGFydGlhbEd1aWxkQ2hhbm5lbCcpO1xuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vdXRpbC9Db25zdGFudHMnKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGludml0YXRpb24gdG8gYSBndWlsZCBjaGFubmVsLlxuICogPHdhcm4+VGhlIG9ubHkgZ3VhcmFudGVlZCBwcm9wZXJ0aWVzIGFyZSBgY29kZWAsIGBndWlsZGAgYW5kIGBjaGFubmVsYC4gT3RoZXIgcHJvcGVydGllcyBjYW4gYmUgbWlzc2luZy48L3dhcm4+XG4gKi9cbmNsYXNzIEludml0ZSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgZGF0YSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQgdGhhdCBpbnN0YW50aWF0ZWQgdGhlIGludml0ZVxuICAgICAqIEBuYW1lIEludml0ZSNjbGllbnRcbiAgICAgKiBAdHlwZSB7Q2xpZW50fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY2xpZW50JywgeyB2YWx1ZTogY2xpZW50IH0pO1xuXG4gICAgdGhpcy5zZXR1cChkYXRhKTtcbiAgfVxuXG4gIHNldHVwKGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgZ3VpbGQgdGhlIGludml0ZSBpcyBmb3IuIElmIHRoaXMgZ3VpbGQgaXMgYWxyZWFkeSBrbm93biwgdGhpcyB3aWxsIGJlIGEgZ3VpbGQgb2JqZWN0LiBJZiB0aGUgZ3VpbGQgaXNcbiAgICAgKiB1bmtub3duLCB0aGlzIHdpbGwgYmUgYSBQYXJ0aWFsR3VpbGQgb2JqZWN0XG4gICAgICogQHR5cGUge0d1aWxkfFBhcnRpYWxHdWlsZH1cbiAgICAgKi9cbiAgICB0aGlzLmd1aWxkID0gdGhpcy5jbGllbnQuZ3VpbGRzLmdldChkYXRhLmd1aWxkLmlkKSB8fCBuZXcgUGFydGlhbEd1aWxkKHRoaXMuY2xpZW50LCBkYXRhLmd1aWxkKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjb2RlIGZvciB0aGlzIGludml0ZVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5jb2RlID0gZGF0YS5jb2RlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFwcHJveGltYXRlIG51bWJlciBvZiBvbmxpbmUgbWVtYmVycyBvZiB0aGUgZ3VpbGQgdGhpcyBpbnZpdGUgaXMgZm9yXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnByZXNlbmNlQ291bnQgPSBkYXRhLmFwcHJveGltYXRlX3ByZXNlbmNlX2NvdW50O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFwcHJveGltYXRlIHRvdGFsIG51bWJlciBvZiBtZW1iZXJzIG9mIHRoZSBndWlsZCB0aGlzIGludml0ZSBpcyBmb3JcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubWVtYmVyQ291bnQgPSBkYXRhLmFwcHJveGltYXRlX21lbWJlcl9jb3VudDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBudW1iZXIgb2YgdGV4dCBjaGFubmVscyB0aGUgZ3VpbGQgdGhpcyBpbnZpdGUgZ29lcyB0byBoYXNcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMudGV4dENoYW5uZWxDb3VudCA9IGRhdGEuZ3VpbGQudGV4dF9jaGFubmVsX2NvdW50O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiB2b2ljZSBjaGFubmVscyB0aGUgZ3VpbGQgdGhpcyBpbnZpdGUgZ29lcyB0byBoYXNcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMudm9pY2VDaGFubmVsQ291bnQgPSBkYXRhLmd1aWxkLnZvaWNlX2NoYW5uZWxfY291bnQ7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGlzIGludml0ZSBpcyB0ZW1wb3JhcnlcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLnRlbXBvcmFyeSA9IGRhdGEudGVtcG9yYXJ5O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gYWdlIG9mIHRoZSBpbnZpdGUsIGluIHNlY29uZHNcbiAgICAgKiBAdHlwZSB7P251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLm1heEFnZSA9IGRhdGEubWF4X2FnZTtcblxuICAgIC8qKlxuICAgICAqIEhvdyBtYW55IHRpbWVzIHRoaXMgaW52aXRlIGhhcyBiZWVuIHVzZWRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMudXNlcyA9IGRhdGEudXNlcztcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHVzZXMgb2YgdGhpcyBpbnZpdGVcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubWF4VXNlcyA9IGRhdGEubWF4X3VzZXM7XG5cbiAgICBpZiAoZGF0YS5pbnZpdGVyKSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSB1c2VyIHdobyBjcmVhdGVkIHRoaXMgaW52aXRlXG4gICAgICAgKiBAdHlwZSB7VXNlcn1cbiAgICAgICAqL1xuICAgICAgdGhpcy5pbnZpdGVyID0gdGhpcy5jbGllbnQuZGF0YU1hbmFnZXIubmV3VXNlcihkYXRhLmludml0ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBjaGFubmVsIHRoZSBpbnZpdGUgaXMgZm9yLiBJZiB0aGlzIGNoYW5uZWwgaXMgYWxyZWFkeSBrbm93biwgdGhpcyB3aWxsIGJlIGEgR3VpbGRDaGFubmVsIG9iamVjdC5cbiAgICAgKiBJZiB0aGUgY2hhbm5lbCBpcyB1bmtub3duLCB0aGlzIHdpbGwgYmUgYSBQYXJ0aWFsR3VpbGRDaGFubmVsIG9iamVjdC5cbiAgICAgKiBAdHlwZSB7R3VpbGRDaGFubmVsfFBhcnRpYWxHdWlsZENoYW5uZWx9XG4gICAgICovXG4gICAgdGhpcy5jaGFubmVsID0gdGhpcy5jbGllbnQuY2hhbm5lbHMuZ2V0KGRhdGEuY2hhbm5lbC5pZCkgfHwgbmV3IFBhcnRpYWxHdWlsZENoYW5uZWwodGhpcy5jbGllbnQsIGRhdGEuY2hhbm5lbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGltZXN0YW1wIHRoZSBpbnZpdGUgd2FzIGNyZWF0ZWQgYXRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY3JlYXRlZFRpbWVzdGFtcCA9IG5ldyBEYXRlKGRhdGEuY3JlYXRlZF9hdCkuZ2V0VGltZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSB0aW1lIHRoZSBpbnZpdGUgd2FzIGNyZWF0ZWRcbiAgICogQHR5cGUge0RhdGV9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGNyZWF0ZWRBdCgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy5jcmVhdGVkVGltZXN0YW1wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdGltZXN0YW1wIHRoZSBpbnZpdGUgd2lsbCBleHBpcmUgYXRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgZXhwaXJlc1RpbWVzdGFtcCgpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVkVGltZXN0YW1wICsgKHRoaXMubWF4QWdlICogMTAwMCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRpbWUgdGhlIGludml0ZSB3aWxsIGV4cGlyZVxuICAgKiBAdHlwZSB7RGF0ZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgZXhwaXJlc0F0KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmV4cGlyZXNUaW1lc3RhbXApO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBVUkwgdG8gdGhlIGludml0ZVxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCB1cmwoKSB7XG4gICAgcmV0dXJuIENvbnN0YW50cy5FbmRwb2ludHMuaW52aXRlTGluayh0aGlzLmNvZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgdGhpcyBpbnZpdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVhc29uXSBSZWFzb24gZm9yIGRlbGV0aW5nIHRoaXMgaW52aXRlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEludml0ZT59XG4gICAqL1xuICBkZWxldGUocmVhc29uKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnJlc3QubWV0aG9kcy5kZWxldGVJbnZpdGUodGhpcywgcmVhc29uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIGNvbmNhdGVuYXRlZCB3aXRoIGEgc3RyaW5nLCB0aGlzIGF1dG9tYXRpY2FsbHkgY29uY2F0ZW5hdGVzIHRoZSBpbnZpdGUncyBVUkwgaW5zdGVhZCBvZiB0aGUgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBMb2dzOiBJbnZpdGU6IGh0dHBzOi8vZGlzY29yZC5nZy9BMWIyQzNcbiAgICogY29uc29sZS5sb2coYEludml0ZTogJHtpbnZpdGV9YCk7XG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy51cmw7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJbnZpdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9zdHJ1Y3R1cmVzL0ludml0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/OAuth2Application.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Snowflake = __webpack_require__(/*! ../util/Snowflake */ 6);\n\n/**\n * Represents an OAuth2 Application.\n */\nclass OAuth2Application {\n  constructor(client, data) {\n    /**\n     * The client that instantiated the application\n     * @name OAuth2Application#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of the app\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of the app\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The app's description\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * The app's icon hash\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The app's icon URL\n     * @type {string}\n     */\n    this.iconURL = `https://cdn.discordapp.com/app-icons/${this.id}/${this.icon}.jpg`;\n\n    /**\n     * The app's RPC origins\n     * @type {?string[]}\n     */\n    this.rpcOrigins = data.rpc_origins;\n\n    /**\n     * The app's redirect URIs\n     * @type {string[]}\n     */\n    this.redirectURIs = data.redirect_uris;\n\n    /**\n     * If this app's bot requires a code grant when using the OAuth2 flow\n     * @type {boolean}\n     */\n    this.botRequireCodeGrant = data.bot_require_code_grant;\n\n    /**\n     * If this app's bot is public\n     * @type {boolean}\n     */\n    this.botPublic = data.bot_public;\n\n    /**\n     * If this app can use rpc\n     * @type {boolean}\n     */\n    this.rpcApplicationState = data.rpc_application_state;\n\n    /**\n     * Object containing basic info about this app's bot\n     * @type {Object}\n     */\n    this.bot = data.bot;\n\n    /**\n     * The flags for the app\n     * @type {number}\n     */\n    this.flags = data.flags;\n\n    /**\n     * OAuth2 secret for the application\n     * @type {boolean}\n     */\n    this.secret = data.secret;\n\n    if (data.owner) {\n      /**\n       * The owner of this OAuth application\n       * @type {?User}\n       */\n      this.owner = this.client.dataManager.newUser(data.owner);\n    }\n  }\n\n  /**\n   * The timestamp the app was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the app was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Reset the app's secret and bot token.\n   * <warn>This is only available when using a user account.</warn>\n   * @returns {OAuth2Application}\n   */\n  reset() {\n    return this.client.rest.methods.resetApplication(this.id);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the app name rather than the app object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n}\n\nmodule.exports = OAuth2Application;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9PQXV0aDJBcHBsaWNhdGlvbi5qcz9hMGI5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNub3dmbGFrZSA9IHJlcXVpcmUoJy4uL3V0aWwvU25vd2ZsYWtlJyk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBPQXV0aDIgQXBwbGljYXRpb24uXG4gKi9cbmNsYXNzIE9BdXRoMkFwcGxpY2F0aW9uIHtcbiAgY29uc3RydWN0b3IoY2xpZW50LCBkYXRhKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCB0aGF0IGluc3RhbnRpYXRlZCB0aGUgYXBwbGljYXRpb25cbiAgICAgKiBAbmFtZSBPQXV0aDJBcHBsaWNhdGlvbiNjbGllbnRcbiAgICAgKiBAdHlwZSB7Q2xpZW50fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY2xpZW50JywgeyB2YWx1ZTogY2xpZW50IH0pO1xuXG4gICAgdGhpcy5zZXR1cChkYXRhKTtcbiAgfVxuXG4gIHNldHVwKGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIGFwcFxuICAgICAqIEB0eXBlIHtTbm93Zmxha2V9XG4gICAgICovXG4gICAgdGhpcy5pZCA9IGRhdGEuaWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgYXBwXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXBwJ3MgZGVzY3JpcHRpb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkYXRhLmRlc2NyaXB0aW9uO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFwcCdzIGljb24gaGFzaFxuICAgICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaWNvbiA9IGRhdGEuaWNvbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhcHAncyBpY29uIFVSTFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pY29uVVJMID0gYGh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2FwcC1pY29ucy8ke3RoaXMuaWR9LyR7dGhpcy5pY29ufS5qcGdgO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFwcCdzIFJQQyBvcmlnaW5zXG4gICAgICogQHR5cGUgez9zdHJpbmdbXX1cbiAgICAgKi9cbiAgICB0aGlzLnJwY09yaWdpbnMgPSBkYXRhLnJwY19vcmlnaW5zO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFwcCdzIHJlZGlyZWN0IFVSSXNcbiAgICAgKiBAdHlwZSB7c3RyaW5nW119XG4gICAgICovXG4gICAgdGhpcy5yZWRpcmVjdFVSSXMgPSBkYXRhLnJlZGlyZWN0X3VyaXM7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGFwcCdzIGJvdCByZXF1aXJlcyBhIGNvZGUgZ3JhbnQgd2hlbiB1c2luZyB0aGUgT0F1dGgyIGZsb3dcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmJvdFJlcXVpcmVDb2RlR3JhbnQgPSBkYXRhLmJvdF9yZXF1aXJlX2NvZGVfZ3JhbnQ7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGFwcCdzIGJvdCBpcyBwdWJsaWNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmJvdFB1YmxpYyA9IGRhdGEuYm90X3B1YmxpYztcblxuICAgIC8qKlxuICAgICAqIElmIHRoaXMgYXBwIGNhbiB1c2UgcnBjXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5ycGNBcHBsaWNhdGlvblN0YXRlID0gZGF0YS5ycGNfYXBwbGljYXRpb25fc3RhdGU7XG5cbiAgICAvKipcbiAgICAgKiBPYmplY3QgY29udGFpbmluZyBiYXNpYyBpbmZvIGFib3V0IHRoaXMgYXBwJ3MgYm90XG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLmJvdCA9IGRhdGEuYm90O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZsYWdzIGZvciB0aGUgYXBwXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmZsYWdzID0gZGF0YS5mbGFncztcblxuICAgIC8qKlxuICAgICAqIE9BdXRoMiBzZWNyZXQgZm9yIHRoZSBhcHBsaWNhdGlvblxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuc2VjcmV0ID0gZGF0YS5zZWNyZXQ7XG5cbiAgICBpZiAoZGF0YS5vd25lcikge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGUgb3duZXIgb2YgdGhpcyBPQXV0aCBhcHBsaWNhdGlvblxuICAgICAgICogQHR5cGUgez9Vc2VyfVxuICAgICAgICovXG4gICAgICB0aGlzLm93bmVyID0gdGhpcy5jbGllbnQuZGF0YU1hbmFnZXIubmV3VXNlcihkYXRhLm93bmVyKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRpbWVzdGFtcCB0aGUgYXBwIHdhcyBjcmVhdGVkIGF0XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGNyZWF0ZWRUaW1lc3RhbXAoKSB7XG4gICAgcmV0dXJuIFNub3dmbGFrZS5kZWNvbnN0cnVjdCh0aGlzLmlkKS50aW1lc3RhbXA7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHRpbWUgdGhlIGFwcCB3YXMgY3JlYXRlZFxuICAgKiBAdHlwZSB7RGF0ZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgY3JlYXRlZEF0KCkge1xuICAgIHJldHVybiBuZXcgRGF0ZSh0aGlzLmNyZWF0ZWRUaW1lc3RhbXApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBhcHAncyBzZWNyZXQgYW5kIGJvdCB0b2tlbi5cbiAgICogPHdhcm4+VGhpcyBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIHVzaW5nIGEgdXNlciBhY2NvdW50Ljwvd2Fybj5cbiAgICogQHJldHVybnMge09BdXRoMkFwcGxpY2F0aW9ufVxuICAgKi9cbiAgcmVzZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnJlc3QubWV0aG9kcy5yZXNldEFwcGxpY2F0aW9uKHRoaXMuaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gY29uY2F0ZW5hdGVkIHdpdGggYSBzdHJpbmcsIHRoaXMgYXV0b21hdGljYWxseSBjb25jYXRlbmF0ZXMgdGhlIGFwcCBuYW1lIHJhdGhlciB0aGFuIHRoZSBhcHAgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9BdXRoMkFwcGxpY2F0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9PQXV0aDJBcHBsaWNhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GroupDMChannel.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Channel = __webpack_require__(/*! ./Channel */ 13);\nconst TextBasedChannel = __webpack_require__(/*! ./interfaces/TextBasedChannel */ 15);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst Constants = __webpack_require__(/*! ../util/Constants */ 0);\n\n/*\n{ type: 3,\n  recipients:\n   [ { username: 'Charlie',\n       id: '123',\n       discriminator: '6631',\n       avatar: '123' },\n     { username: 'Ben',\n       id: '123',\n       discriminator: '2055',\n       avatar: '123' },\n     { username: 'Adam',\n       id: '123',\n       discriminator: '2406',\n       avatar: '123' } ],\n  owner_id: '123',\n  name: null,\n  last_message_id: '123',\n  id: '123',\n  icon: null }\n*/\n\n/**\n * Represents a Group DM on Discord.\n * @extends {Channel}\n * @implements {TextBasedChannel}\n */\nclass GroupDMChannel extends Channel {\n  constructor(client, data) {\n    super(client, data);\n    this.type = 'group';\n    this.messages = new Collection();\n    this._typing = new Map();\n  }\n\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The name of this Group DM, can be null if one isn't set\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * A hash of this Group DM icon\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The user ID of this Group DM's owner\n     * @type {string}\n     */\n    this.ownerID = data.owner_id;\n\n    /**\n     * If the DM is managed by an application\n     * @type {boolean}\n     */\n    this.managed = data.managed;\n\n    /**\n     * Application ID of the application that made this Group DM, if applicable\n     * @type {?string}\n     */\n    this.applicationID = data.application_id;\n\n    if (data.nicks) {\n      /**\n       * Nicknames for group members\n       * @type {?Collection<Snowflake, string>}\n       */\n      this.nicks = new Collection(data.nicks.map(n => [n.id, n.nick]));\n    }\n\n    if (!this.recipients) {\n      /**\n       * A collection of the recipients of this DM, mapped by their ID\n       * @type {Collection<Snowflake, User>}\n       */\n      this.recipients = new Collection();\n    }\n\n    if (data.recipients) {\n      for (const recipient of data.recipients) {\n        const user = this.client.dataManager.newUser(recipient);\n        this.recipients.set(user.id, user);\n      }\n    }\n\n    this.lastMessageID = data.last_message_id;\n  }\n\n  /**\n   * The owner of this Group DM\n   * @type {User}\n   * @readonly\n   */\n  get owner() {\n    return this.client.users.get(this.ownerID);\n  }\n\n  /**\n   * The URL to this guild's icon\n   * @type {?string}\n   * @readonly\n   */\n  get iconURL() {\n    if (!this.icon) return null;\n    return Constants.Endpoints.Channel(this).Icon(this.client.options.http.cdn, this.icon);\n  }\n\n  edit(data) {\n    const _data = {};\n    if (data.name) _data.name = data.name;\n    if (typeof data.icon !== 'undefined') _data.icon = data.icon;\n    return this.client.rest.methods.updateGroupDMChannel(this, _data);\n  }\n\n  /**\n   * Whether this channel equals another channel. It compares all properties, so for most operations\n   * it is advisable to just compare `channel.id === channel2.id` as it is much faster and is often\n   * what most users need.\n   * @param {GroupDMChannel} channel Channel to compare with\n   * @returns {boolean}\n   */\n  equals(channel) {\n    const equal = channel &&\n      this.id === channel.id &&\n      this.name === channel.name &&\n      this.icon === channel.icon &&\n      this.ownerID === channel.ownerID;\n\n    if (equal) {\n      return this.recipients.equals(channel.recipients);\n    }\n\n    return equal;\n  }\n\n  /**\n   * Add a user to the DM\n   * @param {UserResolvable|string} accessTokenOrID Access token or user resolvable\n   * @param {string} [nick] Permanent nickname to give the user (only available if a bot is creating the DM)\n   * @returns {Promise<GroupDMChannel>}\n   */\n\n  addUser(accessTokenOrID, nick) {\n    return this.client.rest.methods.addUserToGroupDM(this, {\n      nick,\n      id: this.client.resolver.resolveUserID(accessTokenOrID),\n      accessToken: accessTokenOrID,\n    });\n  }\n\n  /**\n   * Set a new GroupDMChannel icon.\n   * @param {Base64Resolvable|BufferResolvable} icon The new icon of the group dm\n   * @returns {Promise<GroupDMChannel>}\n   * @example\n   * // Edit the group dm icon\n   * channel.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the channel icon'))\n   *  .catch(console.error);\n   */\n  setIcon(icon) {\n    return this.client.resolver.resolveImage(icon).then(data => this.edit({ icon: data }));\n  }\n\n  /**\n   * Sets a new name for this Group DM.\n   * @param {string} name New name for this Group DM\n   * @returns {Promise<GroupDMChannel>}\n   */\n  setName(name) {\n    return this.edit({ name });\n  }\n\n  /**\n   * Removes an user from this Group DM.\n   * @param {UserResolvable} user User to remove\n   * @returns {Promise<GroupDMChannel>}\n   */\n  removeUser(user) {\n    const id = this.client.resolver.resolveUserID(user);\n    return this.client.rest.methods.removeUserFromGroupDM(this, id);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the channel's name instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Group DM!\n   * console.log(`Hello from ${channel}!`);\n   * @example\n   * // Logs: Hello from My Group DM!\n   * console.log(`Hello from ' + channel + '!');\n   */\n  toString() {\n    return this.name;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n  sendMessage() {}\n  sendEmbed() {}\n  sendFile() {}\n  sendFiles() {}\n  sendCode() {}\n  fetchMessage() {}\n  fetchMessages() {}\n  fetchPinnedMessages() {}\n  search() {}\n  startTyping() {}\n  stopTyping() {}\n  get typing() {}\n  get typingCount() {}\n  createCollector() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  // Doesn't work on Group DMs; bulkDelete() {}\n  acknowledge() {}\n  _cacheMessage() {}\n}\n\nTextBasedChannel.applyToClass(GroupDMChannel, true, ['bulkDelete']);\n\nmodule.exports = GroupDMChannel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/DiscordAPIError.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * Represents an error from the Discord API.\n * @extends Error\n */\nclass DiscordAPIError extends Error {\n  constructor(path, error) {\n    super();\n    const flattened = this.constructor.flattenErrors(error.errors || error).join('\\n');\n    this.name = 'DiscordAPIError';\n    this.message = error.message && flattened ? `${error.message}\\n${flattened}` : error.message || flattened;\n\n    /**\n     * The path of the request relative to the HTTP endpoint\n     * @type {string}\n     */\n    this.path = path;\n\n    /**\n     * HTTP error code returned by Discord\n     * @type {number}\n     */\n    this.code = error.code;\n  }\n\n  /**\n   * Flattens an errors object returned from the API into an array.\n   * @param {Object} obj Discord errors object\n   * @param {string} [key] Used internally to determine key names of nested fields\n   * @returns {string[]}\n   * @private\n   */\n  static flattenErrors(obj, key = '') {\n    let messages = [];\n\n    for (const k of Object.keys(obj)) {\n      if (k === 'message') continue;\n      const newKey = key ? isNaN(k) ? `${key}.${k}` : `${key}[${k}]` : k;\n\n      if (obj[k]._errors) {\n        messages.push(`${newKey}: ${obj[k]._errors.map(e => e.message).join(' ')}`);\n      } else if (obj[k].code || obj[k].message) {\n        messages.push(`${obj[k].code ? `${obj[k].code}: ` : ''}: ${obj[k].message}`.trim());\n      } else if (typeof obj[k] === 'string') {\n        messages.push(obj[k]);\n      } else {\n        messages = messages.concat(this.flattenErrors(obj[k], newKey));\n      }\n    }\n\n    return messages;\n  }\n}\n\nmodule.exports = DiscordAPIError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3Jlc3QvRGlzY29yZEFQSUVycm9yLmpzPzZlNTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXByZXNlbnRzIGFuIGVycm9yIGZyb20gdGhlIERpc2NvcmQgQVBJLlxuICogQGV4dGVuZHMgRXJyb3JcbiAqL1xuY2xhc3MgRGlzY29yZEFQSUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihwYXRoLCBlcnJvcikge1xuICAgIHN1cGVyKCk7XG4gICAgY29uc3QgZmxhdHRlbmVkID0gdGhpcy5jb25zdHJ1Y3Rvci5mbGF0dGVuRXJyb3JzKGVycm9yLmVycm9ycyB8fCBlcnJvcikuam9pbignXFxuJyk7XG4gICAgdGhpcy5uYW1lID0gJ0Rpc2NvcmRBUElFcnJvcic7XG4gICAgdGhpcy5tZXNzYWdlID0gZXJyb3IubWVzc2FnZSAmJiBmbGF0dGVuZWQgPyBgJHtlcnJvci5tZXNzYWdlfVxcbiR7ZmxhdHRlbmVkfWAgOiBlcnJvci5tZXNzYWdlIHx8IGZsYXR0ZW5lZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwYXRoIG9mIHRoZSByZXF1ZXN0IHJlbGF0aXZlIHRvIHRoZSBIVFRQIGVuZHBvaW50XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnBhdGggPSBwYXRoO1xuXG4gICAgLyoqXG4gICAgICogSFRUUCBlcnJvciBjb2RlIHJldHVybmVkIGJ5IERpc2NvcmRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY29kZSA9IGVycm9yLmNvZGU7XG4gIH1cblxuICAvKipcbiAgICogRmxhdHRlbnMgYW4gZXJyb3JzIG9iamVjdCByZXR1cm5lZCBmcm9tIHRoZSBBUEkgaW50byBhbiBhcnJheS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iaiBEaXNjb3JkIGVycm9ycyBvYmplY3RcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtrZXldIFVzZWQgaW50ZXJuYWxseSB0byBkZXRlcm1pbmUga2V5IG5hbWVzIG9mIG5lc3RlZCBmaWVsZHNcbiAgICogQHJldHVybnMge3N0cmluZ1tdfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgc3RhdGljIGZsYXR0ZW5FcnJvcnMob2JqLCBrZXkgPSAnJykge1xuICAgIGxldCBtZXNzYWdlcyA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKG9iaikpIHtcbiAgICAgIGlmIChrID09PSAnbWVzc2FnZScpIGNvbnRpbnVlO1xuICAgICAgY29uc3QgbmV3S2V5ID0ga2V5ID8gaXNOYU4oaykgPyBgJHtrZXl9LiR7a31gIDogYCR7a2V5fVske2t9XWAgOiBrO1xuXG4gICAgICBpZiAob2JqW2tdLl9lcnJvcnMpIHtcbiAgICAgICAgbWVzc2FnZXMucHVzaChgJHtuZXdLZXl9OiAke29ialtrXS5fZXJyb3JzLm1hcChlID0+IGUubWVzc2FnZSkuam9pbignICcpfWApO1xuICAgICAgfSBlbHNlIGlmIChvYmpba10uY29kZSB8fCBvYmpba10ubWVzc2FnZSkge1xuICAgICAgICBtZXNzYWdlcy5wdXNoKGAke29ialtrXS5jb2RlID8gYCR7b2JqW2tdLmNvZGV9OiBgIDogJyd9OiAke29ialtrXS5tZXNzYWdlfWAudHJpbSgpKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9ialtrXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWVzc2FnZXMucHVzaChvYmpba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVzc2FnZXMgPSBtZXNzYWdlcy5jb25jYXQodGhpcy5mbGF0dGVuRXJyb3JzKG9ialtrXSwgbmV3S2V5KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lc3NhZ2VzO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGlzY29yZEFQSUVycm9yO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3Jlc3QvRGlzY29yZEFQSUVycm9yLmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/*!********************************************!*\
  !*** ./node_modules/ws/lib/buffer-util.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst safeBuffer = __webpack_require__(/*! safe-buffer */ 14);\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nconst concat = (list, totalLength) => {\n  const target = Buffer.allocUnsafe(totalLength);\n  var offset = 0;\n\n  for (var i = 0; i < list.length; i++) {\n    const buf = list[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n\n  return target;\n};\n\ntry {\n  const bufferUtil = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"bufferutil\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n  module.exports = Object.assign({ concat }, bufferUtil.BufferUtil || bufferUtil);\n} catch (e) /* istanbul ignore next */ {\n  /**\n   * Masks a buffer using the given mask.\n   *\n   * @param {Buffer} source The buffer to mask\n   * @param {Buffer} mask The mask to use\n   * @param {Buffer} output The buffer where to store the result\n   * @param {Number} offset The offset at which to start writing\n   * @param {Number} length The number of bytes to mask.\n   * @public\n   */\n  const mask = (source, mask, output, offset, length) => {\n    for (var i = 0; i < length; i++) {\n      output[offset + i] = source[i] ^ mask[i & 3];\n    }\n  };\n\n  /**\n   * Unmasks a buffer using the given mask.\n   *\n   * @param {Buffer} buffer The buffer to unmask\n   * @param {Buffer} mask The mask to use\n   * @public\n   */\n  const unmask = (buffer, mask) => {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] ^= mask[i & 3];\n    }\n  };\n\n  module.exports = { concat, mask, unmask };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3MvbGliL2J1ZmZlci11dGlsLmpzP2M1N2UiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzYWZlQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKTtcblxuY29uc3QgQnVmZmVyID0gc2FmZUJ1ZmZlci5CdWZmZXI7XG5cbi8qKlxuICogTWVyZ2VzIGFuIGFycmF5IG9mIGJ1ZmZlcnMgaW50byBhIG5ldyBidWZmZXIuXG4gKlxuICogQHBhcmFtIHtCdWZmZXJbXX0gbGlzdCBUaGUgYXJyYXkgb2YgYnVmZmVycyB0byBjb25jYXRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0b3RhbExlbmd0aCBUaGUgdG90YWwgbGVuZ3RoIG9mIGJ1ZmZlcnMgaW4gdGhlIGxpc3RcbiAqIEByZXR1cm4ge0J1ZmZlcn0gVGhlIHJlc3VsdGluZyBidWZmZXJcbiAqIEBwdWJsaWNcbiAqL1xuY29uc3QgY29uY2F0ID0gKGxpc3QsIHRvdGFsTGVuZ3RoKSA9PiB7XG4gIGNvbnN0IHRhcmdldCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSh0b3RhbExlbmd0aCk7XG4gIHZhciBvZmZzZXQgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGJ1ZiA9IGxpc3RbaV07XG4gICAgYnVmLmNvcHkodGFyZ2V0LCBvZmZzZXQpO1xuICAgIG9mZnNldCArPSBidWYubGVuZ3RoO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnRyeSB7XG4gIGNvbnN0IGJ1ZmZlclV0aWwgPSByZXF1aXJlKCdidWZmZXJ1dGlsJyk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduKHsgY29uY2F0IH0sIGJ1ZmZlclV0aWwuQnVmZmVyVXRpbCB8fCBidWZmZXJVdGlsKTtcbn0gY2F0Y2ggKGUpIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIHtcbiAgLyoqXG4gICAqIE1hc2tzIGEgYnVmZmVyIHVzaW5nIHRoZSBnaXZlbiBtYXNrLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gc291cmNlIFRoZSBidWZmZXIgdG8gbWFza1xuICAgKiBAcGFyYW0ge0J1ZmZlcn0gbWFzayBUaGUgbWFzayB0byB1c2VcbiAgICogQHBhcmFtIHtCdWZmZXJ9IG91dHB1dCBUaGUgYnVmZmVyIHdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBUaGUgb2Zmc2V0IGF0IHdoaWNoIHRvIHN0YXJ0IHdyaXRpbmdcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlbmd0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIHRvIG1hc2suXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNvbnN0IG1hc2sgPSAoc291cmNlLCBtYXNrLCBvdXRwdXQsIG9mZnNldCwgbGVuZ3RoKSA9PiB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgb3V0cHV0W29mZnNldCArIGldID0gc291cmNlW2ldIF4gbWFza1tpICYgM107XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBVbm1hc2tzIGEgYnVmZmVyIHVzaW5nIHRoZSBnaXZlbiBtYXNrLlxuICAgKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gdW5tYXNrXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBtYXNrIFRoZSBtYXNrIHRvIHVzZVxuICAgKiBAcHVibGljXG4gICAqL1xuICBjb25zdCB1bm1hc2sgPSAoYnVmZmVyLCBtYXNrKSA9PiB7XG4gICAgLy8gUmVxdWlyZWQgdW50aWwgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL2lzc3Vlcy85MDA2IGlzIHJlc29sdmVkLlxuICAgIGNvbnN0IGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYnVmZmVyW2ldIF49IG1hc2tbaSAmIDNdO1xuICAgIH1cbiAgfTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IHsgY29uY2F0LCBtYXNrLCB1bm1hc2sgfTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dzL2xpYi9idWZmZXItdXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/*!***********************************************!*\
  !*** ./node_modules/prism-media/src/index.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Prism = __webpack_require__(/*! ./Prism */ 158);\r\nconst MediaTranscoder = __webpack_require__(/*! ./transcoders/MediaTranscoder */ 76);\r\n\r\nPrism.MediaTranscoder = MediaTranscoder;\r\n\r\nmodule.exports = Prism;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJpc20tbWVkaWEvc3JjL2luZGV4LmpzP2Y1OGQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUHJpc20gPSByZXF1aXJlKCcuL1ByaXNtJyk7XHJcbmNvbnN0IE1lZGlhVHJhbnNjb2RlciA9IHJlcXVpcmUoJy4vdHJhbnNjb2RlcnMvTWVkaWFUcmFuc2NvZGVyJyk7XHJcblxyXG5QcmlzbS5NZWRpYVRyYW5zY29kZXIgPSBNZWRpYVRyYW5zY29kZXI7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFByaXNtO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wcmlzbS1tZWRpYS9zcmMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"child_process\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJjaGlsZF9wcm9jZXNzXCI/NDMwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjaGlsZF9wcm9jZXNzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiY2hpbGRfcHJvY2Vzc1wiXG4vLyBtb2R1bGUgaWQgPSA0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/opus/OpusEngineList.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const list = [\n  __webpack_require__(/*! ./NodeOpusEngine */ 162),\n  __webpack_require__(/*! ./OpusScriptEngine */ 163),\n];\n\nfunction fetch(Encoder, engineOptions) {\n  try {\n    return new Encoder(engineOptions);\n  } catch (err) {\n    if (err.message.includes('Cannot find module')) return null;\n\n    // The Opus engine exists, but another error occurred.\n    throw err;\n  }\n}\n\nexports.add = encoder => {\n  list.push(encoder);\n};\n\nexports.fetch = engineOptions => {\n  for (const encoder of list) {\n    const fetched = fetch(encoder, engineOptions);\n    if (fetched) return fetched;\n  }\n\n  throw new Error('OPUS_ENGINE_MISSING');\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL29wdXMvT3B1c0VuZ2luZUxpc3QuanM/MDQ4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBsaXN0ID0gW1xuICByZXF1aXJlKCcuL05vZGVPcHVzRW5naW5lJyksXG4gIHJlcXVpcmUoJy4vT3B1c1NjcmlwdEVuZ2luZScpLFxuXTtcblxuZnVuY3Rpb24gZmV0Y2goRW5jb2RlciwgZW5naW5lT3B0aW9ucykge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRW5jb2RlcihlbmdpbmVPcHRpb25zKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyci5tZXNzYWdlLmluY2x1ZGVzKCdDYW5ub3QgZmluZCBtb2R1bGUnKSkgcmV0dXJuIG51bGw7XG5cbiAgICAvLyBUaGUgT3B1cyBlbmdpbmUgZXhpc3RzLCBidXQgYW5vdGhlciBlcnJvciBvY2N1cnJlZC5cbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cblxuZXhwb3J0cy5hZGQgPSBlbmNvZGVyID0+IHtcbiAgbGlzdC5wdXNoKGVuY29kZXIpO1xufTtcblxuZXhwb3J0cy5mZXRjaCA9IGVuZ2luZU9wdGlvbnMgPT4ge1xuICBmb3IgKGNvbnN0IGVuY29kZXIgb2YgbGlzdCkge1xuICAgIGNvbnN0IGZldGNoZWQgPSBmZXRjaChlbmNvZGVyLCBlbmdpbmVPcHRpb25zKTtcbiAgICBpZiAoZmV0Y2hlZCkgcmV0dXJuIGZldGNoZWQ7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ09QVVNfRU5HSU5FX01JU1NJTkcnKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvdm9pY2Uvb3B1cy9PcHVzRW5naW5lTGlzdC5qc1xuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/*!**********************************************!*\
  !*** ./node_modules/discord.js/src/index.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Util = __webpack_require__(/*! ./util/Util */ 4);\n\nmodule.exports = {\n  // \"Root\" classes (starting points)\n  Client: __webpack_require__(/*! ./client/Client */ 96),\n  Shard: __webpack_require__(/*! ./sharding/Shard */ 82),\n  ShardClientUtil: __webpack_require__(/*! ./sharding/ShardClientUtil */ 81),\n  ShardingManager: __webpack_require__(/*! ./sharding/ShardingManager */ 198),\n  WebhookClient: __webpack_require__(/*! ./client/WebhookClient */ 199),\n\n  // Utilities\n  Collection: __webpack_require__(/*! ./util/Collection */ 3),\n  Constants: __webpack_require__(/*! ./util/Constants */ 0),\n  DiscordAPIError: __webpack_require__(/*! ./client/rest/DiscordAPIError */ 40),\n  EvaluatedPermissions: __webpack_require__(/*! ./util/Permissions */ 7),\n  Permissions: __webpack_require__(/*! ./util/Permissions */ 7),\n  Snowflake: __webpack_require__(/*! ./util/Snowflake */ 6),\n  SnowflakeUtil: __webpack_require__(/*! ./util/Snowflake */ 6),\n  Util: Util,\n  util: Util,\n  version: __webpack_require__(/*! ../package */ 49).version,\n\n  // Shortcuts to Util methods\n  escapeMarkdown: Util.escapeMarkdown,\n  fetchRecommendedShards: Util.fetchRecommendedShards,\n  splitMessage: Util.splitMessage,\n\n  // Structures\n  Attachment: __webpack_require__(/*! ./structures/Attachment */ 21),\n  CategoryChannel: __webpack_require__(/*! ./structures/CategoryChannel */ 61),\n  Channel: __webpack_require__(/*! ./structures/Channel */ 13),\n  ClientUser: __webpack_require__(/*! ./structures/ClientUser */ 67),\n  ClientUserSettings: __webpack_require__(/*! ./structures/ClientUserSettings */ 68),\n  Collector: __webpack_require__(/*! ./structures/interfaces/Collector */ 36),\n  DMChannel: __webpack_require__(/*! ./structures/DMChannel */ 63),\n  Emoji: __webpack_require__(/*! ./structures/Emoji */ 17),\n  Game: __webpack_require__(/*! ./structures/Presence */ 12).Game,\n  GroupDMChannel: __webpack_require__(/*! ./structures/GroupDMChannel */ 39),\n  Guild: __webpack_require__(/*! ./structures/Guild */ 22),\n  GuildAuditLogs: __webpack_require__(/*! ./structures/GuildAuditLogs */ 59),\n  GuildChannel: __webpack_require__(/*! ./structures/GuildChannel */ 19),\n  GuildMember: __webpack_require__(/*! ./structures/GuildMember */ 18),\n  Invite: __webpack_require__(/*! ./structures/Invite */ 37),\n  Message: __webpack_require__(/*! ./structures/Message */ 16),\n  MessageAttachment: __webpack_require__(/*! ./structures/MessageAttachment */ 52),\n  MessageCollector: __webpack_require__(/*! ./structures/MessageCollector */ 56),\n  MessageEmbed: __webpack_require__(/*! ./structures/MessageEmbed */ 53),\n  MessageMentions: __webpack_require__(/*! ./structures/MessageMentions */ 51),\n  MessageReaction: __webpack_require__(/*! ./structures/MessageReaction */ 54),\n  OAuth2Application: __webpack_require__(/*! ./structures/OAuth2Application */ 38),\n  ClientOAuth2Application: __webpack_require__(/*! ./structures/OAuth2Application */ 38),\n  PartialGuild: __webpack_require__(/*! ./structures/PartialGuild */ 57),\n  PartialGuildChannel: __webpack_require__(/*! ./structures/PartialGuildChannel */ 58),\n  PermissionOverwrites: __webpack_require__(/*! ./structures/PermissionOverwrites */ 62),\n  Presence: __webpack_require__(/*! ./structures/Presence */ 12).Presence,\n  ReactionEmoji: __webpack_require__(/*! ./structures/ReactionEmoji */ 35),\n  ReactionCollector: __webpack_require__(/*! ./structures/ReactionCollector */ 55),\n  RichEmbed: __webpack_require__(/*! ./structures/RichEmbed */ 20),\n  Role: __webpack_require__(/*! ./structures/Role */ 10),\n  TextChannel: __webpack_require__(/*! ./structures/TextChannel */ 64),\n  User: __webpack_require__(/*! ./structures/User */ 11),\n  VoiceChannel: __webpack_require__(/*! ./structures/VoiceChannel */ 65),\n  Webhook: __webpack_require__(/*! ./structures/Webhook */ 23),\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvaW5kZXguanM/ZWE0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVdGlsID0gcmVxdWlyZSgnLi91dGlsL1V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIFwiUm9vdFwiIGNsYXNzZXMgKHN0YXJ0aW5nIHBvaW50cylcbiAgQ2xpZW50OiByZXF1aXJlKCcuL2NsaWVudC9DbGllbnQnKSxcbiAgU2hhcmQ6IHJlcXVpcmUoJy4vc2hhcmRpbmcvU2hhcmQnKSxcbiAgU2hhcmRDbGllbnRVdGlsOiByZXF1aXJlKCcuL3NoYXJkaW5nL1NoYXJkQ2xpZW50VXRpbCcpLFxuICBTaGFyZGluZ01hbmFnZXI6IHJlcXVpcmUoJy4vc2hhcmRpbmcvU2hhcmRpbmdNYW5hZ2VyJyksXG4gIFdlYmhvb2tDbGllbnQ6IHJlcXVpcmUoJy4vY2xpZW50L1dlYmhvb2tDbGllbnQnKSxcblxuICAvLyBVdGlsaXRpZXNcbiAgQ29sbGVjdGlvbjogcmVxdWlyZSgnLi91dGlsL0NvbGxlY3Rpb24nKSxcbiAgQ29uc3RhbnRzOiByZXF1aXJlKCcuL3V0aWwvQ29uc3RhbnRzJyksXG4gIERpc2NvcmRBUElFcnJvcjogcmVxdWlyZSgnLi9jbGllbnQvcmVzdC9EaXNjb3JkQVBJRXJyb3InKSxcbiAgRXZhbHVhdGVkUGVybWlzc2lvbnM6IHJlcXVpcmUoJy4vdXRpbC9QZXJtaXNzaW9ucycpLFxuICBQZXJtaXNzaW9uczogcmVxdWlyZSgnLi91dGlsL1Blcm1pc3Npb25zJyksXG4gIFNub3dmbGFrZTogcmVxdWlyZSgnLi91dGlsL1Nub3dmbGFrZScpLFxuICBTbm93Zmxha2VVdGlsOiByZXF1aXJlKCcuL3V0aWwvU25vd2ZsYWtlJyksXG4gIFV0aWw6IFV0aWwsXG4gIHV0aWw6IFV0aWwsXG4gIHZlcnNpb246IHJlcXVpcmUoJy4uL3BhY2thZ2UnKS52ZXJzaW9uLFxuXG4gIC8vIFNob3J0Y3V0cyB0byBVdGlsIG1ldGhvZHNcbiAgZXNjYXBlTWFya2Rvd246IFV0aWwuZXNjYXBlTWFya2Rvd24sXG4gIGZldGNoUmVjb21tZW5kZWRTaGFyZHM6IFV0aWwuZmV0Y2hSZWNvbW1lbmRlZFNoYXJkcyxcbiAgc3BsaXRNZXNzYWdlOiBVdGlsLnNwbGl0TWVzc2FnZSxcblxuICAvLyBTdHJ1Y3R1cmVzXG4gIEF0dGFjaG1lbnQ6IHJlcXVpcmUoJy4vc3RydWN0dXJlcy9BdHRhY2htZW50JyksXG4gIENhdGVnb3J5Q2hhbm5lbDogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL0NhdGVnb3J5Q2hhbm5lbCcpLFxuICBDaGFubmVsOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvQ2hhbm5lbCcpLFxuICBDbGllbnRVc2VyOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvQ2xpZW50VXNlcicpLFxuICBDbGllbnRVc2VyU2V0dGluZ3M6IHJlcXVpcmUoJy4vc3RydWN0dXJlcy9DbGllbnRVc2VyU2V0dGluZ3MnKSxcbiAgQ29sbGVjdG9yOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvaW50ZXJmYWNlcy9Db2xsZWN0b3InKSxcbiAgRE1DaGFubmVsOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvRE1DaGFubmVsJyksXG4gIEVtb2ppOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvRW1vamknKSxcbiAgR2FtZTogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL1ByZXNlbmNlJykuR2FtZSxcbiAgR3JvdXBETUNoYW5uZWw6IHJlcXVpcmUoJy4vc3RydWN0dXJlcy9Hcm91cERNQ2hhbm5lbCcpLFxuICBHdWlsZDogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL0d1aWxkJyksXG4gIEd1aWxkQXVkaXRMb2dzOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvR3VpbGRBdWRpdExvZ3MnKSxcbiAgR3VpbGRDaGFubmVsOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvR3VpbGRDaGFubmVsJyksXG4gIEd1aWxkTWVtYmVyOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvR3VpbGRNZW1iZXInKSxcbiAgSW52aXRlOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvSW52aXRlJyksXG4gIE1lc3NhZ2U6IHJlcXVpcmUoJy4vc3RydWN0dXJlcy9NZXNzYWdlJyksXG4gIE1lc3NhZ2VBdHRhY2htZW50OiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvTWVzc2FnZUF0dGFjaG1lbnQnKSxcbiAgTWVzc2FnZUNvbGxlY3RvcjogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL01lc3NhZ2VDb2xsZWN0b3InKSxcbiAgTWVzc2FnZUVtYmVkOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvTWVzc2FnZUVtYmVkJyksXG4gIE1lc3NhZ2VNZW50aW9uczogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL01lc3NhZ2VNZW50aW9ucycpLFxuICBNZXNzYWdlUmVhY3Rpb246IHJlcXVpcmUoJy4vc3RydWN0dXJlcy9NZXNzYWdlUmVhY3Rpb24nKSxcbiAgT0F1dGgyQXBwbGljYXRpb246IHJlcXVpcmUoJy4vc3RydWN0dXJlcy9PQXV0aDJBcHBsaWNhdGlvbicpLFxuICBDbGllbnRPQXV0aDJBcHBsaWNhdGlvbjogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL09BdXRoMkFwcGxpY2F0aW9uJyksXG4gIFBhcnRpYWxHdWlsZDogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL1BhcnRpYWxHdWlsZCcpLFxuICBQYXJ0aWFsR3VpbGRDaGFubmVsOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvUGFydGlhbEd1aWxkQ2hhbm5lbCcpLFxuICBQZXJtaXNzaW9uT3ZlcndyaXRlczogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL1Blcm1pc3Npb25PdmVyd3JpdGVzJyksXG4gIFByZXNlbmNlOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvUHJlc2VuY2UnKS5QcmVzZW5jZSxcbiAgUmVhY3Rpb25FbW9qaTogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL1JlYWN0aW9uRW1vamknKSxcbiAgUmVhY3Rpb25Db2xsZWN0b3I6IHJlcXVpcmUoJy4vc3RydWN0dXJlcy9SZWFjdGlvbkNvbGxlY3RvcicpLFxuICBSaWNoRW1iZWQ6IHJlcXVpcmUoJy4vc3RydWN0dXJlcy9SaWNoRW1iZWQnKSxcbiAgUm9sZTogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL1JvbGUnKSxcbiAgVGV4dENoYW5uZWw6IHJlcXVpcmUoJy4vc3RydWN0dXJlcy9UZXh0Q2hhbm5lbCcpLFxuICBVc2VyOiByZXF1aXJlKCcuL3N0cnVjdHVyZXMvVXNlcicpLFxuICBWb2ljZUNoYW5uZWw6IHJlcXVpcmUoJy4vc3RydWN0dXJlcy9Wb2ljZUNoYW5uZWwnKSxcbiAgV2ViaG9vazogcmVxdWlyZSgnLi9zdHJ1Y3R1cmVzL1dlYmhvb2snKSxcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"querystring\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJxdWVyeXN0cmluZ1wiPzcxZGEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicXVlcnlzdHJpbmdcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJxdWVyeXN0cmluZ1wiXG4vLyBtb2R1bGUgaWQgPSA0NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/*!************************!*\
  !*** external "https" ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"https\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwc1wiPzEwZDMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJodHRwc1wiXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/*!*************************************************!*\
  !*** ./node_modules/snekfetch/src/node/mime.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const mimes = __webpack_require__(/*! ./mimes.json */ 90);\nconst mimeOfBuffer = __webpack_require__(/*! ./mimeOfBuffer.js */ 91);\n\nfunction lookupMime(ext) {\n  return mimes[ext.replace(/^\\./, '')] || mimes.bin;\n}\n\nfunction lookupBuffer(buffer) {\n  const ret = mimeOfBuffer(buffer);\n  return ret ? ret.mime : mimes.bin;\n}\n\nmodule.exports = {\n  buffer: lookupBuffer,\n  lookup: lookupMime,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL3NyYy9ub2RlL21pbWUuanM/MTRlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtaW1lcyA9IHJlcXVpcmUoJy4vbWltZXMuanNvbicpO1xuY29uc3QgbWltZU9mQnVmZmVyID0gcmVxdWlyZSgnLi9taW1lT2ZCdWZmZXIuanMnKTtcblxuZnVuY3Rpb24gbG9va3VwTWltZShleHQpIHtcbiAgcmV0dXJuIG1pbWVzW2V4dC5yZXBsYWNlKC9eXFwuLywgJycpXSB8fCBtaW1lcy5iaW47XG59XG5cbmZ1bmN0aW9uIGxvb2t1cEJ1ZmZlcihidWZmZXIpIHtcbiAgY29uc3QgcmV0ID0gbWltZU9mQnVmZmVyKGJ1ZmZlcik7XG4gIHJldHVybiByZXQgPyByZXQubWltZSA6IG1pbWVzLmJpbjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGJ1ZmZlcjogbG9va3VwQnVmZmVyLFxuICBsb29rdXA6IGxvb2t1cE1pbWUsXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL3NyYy9ub2RlL21pbWUuanNcbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/*!**********************************************!*\
  !*** ./node_modules/discord.js/package.json ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = {\"_from\":\"discord.js\",\"_id\":\"discord.js@11.3.2\",\"_inBundle\":false,\"_integrity\":\"sha512-Abw9CTMX3Jb47IeRffqx2VNSnXl/OsTdQzhvbw/JnqCyqc2imAocc7pX2HoRmgKd8CgSqsjBFBneusz/E16e6A==\",\"_location\":\"/discord.js\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"discord.js\",\"name\":\"discord.js\",\"escapedName\":\"discord.js\",\"rawSpec\":\"\",\"saveSpec\":null,\"fetchSpec\":\"latest\"},\"_requiredBy\":[\"#USER\",\"/\"],\"_resolved\":\"https://registry.npmjs.org/discord.js/-/discord.js-11.3.2.tgz\",\"_shasum\":\"3c4074c1cb1a4916582fb96ded5ffa1324411f95\",\"_spec\":\"discord.js\",\"_where\":\"/media/zurkloyd/Files And Stuff/projects/development/software/Discord-bot\",\"author\":{\"name\":\"Amish Shah\",\"email\":\"amishshah.2k@gmail.com\"},\"browser\":{\"ws\":false,\"uws\":false,\"erlpack\":false,\"prism-media\":false,\"opusscript\":false,\"node-opus\":false,\"tweetnacl\":false,\"sodium\":false,\"src/sharding/Shard.js\":false,\"src/sharding/ShardClientUtil.js\":false,\"src/sharding/ShardingManager.js\":false,\"src/client/voice/dispatcher/StreamDispatcher.js\":false,\"src/client/voice/opus/BaseOpusEngine.js\":false,\"src/client/voice/opus/NodeOpusEngine.js\":false,\"src/client/voice/opus/OpusEngineList.js\":false,\"src/client/voice/opus/OpusScriptEngine.js\":false,\"src/client/voice/pcm/ConverterEngine.js\":false,\"src/client/voice/pcm/ConverterEngineList.js\":false,\"src/client/voice/pcm/FfmpegConverterEngine.js\":false,\"src/client/voice/player/AudioPlayer.js\":false,\"src/client/voice/receiver/VoiceReadable.js\":false,\"src/client/voice/receiver/VoiceReceiver.js\":false,\"src/client/voice/util/Secretbox.js\":false,\"src/client/voice/util/SecretKey.js\":false,\"src/client/voice/util/VolumeInterface.js\":false,\"src/client/voice/ClientVoiceManager.js\":false,\"src/client/voice/VoiceBroadcast.js\":false,\"src/client/voice/VoiceConnection.js\":false,\"src/client/voice/VoiceUDPClient.js\":false,\"src/client/voice/VoiceWebSocket.js\":false},\"bugs\":{\"url\":\"https://github.com/discordjs/discord.js/issues\"},\"bundleDependencies\":false,\"dependencies\":{\"long\":\"^4.0.0\",\"prism-media\":\"^0.0.2\",\"snekfetch\":\"^3.6.4\",\"tweetnacl\":\"^1.0.0\",\"ws\":\"^4.0.0\"},\"deprecated\":false,\"description\":\"A powerful library for interacting with the Discord API\",\"devDependencies\":{\"@types/node\":\"^9.4.6\",\"discord.js-docgen\":\"github:discordjs/docgen\",\"eslint\":\"^4.18.0\",\"parallel-webpack\":\"^2.2.0\",\"uglifyjs-webpack-plugin\":\"^1.2.0\",\"webpack\":\"^3.11.0\"},\"engines\":{\"node\":\">=6.0.0\"},\"homepage\":\"https://github.com/discordjs/discord.js#readme\",\"keywords\":[\"discord\",\"api\",\"bot\",\"client\",\"node\",\"discordapp\"],\"license\":\"Apache-2.0\",\"main\":\"./src/index\",\"name\":\"discord.js\",\"peerDependencies\":{\"bufferutil\":\"^3.0.3\",\"erlpack\":\"discordapp/erlpack\",\"node-opus\":\"^0.2.7\",\"opusscript\":\"^0.0.6\",\"sodium\":\"^2.0.3\",\"libsodium-wrappers\":\"^0.7.3\",\"uws\":\"^9.14.0\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/discordjs/discord.js.git\"},\"runkitExampleFilename\":\"./docs/examples/ping.js\",\"scripts\":{\"docs\":\"docgen --source src --custom docs/index.yml --output docs/docs.json\",\"docs:test\":\"docgen --source src --custom docs/index.yml\",\"lint\":\"eslint src\",\"lint:fix\":\"eslint --fix src\",\"test\":\"npm run lint && npm run docs:test\",\"webpack\":\"parallel-webpack\"},\"types\":\"./typings/index.d.ts\",\"version\":\"11.3.2\"}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9wYWNrYWdlLmpzb24/OTkzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcIl9mcm9tXCI6XCJkaXNjb3JkLmpzXCIsXCJfaWRcIjpcImRpc2NvcmQuanNAMTEuMy4yXCIsXCJfaW5CdW5kbGVcIjpmYWxzZSxcIl9pbnRlZ3JpdHlcIjpcInNoYTUxMi1BYnc5Q1RNWDNKYjQ3SWVSZmZxeDJWTlNuWGwvT3NUZFF6aHZidy9KbnFDeXFjMmltQW9jYzdwWDJIb1JtZ0tkOENnU3FzakJGQm5ldXN6L0UxNmU2QT09XCIsXCJfbG9jYXRpb25cIjpcIi9kaXNjb3JkLmpzXCIsXCJfcGhhbnRvbUNoaWxkcmVuXCI6e30sXCJfcmVxdWVzdGVkXCI6e1widHlwZVwiOlwidGFnXCIsXCJyZWdpc3RyeVwiOnRydWUsXCJyYXdcIjpcImRpc2NvcmQuanNcIixcIm5hbWVcIjpcImRpc2NvcmQuanNcIixcImVzY2FwZWROYW1lXCI6XCJkaXNjb3JkLmpzXCIsXCJyYXdTcGVjXCI6XCJcIixcInNhdmVTcGVjXCI6bnVsbCxcImZldGNoU3BlY1wiOlwibGF0ZXN0XCJ9LFwiX3JlcXVpcmVkQnlcIjpbXCIjVVNFUlwiLFwiL1wiXSxcIl9yZXNvbHZlZFwiOlwiaHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcvZGlzY29yZC5qcy8tL2Rpc2NvcmQuanMtMTEuMy4yLnRnelwiLFwiX3NoYXN1bVwiOlwiM2M0MDc0YzFjYjFhNDkxNjU4MmZiOTZkZWQ1ZmZhMTMyNDQxMWY5NVwiLFwiX3NwZWNcIjpcImRpc2NvcmQuanNcIixcIl93aGVyZVwiOlwiL21lZGlhL3p1cmtsb3lkL0ZpbGVzIEFuZCBTdHVmZi9wcm9qZWN0cy9kZXZlbG9wbWVudC9zb2Z0d2FyZS9EaXNjb3JkLWJvdFwiLFwiYXV0aG9yXCI6e1wibmFtZVwiOlwiQW1pc2ggU2hhaFwiLFwiZW1haWxcIjpcImFtaXNoc2hhaC4ya0BnbWFpbC5jb21cIn0sXCJicm93c2VyXCI6e1wid3NcIjpmYWxzZSxcInV3c1wiOmZhbHNlLFwiZXJscGFja1wiOmZhbHNlLFwicHJpc20tbWVkaWFcIjpmYWxzZSxcIm9wdXNzY3JpcHRcIjpmYWxzZSxcIm5vZGUtb3B1c1wiOmZhbHNlLFwidHdlZXRuYWNsXCI6ZmFsc2UsXCJzb2RpdW1cIjpmYWxzZSxcInNyYy9zaGFyZGluZy9TaGFyZC5qc1wiOmZhbHNlLFwic3JjL3NoYXJkaW5nL1NoYXJkQ2xpZW50VXRpbC5qc1wiOmZhbHNlLFwic3JjL3NoYXJkaW5nL1NoYXJkaW5nTWFuYWdlci5qc1wiOmZhbHNlLFwic3JjL2NsaWVudC92b2ljZS9kaXNwYXRjaGVyL1N0cmVhbURpc3BhdGNoZXIuanNcIjpmYWxzZSxcInNyYy9jbGllbnQvdm9pY2Uvb3B1cy9CYXNlT3B1c0VuZ2luZS5qc1wiOmZhbHNlLFwic3JjL2NsaWVudC92b2ljZS9vcHVzL05vZGVPcHVzRW5naW5lLmpzXCI6ZmFsc2UsXCJzcmMvY2xpZW50L3ZvaWNlL29wdXMvT3B1c0VuZ2luZUxpc3QuanNcIjpmYWxzZSxcInNyYy9jbGllbnQvdm9pY2Uvb3B1cy9PcHVzU2NyaXB0RW5naW5lLmpzXCI6ZmFsc2UsXCJzcmMvY2xpZW50L3ZvaWNlL3BjbS9Db252ZXJ0ZXJFbmdpbmUuanNcIjpmYWxzZSxcInNyYy9jbGllbnQvdm9pY2UvcGNtL0NvbnZlcnRlckVuZ2luZUxpc3QuanNcIjpmYWxzZSxcInNyYy9jbGllbnQvdm9pY2UvcGNtL0ZmbXBlZ0NvbnZlcnRlckVuZ2luZS5qc1wiOmZhbHNlLFwic3JjL2NsaWVudC92b2ljZS9wbGF5ZXIvQXVkaW9QbGF5ZXIuanNcIjpmYWxzZSxcInNyYy9jbGllbnQvdm9pY2UvcmVjZWl2ZXIvVm9pY2VSZWFkYWJsZS5qc1wiOmZhbHNlLFwic3JjL2NsaWVudC92b2ljZS9yZWNlaXZlci9Wb2ljZVJlY2VpdmVyLmpzXCI6ZmFsc2UsXCJzcmMvY2xpZW50L3ZvaWNlL3V0aWwvU2VjcmV0Ym94LmpzXCI6ZmFsc2UsXCJzcmMvY2xpZW50L3ZvaWNlL3V0aWwvU2VjcmV0S2V5LmpzXCI6ZmFsc2UsXCJzcmMvY2xpZW50L3ZvaWNlL3V0aWwvVm9sdW1lSW50ZXJmYWNlLmpzXCI6ZmFsc2UsXCJzcmMvY2xpZW50L3ZvaWNlL0NsaWVudFZvaWNlTWFuYWdlci5qc1wiOmZhbHNlLFwic3JjL2NsaWVudC92b2ljZS9Wb2ljZUJyb2FkY2FzdC5qc1wiOmZhbHNlLFwic3JjL2NsaWVudC92b2ljZS9Wb2ljZUNvbm5lY3Rpb24uanNcIjpmYWxzZSxcInNyYy9jbGllbnQvdm9pY2UvVm9pY2VVRFBDbGllbnQuanNcIjpmYWxzZSxcInNyYy9jbGllbnQvdm9pY2UvVm9pY2VXZWJTb2NrZXQuanNcIjpmYWxzZX0sXCJidWdzXCI6e1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vZGlzY29yZGpzL2Rpc2NvcmQuanMvaXNzdWVzXCJ9LFwiYnVuZGxlRGVwZW5kZW5jaWVzXCI6ZmFsc2UsXCJkZXBlbmRlbmNpZXNcIjp7XCJsb25nXCI6XCJeNC4wLjBcIixcInByaXNtLW1lZGlhXCI6XCJeMC4wLjJcIixcInNuZWtmZXRjaFwiOlwiXjMuNi40XCIsXCJ0d2VldG5hY2xcIjpcIl4xLjAuMFwiLFwid3NcIjpcIl40LjAuMFwifSxcImRlcHJlY2F0ZWRcIjpmYWxzZSxcImRlc2NyaXB0aW9uXCI6XCJBIHBvd2VyZnVsIGxpYnJhcnkgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIERpc2NvcmQgQVBJXCIsXCJkZXZEZXBlbmRlbmNpZXNcIjp7XCJAdHlwZXMvbm9kZVwiOlwiXjkuNC42XCIsXCJkaXNjb3JkLmpzLWRvY2dlblwiOlwiZ2l0aHViOmRpc2NvcmRqcy9kb2NnZW5cIixcImVzbGludFwiOlwiXjQuMTguMFwiLFwicGFyYWxsZWwtd2VicGFja1wiOlwiXjIuMi4wXCIsXCJ1Z2xpZnlqcy13ZWJwYWNrLXBsdWdpblwiOlwiXjEuMi4wXCIsXCJ3ZWJwYWNrXCI6XCJeMy4xMS4wXCJ9LFwiZW5naW5lc1wiOntcIm5vZGVcIjpcIj49Ni4wLjBcIn0sXCJob21lcGFnZVwiOlwiaHR0cHM6Ly9naXRodWIuY29tL2Rpc2NvcmRqcy9kaXNjb3JkLmpzI3JlYWRtZVwiLFwia2V5d29yZHNcIjpbXCJkaXNjb3JkXCIsXCJhcGlcIixcImJvdFwiLFwiY2xpZW50XCIsXCJub2RlXCIsXCJkaXNjb3JkYXBwXCJdLFwibGljZW5zZVwiOlwiQXBhY2hlLTIuMFwiLFwibWFpblwiOlwiLi9zcmMvaW5kZXhcIixcIm5hbWVcIjpcImRpc2NvcmQuanNcIixcInBlZXJEZXBlbmRlbmNpZXNcIjp7XCJidWZmZXJ1dGlsXCI6XCJeMy4wLjNcIixcImVybHBhY2tcIjpcImRpc2NvcmRhcHAvZXJscGFja1wiLFwibm9kZS1vcHVzXCI6XCJeMC4yLjdcIixcIm9wdXNzY3JpcHRcIjpcIl4wLjAuNlwiLFwic29kaXVtXCI6XCJeMi4wLjNcIixcImxpYnNvZGl1bS13cmFwcGVyc1wiOlwiXjAuNy4zXCIsXCJ1d3NcIjpcIl45LjE0LjBcIn0sXCJyZXBvc2l0b3J5XCI6e1widHlwZVwiOlwiZ2l0XCIsXCJ1cmxcIjpcImdpdCtodHRwczovL2dpdGh1Yi5jb20vZGlzY29yZGpzL2Rpc2NvcmQuanMuZ2l0XCJ9LFwicnVua2l0RXhhbXBsZUZpbGVuYW1lXCI6XCIuL2RvY3MvZXhhbXBsZXMvcGluZy5qc1wiLFwic2NyaXB0c1wiOntcImRvY3NcIjpcImRvY2dlbiAtLXNvdXJjZSBzcmMgLS1jdXN0b20gZG9jcy9pbmRleC55bWwgLS1vdXRwdXQgZG9jcy9kb2NzLmpzb25cIixcImRvY3M6dGVzdFwiOlwiZG9jZ2VuIC0tc291cmNlIHNyYyAtLWN1c3RvbSBkb2NzL2luZGV4LnltbFwiLFwibGludFwiOlwiZXNsaW50IHNyY1wiLFwibGludDpmaXhcIjpcImVzbGludCAtLWZpeCBzcmNcIixcInRlc3RcIjpcIm5wbSBydW4gbGludCAmJiBucG0gcnVuIGRvY3M6dGVzdFwiLFwid2VicGFja1wiOlwicGFyYWxsZWwtd2VicGFja1wifSxcInR5cGVzXCI6XCIuL3R5cGluZ3MvaW5kZXguZC50c1wiLFwidmVyc2lvblwiOlwiMTEuMy4yXCJ9XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9wYWNrYWdlLmpzb25cbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/RESTManager.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const UserAgentManager = __webpack_require__(/*! ./UserAgentManager */ 97);\nconst RESTMethods = __webpack_require__(/*! ./RESTMethods */ 98);\nconst SequentialRequestHandler = __webpack_require__(/*! ./RequestHandlers/Sequential */ 102);\nconst BurstRequestHandler = __webpack_require__(/*! ./RequestHandlers/Burst */ 103);\nconst APIRequest = __webpack_require__(/*! ./APIRequest */ 104);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass RESTManager {\n  constructor(client) {\n    this.client = client;\n    this.handlers = {};\n    this.userAgentManager = new UserAgentManager(this);\n    this.methods = new RESTMethods(this);\n    this.rateLimitedEndpoints = {};\n    this.globallyRateLimited = false;\n  }\n\n  destroy() {\n    for (const handler of Object.values(this.handlers)) {\n      if (handler.destroy) handler.destroy();\n    }\n  }\n\n  push(handler, apiRequest) {\n    return new Promise((resolve, reject) => {\n      handler.push({\n        request: apiRequest,\n        resolve,\n        reject,\n      });\n    });\n  }\n\n  getRequestHandler() {\n    switch (this.client.options.apiRequestMethod) {\n      case 'sequential':\n        return SequentialRequestHandler;\n      case 'burst':\n        return BurstRequestHandler;\n      default:\n        throw new Error(Constants.Errors.INVALID_RATE_LIMIT_METHOD);\n    }\n  }\n\n  makeRequest(method, url, auth, data, file, reason) {\n    const apiRequest = new APIRequest(this, method, url, auth, data, file, reason);\n    if (!this.handlers[apiRequest.route]) {\n      const RequestHandlerType = this.getRequestHandler();\n      this.handlers[apiRequest.route] = new RequestHandlerType(this, apiRequest.route);\n    }\n\n    return this.push(this.handlers[apiRequest.route], apiRequest);\n  }\n}\n\nmodule.exports = RESTManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3Jlc3QvUkVTVE1hbmFnZXIuanM/MzAwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVc2VyQWdlbnRNYW5hZ2VyID0gcmVxdWlyZSgnLi9Vc2VyQWdlbnRNYW5hZ2VyJyk7XG5jb25zdCBSRVNUTWV0aG9kcyA9IHJlcXVpcmUoJy4vUkVTVE1ldGhvZHMnKTtcbmNvbnN0IFNlcXVlbnRpYWxSZXF1ZXN0SGFuZGxlciA9IHJlcXVpcmUoJy4vUmVxdWVzdEhhbmRsZXJzL1NlcXVlbnRpYWwnKTtcbmNvbnN0IEJ1cnN0UmVxdWVzdEhhbmRsZXIgPSByZXF1aXJlKCcuL1JlcXVlc3RIYW5kbGVycy9CdXJzdCcpO1xuY29uc3QgQVBJUmVxdWVzdCA9IHJlcXVpcmUoJy4vQVBJUmVxdWVzdCcpO1xuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9Db25zdGFudHMnKTtcblxuY2xhc3MgUkVTVE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICB0aGlzLmhhbmRsZXJzID0ge307XG4gICAgdGhpcy51c2VyQWdlbnRNYW5hZ2VyID0gbmV3IFVzZXJBZ2VudE1hbmFnZXIodGhpcyk7XG4gICAgdGhpcy5tZXRob2RzID0gbmV3IFJFU1RNZXRob2RzKHRoaXMpO1xuICAgIHRoaXMucmF0ZUxpbWl0ZWRFbmRwb2ludHMgPSB7fTtcbiAgICB0aGlzLmdsb2JhbGx5UmF0ZUxpbWl0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIE9iamVjdC52YWx1ZXModGhpcy5oYW5kbGVycykpIHtcbiAgICAgIGlmIChoYW5kbGVyLmRlc3Ryb3kpIGhhbmRsZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfVxuXG4gIHB1c2goaGFuZGxlciwgYXBpUmVxdWVzdCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBoYW5kbGVyLnB1c2goe1xuICAgICAgICByZXF1ZXN0OiBhcGlSZXF1ZXN0LFxuICAgICAgICByZXNvbHZlLFxuICAgICAgICByZWplY3QsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldFJlcXVlc3RIYW5kbGVyKCkge1xuICAgIHN3aXRjaCAodGhpcy5jbGllbnQub3B0aW9ucy5hcGlSZXF1ZXN0TWV0aG9kKSB7XG4gICAgICBjYXNlICdzZXF1ZW50aWFsJzpcbiAgICAgICAgcmV0dXJuIFNlcXVlbnRpYWxSZXF1ZXN0SGFuZGxlcjtcbiAgICAgIGNhc2UgJ2J1cnN0JzpcbiAgICAgICAgcmV0dXJuIEJ1cnN0UmVxdWVzdEhhbmRsZXI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoQ29uc3RhbnRzLkVycm9ycy5JTlZBTElEX1JBVEVfTElNSVRfTUVUSE9EKTtcbiAgICB9XG4gIH1cblxuICBtYWtlUmVxdWVzdChtZXRob2QsIHVybCwgYXV0aCwgZGF0YSwgZmlsZSwgcmVhc29uKSB7XG4gICAgY29uc3QgYXBpUmVxdWVzdCA9IG5ldyBBUElSZXF1ZXN0KHRoaXMsIG1ldGhvZCwgdXJsLCBhdXRoLCBkYXRhLCBmaWxlLCByZWFzb24pO1xuICAgIGlmICghdGhpcy5oYW5kbGVyc1thcGlSZXF1ZXN0LnJvdXRlXSkge1xuICAgICAgY29uc3QgUmVxdWVzdEhhbmRsZXJUeXBlID0gdGhpcy5nZXRSZXF1ZXN0SGFuZGxlcigpO1xuICAgICAgdGhpcy5oYW5kbGVyc1thcGlSZXF1ZXN0LnJvdXRlXSA9IG5ldyBSZXF1ZXN0SGFuZGxlclR5cGUodGhpcywgYXBpUmVxdWVzdC5yb3V0ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHVzaCh0aGlzLmhhbmRsZXJzW2FwaVJlcXVlc3Qucm91dGVdLCBhcGlSZXF1ZXN0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJFU1RNYW5hZ2VyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3Jlc3QvUkVTVE1hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageMentions.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Collection = __webpack_require__(/*! ../util/Collection */ 3);\n\n/**\n * Keeps track of mentions in a {@link Message}.\n */\nclass MessageMentions {\n  constructor(message, users, roles, everyone) {\n    /**\n     * Whether `@everyone` or `@here` were mentioned\n     * @type {boolean}\n     */\n    this.everyone = Boolean(everyone);\n\n    if (users) {\n      if (users instanceof Collection) {\n        /**\n         * Any users that were mentioned\n         * @type {Collection<Snowflake, User>}\n         */\n        this.users = new Collection(users);\n      } else {\n        this.users = new Collection();\n        for (const mention of users) {\n          let user = message.client.users.get(mention.id);\n          if (!user) user = message.client.dataManager.newUser(mention);\n          this.users.set(user.id, user);\n        }\n      }\n    } else {\n      this.users = new Collection();\n    }\n\n    if (roles) {\n      if (roles instanceof Collection) {\n        /**\n         * Any roles that were mentioned\n         * @type {Collection<Snowflake, Role>}\n         */\n        this.roles = new Collection(roles);\n      } else {\n        this.roles = new Collection();\n        for (const mention of roles) {\n          const role = message.channel.guild.roles.get(mention);\n          if (role) this.roles.set(role.id, role);\n        }\n      }\n    } else {\n      this.roles = new Collection();\n    }\n\n    /**\n     * Content of the message\n     * @type {Message}\n     * @private\n     */\n    this._content = message.content;\n\n    /**\n     * The client the message is from\n     * @type {Client}\n     * @private\n     */\n    this._client = message.client;\n\n    /**\n     * The guild the message is in\n     * @type {?Guild}\n     * @private\n     */\n    this._guild = message.channel.guild;\n\n    /**\n     * Cached members for {@MessageMention#members}\n     * @type {?Collection<Snowflake, GuildMember>}\n     * @private\n     */\n    this._members = null;\n\n    /**\n     * Cached channels for {@MessageMention#channels}\n     * @type {?Collection<Snowflake, GuildChannel>}\n     * @private\n     */\n    this._channels = null;\n  }\n\n  /**\n   * Any members that were mentioned (only in {@link TextChannel}s)\n   * @type {?Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    if (this._members) return this._members;\n    if (!this._guild) return null;\n    this._members = new Collection();\n    this.users.forEach(user => {\n      const member = this._guild.member(user);\n      if (member) this._members.set(member.user.id, member);\n    });\n    return this._members;\n  }\n\n  /**\n   * Any channels that were mentioned\n   * @type {Collection<Snowflake, GuildChannel>}\n   * @readonly\n   */\n  get channels() {\n    if (this._channels) return this._channels;\n    this._channels = new Collection();\n    let matches;\n    while ((matches = this.constructor.CHANNELS_PATTERN.exec(this._content)) !== null) {\n      const chan = this._client.channels.get(matches[1]);\n      if (chan) this._channels.set(chan.id, chan);\n    }\n    return this._channels;\n  }\n}\n\n/**\n * Regular expression that globally matches `@everyone` and `@here`\n * @type {RegExp}\n */\nMessageMentions.EVERYONE_PATTERN = /@(everyone|here)/g;\n\n/**\n * Regular expression that globally matches user mentions like `<@81440962496172032>`\n * @type {RegExp}\n */\nMessageMentions.USERS_PATTERN = /<@!?[0-9]+>/g;\n\n/**\n * Regular expression that globally matches role mentions like `<@&297577916114403338>`\n * @type {RegExp}\n */\nMessageMentions.ROLES_PATTERN = /<@&[0-9]+>/g;\n\n/**\n * Regular expression that globally matches channel mentions like `<#222079895583457280>`\n * @type {RegExp}\n */\nMessageMentions.CHANNELS_PATTERN = /<#([0-9]+)>/g;\n\nmodule.exports = MessageMentions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9NZXNzYWdlTWVudGlvbnMuanM/N2I1MyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vdXRpbC9Db2xsZWN0aW9uJyk7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgbWVudGlvbnMgaW4gYSB7QGxpbmsgTWVzc2FnZX0uXG4gKi9cbmNsYXNzIE1lc3NhZ2VNZW50aW9ucyB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHVzZXJzLCByb2xlcywgZXZlcnlvbmUpIHtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGBAZXZlcnlvbmVgIG9yIGBAaGVyZWAgd2VyZSBtZW50aW9uZWRcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmV2ZXJ5b25lID0gQm9vbGVhbihldmVyeW9uZSk7XG5cbiAgICBpZiAodXNlcnMpIHtcbiAgICAgIGlmICh1c2VycyBpbnN0YW5jZW9mIENvbGxlY3Rpb24pIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFueSB1c2VycyB0aGF0IHdlcmUgbWVudGlvbmVkXG4gICAgICAgICAqIEB0eXBlIHtDb2xsZWN0aW9uPFNub3dmbGFrZSwgVXNlcj59XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVzZXJzID0gbmV3IENvbGxlY3Rpb24odXNlcnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51c2VycyA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgICAgIGZvciAoY29uc3QgbWVudGlvbiBvZiB1c2Vycykge1xuICAgICAgICAgIGxldCB1c2VyID0gbWVzc2FnZS5jbGllbnQudXNlcnMuZ2V0KG1lbnRpb24uaWQpO1xuICAgICAgICAgIGlmICghdXNlcikgdXNlciA9IG1lc3NhZ2UuY2xpZW50LmRhdGFNYW5hZ2VyLm5ld1VzZXIobWVudGlvbik7XG4gICAgICAgICAgdGhpcy51c2Vycy5zZXQodXNlci5pZCwgdXNlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51c2VycyA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgaWYgKHJvbGVzKSB7XG4gICAgICBpZiAocm9sZXMgaW5zdGFuY2VvZiBDb2xsZWN0aW9uKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbnkgcm9sZXMgdGhhdCB3ZXJlIG1lbnRpb25lZFxuICAgICAgICAgKiBAdHlwZSB7Q29sbGVjdGlvbjxTbm93Zmxha2UsIFJvbGU+fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yb2xlcyA9IG5ldyBDb2xsZWN0aW9uKHJvbGVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucm9sZXMgPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgICAgICBmb3IgKGNvbnN0IG1lbnRpb24gb2Ygcm9sZXMpIHtcbiAgICAgICAgICBjb25zdCByb2xlID0gbWVzc2FnZS5jaGFubmVsLmd1aWxkLnJvbGVzLmdldChtZW50aW9uKTtcbiAgICAgICAgICBpZiAocm9sZSkgdGhpcy5yb2xlcy5zZXQocm9sZS5pZCwgcm9sZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb2xlcyA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udGVudCBvZiB0aGUgbWVzc2FnZVxuICAgICAqIEB0eXBlIHtNZXNzYWdlfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fY29udGVudCA9IG1lc3NhZ2UuY29udGVudDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQgdGhlIG1lc3NhZ2UgaXMgZnJvbVxuICAgICAqIEB0eXBlIHtDbGllbnR9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9jbGllbnQgPSBtZXNzYWdlLmNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBndWlsZCB0aGUgbWVzc2FnZSBpcyBpblxuICAgICAqIEB0eXBlIHs/R3VpbGR9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9ndWlsZCA9IG1lc3NhZ2UuY2hhbm5lbC5ndWlsZDtcblxuICAgIC8qKlxuICAgICAqIENhY2hlZCBtZW1iZXJzIGZvciB7QE1lc3NhZ2VNZW50aW9uI21lbWJlcnN9XG4gICAgICogQHR5cGUgez9Db2xsZWN0aW9uPFNub3dmbGFrZSwgR3VpbGRNZW1iZXI+fVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5fbWVtYmVycyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBDYWNoZWQgY2hhbm5lbHMgZm9yIHtATWVzc2FnZU1lbnRpb24jY2hhbm5lbHN9XG4gICAgICogQHR5cGUgez9Db2xsZWN0aW9uPFNub3dmbGFrZSwgR3VpbGRDaGFubmVsPn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2NoYW5uZWxzID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbnkgbWVtYmVycyB0aGF0IHdlcmUgbWVudGlvbmVkIChvbmx5IGluIHtAbGluayBUZXh0Q2hhbm5lbH1zKVxuICAgKiBAdHlwZSB7P0NvbGxlY3Rpb248U25vd2ZsYWtlLCBHdWlsZE1lbWJlcj59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IG1lbWJlcnMoKSB7XG4gICAgaWYgKHRoaXMuX21lbWJlcnMpIHJldHVybiB0aGlzLl9tZW1iZXJzO1xuICAgIGlmICghdGhpcy5fZ3VpbGQpIHJldHVybiBudWxsO1xuICAgIHRoaXMuX21lbWJlcnMgPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgIHRoaXMudXNlcnMuZm9yRWFjaCh1c2VyID0+IHtcbiAgICAgIGNvbnN0IG1lbWJlciA9IHRoaXMuX2d1aWxkLm1lbWJlcih1c2VyKTtcbiAgICAgIGlmIChtZW1iZXIpIHRoaXMuX21lbWJlcnMuc2V0KG1lbWJlci51c2VyLmlkLCBtZW1iZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLl9tZW1iZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFueSBjaGFubmVscyB0aGF0IHdlcmUgbWVudGlvbmVkXG4gICAqIEB0eXBlIHtDb2xsZWN0aW9uPFNub3dmbGFrZSwgR3VpbGRDaGFubmVsPn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgY2hhbm5lbHMoKSB7XG4gICAgaWYgKHRoaXMuX2NoYW5uZWxzKSByZXR1cm4gdGhpcy5fY2hhbm5lbHM7XG4gICAgdGhpcy5fY2hhbm5lbHMgPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgIGxldCBtYXRjaGVzO1xuICAgIHdoaWxlICgobWF0Y2hlcyA9IHRoaXMuY29uc3RydWN0b3IuQ0hBTk5FTFNfUEFUVEVSTi5leGVjKHRoaXMuX2NvbnRlbnQpKSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgY2hhbiA9IHRoaXMuX2NsaWVudC5jaGFubmVscy5nZXQobWF0Y2hlc1sxXSk7XG4gICAgICBpZiAoY2hhbikgdGhpcy5fY2hhbm5lbHMuc2V0KGNoYW4uaWQsIGNoYW4pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2hhbm5lbHM7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBnbG9iYWxseSBtYXRjaGVzIGBAZXZlcnlvbmVgIGFuZCBgQGhlcmVgXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG5NZXNzYWdlTWVudGlvbnMuRVZFUllPTkVfUEFUVEVSTiA9IC9AKGV2ZXJ5b25lfGhlcmUpL2c7XG5cbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRoYXQgZ2xvYmFsbHkgbWF0Y2hlcyB1c2VyIG1lbnRpb25zIGxpa2UgYDxAODE0NDA5NjI0OTYxNzIwMzI+YFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuTWVzc2FnZU1lbnRpb25zLlVTRVJTX1BBVFRFUk4gPSAvPEAhP1swLTldKz4vZztcblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBnbG9iYWxseSBtYXRjaGVzIHJvbGUgbWVudGlvbnMgbGlrZSBgPEAmMjk3NTc3OTE2MTE0NDAzMzM4PmBcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbk1lc3NhZ2VNZW50aW9ucy5ST0xFU19QQVRURVJOID0gLzxAJlswLTldKz4vZztcblxuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBnbG9iYWxseSBtYXRjaGVzIGNoYW5uZWwgbWVudGlvbnMgbGlrZSBgPCMyMjIwNzk4OTU1ODM0NTcyODA+YFxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xuTWVzc2FnZU1lbnRpb25zLkNIQU5ORUxTX1BBVFRFUk4gPSAvPCMoWzAtOV0rKT4vZztcblxubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlTWVudGlvbnM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9zdHJ1Y3R1cmVzL01lc3NhZ2VNZW50aW9ucy5qc1xuLy8gbW9kdWxlIGlkID0gNTFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageAttachment.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * Represents an attachment in a message.\n */\nclass MessageAttachment {\n  constructor(message, data) {\n    /**\n     * The client that instantiated this MessageAttachment\n     * @name MessageAttachment#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: message.client });\n\n    /**\n     * The message this attachment is part of\n     * @type {Message}\n     */\n    this.message = message;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of this attachment\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The file name of this attachment\n     * @type {string}\n     */\n    this.filename = data.filename;\n\n    /**\n     * The size of this attachment in bytes\n     * @type {number}\n     */\n    this.filesize = data.size;\n\n    /**\n     * The URL to this attachment\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The Proxy URL to this attachment\n     * @type {string}\n     */\n    this.proxyURL = data.proxy_url;\n\n    /**\n     * The height of this attachment (if an image)\n     * @type {?number}\n     */\n    this.height = data.height;\n\n    /**\n     * The width of this attachment (if an image)\n     * @type {?number}\n     */\n    this.width = data.width;\n  }\n}\n\nmodule.exports = MessageAttachment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9NZXNzYWdlQXR0YWNobWVudC5qcz82Y2Y1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVwcmVzZW50cyBhbiBhdHRhY2htZW50IGluIGEgbWVzc2FnZS5cbiAqL1xuY2xhc3MgTWVzc2FnZUF0dGFjaG1lbnQge1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBkYXRhKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCB0aGF0IGluc3RhbnRpYXRlZCB0aGlzIE1lc3NhZ2VBdHRhY2htZW50XG4gICAgICogQG5hbWUgTWVzc2FnZUF0dGFjaG1lbnQjY2xpZW50XG4gICAgICogQHR5cGUge0NsaWVudH1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NsaWVudCcsIHsgdmFsdWU6IG1lc3NhZ2UuY2xpZW50IH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1lc3NhZ2UgdGhpcyBhdHRhY2htZW50IGlzIHBhcnQgb2ZcbiAgICAgKiBAdHlwZSB7TWVzc2FnZX1cbiAgICAgKi9cbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXG4gICAgdGhpcy5zZXR1cChkYXRhKTtcbiAgfVxuXG4gIHNldHVwKGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhpcyBhdHRhY2htZW50XG4gICAgICogQHR5cGUge1Nub3dmbGFrZX1cbiAgICAgKi9cbiAgICB0aGlzLmlkID0gZGF0YS5pZDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmaWxlIG5hbWUgb2YgdGhpcyBhdHRhY2htZW50XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLmZpbGVuYW1lID0gZGF0YS5maWxlbmFtZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzaXplIG9mIHRoaXMgYXR0YWNobWVudCBpbiBieXRlc1xuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5maWxlc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBVUkwgdG8gdGhpcyBhdHRhY2htZW50XG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnVybCA9IGRhdGEudXJsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFByb3h5IFVSTCB0byB0aGlzIGF0dGFjaG1lbnRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMucHJveHlVUkwgPSBkYXRhLnByb3h5X3VybDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBoZWlnaHQgb2YgdGhpcyBhdHRhY2htZW50IChpZiBhbiBpbWFnZSlcbiAgICAgKiBAdHlwZSB7P251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmhlaWdodCA9IGRhdGEuaGVpZ2h0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHdpZHRoIG9mIHRoaXMgYXR0YWNobWVudCAoaWYgYW4gaW1hZ2UpXG4gICAgICogQHR5cGUgez9udW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy53aWR0aCA9IGRhdGEud2lkdGg7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlQXR0YWNobWVudDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3N0cnVjdHVyZXMvTWVzc2FnZUF0dGFjaG1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///52\n");

/***/ }),
/* 53 */
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageEmbed.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * Represents an embed in a message (image/video preview, rich embed, etc.)\n * <info>This class is only used for *recieved* embeds. If you wish to send one, use the {@link RichEmbed} class.</info>\n */\nclass MessageEmbed {\n  constructor(message, data) {\n    /**\n     * The client that instantiated this embed\n     * @name MessageEmbed#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: message.client });\n\n    /**\n     * The message this embed is part of\n     * @type {Message}\n     */\n    this.message = message;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The type of this embed\n     * @type {string}\n     */\n    this.type = data.type;\n\n    /**\n     * The title of this embed\n     * @type {?string}\n     */\n    this.title = data.title;\n\n    /**\n     * The description of this embed\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    /**\n     * The URL of this embed\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The color of the embed\n     * @type {number}\n     */\n    this.color = data.color;\n\n    /**\n     * The fields of this embed\n     * @type {MessageEmbedField[]}\n     */\n    this.fields = [];\n    if (data.fields) for (const field of data.fields) this.fields.push(new MessageEmbedField(this, field));\n\n    /**\n     * The timestamp of this embed\n     * @type {number}\n     */\n    this.timestamp = data.timestamp;\n\n    /**\n     * The thumbnail of this embed\n     * @type {?MessageEmbedThumbnail}\n     */\n    this.thumbnail = data.thumbnail ? new MessageEmbedThumbnail(this, data.thumbnail) : null;\n\n    /**\n     * The image of this embed\n     * @type {?MessageEmbedImage}\n     */\n    this.image = data.image ? new MessageEmbedImage(this, data.image) : null;\n\n    /**\n     * The video of this embed\n     * @type {?MessageEmbedVideo}\n     */\n    this.video = data.video ? new MessageEmbedVideo(this, data.video) : null;\n\n    /**\n     * The author of this embed\n     * @type {?MessageEmbedAuthor}\n     */\n    this.author = data.author ? new MessageEmbedAuthor(this, data.author) : null;\n\n    /**\n     * The provider of this embed\n     * @type {?MessageEmbedProvider}\n     */\n    this.provider = data.provider ? new MessageEmbedProvider(this, data.provider) : null;\n\n    /**\n     * The footer of this embed\n     * @type {?MessageEmbedFooter}\n     */\n    this.footer = data.footer ? new MessageEmbedFooter(this, data.footer) : null;\n  }\n\n  /**\n   * The date this embed was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The hexadecimal version of the embed color, with a leading hash\n   * @type {string}\n   * @readonly\n   */\n  get hexColor() {\n    let col = this.color.toString(16);\n    while (col.length < 6) col = `0${col}`;\n    return `#${col}`;\n  }\n}\n\n/**\n * Represents a thumbnail for a message embed.\n */\nclass MessageEmbedThumbnail {\n  constructor(embed, data) {\n    /**\n     * The embed this thumbnail is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The URL for this thumbnail\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The Proxy URL for this thumbnail\n     * @type {string}\n     */\n    this.proxyURL = data.proxy_url;\n\n    /**\n     * The height of the thumbnail\n     * @type {number}\n     */\n    this.height = data.height;\n\n    /**\n     * The width of the thumbnail\n     * @type {number}\n     */\n    this.width = data.width;\n  }\n}\n\n/**\n * Represents an image for a message embed.\n */\nclass MessageEmbedImage {\n  constructor(embed, data) {\n    /**\n     * The embed this image is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The URL for this image\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The Proxy URL for this image\n     * @type {string}\n     */\n    this.proxyURL = data.proxy_url;\n\n    /**\n     * The height of the image\n     * @type {number}\n     */\n    this.height = data.height;\n\n    /**\n     * The width of the image\n     * @type {number}\n     */\n    this.width = data.width;\n  }\n}\n\n/**\n * Represents a video for a message embed.\n */\nclass MessageEmbedVideo {\n  constructor(embed, data) {\n    /**\n     * The embed this video is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The source URL for this video\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The height of the video\n     * @type {number}\n     */\n    this.height = data.height;\n\n    /**\n     * The width of the video\n     * @type {number}\n     */\n    this.width = data.width;\n  }\n}\n\n/**\n * Represents a provider for a message embed.\n */\nclass MessageEmbedProvider {\n  constructor(embed, data) {\n    /**\n     * The embed this provider is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The name of this provider\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The URL of this provider\n     * @type {string}\n     */\n    this.url = data.url;\n  }\n}\n\n/**\n * Represents an author for a message embed.\n */\nclass MessageEmbedAuthor {\n  constructor(embed, data) {\n    /**\n     * The embed this author is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The name of this author\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The URL of this author\n     * @type {string}\n     */\n    this.url = data.url;\n\n    /**\n     * The icon URL of this author\n     * @type {string}\n     */\n    this.iconURL = data.icon_url;\n  }\n}\n\n/**\n * Represents a field for a message embed.\n */\nclass MessageEmbedField {\n  constructor(embed, data) {\n    /**\n     * The embed this footer is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The name of this field\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The value of this field\n     * @type {string}\n     */\n    this.value = data.value;\n\n    /**\n     * If this field is displayed inline\n     * @type {boolean}\n     */\n    this.inline = data.inline;\n  }\n}\n\n/**\n * Represents the footer of a message embed.\n */\nclass MessageEmbedFooter {\n  constructor(embed, data) {\n    /**\n     * The embed this footer is part of\n     * @type {MessageEmbed}\n     */\n    this.embed = embed;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The text in this footer\n     * @type {string}\n     */\n    this.text = data.text;\n\n    /**\n     * The icon URL of this footer\n     * @type {string}\n     */\n    this.iconURL = data.icon_url;\n\n    /**\n     * The proxy icon URL of this footer\n     * @type {string}\n     */\n    this.proxyIconUrl = data.proxy_icon_url;\n  }\n}\n\nMessageEmbed.Thumbnail = MessageEmbedThumbnail;\nMessageEmbed.Image = MessageEmbedImage;\nMessageEmbed.Video = MessageEmbedVideo;\nMessageEmbed.Provider = MessageEmbedProvider;\nMessageEmbed.Author = MessageEmbedAuthor;\nMessageEmbed.Field = MessageEmbedField;\nMessageEmbed.Footer = MessageEmbedFooter;\n\nmodule.exports = MessageEmbed;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageReaction.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst Emoji = __webpack_require__(/*! ./Emoji */ 17);\nconst ReactionEmoji = __webpack_require__(/*! ./ReactionEmoji */ 35);\n\n/**\n * Represents a reaction to a message.\n */\nclass MessageReaction {\n  constructor(message, emoji, count, me) {\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n    this.me = me;\n\n    /**\n     * The number of people that have given the same reaction\n     * @type {number}\n     */\n    this.count = count || 0;\n\n    /**\n     * The users that have given this reaction, mapped by their ID\n     * @type {Collection<Snowflake, User>}\n     */\n    this.users = new Collection();\n\n    this._emoji = new ReactionEmoji(this, emoji.name, emoji.id);\n  }\n\n  /**\n   * The emoji of this reaction, either an Emoji object for known custom emojis, or a ReactionEmoji\n   * object which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {Emoji|ReactionEmoji}\n   * @readonly\n   */\n  get emoji() {\n    if (this._emoji instanceof Emoji) return this._emoji;\n    // Check to see if the emoji has become known to the client\n    if (this._emoji.id) {\n      const emojis = this.message.client.emojis;\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n    return this._emoji;\n  }\n\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.message.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n  remove(user = this.message.client.user) {\n    const message = this.message;\n    const userID = this.message.client.resolver.resolveUserID(user);\n    if (!userID) return Promise.reject(new Error('Couldn\\'t resolve the user ID to remove from the reaction.'));\n    return message.client.rest.methods.removeMessageReaction(\n      message, this.emoji.identifier, userID\n    );\n  }\n\n  /**\n   * Fetch all the users that gave this reaction. Resolves with a collection of users, mapped by their IDs.\n   * @param {number} [limit=100] The maximum amount of users to fetch, defaults to 100\n   * @param {Object} [options] Options to fetch users\n   * @param {Snowflake} [options.before] Limit fetching users to those with an id lower than the supplied id\n   * @param {Snowflake} [options.after] Limit fetching users to those with an id greater than the supplied id\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  fetchUsers(limit = 100, { after, before } = {}) {\n    const message = this.message;\n    return message.client.rest.methods.getMessageReactionUsers(\n      message, this.emoji.identifier, { after, before, limit }\n    ).then(users => {\n      for (const rawUser of users) {\n        const user = this.message.client.dataManager.newUser(rawUser);\n        this.users.set(user.id, user);\n      }\n      return this.users;\n    });\n  }\n}\n\nmodule.exports = MessageReaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9NZXNzYWdlUmVhY3Rpb24uanM/ZGY5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vdXRpbC9Db2xsZWN0aW9uJyk7XG5jb25zdCBFbW9qaSA9IHJlcXVpcmUoJy4vRW1vamknKTtcbmNvbnN0IFJlYWN0aW9uRW1vamkgPSByZXF1aXJlKCcuL1JlYWN0aW9uRW1vamknKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcmVhY3Rpb24gdG8gYSBtZXNzYWdlLlxuICovXG5jbGFzcyBNZXNzYWdlUmVhY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBlbW9qaSwgY291bnQsIG1lKSB7XG4gICAgLyoqXG4gICAgICogVGhlIG1lc3NhZ2UgdGhhdCB0aGlzIHJlYWN0aW9uIHJlZmVycyB0b1xuICAgICAqIEB0eXBlIHtNZXNzYWdlfVxuICAgICAqL1xuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBjbGllbnQgaGFzIGdpdmVuIHRoaXMgcmVhY3Rpb25cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLm1lID0gbWU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHBlb3BsZSB0aGF0IGhhdmUgZ2l2ZW4gdGhlIHNhbWUgcmVhY3Rpb25cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY291bnQgPSBjb3VudCB8fCAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHVzZXJzIHRoYXQgaGF2ZSBnaXZlbiB0aGlzIHJlYWN0aW9uLCBtYXBwZWQgYnkgdGhlaXIgSURcbiAgICAgKiBAdHlwZSB7Q29sbGVjdGlvbjxTbm93Zmxha2UsIFVzZXI+fVxuICAgICAqL1xuICAgIHRoaXMudXNlcnMgPSBuZXcgQ29sbGVjdGlvbigpO1xuXG4gICAgdGhpcy5fZW1vamkgPSBuZXcgUmVhY3Rpb25FbW9qaSh0aGlzLCBlbW9qaS5uYW1lLCBlbW9qaS5pZCk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGVtb2ppIG9mIHRoaXMgcmVhY3Rpb24sIGVpdGhlciBhbiBFbW9qaSBvYmplY3QgZm9yIGtub3duIGN1c3RvbSBlbW9qaXMsIG9yIGEgUmVhY3Rpb25FbW9qaVxuICAgKiBvYmplY3Qgd2hpY2ggaGFzIGZld2VyIHByb3BlcnRpZXMuIFdoYXRldmVyIHRoZSBwcm90b3R5cGUgb2YgdGhlIGVtb2ppLCBpdCB3aWxsIHN0aWxsIGhhdmVcbiAgICogYG5hbWVgLCBgaWRgLCBgaWRlbnRpZmllcmAgYW5kIGB0b1N0cmluZygpYFxuICAgKiBAdHlwZSB7RW1vaml8UmVhY3Rpb25FbW9qaX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgZW1vamkoKSB7XG4gICAgaWYgKHRoaXMuX2Vtb2ppIGluc3RhbmNlb2YgRW1vamkpIHJldHVybiB0aGlzLl9lbW9qaTtcbiAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGVtb2ppIGhhcyBiZWNvbWUga25vd24gdG8gdGhlIGNsaWVudFxuICAgIGlmICh0aGlzLl9lbW9qaS5pZCkge1xuICAgICAgY29uc3QgZW1vamlzID0gdGhpcy5tZXNzYWdlLmNsaWVudC5lbW9qaXM7XG4gICAgICBpZiAoZW1vamlzLmhhcyh0aGlzLl9lbW9qaS5pZCkpIHtcbiAgICAgICAgY29uc3QgZW1vamkgPSBlbW9qaXMuZ2V0KHRoaXMuX2Vtb2ppLmlkKTtcbiAgICAgICAgdGhpcy5fZW1vamkgPSBlbW9qaTtcbiAgICAgICAgcmV0dXJuIGVtb2ppO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZW1vamk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHVzZXIgZnJvbSB0aGlzIHJlYWN0aW9uLlxuICAgKiBAcGFyYW0ge1VzZXJSZXNvbHZhYmxlfSBbdXNlcj10aGlzLm1lc3NhZ2UuY2xpZW50LnVzZXJdIFRoZSB1c2VyIHRvIHJlbW92ZSB0aGUgcmVhY3Rpb24gb2ZcbiAgICogQHJldHVybnMge1Byb21pc2U8TWVzc2FnZVJlYWN0aW9uPn1cbiAgICovXG4gIHJlbW92ZSh1c2VyID0gdGhpcy5tZXNzYWdlLmNsaWVudC51c2VyKSB7XG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMubWVzc2FnZTtcbiAgICBjb25zdCB1c2VySUQgPSB0aGlzLm1lc3NhZ2UuY2xpZW50LnJlc29sdmVyLnJlc29sdmVVc2VySUQodXNlcik7XG4gICAgaWYgKCF1c2VySUQpIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ0NvdWxkblxcJ3QgcmVzb2x2ZSB0aGUgdXNlciBJRCB0byByZW1vdmUgZnJvbSB0aGUgcmVhY3Rpb24uJykpO1xuICAgIHJldHVybiBtZXNzYWdlLmNsaWVudC5yZXN0Lm1ldGhvZHMucmVtb3ZlTWVzc2FnZVJlYWN0aW9uKFxuICAgICAgbWVzc2FnZSwgdGhpcy5lbW9qaS5pZGVudGlmaWVyLCB1c2VySURcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGFsbCB0aGUgdXNlcnMgdGhhdCBnYXZlIHRoaXMgcmVhY3Rpb24uIFJlc29sdmVzIHdpdGggYSBjb2xsZWN0aW9uIG9mIHVzZXJzLCBtYXBwZWQgYnkgdGhlaXIgSURzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0PTEwMF0gVGhlIG1heGltdW0gYW1vdW50IG9mIHVzZXJzIHRvIGZldGNoLCBkZWZhdWx0cyB0byAxMDBcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBPcHRpb25zIHRvIGZldGNoIHVzZXJzXG4gICAqIEBwYXJhbSB7U25vd2ZsYWtlfSBbb3B0aW9ucy5iZWZvcmVdIExpbWl0IGZldGNoaW5nIHVzZXJzIHRvIHRob3NlIHdpdGggYW4gaWQgbG93ZXIgdGhhbiB0aGUgc3VwcGxpZWQgaWRcbiAgICogQHBhcmFtIHtTbm93Zmxha2V9IFtvcHRpb25zLmFmdGVyXSBMaW1pdCBmZXRjaGluZyB1c2VycyB0byB0aG9zZSB3aXRoIGFuIGlkIGdyZWF0ZXIgdGhhbiB0aGUgc3VwcGxpZWQgaWRcbiAgICogQHJldHVybnMge1Byb21pc2U8Q29sbGVjdGlvbjxTbm93Zmxha2UsIFVzZXI+Pn1cbiAgICovXG4gIGZldGNoVXNlcnMobGltaXQgPSAxMDAsIHsgYWZ0ZXIsIGJlZm9yZSB9ID0ge30pIHtcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5tZXNzYWdlO1xuICAgIHJldHVybiBtZXNzYWdlLmNsaWVudC5yZXN0Lm1ldGhvZHMuZ2V0TWVzc2FnZVJlYWN0aW9uVXNlcnMoXG4gICAgICBtZXNzYWdlLCB0aGlzLmVtb2ppLmlkZW50aWZpZXIsIHsgYWZ0ZXIsIGJlZm9yZSwgbGltaXQgfVxuICAgICkudGhlbih1c2VycyA9PiB7XG4gICAgICBmb3IgKGNvbnN0IHJhd1VzZXIgb2YgdXNlcnMpIHtcbiAgICAgICAgY29uc3QgdXNlciA9IHRoaXMubWVzc2FnZS5jbGllbnQuZGF0YU1hbmFnZXIubmV3VXNlcihyYXdVc2VyKTtcbiAgICAgICAgdGhpcy51c2Vycy5zZXQodXNlci5pZCwgdXNlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy51c2VycztcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2VSZWFjdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3N0cnVjdHVyZXMvTWVzc2FnZVJlYWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ReactionCollector.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Collector = __webpack_require__(/*! ./interfaces/Collector */ 36);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\n\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * @extends {Collector}\n */\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {CollectorFilter} filter The filter to apply to this collector\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message, filter, options = {}) {\n    super(message.client, filter, options);\n\n    /**\n     * The message\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * The users which have reacted\n     * @type {Collection}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n    this.total = 0;\n\n    this.client.on('messageReactionAdd', this.listener);\n  }\n\n  /**\n   * Handle an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @returns {?{key: Snowflake, value: MessageReaction}}\n   * @private\n   */\n  handle(reaction) {\n    if (reaction.message.id !== this.message.id) return null;\n    return {\n      key: reaction.emoji.id || reaction.emoji.name,\n      value: reaction,\n    };\n  }\n\n  /**\n   * Check after collection to see if the collector is done.\n   * @param {MessageReaction} reaction The reaction that was collected\n   * @param {User} user The user that reacted\n   * @returns {?string} Reason to end the collector, if any\n   * @private\n   */\n  postCheck(reaction, user) {\n    this.users.set(user.id, user);\n    if (this.options.max && ++this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return null;\n  }\n\n  /**\n   * Remove event listeners.\n   * @private\n   */\n  cleanup() {\n    this.client.removeListener('messageReactionAdd', this.listener);\n  }\n}\n\nmodule.exports = ReactionCollector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9SZWFjdGlvbkNvbGxlY3Rvci5qcz81NWIzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENvbGxlY3RvciA9IHJlcXVpcmUoJy4vaW50ZXJmYWNlcy9Db2xsZWN0b3InKTtcbmNvbnN0IENvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi91dGlsL0NvbGxlY3Rpb24nKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7Q29sbGVjdG9yT3B0aW9uc30gUmVhY3Rpb25Db2xsZWN0b3JPcHRpb25zXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWF4IFRoZSBtYXhpbXVtIHRvdGFsIGFtb3VudCBvZiByZWFjdGlvbnMgdG8gY29sbGVjdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1heEVtb2ppcyBUaGUgbWF4aW11bSBudW1iZXIgb2YgZW1vamlzIHRvIGNvbGxlY3RcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXhVc2VycyBUaGUgbWF4aW11bSBudW1iZXIgb2YgdXNlcnMgdG8gcmVhY3RcbiAqL1xuXG4vKipcbiAqIENvbGxlY3RzIHJlYWN0aW9ucyBvbiBtZXNzYWdlcy5cbiAqIEBleHRlbmRzIHtDb2xsZWN0b3J9XG4gKi9cbmNsYXNzIFJlYWN0aW9uQ29sbGVjdG9yIGV4dGVuZHMgQ29sbGVjdG9yIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7TWVzc2FnZX0gbWVzc2FnZSBUaGUgbWVzc2FnZSB1cG9uIHdoaWNoIHRvIGNvbGxlY3QgcmVhY3Rpb25zXG4gICAqIEBwYXJhbSB7Q29sbGVjdG9yRmlsdGVyfSBmaWx0ZXIgVGhlIGZpbHRlciB0byBhcHBseSB0byB0aGlzIGNvbGxlY3RvclxuICAgKiBAcGFyYW0ge1JlYWN0aW9uQ29sbGVjdG9yT3B0aW9uc30gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIHRvIGFwcGx5IHRvIHRoaXMgY29sbGVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBmaWx0ZXIsIG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKG1lc3NhZ2UuY2xpZW50LCBmaWx0ZXIsIG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1lc3NhZ2VcbiAgICAgKiBAdHlwZSB7TWVzc2FnZX1cbiAgICAgKi9cbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHVzZXJzIHdoaWNoIGhhdmUgcmVhY3RlZFxuICAgICAqIEB0eXBlIHtDb2xsZWN0aW9ufVxuICAgICAqL1xuICAgIHRoaXMudXNlcnMgPSBuZXcgQ29sbGVjdGlvbigpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHRvdGFsIG51bWJlciBvZiByZWFjdGlvbnMgY29sbGVjdGVkXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnRvdGFsID0gMDtcblxuICAgIHRoaXMuY2xpZW50Lm9uKCdtZXNzYWdlUmVhY3Rpb25BZGQnLCB0aGlzLmxpc3RlbmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYW4gaW5jb21pbmcgcmVhY3Rpb24gZm9yIHBvc3NpYmxlIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSB7TWVzc2FnZVJlYWN0aW9ufSByZWFjdGlvbiBUaGUgcmVhY3Rpb24gdG8gcG9zc2libHkgY29sbGVjdFxuICAgKiBAcmV0dXJucyB7P3trZXk6IFNub3dmbGFrZSwgdmFsdWU6IE1lc3NhZ2VSZWFjdGlvbn19XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYW5kbGUocmVhY3Rpb24pIHtcbiAgICBpZiAocmVhY3Rpb24ubWVzc2FnZS5pZCAhPT0gdGhpcy5tZXNzYWdlLmlkKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiByZWFjdGlvbi5lbW9qaS5pZCB8fCByZWFjdGlvbi5lbW9qaS5uYW1lLFxuICAgICAgdmFsdWU6IHJlYWN0aW9uLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgYWZ0ZXIgY29sbGVjdGlvbiB0byBzZWUgaWYgdGhlIGNvbGxlY3RvciBpcyBkb25lLlxuICAgKiBAcGFyYW0ge01lc3NhZ2VSZWFjdGlvbn0gcmVhY3Rpb24gVGhlIHJlYWN0aW9uIHRoYXQgd2FzIGNvbGxlY3RlZFxuICAgKiBAcGFyYW0ge1VzZXJ9IHVzZXIgVGhlIHVzZXIgdGhhdCByZWFjdGVkXG4gICAqIEByZXR1cm5zIHs/c3RyaW5nfSBSZWFzb24gdG8gZW5kIHRoZSBjb2xsZWN0b3IsIGlmIGFueVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcG9zdENoZWNrKHJlYWN0aW9uLCB1c2VyKSB7XG4gICAgdGhpcy51c2Vycy5zZXQodXNlci5pZCwgdXNlcik7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5tYXggJiYgKyt0aGlzLnRvdGFsID49IHRoaXMub3B0aW9ucy5tYXgpIHJldHVybiAnbGltaXQnO1xuICAgIGlmICh0aGlzLm9wdGlvbnMubWF4RW1vamlzICYmIHRoaXMuY29sbGVjdGVkLnNpemUgPj0gdGhpcy5vcHRpb25zLm1heEVtb2ppcykgcmV0dXJuICdlbW9qaUxpbWl0JztcbiAgICBpZiAodGhpcy5vcHRpb25zLm1heFVzZXJzICYmIHRoaXMudXNlcnMuc2l6ZSA+PSB0aGlzLm9wdGlvbnMubWF4VXNlcnMpIHJldHVybiAndXNlckxpbWl0JztcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2xlYW51cCgpIHtcbiAgICB0aGlzLmNsaWVudC5yZW1vdmVMaXN0ZW5lcignbWVzc2FnZVJlYWN0aW9uQWRkJywgdGhpcy5saXN0ZW5lcik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdGlvbkNvbGxlY3RvcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3N0cnVjdHVyZXMvUmVhY3Rpb25Db2xsZWN0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///55\n");

/***/ }),
/* 56 */
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/MessageCollector.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Collector = __webpack_require__(/*! ./interfaces/Collector */ 36);\nconst util = __webpack_require__(/*! util */ 9);\n\n/**\n * @typedef {CollectorOptions} MessageCollectorOptions\n * @property {number} max The maximum amount of messages to process\n * @property {number} maxMatches The maximum amount of messages to collect\n */\n\n/**\n * Collects messages on a channel.\n * @extends {Collector}\n */\nclass MessageCollector extends Collector {\n  /**\n   * @param {TextChannel|DMChannel|GroupDMChannel} channel The channel\n   * @param {CollectorFilter} filter The filter to be applied to this collector\n   * @param {MessageCollectorOptions} options The options to be applied to this collector\n   * @emits MessageCollector#message\n   */\n  constructor(channel, filter, options = {}) {\n    super(channel.client, filter, options);\n\n    /**\n     * The channel\n     * @type {TextBasedChannel}\n     */\n    this.channel = channel;\n\n    /**\n     * Total number of messages that were received in the channel during message collection\n     * @type {number}\n     */\n    this.received = 0;\n\n    this.client.on('message', this.listener);\n\n    // For backwards compatibility (remove in v12)\n    if (this.options.max) this.options.maxProcessed = this.options.max;\n    if (this.options.maxMatches) this.options.max = this.options.maxMatches;\n    this._reEmitter = message => {\n      /**\n       * Emitted when the collector receives a message.\n       * @event MessageCollector#message\n       * @param {Message} message The message\n       * @deprecated\n       */\n      this.emit('message', message);\n    };\n    this.on('collect', this._reEmitter);\n  }\n\n  // Remove in v12\n  on(eventName, listener) {\n    if (eventName === 'message') {\n      listener = util.deprecate(listener, 'MessageCollector will soon no longer emit \"message\", use \"collect\" instead');\n    }\n    super.on(eventName, listener);\n  }\n\n  /**\n   * Handle an incoming message for possible collection.\n   * @param {Message} message The message that could be collected\n   * @returns {?{key: Snowflake, value: Message}}\n   * @private\n   */\n  handle(message) {\n    if (message.channel.id !== this.channel.id) return null;\n    this.received++;\n    return {\n      key: message.id,\n      value: message,\n    };\n  }\n\n  /**\n   * Check after collection to see if the collector is done.\n   * @returns {?string} Reason to end the collector, if any\n   * @private\n   */\n  postCheck() {\n    // Consider changing the end reasons for v12\n    if (this.options.maxMatches && this.collected.size >= this.options.max) return 'matchesLimit';\n    if (this.options.max && this.received >= this.options.maxProcessed) return 'limit';\n    return null;\n  }\n\n  /**\n   * Removes event listeners.\n   * @private\n   */\n  cleanup() {\n    this.removeListener('collect', this._reEmitter);\n    this.client.removeListener('message', this.listener);\n  }\n}\n\nmodule.exports = MessageCollector;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9NZXNzYWdlQ29sbGVjdG9yLmpzP2ZmMzEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ29sbGVjdG9yID0gcmVxdWlyZSgnLi9pbnRlcmZhY2VzL0NvbGxlY3RvcicpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7Q29sbGVjdG9yT3B0aW9uc30gTWVzc2FnZUNvbGxlY3Rvck9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXggVGhlIG1heGltdW0gYW1vdW50IG9mIG1lc3NhZ2VzIHRvIHByb2Nlc3NcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXhNYXRjaGVzIFRoZSBtYXhpbXVtIGFtb3VudCBvZiBtZXNzYWdlcyB0byBjb2xsZWN0XG4gKi9cblxuLyoqXG4gKiBDb2xsZWN0cyBtZXNzYWdlcyBvbiBhIGNoYW5uZWwuXG4gKiBAZXh0ZW5kcyB7Q29sbGVjdG9yfVxuICovXG5jbGFzcyBNZXNzYWdlQ29sbGVjdG9yIGV4dGVuZHMgQ29sbGVjdG9yIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7VGV4dENoYW5uZWx8RE1DaGFubmVsfEdyb3VwRE1DaGFubmVsfSBjaGFubmVsIFRoZSBjaGFubmVsXG4gICAqIEBwYXJhbSB7Q29sbGVjdG9yRmlsdGVyfSBmaWx0ZXIgVGhlIGZpbHRlciB0byBiZSBhcHBsaWVkIHRvIHRoaXMgY29sbGVjdG9yXG4gICAqIEBwYXJhbSB7TWVzc2FnZUNvbGxlY3Rvck9wdGlvbnN9IG9wdGlvbnMgVGhlIG9wdGlvbnMgdG8gYmUgYXBwbGllZCB0byB0aGlzIGNvbGxlY3RvclxuICAgKiBAZW1pdHMgTWVzc2FnZUNvbGxlY3RvciNtZXNzYWdlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjaGFubmVsLCBmaWx0ZXIsIG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKGNoYW5uZWwuY2xpZW50LCBmaWx0ZXIsIG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNoYW5uZWxcbiAgICAgKiBAdHlwZSB7VGV4dEJhc2VkQ2hhbm5lbH1cbiAgICAgKi9cbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xuXG4gICAgLyoqXG4gICAgICogVG90YWwgbnVtYmVyIG9mIG1lc3NhZ2VzIHRoYXQgd2VyZSByZWNlaXZlZCBpbiB0aGUgY2hhbm5lbCBkdXJpbmcgbWVzc2FnZSBjb2xsZWN0aW9uXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlY2VpdmVkID0gMDtcblxuICAgIHRoaXMuY2xpZW50Lm9uKCdtZXNzYWdlJywgdGhpcy5saXN0ZW5lcik7XG5cbiAgICAvLyBGb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgKHJlbW92ZSBpbiB2MTIpXG4gICAgaWYgKHRoaXMub3B0aW9ucy5tYXgpIHRoaXMub3B0aW9ucy5tYXhQcm9jZXNzZWQgPSB0aGlzLm9wdGlvbnMubWF4O1xuICAgIGlmICh0aGlzLm9wdGlvbnMubWF4TWF0Y2hlcykgdGhpcy5vcHRpb25zLm1heCA9IHRoaXMub3B0aW9ucy5tYXhNYXRjaGVzO1xuICAgIHRoaXMuX3JlRW1pdHRlciA9IG1lc3NhZ2UgPT4ge1xuICAgICAgLyoqXG4gICAgICAgKiBFbWl0dGVkIHdoZW4gdGhlIGNvbGxlY3RvciByZWNlaXZlcyBhIG1lc3NhZ2UuXG4gICAgICAgKiBAZXZlbnQgTWVzc2FnZUNvbGxlY3RvciNtZXNzYWdlXG4gICAgICAgKiBAcGFyYW0ge01lc3NhZ2V9IG1lc3NhZ2UgVGhlIG1lc3NhZ2VcbiAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZW1pdCgnbWVzc2FnZScsIG1lc3NhZ2UpO1xuICAgIH07XG4gICAgdGhpcy5vbignY29sbGVjdCcsIHRoaXMuX3JlRW1pdHRlcik7XG4gIH1cblxuICAvLyBSZW1vdmUgaW4gdjEyXG4gIG9uKGV2ZW50TmFtZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAoZXZlbnROYW1lID09PSAnbWVzc2FnZScpIHtcbiAgICAgIGxpc3RlbmVyID0gdXRpbC5kZXByZWNhdGUobGlzdGVuZXIsICdNZXNzYWdlQ29sbGVjdG9yIHdpbGwgc29vbiBubyBsb25nZXIgZW1pdCBcIm1lc3NhZ2VcIiwgdXNlIFwiY29sbGVjdFwiIGluc3RlYWQnKTtcbiAgICB9XG4gICAgc3VwZXIub24oZXZlbnROYW1lLCBsaXN0ZW5lcik7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGFuIGluY29taW5nIG1lc3NhZ2UgZm9yIHBvc3NpYmxlIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSB7TWVzc2FnZX0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0aGF0IGNvdWxkIGJlIGNvbGxlY3RlZFxuICAgKiBAcmV0dXJucyB7P3trZXk6IFNub3dmbGFrZSwgdmFsdWU6IE1lc3NhZ2V9fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaGFuZGxlKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZS5jaGFubmVsLmlkICE9PSB0aGlzLmNoYW5uZWwuaWQpIHJldHVybiBudWxsO1xuICAgIHRoaXMucmVjZWl2ZWQrKztcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiBtZXNzYWdlLmlkLFxuICAgICAgdmFsdWU6IG1lc3NhZ2UsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBhZnRlciBjb2xsZWN0aW9uIHRvIHNlZSBpZiB0aGUgY29sbGVjdG9yIGlzIGRvbmUuXG4gICAqIEByZXR1cm5zIHs/c3RyaW5nfSBSZWFzb24gdG8gZW5kIHRoZSBjb2xsZWN0b3IsIGlmIGFueVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcG9zdENoZWNrKCkge1xuICAgIC8vIENvbnNpZGVyIGNoYW5naW5nIHRoZSBlbmQgcmVhc29ucyBmb3IgdjEyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5tYXhNYXRjaGVzICYmIHRoaXMuY29sbGVjdGVkLnNpemUgPj0gdGhpcy5vcHRpb25zLm1heCkgcmV0dXJuICdtYXRjaGVzTGltaXQnO1xuICAgIGlmICh0aGlzLm9wdGlvbnMubWF4ICYmIHRoaXMucmVjZWl2ZWQgPj0gdGhpcy5vcHRpb25zLm1heFByb2Nlc3NlZCkgcmV0dXJuICdsaW1pdCc7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBldmVudCBsaXN0ZW5lcnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjbGVhbnVwKCkge1xuICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoJ2NvbGxlY3QnLCB0aGlzLl9yZUVtaXR0ZXIpO1xuICAgIHRoaXMuY2xpZW50LnJlbW92ZUxpc3RlbmVyKCdtZXNzYWdlJywgdGhpcy5saXN0ZW5lcik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlQ29sbGVjdG9yO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9NZXNzYWdlQ29sbGVjdG9yLmpzXG4vLyBtb2R1bGUgaWQgPSA1NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n");

/***/ }),
/* 57 */
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/PartialGuild.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/*\n{ splash: null,\n     id: '123123123',\n     icon: '123123123',\n     name: 'name' }\n*/\n\n/**\n * Represents a guild that the client only has limited information for - e.g. from invites.\n */\nclass PartialGuild {\n  constructor(client, data) {\n    /**\n     * The client that instantiated this PartialGuild\n     * @name PartialGuild#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of this guild\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The hash of this guild's icon\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The hash of the guild splash image (VIP only)\n     * @type {?string}\n     */\n    this.splash = data.splash;\n  }\n}\n\nmodule.exports = PartialGuild;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9QYXJ0aWFsR3VpbGQuanM/ODkyMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxueyBzcGxhc2g6IG51bGwsXG4gICAgIGlkOiAnMTIzMTIzMTIzJyxcbiAgICAgaWNvbjogJzEyMzEyMzEyMycsXG4gICAgIG5hbWU6ICduYW1lJyB9XG4qL1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBndWlsZCB0aGF0IHRoZSBjbGllbnQgb25seSBoYXMgbGltaXRlZCBpbmZvcm1hdGlvbiBmb3IgLSBlLmcuIGZyb20gaW52aXRlcy5cbiAqL1xuY2xhc3MgUGFydGlhbEd1aWxkIHtcbiAgY29uc3RydWN0b3IoY2xpZW50LCBkYXRhKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCB0aGF0IGluc3RhbnRpYXRlZCB0aGlzIFBhcnRpYWxHdWlsZFxuICAgICAqIEBuYW1lIFBhcnRpYWxHdWlsZCNjbGllbnRcbiAgICAgKiBAdHlwZSB7Q2xpZW50fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY2xpZW50JywgeyB2YWx1ZTogY2xpZW50IH0pO1xuXG4gICAgdGhpcy5zZXR1cChkYXRhKTtcbiAgfVxuXG4gIHNldHVwKGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhpcyBndWlsZFxuICAgICAqIEB0eXBlIHtTbm93Zmxha2V9XG4gICAgICovXG4gICAgdGhpcy5pZCA9IGRhdGEuaWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGlzIGd1aWxkXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGFzaCBvZiB0aGlzIGd1aWxkJ3MgaWNvblxuICAgICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaWNvbiA9IGRhdGEuaWNvbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBoYXNoIG9mIHRoZSBndWlsZCBzcGxhc2ggaW1hZ2UgKFZJUCBvbmx5KVxuICAgICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuc3BsYXNoID0gZGF0YS5zcGxhc2g7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJ0aWFsR3VpbGQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9zdHJ1Y3R1cmVzL1BhcnRpYWxHdWlsZC5qc1xuLy8gbW9kdWxlIGlkID0gNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///57\n");

/***/ }),
/* 58 */
/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/PartialGuildChannel.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../util/Constants */ 0);\n\n/*\n{ type: 0, id: '123123', name: 'heavy-testing' } }\n*/\n\n/**\n * Represents a guild channel that the client only has limited information for - e.g. from invites.\n */\nclass PartialGuildChannel {\n  constructor(client, data) {\n    /**\n     * The client that instantiated this PartialGuildChannel\n     * @name PartialGuildChannel#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of this guild channel\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild channel\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The type of this guild channel - `text` or `voice`\n     * @type {string}\n     */\n    this.type = Constants.ChannelTypes.TEXT === data.type ? 'text' : 'voice';\n  }\n}\n\nmodule.exports = PartialGuildChannel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9QYXJ0aWFsR3VpbGRDaGFubmVsLmpzP2U1NDIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vdXRpbC9Db25zdGFudHMnKTtcblxuLypcbnsgdHlwZTogMCwgaWQ6ICcxMjMxMjMnLCBuYW1lOiAnaGVhdnktdGVzdGluZycgfSB9XG4qL1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBndWlsZCBjaGFubmVsIHRoYXQgdGhlIGNsaWVudCBvbmx5IGhhcyBsaW1pdGVkIGluZm9ybWF0aW9uIGZvciAtIGUuZy4gZnJvbSBpbnZpdGVzLlxuICovXG5jbGFzcyBQYXJ0aWFsR3VpbGRDaGFubmVsIHtcbiAgY29uc3RydWN0b3IoY2xpZW50LCBkYXRhKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCB0aGF0IGluc3RhbnRpYXRlZCB0aGlzIFBhcnRpYWxHdWlsZENoYW5uZWxcbiAgICAgKiBAbmFtZSBQYXJ0aWFsR3VpbGRDaGFubmVsI2NsaWVudFxuICAgICAqIEB0eXBlIHtDbGllbnR9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjbGllbnQnLCB7IHZhbHVlOiBjbGllbnQgfSk7XG5cbiAgICB0aGlzLnNldHVwKGRhdGEpO1xuICB9XG5cbiAgc2V0dXAoZGF0YSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGlzIGd1aWxkIGNoYW5uZWxcbiAgICAgKiBAdHlwZSB7U25vd2ZsYWtlfVxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBkYXRhLmlkO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhpcyBndWlsZCBjaGFubmVsXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGlzIGd1aWxkIGNoYW5uZWwgLSBgdGV4dGAgb3IgYHZvaWNlYFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy50eXBlID0gQ29uc3RhbnRzLkNoYW5uZWxUeXBlcy5URVhUID09PSBkYXRhLnR5cGUgPyAndGV4dCcgOiAndm9pY2UnO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGFydGlhbEd1aWxkQ2hhbm5lbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3N0cnVjdHVyZXMvUGFydGlhbEd1aWxkQ2hhbm5lbC5qc1xuLy8gbW9kdWxlIGlkID0gNThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///58\n");

/***/ }),
/* 59 */
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/GuildAuditLogs.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst Snowflake = __webpack_require__(/*! ../util/Snowflake */ 6);\nconst Webhook = __webpack_require__(/*! ./Webhook */ 23);\nconst Invite = __webpack_require__(/*! ./Invite */ 37);\n\n/**\n * The target type of an entry, e.g. `GUILD`. Here are the available types:\n * * GUILD\n * * CHANNEL\n * * USER\n * * ROLE\n * * INVITE\n * * WEBHOOK\n * * EMOJI\n * * MESSAGE\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Key mirror of all available audit log targets.\n * @name GuildAuditLogs.Targets\n * @type {AuditLogTargetType}\n */\nconst Targets = {\n  ALL: 'ALL',\n  GUILD: 'GUILD',\n  CHANNEL: 'CHANNEL',\n  USER: 'USER',\n  ROLE: 'ROLE',\n  INVITE: 'INVITE',\n  WEBHOOK: 'WEBHOOK',\n  EMOJI: 'EMOJI',\n  MESSAGE: 'MESSAGE',\n};\n\n/**\n * The action of an entry. Here are the available actions:\n * * ALL: null\n * * GUILD_UPDATE: 1\n * * CHANNEL_CREATE: 10\n * * CHANNEL_UPDATE: 11\n * * CHANNEL_DELETE: 12\n * * CHANNEL_OVERWRITE_CREATE: 13\n * * CHANNEL_OVERWRITE_UPDATE: 14\n * * CHANNEL_OVERWRITE_DELETE: 15\n * * MEMBER_KICK: 20\n * * MEMBER_PRUNE: 21\n * * MEMBER_BAN_ADD: 22\n * * MEMBER_BAN_REMOVE: 23\n * * MEMBER_UPDATE: 24\n * * MEMBER_ROLE_UPDATE: 25\n * * ROLE_CREATE: 30\n * * ROLE_UPDATE: 31\n * * ROLE_DELETE: 32\n * * INVITE_CREATE: 40\n * * INVITE_UPDATE: 41\n * * INVITE_DELETE: 42\n * * WEBHOOK_CREATE: 50\n * * WEBHOOK_UPDATE: 51\n * * WEBHOOK_DELETE: 50\n * * EMOJI_CREATE: 60\n * * EMOJI_UPDATE: 61\n * * EMOJI_DELETE: 62\n * * MESSAGE_DELETE: 72\n * @typedef {?number|string} AuditLogAction\n */\n\n/**\n * All available actions keyed under their names to their numeric values.\n * @name GuildAuditLogs.Actions\n * @type {AuditLogAction}\n */\nconst Actions = {\n  ALL: null,\n  GUILD_UPDATE: 1,\n  CHANNEL_CREATE: 10,\n  CHANNEL_UPDATE: 11,\n  CHANNEL_DELETE: 12,\n  CHANNEL_OVERWRITE_CREATE: 13,\n  CHANNEL_OVERWRITE_UPDATE: 14,\n  CHANNEL_OVERWRITE_DELETE: 15,\n  MEMBER_KICK: 20,\n  MEMBER_PRUNE: 21,\n  MEMBER_BAN_ADD: 22,\n  MEMBER_BAN_REMOVE: 23,\n  MEMBER_UPDATE: 24,\n  MEMBER_ROLE_UPDATE: 25,\n  ROLE_CREATE: 30,\n  ROLE_UPDATE: 31,\n  ROLE_DELETE: 32,\n  INVITE_CREATE: 40,\n  INVITE_UPDATE: 41,\n  INVITE_DELETE: 42,\n  WEBHOOK_CREATE: 50,\n  WEBHOOK_UPDATE: 51,\n  WEBHOOK_DELETE: 52,\n  EMOJI_CREATE: 60,\n  EMOJI_UPDATE: 61,\n  EMOJI_DELETE: 62,\n  MESSAGE_DELETE: 72,\n};\n\n\n/**\n * Audit logs entries are held in this class.\n */\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.dataManager.newUser(user);\n\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n    this.webhooks = new Collection();\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n    this.entries = new Collection();\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n\n  /**\n   * Handles possible promises for entry targets.\n   * @returns {Promise<GuildAuditLogs>}\n   */\n  static build(...args) {\n    const logs = new GuildAuditLogs(...args);\n    return Promise.all(logs.entries.map(e => e.target)).then(() => logs);\n  }\n\n  /**\n   * The target of an entry. It can be one of:\n   * * A guild\n   * * A user\n   * * A role\n   * * An emoji\n   * * An invite\n   * * A webhook\n   * * An object where the keys represent either the new value or the old value\n   * @typedef {?Object|Guild|User|Role|Emoji|Invite|Webhook} AuditLogEntryTarget\n   */\n\n  /**\n   * Find target type from entry action.\n   * @param {number} target The action target\n   * @returns {?string}\n   */\n  static targetType(target) {\n    if (target < 10) return Targets.GUILD;\n    if (target < 20) return Targets.CHANNEL;\n    if (target < 30) return Targets.USER;\n    if (target < 40) return Targets.ROLE;\n    if (target < 50) return Targets.INVITE;\n    if (target < 60) return Targets.WEBHOOK;\n    if (target < 70) return Targets.EMOJI;\n    if (target < 80) return Targets.MESSAGE;\n    return null;\n  }\n\n  /**\n   * The action type of an entry, e.g. `CREATE`. Here are the available types:\n   * * CREATE\n   * * DELETE\n   * * UPDATE\n   * * ALL\n   * @typedef {string} AuditLogActionType\n   */\n\n\n  /**\n   * Finds the action type from the entry action.\n   * @param {AuditLogAction} action The action target\n   * @returns {AuditLogActionType}\n   */\n  static actionType(action) {\n    if ([\n      Actions.CHANNEL_CREATE,\n      Actions.CHANNEL_OVERWRITE_CREATE,\n      Actions.MEMBER_BAN_REMOVE,\n      Actions.ROLE_CREATE,\n      Actions.INVITE_CREATE,\n      Actions.WEBHOOK_CREATE,\n      Actions.EMOJI_CREATE,\n    ].includes(action)) return 'CREATE';\n\n    if ([\n      Actions.CHANNEL_DELETE,\n      Actions.CHANNEL_OVERWRITE_DELETE,\n      Actions.MEMBER_KICK,\n      Actions.MEMBER_PRUNE,\n      Actions.MEMBER_BAN_ADD,\n      Actions.ROLE_DELETE,\n      Actions.INVITE_DELETE,\n      Actions.WEBHOOK_DELETE,\n      Actions.EMOJI_DELETE,\n      Actions.MESSAGE_DELETE,\n    ].includes(action)) return 'DELETE';\n\n    if ([\n      Actions.GUILD_UPDATE,\n      Actions.CHANNEL_UPDATE,\n      Actions.CHANNEL_OVERWRITE_UPDATE,\n      Actions.MEMBER_UPDATE,\n      Actions.MEMBER_ROLE_UPDATE,\n      Actions.ROLE_UPDATE,\n      Actions.INVITE_UPDATE,\n      Actions.WEBHOOK_UPDATE,\n      Actions.EMOJI_UPDATE,\n    ].includes(action)) return 'UPDATE';\n\n    return 'ALL';\n  }\n}\n\n/**\n * Audit logs entry.\n */\nclass GuildAuditLogsEntry {\n  constructor(logs, guild, data) {\n    const targetType = GuildAuditLogs.targetType(data.action_type);\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n    this.targetType = targetType;\n\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n    this.actionType = GuildAuditLogs.actionType(data.action_type);\n\n    /**\n     * Specific action type of this entry in its string representation\n     * @type {AuditLogAction}\n     */\n    this.action = Object.keys(Actions).find(k => Actions[k] === data.action_type);\n\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n    this.reason = data.reason || null;\n\n    /**\n     * The user that executed this entry\n     * @type {User}\n     */\n    this.executor = guild.client.users.get(data.user_id);\n\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {AuditLogChange[]}\n     */\n    this.changes = data.changes ? data.changes.map(c => ({ key: c.key, old: c.old_value, new: c.new_value })) : null;\n\n    /**\n     * The ID of this entry\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Any extra data from the entry\n     * @type {?Object|Role|GuildMember}\n     */\n    this.extra = null;\n    if (data.options) {\n      if (data.action_type === Actions.MEMBER_PRUNE) {\n        this.extra = {\n          removed: data.options.members_removed,\n          days: data.options.delete_member_days,\n        };\n      } else if (data.action_type === Actions.MESSAGE_DELETE) {\n        this.extra = {\n          count: data.options.count,\n          channel: guild.channels.get(data.options.channel_id),\n        };\n      } else {\n        switch (data.options.type) {\n          case 'member':\n            this.extra = guild.members.get(data.options.id);\n            if (!this.extra) this.extra = { id: data.options.id };\n            break;\n          case 'role':\n            this.extra = guild.roles.get(data.options.id);\n            if (!this.extra) this.extra = { id: data.options.id, name: data.options.role_name };\n            break;\n          default:\n            break;\n        }\n      }\n    }\n\n    if ([Targets.USER, Targets.GUILD].includes(targetType)) {\n      /**\n       * The target of this entry\n       * @type {AuditLogEntryTarget}\n       */\n      this.target = guild.client[`${targetType.toLowerCase()}s`].get(data.target_id);\n    } else if (targetType === Targets.WEBHOOK) {\n      this.target = logs.webhooks.get(data.target_id) ||\n        new Webhook(guild.client,\n          this.changes.reduce((o, c) => {\n            o[c.key] = c.new || c.old;\n            return o;\n          }, {\n            id: data.target_id,\n            guild_id: guild.id,\n          }));\n    } else if (targetType === Targets.INVITE) {\n      const changes = this.changes.reduce((o, c) => {\n        o[c.key] = c.new || c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        guild,\n      });\n      changes.channel = guild.channels.get(changes.channel_id);\n      this.target = new Invite(guild.client, changes);\n    } else if (targetType === Targets.MESSAGE) {\n      this.target = guild.client.users.get(data.target_id);\n    } else {\n      this.target = guild[`${targetType.toLowerCase()}s`].get(data.target_id);\n    }\n  }\n\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return Snowflake.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time this entry was created\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n}\n\nGuildAuditLogs.Actions = Actions;\nGuildAuditLogs.Targets = Targets;\nGuildAuditLogs.Entry = GuildAuditLogsEntry;\n\nmodule.exports = GuildAuditLogs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///59\n");

/***/ }),
/* 60 */
/*!***********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/RequestHandlers/RequestHandler.js ***!
  \***********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * A base class for different types of rate limiting handlers for the REST API.\n * @private\n */\nclass RequestHandler {\n  /**\n   * @param {RESTManager} restManager The REST manager to use\n   */\n  constructor(restManager) {\n    /**\n     * The RESTManager that instantiated this RequestHandler\n     * @type {RESTManager}\n     */\n    this.restManager = restManager;\n\n    /**\n     * A list of requests that have yet to be processed\n     * @type {APIRequest[]}\n     */\n    this.queue = [];\n  }\n\n  /**\n   * Whether or not the client is being rate limited on every endpoint\n   * @type {boolean}\n   * @readonly\n   */\n  get globalLimit() {\n    return this.restManager.globallyRateLimited;\n  }\n\n  set globalLimit(value) {\n    this.restManager.globallyRateLimited = value;\n  }\n\n  /**\n   * Push a new API request into this bucket.\n   * @param {APIRequest} request The new request to push into the queue\n   */\n  push(request) {\n    this.queue.push(request);\n  }\n\n  /**\n   * Attempts to get this RequestHandler to process its current queue.\n   */\n  handle() {} // eslint-disable-line no-empty-function\n\n  destroy() {\n    this.queue = [];\n  }\n}\n\nmodule.exports = RequestHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3Jlc3QvUmVxdWVzdEhhbmRsZXJzL1JlcXVlc3RIYW5kbGVyLmpzPzA5YjAiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIGJhc2UgY2xhc3MgZm9yIGRpZmZlcmVudCB0eXBlcyBvZiByYXRlIGxpbWl0aW5nIGhhbmRsZXJzIGZvciB0aGUgUkVTVCBBUEkuXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBSZXF1ZXN0SGFuZGxlciB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1JFU1RNYW5hZ2VyfSByZXN0TWFuYWdlciBUaGUgUkVTVCBtYW5hZ2VyIHRvIHVzZVxuICAgKi9cbiAgY29uc3RydWN0b3IocmVzdE1hbmFnZXIpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgUkVTVE1hbmFnZXIgdGhhdCBpbnN0YW50aWF0ZWQgdGhpcyBSZXF1ZXN0SGFuZGxlclxuICAgICAqIEB0eXBlIHtSRVNUTWFuYWdlcn1cbiAgICAgKi9cbiAgICB0aGlzLnJlc3RNYW5hZ2VyID0gcmVzdE1hbmFnZXI7XG5cbiAgICAvKipcbiAgICAgKiBBIGxpc3Qgb2YgcmVxdWVzdHMgdGhhdCBoYXZlIHlldCB0byBiZSBwcm9jZXNzZWRcbiAgICAgKiBAdHlwZSB7QVBJUmVxdWVzdFtdfVxuICAgICAqL1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgY2xpZW50IGlzIGJlaW5nIHJhdGUgbGltaXRlZCBvbiBldmVyeSBlbmRwb2ludFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgZ2xvYmFsTGltaXQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdE1hbmFnZXIuZ2xvYmFsbHlSYXRlTGltaXRlZDtcbiAgfVxuXG4gIHNldCBnbG9iYWxMaW1pdCh2YWx1ZSkge1xuICAgIHRoaXMucmVzdE1hbmFnZXIuZ2xvYmFsbHlSYXRlTGltaXRlZCA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1c2ggYSBuZXcgQVBJIHJlcXVlc3QgaW50byB0aGlzIGJ1Y2tldC5cbiAgICogQHBhcmFtIHtBUElSZXF1ZXN0fSByZXF1ZXN0IFRoZSBuZXcgcmVxdWVzdCB0byBwdXNoIGludG8gdGhlIHF1ZXVlXG4gICAqL1xuICBwdXNoKHJlcXVlc3QpIHtcbiAgICB0aGlzLnF1ZXVlLnB1c2gocmVxdWVzdCk7XG4gIH1cblxuICAvKipcbiAgICogQXR0ZW1wdHMgdG8gZ2V0IHRoaXMgUmVxdWVzdEhhbmRsZXIgdG8gcHJvY2VzcyBpdHMgY3VycmVudCBxdWV1ZS5cbiAgICovXG4gIGhhbmRsZSgpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHktZnVuY3Rpb25cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlcXVlc3RIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3Jlc3QvUmVxdWVzdEhhbmRsZXJzL1JlcXVlc3RIYW5kbGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///60\n");

/***/ }),
/* 61 */
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/CategoryChannel.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const GuildChannel = __webpack_require__(/*! ./GuildChannel */ 19);\n\n/**\n * Represents a guild category channel on Discord.\n * @extends {GuildChannel}\n */\nclass CategoryChannel extends GuildChannel {\n  constructor(guild, data) {\n    super(guild, data);\n    this.type = 'category';\n  }\n  /**\n   * The channels that are part of this category\n   * @type {?Collection<Snowflake, GuildChannel>}\n   * @readonly\n   */\n  get children() {\n    return this.guild.channels.filter(c => c.parentID === this.id);\n  }\n}\n\nmodule.exports = CategoryChannel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9DYXRlZ29yeUNoYW5uZWwuanM/Y2ZkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBHdWlsZENoYW5uZWwgPSByZXF1aXJlKCcuL0d1aWxkQ2hhbm5lbCcpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBndWlsZCBjYXRlZ29yeSBjaGFubmVsIG9uIERpc2NvcmQuXG4gKiBAZXh0ZW5kcyB7R3VpbGRDaGFubmVsfVxuICovXG5jbGFzcyBDYXRlZ29yeUNoYW5uZWwgZXh0ZW5kcyBHdWlsZENoYW5uZWwge1xuICBjb25zdHJ1Y3RvcihndWlsZCwgZGF0YSkge1xuICAgIHN1cGVyKGd1aWxkLCBkYXRhKTtcbiAgICB0aGlzLnR5cGUgPSAnY2F0ZWdvcnknO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgY2hhbm5lbHMgdGhhdCBhcmUgcGFydCBvZiB0aGlzIGNhdGVnb3J5XG4gICAqIEB0eXBlIHs/Q29sbGVjdGlvbjxTbm93Zmxha2UsIEd1aWxkQ2hhbm5lbD59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLmd1aWxkLmNoYW5uZWxzLmZpbHRlcihjID0+IGMucGFyZW50SUQgPT09IHRoaXMuaWQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2F0ZWdvcnlDaGFubmVsO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9DYXRlZ29yeUNoYW5uZWwuanNcbi8vIG1vZHVsZSBpZCA9IDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///61\n");

/***/ }),
/* 62 */
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/PermissionOverwrites.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * Represents a permission overwrite for a role or member in a guild channel.\n */\nclass PermissionOverwrites {\n  constructor(guildChannel, data) {\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', { value: guildChannel });\n\n    if (data) this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The ID of this overwrite, either a user ID or a role ID\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of this overwrite\n     * @type {string}\n     */\n    this.type = data.type;\n\n    this.deny = data.deny;\n    this.allow = data.allow;\n  }\n\n  /**\n   * Delete this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n  delete(reason) {\n    return this.channel.client.rest.methods.deletePermissionOverwrites(this, reason);\n  }\n}\n\nmodule.exports = PermissionOverwrites;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9QZXJtaXNzaW9uT3ZlcndyaXRlcy5qcz9jNGY0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVwcmVzZW50cyBhIHBlcm1pc3Npb24gb3ZlcndyaXRlIGZvciBhIHJvbGUgb3IgbWVtYmVyIGluIGEgZ3VpbGQgY2hhbm5lbC5cbiAqL1xuY2xhc3MgUGVybWlzc2lvbk92ZXJ3cml0ZXMge1xuICBjb25zdHJ1Y3RvcihndWlsZENoYW5uZWwsIGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgR3VpbGRDaGFubmVsIHRoaXMgb3ZlcndyaXRlIGlzIGZvclxuICAgICAqIEBuYW1lIFBlcm1pc3Npb25PdmVyd3JpdGVzI2NoYW5uZWxcbiAgICAgKiBAdHlwZSB7R3VpbGRDaGFubmVsfVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY2hhbm5lbCcsIHsgdmFsdWU6IGd1aWxkQ2hhbm5lbCB9KTtcblxuICAgIGlmIChkYXRhKSB0aGlzLnNldHVwKGRhdGEpO1xuICB9XG5cbiAgc2V0dXAoZGF0YSkge1xuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGlzIG92ZXJ3cml0ZSwgZWl0aGVyIGEgdXNlciBJRCBvciBhIHJvbGUgSURcbiAgICAgKiBAdHlwZSB7U25vd2ZsYWtlfVxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBkYXRhLmlkO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhpcyBvdmVyd3JpdGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IGRhdGEudHlwZTtcblxuICAgIHRoaXMuZGVueSA9IGRhdGEuZGVueTtcbiAgICB0aGlzLmFsbG93ID0gZGF0YS5hbGxvdztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgdGhpcyBQZXJtaXNzaW9uIE92ZXJ3cml0ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtyZWFzb25dIFJlYXNvbiBmb3IgZGVsZXRpbmcgdGhpcyBvdmVyd3JpdGVcbiAgICogQHJldHVybnMge1Byb21pc2U8UGVybWlzc2lvbk92ZXJ3cml0ZXM+fVxuICAgKi9cbiAgZGVsZXRlKHJlYXNvbikge1xuICAgIHJldHVybiB0aGlzLmNoYW5uZWwuY2xpZW50LnJlc3QubWV0aG9kcy5kZWxldGVQZXJtaXNzaW9uT3ZlcndyaXRlcyh0aGlzLCByZWFzb24pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGVybWlzc2lvbk92ZXJ3cml0ZXM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9zdHJ1Y3R1cmVzL1Blcm1pc3Npb25PdmVyd3JpdGVzLmpzXG4vLyBtb2R1bGUgaWQgPSA2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///62\n");

/***/ }),
/* 63 */
/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/DMChannel.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Channel = __webpack_require__(/*! ./Channel */ 13);\nconst TextBasedChannel = __webpack_require__(/*! ./interfaces/TextBasedChannel */ 15);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\n\n/**\n * Represents a direct message channel between two users.\n * @extends {Channel}\n * @implements {TextBasedChannel}\n */\nclass DMChannel extends Channel {\n  constructor(client, data) {\n    super(client, data);\n    this.type = 'dm';\n    this.messages = new Collection();\n    this._typing = new Map();\n  }\n\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The recipient on the other end of the DM\n     * @type {User}\n     */\n    this.recipient = this.client.dataManager.newUser(data.recipients[0]);\n\n    this.lastMessageID = data.last_message_id;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the recipient's mention instead of the\n   * DM channel object.\n   * @returns {string}\n   */\n  toString() {\n    return this.recipient.toString();\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n  sendMessage() {}\n  sendEmbed() {}\n  sendFile() {}\n  sendFiles() {}\n  sendCode() {}\n  fetchMessage() {}\n  fetchMessages() {}\n  fetchPinnedMessages() {}\n  search() {}\n  startTyping() {}\n  stopTyping() {}\n  get typing() {}\n  get typingCount() {}\n  createCollector() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  // Doesn't work on DM channels; bulkDelete() {}\n  acknowledge() {}\n  _cacheMessage() {}\n}\n\nTextBasedChannel.applyToClass(DMChannel, true, ['bulkDelete']);\n\nmodule.exports = DMChannel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9ETUNoYW5uZWwuanM/ZTM4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDaGFubmVsID0gcmVxdWlyZSgnLi9DaGFubmVsJyk7XG5jb25zdCBUZXh0QmFzZWRDaGFubmVsID0gcmVxdWlyZSgnLi9pbnRlcmZhY2VzL1RleHRCYXNlZENoYW5uZWwnKTtcbmNvbnN0IENvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi91dGlsL0NvbGxlY3Rpb24nKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgZGlyZWN0IG1lc3NhZ2UgY2hhbm5lbCBiZXR3ZWVuIHR3byB1c2Vycy5cbiAqIEBleHRlbmRzIHtDaGFubmVsfVxuICogQGltcGxlbWVudHMge1RleHRCYXNlZENoYW5uZWx9XG4gKi9cbmNsYXNzIERNQ2hhbm5lbCBleHRlbmRzIENoYW5uZWwge1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIGRhdGEpIHtcbiAgICBzdXBlcihjbGllbnQsIGRhdGEpO1xuICAgIHRoaXMudHlwZSA9ICdkbSc7XG4gICAgdGhpcy5tZXNzYWdlcyA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgdGhpcy5fdHlwaW5nID0gbmV3IE1hcCgpO1xuICB9XG5cbiAgc2V0dXAoZGF0YSkge1xuICAgIHN1cGVyLnNldHVwKGRhdGEpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlY2lwaWVudCBvbiB0aGUgb3RoZXIgZW5kIG9mIHRoZSBETVxuICAgICAqIEB0eXBlIHtVc2VyfVxuICAgICAqL1xuICAgIHRoaXMucmVjaXBpZW50ID0gdGhpcy5jbGllbnQuZGF0YU1hbmFnZXIubmV3VXNlcihkYXRhLnJlY2lwaWVudHNbMF0pO1xuXG4gICAgdGhpcy5sYXN0TWVzc2FnZUlEID0gZGF0YS5sYXN0X21lc3NhZ2VfaWQ7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBjb25jYXRlbmF0ZWQgd2l0aCBhIHN0cmluZywgdGhpcyBhdXRvbWF0aWNhbGx5IGNvbmNhdGVuYXRlcyB0aGUgcmVjaXBpZW50J3MgbWVudGlvbiBpbnN0ZWFkIG9mIHRoZVxuICAgKiBETSBjaGFubmVsIG9iamVjdC5cbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnJlY2lwaWVudC50b1N0cmluZygpO1xuICB9XG5cbiAgLy8gVGhlc2UgYXJlIGhlcmUgb25seSBmb3IgZG9jdW1lbnRhdGlvbiBwdXJwb3NlcyAtIHRoZXkgYXJlIGltcGxlbWVudGVkIGJ5IFRleHRCYXNlZENoYW5uZWxcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tZW1wdHktZnVuY3Rpb24gKi9cbiAgc2VuZCgpIHt9XG4gIHNlbmRNZXNzYWdlKCkge31cbiAgc2VuZEVtYmVkKCkge31cbiAgc2VuZEZpbGUoKSB7fVxuICBzZW5kRmlsZXMoKSB7fVxuICBzZW5kQ29kZSgpIHt9XG4gIGZldGNoTWVzc2FnZSgpIHt9XG4gIGZldGNoTWVzc2FnZXMoKSB7fVxuICBmZXRjaFBpbm5lZE1lc3NhZ2VzKCkge31cbiAgc2VhcmNoKCkge31cbiAgc3RhcnRUeXBpbmcoKSB7fVxuICBzdG9wVHlwaW5nKCkge31cbiAgZ2V0IHR5cGluZygpIHt9XG4gIGdldCB0eXBpbmdDb3VudCgpIHt9XG4gIGNyZWF0ZUNvbGxlY3RvcigpIHt9XG4gIGNyZWF0ZU1lc3NhZ2VDb2xsZWN0b3IoKSB7fVxuICBhd2FpdE1lc3NhZ2VzKCkge31cbiAgLy8gRG9lc24ndCB3b3JrIG9uIERNIGNoYW5uZWxzOyBidWxrRGVsZXRlKCkge31cbiAgYWNrbm93bGVkZ2UoKSB7fVxuICBfY2FjaGVNZXNzYWdlKCkge31cbn1cblxuVGV4dEJhc2VkQ2hhbm5lbC5hcHBseVRvQ2xhc3MoRE1DaGFubmVsLCB0cnVlLCBbJ2J1bGtEZWxldGUnXSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRE1DaGFubmVsO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9ETUNoYW5uZWwuanNcbi8vIG1vZHVsZSBpZCA9IDYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///63\n");

/***/ }),
/* 64 */
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/TextChannel.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const GuildChannel = __webpack_require__(/*! ./GuildChannel */ 19);\nconst TextBasedChannel = __webpack_require__(/*! ./interfaces/TextBasedChannel */ 15);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\n\n/**\n * Represents a guild text channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass TextChannel extends GuildChannel {\n  constructor(guild, data) {\n    super(guild, data);\n    this.type = 'text';\n    this.messages = new Collection();\n    this._typing = new Map();\n  }\n\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The topic of the text channel\n     * @type {?string}\n     */\n    this.topic = data.topic;\n\n    /**\n     * If the Discord considers this channel NSFW\n     * @type {boolean}\n     * @readonly\n     */\n    this.nsfw = Boolean(data.nsfw);\n\n    this.lastMessageID = data.last_message_id;\n  }\n\n  /**\n   * A collection of members that can see this channel, mapped by their ID\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    const members = new Collection();\n    for (const member of this.guild.members.values()) {\n      if (this.permissionsFor(member).has('READ_MESSAGES')) {\n        members.set(member.id, member);\n      }\n    }\n    return members;\n  }\n\n  /**\n   * Fetch all webhooks for the channel.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   */\n  fetchWebhooks() {\n    return this.client.rest.methods.getChannelWebhooks(this);\n  }\n\n  /**\n   * Create a webhook for the channel.\n   * @param {string} name The name of the webhook\n   * @param {BufferResolvable|Base64Resolvable} [avatar] The avatar for the webhook\n   * @param {string} [reason] Reason for creating this webhook\n   * @returns {Promise<Webhook>} webhook The created webhook\n   * @example\n   * channel.createWebhook('Snek', 'https://i.imgur.com/mI8XcpG.jpg')\n   *   .then(webhook => console.log(`Created webhook ${webhook}`))\n   *   .catch(console.error)\n   */\n  createWebhook(name, avatar, reason) {\n    if (typeof avatar === 'string' && avatar.startsWith('data:')) {\n      return this.client.rest.methods.createWebhook(this, name, avatar, reason);\n    } else {\n      return this.client.resolver.resolveImage(avatar).then(data =>\n        this.client.rest.methods.createWebhook(this, name, data, reason)\n      );\n    }\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n  sendMessage() {}\n  sendEmbed() {}\n  sendFile() {}\n  sendFiles() {}\n  sendCode() {}\n  fetchMessage() {}\n  fetchMessages() {}\n  fetchPinnedMessages() {}\n  search() {}\n  startTyping() {}\n  stopTyping() {}\n  get typing() {}\n  get typingCount() {}\n  createCollector() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  bulkDelete() {}\n  acknowledge() {}\n  _cacheMessage() {}\n}\n\nTextBasedChannel.applyToClass(TextChannel, true);\n\nmodule.exports = TextChannel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9UZXh0Q2hhbm5lbC5qcz9lZWEzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEd1aWxkQ2hhbm5lbCA9IHJlcXVpcmUoJy4vR3VpbGRDaGFubmVsJyk7XG5jb25zdCBUZXh0QmFzZWRDaGFubmVsID0gcmVxdWlyZSgnLi9pbnRlcmZhY2VzL1RleHRCYXNlZENoYW5uZWwnKTtcbmNvbnN0IENvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi91dGlsL0NvbGxlY3Rpb24nKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgZ3VpbGQgdGV4dCBjaGFubmVsIG9uIERpc2NvcmQuXG4gKiBAZXh0ZW5kcyB7R3VpbGRDaGFubmVsfVxuICogQGltcGxlbWVudHMge1RleHRCYXNlZENoYW5uZWx9XG4gKi9cbmNsYXNzIFRleHRDaGFubmVsIGV4dGVuZHMgR3VpbGRDaGFubmVsIHtcbiAgY29uc3RydWN0b3IoZ3VpbGQsIGRhdGEpIHtcbiAgICBzdXBlcihndWlsZCwgZGF0YSk7XG4gICAgdGhpcy50eXBlID0gJ3RleHQnO1xuICAgIHRoaXMubWVzc2FnZXMgPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgIHRoaXMuX3R5cGluZyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHNldHVwKGRhdGEpIHtcbiAgICBzdXBlci5zZXR1cChkYXRhKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0b3BpYyBvZiB0aGUgdGV4dCBjaGFubmVsXG4gICAgICogQHR5cGUgez9zdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy50b3BpYyA9IGRhdGEudG9waWM7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgRGlzY29yZCBjb25zaWRlcnMgdGhpcyBjaGFubmVsIE5TRldcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICB0aGlzLm5zZncgPSBCb29sZWFuKGRhdGEubnNmdyk7XG5cbiAgICB0aGlzLmxhc3RNZXNzYWdlSUQgPSBkYXRhLmxhc3RfbWVzc2FnZV9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGNvbGxlY3Rpb24gb2YgbWVtYmVycyB0aGF0IGNhbiBzZWUgdGhpcyBjaGFubmVsLCBtYXBwZWQgYnkgdGhlaXIgSURcbiAgICogQHR5cGUge0NvbGxlY3Rpb248U25vd2ZsYWtlLCBHdWlsZE1lbWJlcj59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IG1lbWJlcnMoKSB7XG4gICAgY29uc3QgbWVtYmVycyA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgZm9yIChjb25zdCBtZW1iZXIgb2YgdGhpcy5ndWlsZC5tZW1iZXJzLnZhbHVlcygpKSB7XG4gICAgICBpZiAodGhpcy5wZXJtaXNzaW9uc0ZvcihtZW1iZXIpLmhhcygnUkVBRF9NRVNTQUdFUycpKSB7XG4gICAgICAgIG1lbWJlcnMuc2V0KG1lbWJlci5pZCwgbWVtYmVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lbWJlcnM7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2ggYWxsIHdlYmhvb2tzIGZvciB0aGUgY2hhbm5lbC5cbiAgICogQHJldHVybnMge1Byb21pc2U8Q29sbGVjdGlvbjxTbm93Zmxha2UsIFdlYmhvb2s+Pn1cbiAgICovXG4gIGZldGNoV2ViaG9va3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LnJlc3QubWV0aG9kcy5nZXRDaGFubmVsV2ViaG9va3ModGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgd2ViaG9vayBmb3IgdGhlIGNoYW5uZWwuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSB3ZWJob29rXG4gICAqIEBwYXJhbSB7QnVmZmVyUmVzb2x2YWJsZXxCYXNlNjRSZXNvbHZhYmxlfSBbYXZhdGFyXSBUaGUgYXZhdGFyIGZvciB0aGUgd2ViaG9va1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW3JlYXNvbl0gUmVhc29uIGZvciBjcmVhdGluZyB0aGlzIHdlYmhvb2tcbiAgICogQHJldHVybnMge1Byb21pc2U8V2ViaG9vaz59IHdlYmhvb2sgVGhlIGNyZWF0ZWQgd2ViaG9va1xuICAgKiBAZXhhbXBsZVxuICAgKiBjaGFubmVsLmNyZWF0ZVdlYmhvb2soJ1NuZWsnLCAnaHR0cHM6Ly9pLmltZ3VyLmNvbS9tSThYY3BHLmpwZycpXG4gICAqICAgLnRoZW4od2ViaG9vayA9PiBjb25zb2xlLmxvZyhgQ3JlYXRlZCB3ZWJob29rICR7d2ViaG9va31gKSlcbiAgICogICAuY2F0Y2goY29uc29sZS5lcnJvcilcbiAgICovXG4gIGNyZWF0ZVdlYmhvb2sobmFtZSwgYXZhdGFyLCByZWFzb24pIHtcbiAgICBpZiAodHlwZW9mIGF2YXRhciA9PT0gJ3N0cmluZycgJiYgYXZhdGFyLnN0YXJ0c1dpdGgoJ2RhdGE6JykpIHtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5yZXN0Lm1ldGhvZHMuY3JlYXRlV2ViaG9vayh0aGlzLCBuYW1lLCBhdmF0YXIsIHJlYXNvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5yZXNvbHZlci5yZXNvbHZlSW1hZ2UoYXZhdGFyKS50aGVuKGRhdGEgPT5cbiAgICAgICAgdGhpcy5jbGllbnQucmVzdC5tZXRob2RzLmNyZWF0ZVdlYmhvb2sodGhpcywgbmFtZSwgZGF0YSwgcmVhc29uKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBUaGVzZSBhcmUgaGVyZSBvbmx5IGZvciBkb2N1bWVudGF0aW9uIHB1cnBvc2VzIC0gdGhleSBhcmUgaW1wbGVtZW50ZWQgYnkgVGV4dEJhc2VkQ2hhbm5lbFxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1lbXB0eS1mdW5jdGlvbiAqL1xuICBzZW5kKCkge31cbiAgc2VuZE1lc3NhZ2UoKSB7fVxuICBzZW5kRW1iZWQoKSB7fVxuICBzZW5kRmlsZSgpIHt9XG4gIHNlbmRGaWxlcygpIHt9XG4gIHNlbmRDb2RlKCkge31cbiAgZmV0Y2hNZXNzYWdlKCkge31cbiAgZmV0Y2hNZXNzYWdlcygpIHt9XG4gIGZldGNoUGlubmVkTWVzc2FnZXMoKSB7fVxuICBzZWFyY2goKSB7fVxuICBzdGFydFR5cGluZygpIHt9XG4gIHN0b3BUeXBpbmcoKSB7fVxuICBnZXQgdHlwaW5nKCkge31cbiAgZ2V0IHR5cGluZ0NvdW50KCkge31cbiAgY3JlYXRlQ29sbGVjdG9yKCkge31cbiAgY3JlYXRlTWVzc2FnZUNvbGxlY3RvcigpIHt9XG4gIGF3YWl0TWVzc2FnZXMoKSB7fVxuICBidWxrRGVsZXRlKCkge31cbiAgYWNrbm93bGVkZ2UoKSB7fVxuICBfY2FjaGVNZXNzYWdlKCkge31cbn1cblxuVGV4dEJhc2VkQ2hhbm5lbC5hcHBseVRvQ2xhc3MoVGV4dENoYW5uZWwsIHRydWUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRleHRDaGFubmVsO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9UZXh0Q2hhbm5lbC5qc1xuLy8gbW9kdWxlIGlkID0gNjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///64\n");

/***/ }),
/* 65 */
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/VoiceChannel.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const GuildChannel = __webpack_require__(/*! ./GuildChannel */ 19);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\n\n/**\n * Represents a guild voice channel on Discord.\n * @extends {GuildChannel}\n */\nclass VoiceChannel extends GuildChannel {\n  constructor(guild, data) {\n    super(guild, data);\n\n    /**\n     * The members in this voice channel\n     * @type {Collection<Snowflake, GuildMember>}\n     */\n    this.members = new Collection();\n\n    this.type = 'voice';\n  }\n\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * The bitrate of this voice channel\n     * @type {number}\n     */\n    this.bitrate = data.bitrate * 0.001;\n\n    /**\n     * The maximum amount of users allowed in this channel - 0 means unlimited.\n     * @type {number}\n     */\n    this.userLimit = data.user_limit;\n  }\n\n  /**\n   * The voice connection for this voice channel, if the client is connected\n   * @type {?VoiceConnection}\n   * @readonly\n   */\n  get connection() {\n    const connection = this.guild.voiceConnection;\n    if (connection && connection.channel.id === this.id) return connection;\n    return null;\n  }\n\n  /**\n   * Checks if the voice channel is full\n   * @type {boolean}\n   * @readonly\n   */\n  get full() {\n    return this.userLimit > 0 && this.members.size >= this.userLimit;\n  }\n\n  /**\n   * Checks if the client has permission join the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (this.client.browser) return false;\n    if (!this.permissionsFor(this.client.user).has('CONNECT')) return false;\n    if (this.full && !this.permissionsFor(this.client.user).has('MOVE_MEMBERS')) return false;\n    return true;\n  }\n\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n  get speakable() {\n    return this.permissionsFor(this.client.user).has('SPEAK');\n  }\n\n  /**\n   * Sets the bitrate of the channel (in kbps).\n   * @param {number} bitrate The new bitrate\n   * @param {string} [reason] Reason for changing the channel's bitrate\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the bitrate of a voice channel\n   * voiceChannel.setBitrate(48)\n   *   .then(vc => console.log(`Set bitrate to ${vc.bitrate}kbps for ${vc.name}`))\n   *   .catch(console.error);\n   */\n  setBitrate(bitrate, reason) {\n    bitrate *= 1000;\n    return this.edit({ bitrate }, reason);\n  }\n\n  /**\n   * Sets the user limit of the channel.\n   * @param {number} userLimit The new user limit\n   * @param {string} [reason] Reason for changing the user limit\n   * @returns {Promise<VoiceChannel>}\n   * @example\n   * // Set the user limit of a voice channel\n   * voiceChannel.setUserLimit(42)\n   *   .then(vc => console.log(`Set user limit to ${vc.userLimit} for ${vc.name}`))\n   *   .catch(console.error);\n   */\n  setUserLimit(userLimit, reason) {\n    return this.edit({ userLimit }, reason);\n  }\n\n  /**\n   * Attempts to join this voice channel.\n   * @returns {Promise<VoiceConnection>}\n   * @example\n   * // Join a voice channel\n   * voiceChannel.join()\n   *   .then(connection => console.log('Connected!'))\n   *   .catch(console.error);\n   */\n  join() {\n    if (this.client.browser) return Promise.reject(new Error('Voice connections are not available in browsers.'));\n    return this.client.voice.joinChannel(this);\n  }\n\n  /**\n   * Leaves this voice channel.\n   * @example\n   * // Leave a voice channel\n   * voiceChannel.leave();\n   */\n  leave() {\n    if (this.client.browser) return;\n    const connection = this.client.voice.connections.get(this.guild.id);\n    if (connection && connection.channel.id === this.id) connection.disconnect();\n  }\n}\n\nmodule.exports = VoiceChannel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9Wb2ljZUNoYW5uZWwuanM/ZjAxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBHdWlsZENoYW5uZWwgPSByZXF1aXJlKCcuL0d1aWxkQ2hhbm5lbCcpO1xuY29uc3QgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL3V0aWwvQ29sbGVjdGlvbicpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBndWlsZCB2b2ljZSBjaGFubmVsIG9uIERpc2NvcmQuXG4gKiBAZXh0ZW5kcyB7R3VpbGRDaGFubmVsfVxuICovXG5jbGFzcyBWb2ljZUNoYW5uZWwgZXh0ZW5kcyBHdWlsZENoYW5uZWwge1xuICBjb25zdHJ1Y3RvcihndWlsZCwgZGF0YSkge1xuICAgIHN1cGVyKGd1aWxkLCBkYXRhKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtZW1iZXJzIGluIHRoaXMgdm9pY2UgY2hhbm5lbFxuICAgICAqIEB0eXBlIHtDb2xsZWN0aW9uPFNub3dmbGFrZSwgR3VpbGRNZW1iZXI+fVxuICAgICAqL1xuICAgIHRoaXMubWVtYmVycyA9IG5ldyBDb2xsZWN0aW9uKCk7XG5cbiAgICB0aGlzLnR5cGUgPSAndm9pY2UnO1xuICB9XG5cbiAgc2V0dXAoZGF0YSkge1xuICAgIHN1cGVyLnNldHVwKGRhdGEpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJpdHJhdGUgb2YgdGhpcyB2b2ljZSBjaGFubmVsXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmJpdHJhdGUgPSBkYXRhLmJpdHJhdGUgKiAwLjAwMTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIGFtb3VudCBvZiB1c2VycyBhbGxvd2VkIGluIHRoaXMgY2hhbm5lbCAtIDAgbWVhbnMgdW5saW1pdGVkLlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy51c2VyTGltaXQgPSBkYXRhLnVzZXJfbGltaXQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHZvaWNlIGNvbm5lY3Rpb24gZm9yIHRoaXMgdm9pY2UgY2hhbm5lbCwgaWYgdGhlIGNsaWVudCBpcyBjb25uZWN0ZWRcbiAgICogQHR5cGUgez9Wb2ljZUNvbm5lY3Rpb259XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGNvbm5lY3Rpb24oKSB7XG4gICAgY29uc3QgY29ubmVjdGlvbiA9IHRoaXMuZ3VpbGQudm9pY2VDb25uZWN0aW9uO1xuICAgIGlmIChjb25uZWN0aW9uICYmIGNvbm5lY3Rpb24uY2hhbm5lbC5pZCA9PT0gdGhpcy5pZCkgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSB2b2ljZSBjaGFubmVsIGlzIGZ1bGxcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGZ1bGwoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlckxpbWl0ID4gMCAmJiB0aGlzLm1lbWJlcnMuc2l6ZSA+PSB0aGlzLnVzZXJMaW1pdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIGNsaWVudCBoYXMgcGVybWlzc2lvbiBqb2luIHRoZSB2b2ljZSBjaGFubmVsXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBqb2luYWJsZSgpIHtcbiAgICBpZiAodGhpcy5jbGllbnQuYnJvd3NlcikgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghdGhpcy5wZXJtaXNzaW9uc0Zvcih0aGlzLmNsaWVudC51c2VyKS5oYXMoJ0NPTk5FQ1QnKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0aGlzLmZ1bGwgJiYgIXRoaXMucGVybWlzc2lvbnNGb3IodGhpcy5jbGllbnQudXNlcikuaGFzKCdNT1ZFX01FTUJFUlMnKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGUgY2xpZW50IGhhcyBwZXJtaXNzaW9uIHRvIHNlbmQgYXVkaW8gdG8gdGhlIHZvaWNlIGNoYW5uZWxcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHNwZWFrYWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZXJtaXNzaW9uc0Zvcih0aGlzLmNsaWVudC51c2VyKS5oYXMoJ1NQRUFLJyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgYml0cmF0ZSBvZiB0aGUgY2hhbm5lbCAoaW4ga2JwcykuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRyYXRlIFRoZSBuZXcgYml0cmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3JlYXNvbl0gUmVhc29uIGZvciBjaGFuZ2luZyB0aGUgY2hhbm5lbCdzIGJpdHJhdGVcbiAgICogQHJldHVybnMge1Byb21pc2U8Vm9pY2VDaGFubmVsPn1cbiAgICogQGV4YW1wbGVcbiAgICogLy8gU2V0IHRoZSBiaXRyYXRlIG9mIGEgdm9pY2UgY2hhbm5lbFxuICAgKiB2b2ljZUNoYW5uZWwuc2V0Qml0cmF0ZSg0OClcbiAgICogICAudGhlbih2YyA9PiBjb25zb2xlLmxvZyhgU2V0IGJpdHJhdGUgdG8gJHt2Yy5iaXRyYXRlfWticHMgZm9yICR7dmMubmFtZX1gKSlcbiAgICogICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAqL1xuICBzZXRCaXRyYXRlKGJpdHJhdGUsIHJlYXNvbikge1xuICAgIGJpdHJhdGUgKj0gMTAwMDtcbiAgICByZXR1cm4gdGhpcy5lZGl0KHsgYml0cmF0ZSB9LCByZWFzb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHVzZXIgbGltaXQgb2YgdGhlIGNoYW5uZWwuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB1c2VyTGltaXQgVGhlIG5ldyB1c2VyIGxpbWl0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVhc29uXSBSZWFzb24gZm9yIGNoYW5naW5nIHRoZSB1c2VyIGxpbWl0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFZvaWNlQ2hhbm5lbD59XG4gICAqIEBleGFtcGxlXG4gICAqIC8vIFNldCB0aGUgdXNlciBsaW1pdCBvZiBhIHZvaWNlIGNoYW5uZWxcbiAgICogdm9pY2VDaGFubmVsLnNldFVzZXJMaW1pdCg0MilcbiAgICogICAudGhlbih2YyA9PiBjb25zb2xlLmxvZyhgU2V0IHVzZXIgbGltaXQgdG8gJHt2Yy51c2VyTGltaXR9IGZvciAke3ZjLm5hbWV9YCkpXG4gICAqICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xuICAgKi9cbiAgc2V0VXNlckxpbWl0KHVzZXJMaW1pdCwgcmVhc29uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdCh7IHVzZXJMaW1pdCB9LCByZWFzb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHRzIHRvIGpvaW4gdGhpcyB2b2ljZSBjaGFubmVsLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxWb2ljZUNvbm5lY3Rpb24+fVxuICAgKiBAZXhhbXBsZVxuICAgKiAvLyBKb2luIGEgdm9pY2UgY2hhbm5lbFxuICAgKiB2b2ljZUNoYW5uZWwuam9pbigpXG4gICAqICAgLnRoZW4oY29ubmVjdGlvbiA9PiBjb25zb2xlLmxvZygnQ29ubmVjdGVkIScpKVxuICAgKiAgIC5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICovXG4gIGpvaW4oKSB7XG4gICAgaWYgKHRoaXMuY2xpZW50LmJyb3dzZXIpIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1ZvaWNlIGNvbm5lY3Rpb25zIGFyZSBub3QgYXZhaWxhYmxlIGluIGJyb3dzZXJzLicpKTtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQudm9pY2Uuam9pbkNoYW5uZWwodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogTGVhdmVzIHRoaXMgdm9pY2UgY2hhbm5lbC5cbiAgICogQGV4YW1wbGVcbiAgICogLy8gTGVhdmUgYSB2b2ljZSBjaGFubmVsXG4gICAqIHZvaWNlQ2hhbm5lbC5sZWF2ZSgpO1xuICAgKi9cbiAgbGVhdmUoKSB7XG4gICAgaWYgKHRoaXMuY2xpZW50LmJyb3dzZXIpIHJldHVybjtcbiAgICBjb25zdCBjb25uZWN0aW9uID0gdGhpcy5jbGllbnQudm9pY2UuY29ubmVjdGlvbnMuZ2V0KHRoaXMuZ3VpbGQuaWQpO1xuICAgIGlmIChjb25uZWN0aW9uICYmIGNvbm5lY3Rpb24uY2hhbm5lbC5pZCA9PT0gdGhpcy5pZCkgY29ubmVjdGlvbi5kaXNjb25uZWN0KCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWb2ljZUNoYW5uZWw7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9zdHJ1Y3R1cmVzL1ZvaWNlQ2hhbm5lbC5qc1xuLy8gbW9kdWxlIGlkID0gNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///65\n");

/***/ }),
/* 66 */
/*!*****************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/WebSocketConnection.js ***!
  \*****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const browser = typeof window !== 'undefined';\nconst EventEmitter = __webpack_require__(/*! events */ 5);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst zlib = __webpack_require__(/*! zlib */ 28);\nconst PacketManager = __webpack_require__(/*! ./packets/WebSocketPacketManager */ 107);\nconst erlpack = (function findErlpack() {\n  try {\n    const e = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"erlpack\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    if (!e.pack) return null;\n    return e;\n  } catch (e) {\n    return null;\n  }\n}());\n\nconst WebSocket = (function findWebSocket() {\n  if (browser) return window.WebSocket; // eslint-disable-line no-undef\n  try {\n    return __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"uws\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n  } catch (e) {\n    return __webpack_require__(/*! ws */ 70);\n  }\n}());\n\n/**\n * Abstracts a WebSocket connection with decoding/encoding for the Discord gateway.\n * @private\n */\nclass WebSocketConnection extends EventEmitter {\n  /**\n   * @param {WebSocketManager} manager The WebSocket manager\n   * @param {string} gateway The WebSocket gateway to connect to\n   */\n  constructor(manager, gateway) {\n    super();\n    /**\n     * The WebSocket Manager of this connection\n     * @type {WebSocketManager}\n     */\n    this.manager = manager;\n\n    /**\n     * The client this belongs to\n     * @type {Client}\n     */\n    this.client = manager.client;\n\n    /**\n     * The WebSocket connection itself\n     * @type {WebSocket}\n     */\n    this.ws = null;\n\n    /**\n     * The current sequence of the WebSocket\n     * @type {number}\n     */\n    this.sequence = -1;\n\n    /**\n     * The current status of the client\n     * @type {number}\n     */\n    this.status = Constants.Status.IDLE;\n\n    /**\n     * The Packet Manager of the connection\n     * @type {WebSocketPacketManager}\n     */\n    this.packetManager = new PacketManager(this);\n\n    /**\n     * The last time a ping was sent (a timestamp)\n     * @type {number}\n     */\n    this.lastPingTimestamp = 0;\n\n    /**\n     * Contains the rate limit queue and metadata\n     * @type {Object}\n     */\n    this.ratelimit = {\n      queue: [],\n      remaining: 120,\n      total: 120,\n      time: 60e3,\n      resetTimer: null,\n    };\n    this.connect(gateway);\n\n    /**\n     * Events that are disabled (will not be processed)\n     * @type {Object}\n     */\n    this.disabledEvents = {};\n\n    /**\n     * The sequence on WebSocket close\n     * @type {number}\n     */\n    this.closeSequence = 0;\n\n    /**\n     * Whether or not the WebSocket is expecting to be closed\n     * @type {boolean}\n     */\n    this.expectingClose = false;\n    for (const event of this.client.options.disabledEvents) this.disabledEvents[event] = true;\n  }\n\n  /**\n   * Causes the client to be marked as ready and emits the ready event.\n   * @returns {void}\n   */\n  triggerReady() {\n    if (this.status === Constants.Status.READY) {\n      this.debug('Tried to mark self as ready, but already ready');\n      return;\n    }\n    /**\n     * Emitted when the client becomes ready to start working.\n     * @event Client#ready\n     */\n    this.status = Constants.Status.READY;\n    this.client.emit(Constants.Events.READY);\n    this.packetManager.handleQueue();\n  }\n\n  /**\n   * Checks whether the client is ready to be marked as ready.\n   * @returns {void}\n   */\n  checkIfReady() {\n    if (this.status === Constants.Status.READY || this.status === Constants.Status.NEARLY) return false;\n    let unavailableGuilds = 0;\n    for (const guild of this.client.guilds.values()) {\n      if (!guild.available) unavailableGuilds++;\n    }\n    if (unavailableGuilds === 0) {\n      this.status = Constants.Status.NEARLY;\n      if (!this.client.options.fetchAllMembers) return this.triggerReady();\n      // Fetch all members before marking self as ready\n      const promises = this.client.guilds.map(g => g.fetchMembers());\n      Promise.all(promises)\n        .then(() => this.triggerReady())\n        .catch(e => {\n          this.debug(`Failed to fetch all members before ready! ${e}`);\n          this.triggerReady();\n        });\n    }\n    return true;\n  }\n\n  // Util\n  /**\n   * Emits a debug message.\n   * @param {string} message Debug message\n   * @returns {void}\n   */\n  debug(message) {\n    if (message instanceof Error) message = message.stack;\n    return this.manager.debug(`[connection] ${message}`);\n  }\n\n  /**\n   * Attempts to serialise data from the WebSocket.\n   * @param {string|Object} data Data to unpack\n   * @returns {Object}\n   */\n  unpack(data) {\n    if (data instanceof ArrayBuffer) data = Buffer.from(new Uint8Array(data));\n\n    if (erlpack && typeof data !== 'string') return erlpack.unpack(data);\n    else if (data instanceof Buffer) data = zlib.inflateSync(data).toString();\n\n    return JSON.parse(data);\n  }\n\n  /**\n   * Packs an object ready to be sent.\n   * @param {Object} data Data to pack\n   * @returns {string|Buffer}\n   */\n  pack(data) {\n    return erlpack ? erlpack.pack(data) : JSON.stringify(data);\n  }\n\n  /**\n   * Processes the current WebSocket queue.\n   */\n  processQueue() {\n    if (this.ratelimit.remaining === 0) return;\n    if (this.ratelimit.queue.length === 0) return;\n    if (this.ratelimit.remaining === this.ratelimit.total) {\n      this.ratelimit.resetTimer = this.client.setTimeout(() => {\n        this.ratelimit.remaining = this.ratelimit.total;\n        this.processQueue();\n      }, this.ratelimit.time);\n    }\n    while (this.ratelimit.remaining > 0) {\n      const item = this.ratelimit.queue.shift();\n      if (!item) return;\n      this._send(item);\n      this.ratelimit.remaining--;\n    }\n  }\n\n  /**\n   * Sends data, bypassing the queue.\n   * @param {Object} data Packet to send\n   * @returns {void}\n   */\n  _send(data) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      this.debug(`Tried to send packet ${data} but no WebSocket is available!`);\n      return;\n    }\n    this.ws.send(this.pack(data));\n  }\n\n  /**\n   * Adds data to the queue to be sent.\n   * @param {Object} data Packet to send\n   * @returns {void}\n   */\n  send(data) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      this.debug(`Tried to send packet ${data} but no WebSocket is available!`);\n      return;\n    }\n    this.ratelimit.queue.push(data);\n    this.processQueue();\n  }\n\n  /**\n   * Creates a connection to a gateway.\n   * @param {string} gateway The gateway to connect to\n   * @param {number} [after=0] How long to wait before connecting\n   * @param {boolean} [force=false] Whether or not to force a new connection even if one already exists\n   * @returns {boolean}\n   */\n  connect(gateway = this.gateway, after = 0, force = false) {\n    if (after) return this.client.setTimeout(() => this.connect(gateway, 0, force), after); // eslint-disable-line\n    if (this.ws && !force) {\n      this.debug('WebSocket connection already exists');\n      return false;\n    } else if (typeof gateway !== 'string') {\n      this.debug(`Tried to connect to an invalid gateway: ${gateway}`);\n      return false;\n    }\n    this.expectingClose = false;\n    this.gateway = gateway;\n    this.debug(`Connecting to ${gateway}`);\n    const ws = this.ws = new WebSocket(gateway);\n    if (browser) ws.binaryType = 'arraybuffer';\n    ws.onmessage = this.onMessage.bind(this);\n    ws.onopen = this.onOpen.bind(this);\n    ws.onerror = this.onError.bind(this);\n    ws.onclose = this.onClose.bind(this);\n    this.status = Constants.Status.CONNECTING;\n    return true;\n  }\n\n  /**\n   * Destroys the connection.\n   * @returns {boolean}\n   */\n  destroy() {\n    const ws = this.ws;\n    if (!ws) {\n      this.debug('Attempted to destroy WebSocket but no connection exists!');\n      return false;\n    }\n    this.heartbeat(-1);\n    this.expectingClose = true;\n    ws.close(1000);\n    this.packetManager.handleQueue();\n    this.ws = null;\n    this.status = Constants.Status.DISCONNECTED;\n    this.ratelimit.remaining = this.ratelimit.total;\n    return true;\n  }\n\n  /**\n   * Called whenever a message is received.\n   * @param {Event} event Event received\n   * @returns {boolean}\n   */\n  onMessage(event) {\n    let data;\n    try {\n      data = this.unpack(event.data);\n    } catch (err) {\n      this.emit('debug', err);\n    }\n    return this.onPacket(data);\n  }\n\n  /**\n   * Sets the current sequence of the connection.\n   * @param {number} s New sequence\n   */\n  setSequence(s) {\n    this.sequence = s > this.sequence ? s : this.sequence;\n  }\n\n  /**\n   * Called whenever a packet is received.\n   * @param {Object} packet Received packet\n   * @returns {boolean}\n   */\n  onPacket(packet) {\n    if (!packet) {\n      this.debug('Received null packet');\n      return false;\n    }\n    this.client.emit('raw', packet);\n    switch (packet.op) {\n      case Constants.OPCodes.HELLO:\n        return this.heartbeat(packet.d.heartbeat_interval);\n      case Constants.OPCodes.RECONNECT:\n        return this.reconnect();\n      case Constants.OPCodes.INVALID_SESSION:\n        if (!packet.d) this.sessionID = null;\n        this.sequence = -1;\n        this.debug('Session invalidated -- will identify with a new session');\n        return this.identify(packet.d ? 2500 : 0);\n      case Constants.OPCodes.HEARTBEAT_ACK:\n        return this.ackHeartbeat();\n      case Constants.OPCodes.HEARTBEAT:\n        return this.heartbeat();\n      default:\n        return this.packetManager.handle(packet);\n    }\n  }\n\n  /**\n   * Called whenever a connection is opened to the gateway.\n   * @param {Event} event Received open event\n   */\n  onOpen(event) {\n    if (event && event.target && event.target.url) this.gateway = event.target.url;\n    this.debug(`Connected to gateway ${this.gateway}`);\n    this.identify();\n  }\n\n  /**\n   * Causes a reconnection to the gateway.\n   */\n  reconnect() {\n    this.debug('Attemping to reconnect in 5500ms...');\n    /**\n     * Emitted whenever the client tries to reconnect to the WebSocket.\n     * @event Client#reconnecting\n     */\n    this.client.emit(Constants.Events.RECONNECTING);\n    this.connect(this.gateway, 5500, true);\n  }\n\n  /**\n   * Called whenever an error occurs with the WebSocket.\n   * @param {Error} error The error that occurred\n   */\n  onError(error) {\n    if (error && error.message === 'uWs client connection error') {\n      this.reconnect();\n      return;\n    }\n    /**\n     * Emitted whenever the client's WebSocket encounters a connection error.\n     * @event Client#error\n     * @param {Error} error The encountered error\n     */\n    this.client.emit(Constants.Events.ERROR, error);\n  }\n\n  /**\n   * @external CloseEvent\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n   */\n\n  /**\n   * Called whenever a connection to the gateway is closed.\n   * @param {CloseEvent} event Close event that was received\n   */\n  onClose(event) {\n    this.debug(`${this.expectingClose ? 'Client' : 'Server'} closed the WebSocket connection: ${event.code}`);\n    this.closeSequence = this.sequence;\n    // Reset the state before trying to fix anything\n    this.emit('close', event);\n    this.heartbeat(-1);\n    // Should we reconnect?\n    if (event.code === 1000 ? this.expectingClose : Constants.WSCodes[event.code]) {\n      this.expectingClose = false;\n      /**\n       * Emitted when the client's WebSocket disconnects and will no longer attempt to reconnect.\n       * @event Client#disconnect\n       * @param {CloseEvent} event The WebSocket close event\n       */\n      this.client.emit(Constants.Events.DISCONNECT, event);\n      this.debug(Constants.WSCodes[event.code]);\n      this.destroy();\n      return;\n    }\n    this.expectingClose = false;\n    this.reconnect();\n  }\n\n  // Heartbeat\n  /**\n   * Acknowledges a heartbeat.\n   */\n  ackHeartbeat() {\n    this.debug(`Heartbeat acknowledged, latency of ${Date.now() - this.lastPingTimestamp}ms`);\n    this.client._pong(this.lastPingTimestamp);\n  }\n\n  /**\n   * Sends a heartbeat or sets an interval for sending heartbeats.\n   * @param {number} [time] If -1, clears the interval, any other number sets an interval\n   * If no value is given, a heartbeat will be sent instantly\n   */\n  heartbeat(time) {\n    if (!isNaN(time)) {\n      if (time === -1) {\n        this.debug('Clearing heartbeat interval');\n        this.client.clearInterval(this.heartbeatInterval);\n        this.heartbeatInterval = null;\n      } else {\n        this.debug(`Setting a heartbeat interval for ${time}ms`);\n        this.heartbeatInterval = this.client.setInterval(() => this.heartbeat(), time);\n      }\n      return;\n    }\n    this.debug('Sending a heartbeat');\n    this.lastPingTimestamp = Date.now();\n    this.send({\n      op: Constants.OPCodes.HEARTBEAT,\n      d: this.sequence,\n    });\n  }\n\n  // Identification\n  /**\n   * Identifies the client on a connection.\n   * @param {number} [after] How long to wait before identifying\n   * @returns {void}\n   */\n  identify(after) {\n    if (after) return this.client.setTimeout(this.identify.bind(this), after);\n    return this.sessionID ? this.identifyResume() : this.identifyNew();\n  }\n\n  /**\n   * Identifies as a new connection on the gateway.\n   * @returns {void}\n   */\n  identifyNew() {\n    if (!this.client.token) {\n      this.debug('No token available to identify a new session with');\n      return;\n    }\n    // Clone the generic payload and assign the token\n    const d = Object.assign({ token: this.client.token }, this.client.options.ws);\n\n    // Sharding stuff\n    const { shardId, shardCount } = this.client.options;\n    if (shardCount > 0) d.shard = [Number(shardId), Number(shardCount)];\n\n    // Send the payload\n    this.debug('Identifying as a new session');\n    this.send({ op: Constants.OPCodes.IDENTIFY, d });\n  }\n\n  /**\n   * Resumes a session on the gateway.\n   * @returns {void}\n   */\n  identifyResume() {\n    if (!this.sessionID) {\n      this.debug('Warning: wanted to resume but session ID not available; identifying as a new session instead');\n      return this.identifyNew();\n    }\n    this.debug(`Attempting to resume session ${this.sessionID}`);\n\n    const d = {\n      token: this.client.token,\n      session_id: this.sessionID,\n      seq: this.sequence,\n    };\n\n    return this.send({\n      op: Constants.OPCodes.RESUME,\n      d,\n    });\n  }\n}\n\n/**\n * Encoding the WebSocket connections will use.\n * @type {string}\n */\nWebSocketConnection.ENCODING = erlpack ? 'etf' : 'json';\nWebSocketConnection.WebSocket = WebSocket;\n\nmodule.exports = WebSocketConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///66\n");

/***/ }),
/* 67 */
/*!**************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientUser.js ***!
  \**************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const User = __webpack_require__(/*! ./User */ 11);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst ClientUserSettings = __webpack_require__(/*! ./ClientUserSettings */ 68);\nconst ClientUserGuildSettings = __webpack_require__(/*! ./ClientUserGuildSettings */ 69);\nconst Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst util = __webpack_require__(/*! util */ 9);\n\n/**\n * Represents the logged in client's Discord user.\n * @extends {User}\n */\nclass ClientUser extends User {\n  setup(data) {\n    super.setup(data);\n\n    /**\n     * Whether or not this account has been verified\n     * @type {boolean}\n     */\n    this.verified = data.verified;\n\n    /**\n     * The email of this account\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {?string}\n     */\n    this.email = data.email;\n    this.localPresence = {};\n    this._typing = new Map();\n\n    /**\n     * A Collection of friends for the logged in user\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {Collection<Snowflake, User>}\n     */\n    this.friends = new Collection();\n\n    /**\n     * A Collection of blocked users for the logged in user\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {Collection<Snowflake, User>}\n     */\n    this.blocked = new Collection();\n\n    /**\n     * A Collection of notes for the logged in user\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {Collection<Snowflake, string>}\n     */\n    this.notes = new Collection();\n\n    /**\n     * If the user has Discord premium (nitro)\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {?boolean}\n     */\n    this.premium = typeof data.premium === 'boolean' ? data.premium : null;\n\n    /**\n     * If the user has MFA enabled on their account\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {?boolean}\n     */\n    this.mfaEnabled = typeof data.mfa_enabled === 'boolean' ? data.mfa_enabled : null;\n\n    /**\n     * If the user has ever used a mobile device on Discord\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {?boolean}\n     */\n    this.mobile = typeof data.mobile === 'boolean' ? data.mobile : null;\n\n    /**\n     * Various settings for this user\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {?ClientUserSettings}\n     */\n    this.settings = data.user_settings ? new ClientUserSettings(this, data.user_settings) : null;\n\n    /**\n     * All of the user's guild settings\n     * <warn>This is only filled when using a user account</warn>\n     * @type {Collection<Snowflake, ClientUserGuildSettings>}\n     */\n    this.guildSettings = new Collection();\n    if (data.user_guild_settings) {\n      for (const settings of data.user_guild_settings) {\n        this.guildSettings.set(settings.guild_id, new ClientUserGuildSettings(settings, this.client));\n      }\n    }\n  }\n\n  edit(data) {\n    return this.client.rest.methods.updateCurrentUser(data);\n  }\n\n  /**\n   * Set the username of the logged in client.\n   * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests\n   * every hour. Use this sparingly!</info>\n   * @param {string} username The new username\n   * @param {string} [password] Current password (only for user accounts)\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set username\n   * client.user.setUsername('discordjs')\n   *   .then(user => console.log(`My new username is ${user.username}`))\n   *   .catch(console.error);\n   */\n  setUsername(username, password) {\n    return this.client.rest.methods.updateCurrentUser({ username }, password);\n  }\n\n  /**\n   * Changes the email for the client user's account.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {string} email New email to change to\n   * @param {string} password Current password\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set email\n   * client.user.setEmail('bob@gmail.com', 'some amazing password 123')\n   *   .then(user => console.log(`My new email is ${user.email}`))\n   *   .catch(console.error);\n   */\n  setEmail(email, password) {\n    return this.client.rest.methods.updateCurrentUser({ email }, password);\n  }\n\n  /**\n   * Changes the password for the client user's account.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {string} newPassword New password to change to\n   * @param {string} oldPassword Current password\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set password\n   * client.user.setPassword('some new amazing password 456', 'some amazing password 123')\n   *   .then(user => console.log('New password set!'))\n   *   .catch(console.error);\n   */\n  setPassword(newPassword, oldPassword) {\n    return this.client.rest.methods.updateCurrentUser({ password: newPassword }, oldPassword);\n  }\n\n  /**\n   * Set the avatar of the logged in client.\n   * @param {BufferResolvable|Base64Resolvable} avatar The new avatar\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set avatar\n   * client.user.setAvatar('./avatar.png')\n   *   .then(user => console.log(`New avatar set!`))\n   *   .catch(console.error);\n   */\n  setAvatar(avatar) {\n    return this.client.resolver.resolveImage(avatar).then(data =>\n      this.client.rest.methods.updateCurrentUser({ avatar: data })\n    );\n  }\n\n  /**\n   * Data resembling a raw Discord presence.\n   * @typedef {Object} PresenceData\n   * @property {PresenceStatus} [status] Status of the user\n   * @property {boolean} [afk] Whether the user is AFK\n   * @property {Object} [game] Game the user is playing\n   * @property {string} [game.name] Name of the game\n   * @property {string} [game.url] Twitch stream URL\n   * @property {?ActivityType|number} [game.type] Type of the activity\n   */\n\n  /**\n   * Sets the full presence of the client user.\n   * @param {PresenceData} data Data for the presence\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set the client user's presence\n   * client.user.setPresence({ game: { name: 'with discord.js' }, status: 'idle' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  setPresence(data) {\n    // {\"op\":3,\"d\":{\"status\":\"dnd\",\"since\":0,\"game\":null,\"afk\":false}}\n    return new Promise(resolve => {\n      let status = this.localPresence.status || this.presence.status;\n      let game = this.localPresence.game;\n      let afk = this.localPresence.afk || this.presence.afk;\n\n      if (!game && this.presence.game) {\n        game = {\n          name: this.presence.game.name,\n          type: this.presence.game.type,\n          url: this.presence.game.url,\n        };\n      }\n\n      if (data.status) {\n        if (typeof data.status !== 'string') throw new TypeError('Status must be a string');\n        if (this.bot) {\n          status = data.status;\n        } else {\n          this.settings.update(Constants.UserSettingsMap.status, data.status);\n          status = 'invisible';\n        }\n      }\n\n      if (data.game) {\n        game = data.game;\n        game.type = game.url && typeof game.type === 'undefined' ? 1 : game.type || 0;\n        if (typeof game.type === 'string') {\n          game.type = Constants.ActivityTypes.indexOf(game.type.toUpperCase());\n        }\n      } else if (typeof data.game !== 'undefined') {\n        game = null;\n      }\n\n      if (typeof data.afk !== 'undefined') afk = data.afk;\n      afk = Boolean(afk);\n\n      this.localPresence = { status, game, afk };\n      this.localPresence.since = 0;\n      this.localPresence.game = this.localPresence.game || null;\n\n      this.client.ws.send({\n        op: 3,\n        d: this.localPresence,\n      });\n\n      this.client._setPresence(this.id, this.localPresence);\n\n      resolve(this);\n    });\n  }\n\n  /**\n   * A user's status. Must be one of:\n   * * `online`\n   * * `idle`\n   * * `invisible`\n   * * `dnd` (do not disturb)\n   * @typedef {string} PresenceStatus\n   */\n\n  /**\n   * Sets the status of the client user.\n   * @param {PresenceStatus} status Status to change to\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set the client user's status\n   * client.user.setStatus('idle')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  setStatus(status) {\n    return this.setPresence({ status });\n  }\n\n  /**\n   * Sets the game the client user is playing.\n   * @param {?string} game Game being played\n   * @param {?string} [streamingURL] Twitch stream URL\n   * @returns {Promise<ClientUser>}\n   * @deprecated\n   */\n  setGame(game, streamingURL) {\n    if (!game) return this.setPresence({ game: null });\n    return this.setPresence({\n      game: {\n        name: game,\n        url: streamingURL,\n      },\n    });\n  }\n\n  /**\n   * Sets the activity the client user is playing.\n   * @param {?string} name Activity being played\n   * @param {Object} [options] Options for setting the activity\n   * @param {string} [options.url] Twitch stream URL\n   * @param {ActivityType|number} [options.type] Type of the activity\n   * @returns {Promise<Presence>}\n   * @example\n   * client.user.setActivity('YouTube', { type: 'WATCHING' })\n   *   .then(presence => console.log(`Activity set to ${presence.game ? presence.game.name : 'none'}`))\n   *   .catch(console.error);\n   */\n  setActivity(name, { url, type } = {}) {\n    if (!name) return this.setPresence({ game: null });\n    return this.setPresence({\n      game: { name, type, url },\n    });\n  }\n\n  /**\n   * Sets/removes the AFK flag for the client user.\n   * @param {boolean} afk Whether or not the user is AFK\n   * @returns {Promise<ClientUser>}\n   */\n  setAFK(afk) {\n    return this.setPresence({ afk });\n  }\n\n  /**\n   * Fetches messages that mentioned the client's user.\n   * @param {Object} [options] Options for the fetch\n   * @param {number} [options.limit=25] Maximum number of mentions to retrieve\n   * @param {boolean} [options.roles=true] Whether to include role mentions\n   * @param {boolean} [options.everyone=true] Whether to include everyone/here mentions\n   * @param {GuildResolvable} [options.guild] Limit the search to a specific guild\n   * @returns {Promise<Message[]>}\n   * @example\n   * // Fetch mentions\n   * client.user.fetchMentions()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch mentions from a guild\n   * client.user.fetchMentions({\n   *   guild: '222078108977594368'\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  fetchMentions(options = {}) {\n    return this.client.rest.methods.fetchMentions(options);\n  }\n\n  /**\n   * Send a friend request.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {UserResolvable} user The user to send the friend request to\n   * @returns {Promise<User>} The user the friend request was sent to\n   */\n  addFriend(user) {\n    user = this.client.resolver.resolveUser(user);\n    return this.client.rest.methods.addFriend(user);\n  }\n\n  /**\n   * Remove a friend.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {UserResolvable} user The user to remove from your friends\n   * @returns {Promise<User>} The user that was removed\n   */\n  removeFriend(user) {\n    user = this.client.resolver.resolveUser(user);\n    return this.client.rest.methods.removeFriend(user);\n  }\n\n  /**\n   * Creates a guild.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {string} name The name of the guild\n   * @param {string} [region] The region for the server\n   * @param {BufferResolvable|Base64Resolvable} [icon=null] The icon for the guild\n   * @returns {Promise<Guild>} The guild that was created\n   */\n  createGuild(name, region, icon = null) {\n    if (typeof icon === 'string' && icon.startsWith('data:')) {\n      return this.client.rest.methods.createGuild({ name, icon, region });\n    } else {\n      return this.client.resolver.resolveImage(icon).then(data =>\n        this.client.rest.methods.createGuild({ name, icon: data, region })\n      );\n    }\n  }\n\n  /**\n   * An object containing either a user or access token, and an optional nickname.\n   * @typedef {Object} GroupDMRecipientOptions\n   * @property {UserResolvable|Snowflake} [user] User to add to the Group DM\n   * (only available if a user is creating the DM)\n   * @property {string} [accessToken] Access token to use to add a user to the Group DM\n   * (only available if a bot is creating the DM)\n   * @property {string} [nick] Permanent nickname (only available if a bot is creating the DM)\n   */\n\n  /**\n   * Creates a Group DM.\n   * @param {GroupDMRecipientOptions[]} recipients The recipients\n   * @returns {Promise<GroupDMChannel>}\n   * @example\n   * // Create a Group DM with a token provided from OAuth\n   * client.user.createGroupDM([{\n   *   user: '66564597481480192',\n   *   accessToken: token\n   * }])\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  createGroupDM(recipients) {\n    return this.client.rest.methods.createGroupDM({\n      recipients: recipients.map(u => this.client.resolver.resolveUserID(u.user)),\n      accessTokens: recipients.map(u => u.accessToken),\n      nicks: recipients.map(u => u.nick),\n    });\n  }\n\n  /**\n   * Accepts an invite to join a guild.\n   * <warn>This is only available when using a user account.</warn>\n   * @param {Invite|string} invite Invite or code to accept\n   * @returns {Promise<Guild>} Joined guild\n   */\n  acceptInvite(invite) {\n    return this.client.rest.methods.acceptInvite(invite);\n  }\n}\n\nClientUser.prototype.setGame =\n  util.deprecate(ClientUser.prototype.setGame, 'ClientUser#setGame: use ClientUser#setActivity instead');\n\nmodule.exports = ClientUser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///67\n");

/***/ }),
/* 68 */
/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientUserSettings.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst Util = __webpack_require__(/*! ../util/Util */ 4);\n\n/**\n * A wrapper around the ClientUser's settings.\n */\nclass ClientUserSettings {\n  constructor(user, data) {\n    this.user = user;\n    this.patch(data);\n  }\n\n  /**\n   * Patch the data contained in this class with new partial data.\n   * @param {Object} data Data to patch this with\n   * @returns {void}\n   * @private\n   */\n  patch(data) {\n    for (const key of Object.keys(Constants.UserSettingsMap)) {\n      const value = Constants.UserSettingsMap[key];\n      if (!data.hasOwnProperty(key)) continue;\n      if (typeof value === 'function') {\n        this[value.name] = value(data[key]);\n      } else {\n        this[value] = data[key];\n      }\n    }\n  }\n\n  /**\n   * Update a specific property of of user settings.\n   * @param {string} name Name of property\n   * @param {*} value Value to patch\n   * @returns {Promise<Object>}\n   */\n  update(name, value) {\n    return this.user.client.rest.methods.patchUserSettings({ [name]: value });\n  }\n\n  /**\n   * Sets the position at which this guild will appear in the Discord client.\n   * @param {Guild} guild The guild to move\n   * @param {number} position Absolute or relative position\n   * @param {boolean} [relative=false] Whether to position relatively or absolutely\n   * @returns {Promise<Guild>}\n   */\n  setGuildPosition(guild, position, relative) {\n    const temp = Object.assign([], this.guildPositions);\n    Util.moveElementInArray(temp, guild.id, position, relative);\n    return this.update('guild_positions', temp).then(() => guild);\n  }\n\n  /**\n   * Add a guild to the list of restricted guilds.\n   * @param {Guild} guild The guild to add\n   * @returns {Promise<Guild>}\n   */\n  addRestrictedGuild(guild) {\n    const temp = Object.assign([], this.restrictedGuilds);\n    if (temp.includes(guild.id)) return Promise.reject(new Error('Guild is already restricted'));\n    temp.push(guild.id);\n    return this.update('restricted_guilds', temp).then(() => guild);\n  }\n\n  /**\n   * Remove a guild from the list of restricted guilds.\n   * @param {Guild} guild The guild to remove\n   * @returns {Promise<Guild>}\n   */\n  removeRestrictedGuild(guild) {\n    const temp = Object.assign([], this.restrictedGuilds);\n    const index = temp.indexOf(guild.id);\n    if (index < 0) return Promise.reject(new Error('Guild is not restricted'));\n    temp.splice(index, 1);\n    return this.update('restricted_guilds', temp).then(() => guild);\n  }\n}\n\nmodule.exports = ClientUserSettings;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9DbGllbnRVc2VyU2V0dGluZ3MuanM/YmJmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi91dGlsL0NvbnN0YW50cycpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwvVXRpbCcpO1xuXG4vKipcbiAqIEEgd3JhcHBlciBhcm91bmQgdGhlIENsaWVudFVzZXIncyBzZXR0aW5ncy5cbiAqL1xuY2xhc3MgQ2xpZW50VXNlclNldHRpbmdzIHtcbiAgY29uc3RydWN0b3IodXNlciwgZGF0YSkge1xuICAgIHRoaXMudXNlciA9IHVzZXI7XG4gICAgdGhpcy5wYXRjaChkYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXRjaCB0aGUgZGF0YSBjb250YWluZWQgaW4gdGhpcyBjbGFzcyB3aXRoIG5ldyBwYXJ0aWFsIGRhdGEuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIERhdGEgdG8gcGF0Y2ggdGhpcyB3aXRoXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcGF0Y2goZGF0YSkge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKENvbnN0YW50cy5Vc2VyU2V0dGluZ3NNYXApKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IENvbnN0YW50cy5Vc2VyU2V0dGluZ3NNYXBba2V5XTtcbiAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpc1t2YWx1ZS5uYW1lXSA9IHZhbHVlKGRhdGFba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW3ZhbHVlXSA9IGRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgc3BlY2lmaWMgcHJvcGVydHkgb2Ygb2YgdXNlciBzZXR0aW5ncy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiBwcm9wZXJ0eVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFZhbHVlIHRvIHBhdGNoXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59XG4gICAqL1xuICB1cGRhdGUobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy51c2VyLmNsaWVudC5yZXN0Lm1ldGhvZHMucGF0Y2hVc2VyU2V0dGluZ3MoeyBbbmFtZV06IHZhbHVlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHBvc2l0aW9uIGF0IHdoaWNoIHRoaXMgZ3VpbGQgd2lsbCBhcHBlYXIgaW4gdGhlIERpc2NvcmQgY2xpZW50LlxuICAgKiBAcGFyYW0ge0d1aWxkfSBndWlsZCBUaGUgZ3VpbGQgdG8gbW92ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb24gQWJzb2x1dGUgb3IgcmVsYXRpdmUgcG9zaXRpb25cbiAgICogQHBhcmFtIHtib29sZWFufSBbcmVsYXRpdmU9ZmFsc2VdIFdoZXRoZXIgdG8gcG9zaXRpb24gcmVsYXRpdmVseSBvciBhYnNvbHV0ZWx5XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEd1aWxkPn1cbiAgICovXG4gIHNldEd1aWxkUG9zaXRpb24oZ3VpbGQsIHBvc2l0aW9uLCByZWxhdGl2ZSkge1xuICAgIGNvbnN0IHRlbXAgPSBPYmplY3QuYXNzaWduKFtdLCB0aGlzLmd1aWxkUG9zaXRpb25zKTtcbiAgICBVdGlsLm1vdmVFbGVtZW50SW5BcnJheSh0ZW1wLCBndWlsZC5pZCwgcG9zaXRpb24sIHJlbGF0aXZlKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGUoJ2d1aWxkX3Bvc2l0aW9ucycsIHRlbXApLnRoZW4oKCkgPT4gZ3VpbGQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGd1aWxkIHRvIHRoZSBsaXN0IG9mIHJlc3RyaWN0ZWQgZ3VpbGRzLlxuICAgKiBAcGFyYW0ge0d1aWxkfSBndWlsZCBUaGUgZ3VpbGQgdG8gYWRkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEd1aWxkPn1cbiAgICovXG4gIGFkZFJlc3RyaWN0ZWRHdWlsZChndWlsZCkge1xuICAgIGNvbnN0IHRlbXAgPSBPYmplY3QuYXNzaWduKFtdLCB0aGlzLnJlc3RyaWN0ZWRHdWlsZHMpO1xuICAgIGlmICh0ZW1wLmluY2x1ZGVzKGd1aWxkLmlkKSkgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignR3VpbGQgaXMgYWxyZWFkeSByZXN0cmljdGVkJykpO1xuICAgIHRlbXAucHVzaChndWlsZC5pZCk7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKCdyZXN0cmljdGVkX2d1aWxkcycsIHRlbXApLnRoZW4oKCkgPT4gZ3VpbGQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGd1aWxkIGZyb20gdGhlIGxpc3Qgb2YgcmVzdHJpY3RlZCBndWlsZHMuXG4gICAqIEBwYXJhbSB7R3VpbGR9IGd1aWxkIFRoZSBndWlsZCB0byByZW1vdmVcbiAgICogQHJldHVybnMge1Byb21pc2U8R3VpbGQ+fVxuICAgKi9cbiAgcmVtb3ZlUmVzdHJpY3RlZEd1aWxkKGd1aWxkKSB7XG4gICAgY29uc3QgdGVtcCA9IE9iamVjdC5hc3NpZ24oW10sIHRoaXMucmVzdHJpY3RlZEd1aWxkcyk7XG4gICAgY29uc3QgaW5kZXggPSB0ZW1wLmluZGV4T2YoZ3VpbGQuaWQpO1xuICAgIGlmIChpbmRleCA8IDApIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ0d1aWxkIGlzIG5vdCByZXN0cmljdGVkJykpO1xuICAgIHRlbXAuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGUoJ3Jlc3RyaWN0ZWRfZ3VpbGRzJywgdGVtcCkudGhlbigoKSA9PiBndWlsZCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRVc2VyU2V0dGluZ3M7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9zdHJ1Y3R1cmVzL0NsaWVudFVzZXJTZXR0aW5ncy5qc1xuLy8gbW9kdWxlIGlkID0gNjhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///68\n");

/***/ }),
/* 69 */
/*!***************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientUserGuildSettings.js ***!
  \***************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst ClientUserChannelOverride = __webpack_require__(/*! ./ClientUserChannelOverride */ 109);\n\n/**\n * A wrapper around the ClientUser's guild settings.\n */\nclass ClientUserGuildSettings {\n  constructor(data, client) {\n    /**\n     * The client that created the instance of the ClientUserGuildSettings\n     * @name ClientUserGuildSettings#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n    /**\n     * The ID of the guild this settings are for\n     * @type {Snowflake}\n     */\n    this.guildID = data.guild_id;\n    this.channelOverrides = new Collection();\n    this.patch(data);\n  }\n\n  /**\n   * Patch the data contained in this class with new partial data.\n   * @param {Object} data Data to patch this with\n   * @returns {void}\n   * @private\n   */\n  patch(data) {\n    for (const key of Object.keys(Constants.UserGuildSettingsMap)) {\n      const value = Constants.UserGuildSettingsMap[key];\n      if (!data.hasOwnProperty(key)) continue;\n      if (key === 'channel_overrides') {\n        for (const channel of data[key]) {\n          this.channelOverrides.set(channel.channel_id,\n            new ClientUserChannelOverride(channel));\n        }\n      } else if (typeof value === 'function') {\n        this[value.name] = value(data[key]);\n      } else {\n        this[value] = data[key];\n      }\n    }\n  }\n\n  /**\n   * Update a specific property of the guild settings.\n   * @param {string} name Name of property\n   * @param {value} value Value to patch\n   * @returns {Promise<Object>}\n   */\n  update(name, value) {\n    return this.client.rest.methods.patchClientUserGuildSettings(this.guildID, { [name]: value });\n  }\n}\n\nmodule.exports = ClientUserGuildSettings;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9DbGllbnRVc2VyR3VpbGRTZXR0aW5ncy5qcz8zOTIyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5jb25zdCBDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vdXRpbC9Db2xsZWN0aW9uJyk7XG5jb25zdCBDbGllbnRVc2VyQ2hhbm5lbE92ZXJyaWRlID0gcmVxdWlyZSgnLi9DbGllbnRVc2VyQ2hhbm5lbE92ZXJyaWRlJyk7XG5cbi8qKlxuICogQSB3cmFwcGVyIGFyb3VuZCB0aGUgQ2xpZW50VXNlcidzIGd1aWxkIHNldHRpbmdzLlxuICovXG5jbGFzcyBDbGllbnRVc2VyR3VpbGRTZXR0aW5ncyB7XG4gIGNvbnN0cnVjdG9yKGRhdGEsIGNsaWVudCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQgdGhhdCBjcmVhdGVkIHRoZSBpbnN0YW5jZSBvZiB0aGUgQ2xpZW50VXNlckd1aWxkU2V0dGluZ3NcbiAgICAgKiBAbmFtZSBDbGllbnRVc2VyR3VpbGRTZXR0aW5ncyNjbGllbnRcbiAgICAgKiBAdHlwZSB7Q2xpZW50fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY2xpZW50JywgeyB2YWx1ZTogY2xpZW50IH0pO1xuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiB0aGUgZ3VpbGQgdGhpcyBzZXR0aW5ncyBhcmUgZm9yXG4gICAgICogQHR5cGUge1Nub3dmbGFrZX1cbiAgICAgKi9cbiAgICB0aGlzLmd1aWxkSUQgPSBkYXRhLmd1aWxkX2lkO1xuICAgIHRoaXMuY2hhbm5lbE92ZXJyaWRlcyA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgdGhpcy5wYXRjaChkYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXRjaCB0aGUgZGF0YSBjb250YWluZWQgaW4gdGhpcyBjbGFzcyB3aXRoIG5ldyBwYXJ0aWFsIGRhdGEuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIERhdGEgdG8gcGF0Y2ggdGhpcyB3aXRoXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcGF0Y2goZGF0YSkge1xuICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKENvbnN0YW50cy5Vc2VyR3VpbGRTZXR0aW5nc01hcCkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gQ29uc3RhbnRzLlVzZXJHdWlsZFNldHRpbmdzTWFwW2tleV07XG4gICAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoa2V5KSkgY29udGludWU7XG4gICAgICBpZiAoa2V5ID09PSAnY2hhbm5lbF9vdmVycmlkZXMnKSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hhbm5lbCBvZiBkYXRhW2tleV0pIHtcbiAgICAgICAgICB0aGlzLmNoYW5uZWxPdmVycmlkZXMuc2V0KGNoYW5uZWwuY2hhbm5lbF9pZCxcbiAgICAgICAgICAgIG5ldyBDbGllbnRVc2VyQ2hhbm5lbE92ZXJyaWRlKGNoYW5uZWwpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpc1t2YWx1ZS5uYW1lXSA9IHZhbHVlKGRhdGFba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW3ZhbHVlXSA9IGRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGEgc3BlY2lmaWMgcHJvcGVydHkgb2YgdGhlIGd1aWxkIHNldHRpbmdzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHByb3BlcnR5XG4gICAqIEBwYXJhbSB7dmFsdWV9IHZhbHVlIFZhbHVlIHRvIHBhdGNoXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59XG4gICAqL1xuICB1cGRhdGUobmFtZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5jbGllbnQucmVzdC5tZXRob2RzLnBhdGNoQ2xpZW50VXNlckd1aWxkU2V0dGluZ3ModGhpcy5ndWlsZElELCB7IFtuYW1lXTogdmFsdWUgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRVc2VyR3VpbGRTZXR0aW5ncztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3N0cnVjdHVyZXMvQ2xpZW50VXNlckd1aWxkU2V0dGluZ3MuanNcbi8vIG1vZHVsZSBpZCA9IDY5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///69\n");

/***/ }),
/* 70 */
/*!**********************************!*\
  !*** ./node_modules/ws/index.js ***!
  \**********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst WebSocket = __webpack_require__(/*! ./lib/websocket */ 71);\n\nWebSocket.Server = __webpack_require__(/*! ./lib/websocket-server */ 149);\nWebSocket.Receiver = __webpack_require__(/*! ./lib/receiver */ 73);\nWebSocket.Sender = __webpack_require__(/*! ./lib/sender */ 75);\n\nmodule.exports = WebSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3MvaW5kZXguanM/NGY4OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFdlYlNvY2tldCA9IHJlcXVpcmUoJy4vbGliL3dlYnNvY2tldCcpO1xuXG5XZWJTb2NrZXQuU2VydmVyID0gcmVxdWlyZSgnLi9saWIvd2Vic29ja2V0LXNlcnZlcicpO1xuV2ViU29ja2V0LlJlY2VpdmVyID0gcmVxdWlyZSgnLi9saWIvcmVjZWl2ZXInKTtcbldlYlNvY2tldC5TZW5kZXIgPSByZXF1aXJlKCcuL2xpYi9zZW5kZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXQ7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93cy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///70\n");

/***/ }),
/* 71 */
/*!******************************************!*\
  !*** ./node_modules/ws/lib/websocket.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst EventEmitter = __webpack_require__(/*! events */ 5);\nconst crypto = __webpack_require__(/*! crypto */ 24);\nconst https = __webpack_require__(/*! https */ 47);\nconst http = __webpack_require__(/*! http */ 29);\nconst url = __webpack_require__(/*! url */ 30);\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ 25);\nconst EventTarget = __webpack_require__(/*! ./event-target */ 148);\nconst extension = __webpack_require__(/*! ./extension */ 72);\nconst constants = __webpack_require__(/*! ./constants */ 26);\nconst Receiver = __webpack_require__(/*! ./receiver */ 73);\nconst Sender = __webpack_require__(/*! ./sender */ 75);\n\nconst readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {String} address The URL to which to connect\n   * @param {(String|String[])} protocols The subprotocols\n   * @param {Object} options Connection options\n   */\n  constructor (address, protocols, options) {\n    super();\n\n    this.readyState = WebSocket.CONNECTING;\n    this.protocol = '';\n\n    this._binaryType = constants.BINARY_TYPES[0];\n    this._finalize = this.finalize.bind(this);\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = '';\n    this._closeTimer = null;\n    this._finalized = false;\n    this._closeCode = 1006;\n    this._extensions = {};\n    this._isServer = true;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n    this._error = null;\n\n    if (address !== null) {\n      if (!protocols) {\n        protocols = [];\n      } else if (typeof protocols === 'string') {\n        protocols = [protocols];\n      } else if (!Array.isArray(protocols)) {\n        options = protocols;\n        protocols = [];\n      }\n\n      initAsClient.call(this, address, protocols, options);\n    }\n  }\n\n  get CONNECTING () { return WebSocket.CONNECTING; }\n  get CLOSING () { return WebSocket.CLOSING; }\n  get CLOSED () { return WebSocket.CLOSED; }\n  get OPEN () { return WebSocket.OPEN; }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the required\n   * default \"blob\" type (instead we define a custom \"nodebuffer\" type).\n   *\n   * @type {String}\n   */\n  get binaryType () {\n    return this._binaryType;\n  }\n\n  set binaryType (type) {\n    if (constants.BINARY_TYPES.indexOf(type) < 0) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount () {\n    if (!this._socket) return 0;\n\n    //\n    // `socket.bufferSize` is `undefined` if the socket is closed.\n    //\n    return (this._socket.bufferSize || 0) + this._sender._bufferedBytes;\n  }\n\n  /**\n   * @type {String}\n   */\n  get extensions () {\n    return Object.keys(this._extensions).join();\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Number} maxPayload The maximum allowed message size\n   * @private\n   */\n  setSocket (socket, head, maxPayload) {\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    socket.on('close', this._finalize);\n    socket.on('error', this._finalize);\n    socket.on('end', this._finalize);\n\n    this._receiver = new Receiver(this._extensions, maxPayload, this.binaryType);\n    this._sender = new Sender(socket, this._extensions);\n    this._socket = socket;\n\n    if (head.length > 0) socket.unshift(head);\n\n    socket.on('data', this._receiver.add);\n\n    this._receiver.onmessage = (data) => this.emit('message', data);\n    this._receiver.onping = (data) => {\n      this.pong(data, !this._isServer, constants.NOOP);\n      this.emit('ping', data);\n    };\n    this._receiver.onpong = (data) => this.emit('pong', data);\n    this._receiver.onclose = (code, reason) => {\n      //\n      // Discard any additional data that is received on the socket.\n      //\n      this._socket.removeListener('data', this._receiver.add);\n\n      this._closeFrameReceived = true;\n      this._closeMessage = reason;\n      this._closeCode = code;\n\n      if (code === 1005) this.close();\n      else this.close(code, reason);\n    };\n    this._receiver.onerror = (error, code) => {\n      if (this._error) return;\n\n      this._closeCode = code;\n\n      if (!this._finalized) this.finalize(error);\n      else this.emit('error', error);\n    };\n\n    this.readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Clean up internal resources and emit the `'close'` event.\n   *\n   * @param {(Boolean|Error)} error Indicates whether or not an error occurred\n   * @private\n   */\n  finalize (error) {\n    if (this._finalized) return;\n\n    this.readyState = WebSocket.CLOSING;\n    this._finalized = true;\n\n    if (!this._socket) {\n      //\n      // `error` is always an `Error` instance in this case.\n      //\n      this.emit('error', error);\n      this.readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n      return;\n    }\n\n    clearTimeout(this._closeTimer);\n\n    this._socket.removeListener('data', this._receiver.add);\n    this._socket.removeListener('close', this._finalize);\n    this._socket.removeListener('error', this._finalize);\n    this._socket.removeListener('end', this._finalize);\n    this._socket.on('error', constants.NOOP);\n\n    if (error) {\n      if (error !== true) this._error = error;\n      this._socket.destroy();\n    } else {\n      this._socket.end();\n    }\n\n    this._receiver.cleanup(() => {\n      const err = this._error;\n\n      if (err) {\n        this._error = null;\n        this.emit('error', err);\n      }\n\n      this.readyState = WebSocket.CLOSED;\n\n      if (this._extensions[PerMessageDeflate.extensionName]) {\n        this._extensions[PerMessageDeflate.extensionName].cleanup();\n      }\n\n      this.emit('close', this._closeCode, this._closeMessage);\n    });\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *            +----------+     +-----------+   +----------+\n   *     + - - -|ws.close()|---->|close frame|-->|ws.close()|- - - -\n   *            +----------+     +-----------+   +----------+       |\n   *     |      +----------+     +-----------+         |\n   *            |ws.close()|<----|close frame|<--------+            |\n   *            +----------+     +-----------+         |\n   *  CLOSING         |              +---+             |         CLOSING\n   *                  |          +---|fin|<------------+\n   *     |            |          |   +---+                          |\n   *                  |          |   +---+      +-------------+\n   *     |            +----------+-->|fin|----->|ws.finalize()| - - +\n   *                             |   +---+      +-------------+\n   *     |     +-------------+   |\n   *      - - -|ws.finalize()|<--+\n   *           +-------------+\n   *\n   * @param {Number} code Status code explaining why the connection is closing\n   * @param {String} data A string explaining why the connection is closing\n   * @public\n   */\n  close (code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      this._req.abort();\n      this.finalize(\n        new Error('WebSocket was closed before the connection was established')\n      );\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();\n      return;\n    }\n\n    this.readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (!this._finalized) {\n        if (this._closeFrameReceived) this._socket.end();\n\n        //\n        // Ensure that the connection is cleaned up even when the closing\n        // handshake fails.\n        //\n        this._closeTimer = setTimeout(this._finalize, closeTimeout, true);\n      }\n    });\n  }\n\n  /**\n   * Send a ping.\n   *\n   * @param {*} data The data to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when the ping is sent\n   * @public\n   */\n  ping (data, mask, cb) {\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(\n        `WebSocket is not open: readyState ${this.readyState} ` +\n          `(${readyStates[this.readyState]})`\n      );\n\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || constants.EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a pong.\n   *\n   * @param {*} data The data to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when the pong is sent\n   * @public\n   */\n  pong (data, mask, cb) {\n    if (typeof data === 'function') {\n      cb = data;\n      data = mask = undefined;\n    } else if (typeof mask === 'function') {\n      cb = mask;\n      mask = undefined;\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(\n        `WebSocket is not open: readyState ${this.readyState} ` +\n          `(${readyStates[this.readyState]})`\n      );\n\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || constants.EMPTY_BUFFER, mask, cb);\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when data is written out\n   * @public\n   */\n  send (data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      const err = new Error(\n        `WebSocket is not open: readyState ${this.readyState} ` +\n          `(${readyStates[this.readyState]})`\n      );\n\n      if (cb) return cb(err);\n      throw err;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    const opts = Object.assign({\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true\n    }, options);\n\n    if (!this._extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || constants.EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate () {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      this._req.abort();\n      this.finalize(\n        new Error('WebSocket was closed before the connection was established')\n      );\n      return;\n    }\n\n    this.finalize(true);\n  }\n}\n\nreadyStates.forEach((readyState, i) => {\n  WebSocket[readyStates[i]] = i;\n});\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    /**\n     * Return the listener of the event.\n     *\n     * @return {(Function|undefined)} The event listener or `undefined`\n     * @public\n     */\n    get () {\n      const listeners = this.listeners(method);\n      for (var i = 0; i < listeners.length; i++) {\n        if (listeners[i]._listener) return listeners[i]._listener;\n      }\n    },\n    /**\n     * Add a listener for the event.\n     *\n     * @param {Function} listener The listener to add\n     * @public\n     */\n    set (listener) {\n      const listeners = this.listeners(method);\n      for (var i = 0; i < listeners.length; i++) {\n        //\n        // Remove only the listeners added via `addEventListener`.\n        //\n        if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n      }\n      this.addEventListener(method, listener);\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = EventTarget.addEventListener;\nWebSocket.prototype.removeEventListener = EventTarget.removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {String} address The URL to which to connect\n * @param {String[]} protocols The list of subprotocols\n * @param {Object} options Connection options\n * @param {String} options.protocol Value of the `Sec-WebSocket-Protocol` header\n * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n * @param {Number} options.handshakeTimeout Timeout in milliseconds for the handshake request\n * @param {String} options.localAddress Local interface to bind for network connections\n * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header\n * @param {Object} options.headers An object containing request headers\n * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header\n * @param {http.Agent} options.agent Use the specified Agent\n * @param {String} options.host Value of the `Host` header\n * @param {Number} options.family IP address family to use during hostname lookup (4 or 6).\n * @param {Function} options.checkServerIdentity A function to validate the server hostname\n * @param {Boolean} options.rejectUnauthorized Verify or not the server certificate\n * @param {String} options.passphrase The passphrase for the private key or pfx\n * @param {String} options.ciphers The ciphers to use or exclude\n * @param {String} options.ecdhCurve The curves for ECDH key agreement to use or exclude\n * @param {(String|String[]|Buffer|Buffer[])} options.cert The certificate key\n * @param {(String|String[]|Buffer|Buffer[])} options.key The private key\n * @param {(String|Buffer)} options.pfx The private key, certificate, and CA certs\n * @param {(String|String[]|Buffer|Buffer[])} options.ca Trusted certificates\n * @private\n */\nfunction initAsClient (address, protocols, options) {\n  options = Object.assign({\n    protocolVersion: protocolVersions[1],\n    protocol: protocols.join(','),\n    perMessageDeflate: true,\n    handshakeTimeout: null,\n    localAddress: null,\n    headers: null,\n    family: null,\n    origin: null,\n    agent: null,\n    host: null,\n\n    //\n    // SSL options.\n    //\n    checkServerIdentity: null,\n    rejectUnauthorized: null,\n    passphrase: null,\n    ciphers: null,\n    ecdhCurve: null,\n    cert: null,\n    key: null,\n    pfx: null,\n    ca: null\n  }, options);\n\n  if (protocolVersions.indexOf(options.protocolVersion) === -1) {\n    throw new RangeError(\n      `Unsupported protocol version: ${options.protocolVersion} ` +\n        `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  this._isServer = false;\n  this.url = address;\n\n  const serverUrl = url.parse(address);\n  const isUnixSocket = serverUrl.protocol === 'ws+unix:';\n\n  if (!serverUrl.host && (!isUnixSocket || !serverUrl.path)) {\n    throw new Error(`Invalid URL: ${address}`);\n  }\n\n  const isSecure = serverUrl.protocol === 'wss:' || serverUrl.protocol === 'https:';\n  const key = crypto.randomBytes(16).toString('base64');\n  const httpObj = isSecure ? https : http;\n  var perMessageDeflate;\n\n  const requestOptions = {\n    port: serverUrl.port || (isSecure ? 443 : 80),\n    host: serverUrl.hostname,\n    path: '/',\n    headers: {\n      'Sec-WebSocket-Version': options.protocolVersion,\n      'Sec-WebSocket-Key': key,\n      'Connection': 'Upgrade',\n      'Upgrade': 'websocket'\n    }\n  };\n\n  if (options.headers) Object.assign(requestOptions.headers, options.headers);\n  if (options.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      options.perMessageDeflate !== true ? options.perMessageDeflate : {},\n      false\n    );\n    requestOptions.headers['Sec-WebSocket-Extensions'] = extension.format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (options.protocol) {\n    requestOptions.headers['Sec-WebSocket-Protocol'] = options.protocol;\n  }\n  if (options.origin) {\n    if (options.protocolVersion < 13) {\n      requestOptions.headers['Sec-WebSocket-Origin'] = options.origin;\n    } else {\n      requestOptions.headers.Origin = options.origin;\n    }\n  }\n  if (options.host) requestOptions.headers.Host = options.host;\n  if (serverUrl.auth) requestOptions.auth = serverUrl.auth;\n\n  if (options.localAddress) requestOptions.localAddress = options.localAddress;\n  if (options.family) requestOptions.family = options.family;\n\n  if (isUnixSocket) {\n    const parts = serverUrl.path.split(':');\n\n    requestOptions.socketPath = parts[0];\n    requestOptions.path = parts[1];\n  } else if (serverUrl.path) {\n    //\n    // Make sure that path starts with `/`.\n    //\n    if (serverUrl.path.charAt(0) !== '/') {\n      requestOptions.path = `/${serverUrl.path}`;\n    } else {\n      requestOptions.path = serverUrl.path;\n    }\n  }\n\n  var agent = options.agent;\n\n  //\n  // A custom agent is required for these options.\n  //\n  if (\n    options.rejectUnauthorized != null ||\n    options.checkServerIdentity ||\n    options.passphrase ||\n    options.ciphers ||\n    options.ecdhCurve ||\n    options.cert ||\n    options.key ||\n    options.pfx ||\n    options.ca\n  ) {\n    if (options.passphrase) requestOptions.passphrase = options.passphrase;\n    if (options.ciphers) requestOptions.ciphers = options.ciphers;\n    if (options.ecdhCurve) requestOptions.ecdhCurve = options.ecdhCurve;\n    if (options.cert) requestOptions.cert = options.cert;\n    if (options.key) requestOptions.key = options.key;\n    if (options.pfx) requestOptions.pfx = options.pfx;\n    if (options.ca) requestOptions.ca = options.ca;\n    if (options.checkServerIdentity) {\n      requestOptions.checkServerIdentity = options.checkServerIdentity;\n    }\n    if (options.rejectUnauthorized != null) {\n      requestOptions.rejectUnauthorized = options.rejectUnauthorized;\n    }\n\n    if (!agent) agent = new httpObj.Agent(requestOptions);\n  }\n\n  if (agent) requestOptions.agent = agent;\n\n  this._req = httpObj.get(requestOptions);\n\n  if (options.handshakeTimeout) {\n    this._req.setTimeout(options.handshakeTimeout, () => {\n      this._req.abort();\n      this.finalize(new Error('Opening handshake has timed out'));\n    });\n  }\n\n  this._req.on('error', (error) => {\n    if (this._req.aborted) return;\n\n    this._req = null;\n    this.finalize(error);\n  });\n\n  this._req.on('response', (res) => {\n    if (!this.emit('unexpected-response', this._req, res)) {\n      this._req.abort();\n      this.finalize(new Error(`Unexpected server response: ${res.statusCode}`));\n    }\n  });\n\n  this._req.on('upgrade', (res, socket, head) => {\n    this.emit('upgrade', res);\n\n    //\n    // The user may have closed the connection from a listener of the `upgrade`\n    // event.\n    //\n    if (this.readyState !== WebSocket.CONNECTING) return;\n\n    this._req = null;\n\n    const digest = crypto.createHash('sha1')\n      .update(key + constants.GUID, 'binary')\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      socket.destroy();\n      return this.finalize(new Error('Invalid Sec-WebSocket-Accept header'));\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    const protList = (options.protocol || '').split(/, */);\n    var protError;\n\n    if (!options.protocol && serverProt) {\n      protError = 'Server sent a subprotocol but none was requested';\n    } else if (options.protocol && !serverProt) {\n      protError = 'Server sent no subprotocol';\n    } else if (serverProt && protList.indexOf(serverProt) === -1) {\n      protError = 'Server sent an invalid subprotocol';\n    }\n\n    if (protError) {\n      socket.destroy();\n      return this.finalize(new Error(protError));\n    }\n\n    if (serverProt) this.protocol = serverProt;\n\n    if (perMessageDeflate) {\n      try {\n        const extensions = extension.parse(\n          res.headers['sec-websocket-extensions']\n        );\n\n        if (extensions[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(\n            extensions[PerMessageDeflate.extensionName]\n          );\n          this._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        socket.destroy();\n        this.finalize(new Error('Invalid Sec-WebSocket-Extensions header'));\n        return;\n      }\n    }\n\n    this.setSocket(socket, head, 0);\n  });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///71\n");

/***/ }),
/* 72 */
/*!******************************************!*\
  !*** ./node_modules/ws/lib/extension.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n//\n// Allowed token characters:\n//\n// '!', '#', '$', '%', '&', ''', '*', '+', '-',\n// '.', 0-9, A-Z, '^', '_', '`', a-z, '|', '~'\n//\n// tokenChars[32] === 0 // ' '\n// tokenChars[33] === 1 // '!'\n// tokenChars[34] === 0 // '\"'\n// ...\n//\nconst tokenChars = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, // 80 - 95\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0 // 112 - 127\n];\n\n/**\n * Adds an offer to the map of extension offers or a parameter to the map of\n * parameters.\n *\n * @param {Object} dest The map of extension offers or parameters\n * @param {String} name The extension or parameter name\n * @param {(Object|Boolean|String)} elem The extension parameters or the\n *     parameter value\n * @private\n */\nfunction push (dest, name, elem) {\n  if (Object.prototype.hasOwnProperty.call(dest, name)) dest[name].push(elem);\n  else dest[name] = [elem];\n}\n\n/**\n * Parses the `Sec-WebSocket-Extensions` header into an object.\n *\n * @param {String} header The field value of the header\n * @return {Object} The parsed object\n * @public\n */\nfunction parse (header) {\n  const offers = {};\n\n  if (header === undefined || header === '') return offers;\n\n  var params = {};\n  var mustUnescape = false;\n  var isEscaping = false;\n  var inQuotes = false;\n  var extensionName;\n  var paramName;\n  var start = -1;\n  var end = -1;\n\n  for (var i = 0; i < header.length; i++) {\n    const code = header.charCodeAt(i);\n\n    if (extensionName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20/* ' ' */|| code === 0x09/* '\\t' */) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b/* ';' */ || code === 0x2c/* ',' */) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        const name = header.slice(start, end);\n        if (code === 0x2c) {\n          push(offers, name, params);\n          params = {};\n        } else {\n          extensionName = name;\n        }\n\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else if (paramName === undefined) {\n      if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (code === 0x20 || code === 0x09) {\n        if (end === -1 && start !== -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        push(params, header.slice(start, end), true);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = {};\n          extensionName = undefined;\n        }\n\n        start = end = -1;\n      } else if (code === 0x3d/* '=' */&& start !== -1 && end === -1) {\n        paramName = header.slice(start, i);\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    } else {\n      //\n      // The value of a quoted-string after unescaping must conform to the\n      // token ABNF, so only token characters are valid.\n      // Ref: https://tools.ietf.org/html/rfc6455#section-9.1\n      //\n      if (isEscaping) {\n        if (tokenChars[code] !== 1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n        if (start === -1) start = i;\n        else if (!mustUnescape) mustUnescape = true;\n        isEscaping = false;\n      } else if (inQuotes) {\n        if (tokenChars[code] === 1) {\n          if (start === -1) start = i;\n        } else if (code === 0x22/* '\"' */ && start !== -1) {\n          inQuotes = false;\n          end = i;\n        } else if (code === 0x5c/* '\\' */) {\n          isEscaping = true;\n        } else {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n      } else if (code === 0x22 && header.charCodeAt(i - 1) === 0x3d) {\n        inQuotes = true;\n      } else if (end === -1 && tokenChars[code] === 1) {\n        if (start === -1) start = i;\n      } else if (start !== -1 && (code === 0x20 || code === 0x09)) {\n        if (end === -1) end = i;\n      } else if (code === 0x3b || code === 0x2c) {\n        if (start === -1) {\n          throw new SyntaxError(`Unexpected character at index ${i}`);\n        }\n\n        if (end === -1) end = i;\n        var value = header.slice(start, end);\n        if (mustUnescape) {\n          value = value.replace(/\\\\/g, '');\n          mustUnescape = false;\n        }\n        push(params, paramName, value);\n        if (code === 0x2c) {\n          push(offers, extensionName, params);\n          params = {};\n          extensionName = undefined;\n        }\n\n        paramName = undefined;\n        start = end = -1;\n      } else {\n        throw new SyntaxError(`Unexpected character at index ${i}`);\n      }\n    }\n  }\n\n  if (start === -1 || inQuotes) {\n    throw new SyntaxError('Unexpected end of input');\n  }\n\n  if (end === -1) end = i;\n  const token = header.slice(start, end);\n  if (extensionName === undefined) {\n    push(offers, token, {});\n  } else {\n    if (paramName === undefined) {\n      push(params, token, true);\n    } else if (mustUnescape) {\n      push(params, paramName, token.replace(/\\\\/g, ''));\n    } else {\n      push(params, paramName, token);\n    }\n    push(offers, extensionName, params);\n  }\n\n  return offers;\n}\n\n/**\n * Builds the `Sec-WebSocket-Extensions` header field value.\n *\n * @param {Object} extensions The map of extensions and parameters to format\n * @return {String} A string representing the given object\n * @public\n */\nfunction format (extensions) {\n  return Object.keys(extensions).map((extension) => {\n    var configurations = extensions[extension];\n    if (!Array.isArray(configurations)) configurations = [configurations];\n    return configurations.map((params) => {\n      return [extension].concat(Object.keys(params).map((k) => {\n        var values = params[k];\n        if (!Array.isArray(values)) values = [values];\n        return values.map((v) => v === true ? k : `${k}=${v}`).join('; ');\n      })).join('; ');\n    }).join(', ');\n  }).join(', ');\n}\n\nmodule.exports = { format, parse };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3MvbGliL2V4dGVuc2lvbi5qcz8wMDg4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy9cbi8vIEFsbG93ZWQgdG9rZW4gY2hhcmFjdGVyczpcbi8vXG4vLyAnIScsICcjJywgJyQnLCAnJScsICcmJywgJycnLCAnKicsICcrJywgJy0nLFxuLy8gJy4nLCAwLTksIEEtWiwgJ14nLCAnXycsICdgJywgYS16LCAnfCcsICd+J1xuLy9cbi8vIHRva2VuQ2hhcnNbMzJdID09PSAwIC8vICcgJ1xuLy8gdG9rZW5DaGFyc1szM10gPT09IDEgLy8gJyEnXG4vLyB0b2tlbkNoYXJzWzM0XSA9PT0gMCAvLyAnXCInXG4vLyAuLi5cbi8vXG5jb25zdCB0b2tlbkNoYXJzID0gW1xuICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAvLyAwIC0gMTVcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgLy8gMTYgLSAzMVxuICAwLCAxLCAwLCAxLCAxLCAxLCAxLCAxLCAwLCAwLCAxLCAxLCAwLCAxLCAxLCAwLCAvLyAzMiAtIDQ3XG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDAsIDAsIDAsIDAsIDAsIC8vIDQ4IC0gNjNcbiAgMCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgLy8gNjQgLSA3OVxuICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLCAwLCAwLCAxLCAxLCAvLyA4MCAtIDk1XG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIC8vIDk2IC0gMTExXG4gIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDEsIDAsIDEsIDAgLy8gMTEyIC0gMTI3XG5dO1xuXG4vKipcbiAqIEFkZHMgYW4gb2ZmZXIgdG8gdGhlIG1hcCBvZiBleHRlbnNpb24gb2ZmZXJzIG9yIGEgcGFyYW1ldGVyIHRvIHRoZSBtYXAgb2ZcbiAqIHBhcmFtZXRlcnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlc3QgVGhlIG1hcCBvZiBleHRlbnNpb24gb2ZmZXJzIG9yIHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBleHRlbnNpb24gb3IgcGFyYW1ldGVyIG5hbWVcbiAqIEBwYXJhbSB7KE9iamVjdHxCb29sZWFufFN0cmluZyl9IGVsZW0gVGhlIGV4dGVuc2lvbiBwYXJhbWV0ZXJzIG9yIHRoZVxuICogICAgIHBhcmFtZXRlciB2YWx1ZVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHVzaCAoZGVzdCwgbmFtZSwgZWxlbSkge1xuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRlc3QsIG5hbWUpKSBkZXN0W25hbWVdLnB1c2goZWxlbSk7XG4gIGVsc2UgZGVzdFtuYW1lXSA9IFtlbGVtXTtcbn1cblxuLyoqXG4gKiBQYXJzZXMgdGhlIGBTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnNgIGhlYWRlciBpbnRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVyIFRoZSBmaWVsZCB2YWx1ZSBvZiB0aGUgaGVhZGVyXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBwYXJzZWQgb2JqZWN0XG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChoZWFkZXIpIHtcbiAgY29uc3Qgb2ZmZXJzID0ge307XG5cbiAgaWYgKGhlYWRlciA9PT0gdW5kZWZpbmVkIHx8IGhlYWRlciA9PT0gJycpIHJldHVybiBvZmZlcnM7XG5cbiAgdmFyIHBhcmFtcyA9IHt9O1xuICB2YXIgbXVzdFVuZXNjYXBlID0gZmFsc2U7XG4gIHZhciBpc0VzY2FwaW5nID0gZmFsc2U7XG4gIHZhciBpblF1b3RlcyA9IGZhbHNlO1xuICB2YXIgZXh0ZW5zaW9uTmFtZTtcbiAgdmFyIHBhcmFtTmFtZTtcbiAgdmFyIHN0YXJ0ID0gLTE7XG4gIHZhciBlbmQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWRlci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNvZGUgPSBoZWFkZXIuY2hhckNvZGVBdChpKTtcblxuICAgIGlmIChleHRlbnNpb25OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChlbmQgPT09IC0xICYmIHRva2VuQ2hhcnNbY29kZV0gPT09IDEpIHtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSAtMSkgc3RhcnQgPSBpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDIwLyogJyAnICovfHwgY29kZSA9PT0gMHgwOS8qICdcXHQnICovKSB7XG4gICAgICAgIGlmIChlbmQgPT09IC0xICYmIHN0YXJ0ICE9PSAtMSkgZW5kID0gaTtcbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgzYi8qICc7JyAqLyB8fCBjb2RlID09PSAweDJjLyogJywnICovKSB7XG4gICAgICAgIGlmIChzdGFydCA9PT0gLTEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmQgPT09IC0xKSBlbmQgPSBpO1xuICAgICAgICBjb25zdCBuYW1lID0gaGVhZGVyLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICBpZiAoY29kZSA9PT0gMHgyYykge1xuICAgICAgICAgIHB1c2gob2ZmZXJzLCBuYW1lLCBwYXJhbXMpO1xuICAgICAgICAgIHBhcmFtcyA9IHt9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV4dGVuc2lvbk5hbWUgPSBuYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSBlbmQgPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtpfWApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFyYW1OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChlbmQgPT09IC0xICYmIHRva2VuQ2hhcnNbY29kZV0gPT09IDEpIHtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSAtMSkgc3RhcnQgPSBpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDIwIHx8IGNvZGUgPT09IDB4MDkpIHtcbiAgICAgICAgaWYgKGVuZCA9PT0gLTEgJiYgc3RhcnQgIT09IC0xKSBlbmQgPSBpO1xuICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDNiIHx8IGNvZGUgPT09IDB4MmMpIHtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSAtMSkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtpfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IGk7XG4gICAgICAgIHB1c2gocGFyYW1zLCBoZWFkZXIuc2xpY2Uoc3RhcnQsIGVuZCksIHRydWUpO1xuICAgICAgICBpZiAoY29kZSA9PT0gMHgyYykge1xuICAgICAgICAgIHB1c2gob2ZmZXJzLCBleHRlbnNpb25OYW1lLCBwYXJhbXMpO1xuICAgICAgICAgIHBhcmFtcyA9IHt9O1xuICAgICAgICAgIGV4dGVuc2lvbk5hbWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydCA9IGVuZCA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChjb2RlID09PSAweDNkLyogJz0nICovJiYgc3RhcnQgIT09IC0xICYmIGVuZCA9PT0gLTEpIHtcbiAgICAgICAgcGFyYW1OYW1lID0gaGVhZGVyLnNsaWNlKHN0YXJ0LCBpKTtcbiAgICAgICAgc3RhcnQgPSBlbmQgPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtpfWApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvL1xuICAgICAgLy8gVGhlIHZhbHVlIG9mIGEgcXVvdGVkLXN0cmluZyBhZnRlciB1bmVzY2FwaW5nIG11c3QgY29uZm9ybSB0byB0aGVcbiAgICAgIC8vIHRva2VuIEFCTkYsIHNvIG9ubHkgdG9rZW4gY2hhcmFjdGVycyBhcmUgdmFsaWQuXG4gICAgICAvLyBSZWY6IGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM2NDU1I3NlY3Rpb24tOS4xXG4gICAgICAvL1xuICAgICAgaWYgKGlzRXNjYXBpbmcpIHtcbiAgICAgICAgaWYgKHRva2VuQ2hhcnNbY29kZV0gIT09IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoYFVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7aX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgICAgIGVsc2UgaWYgKCFtdXN0VW5lc2NhcGUpIG11c3RVbmVzY2FwZSA9IHRydWU7XG4gICAgICAgIGlzRXNjYXBpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoaW5RdW90ZXMpIHtcbiAgICAgICAgaWYgKHRva2VuQ2hhcnNbY29kZV0gPT09IDEpIHtcbiAgICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSBzdGFydCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyMi8qICdcIicgKi8gJiYgc3RhcnQgIT09IC0xKSB7XG4gICAgICAgICAgaW5RdW90ZXMgPSBmYWxzZTtcbiAgICAgICAgICBlbmQgPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4NWMvKiAnXFwnICovKSB7XG4gICAgICAgICAgaXNFc2NhcGluZyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMHgyMiAmJiBoZWFkZXIuY2hhckNvZGVBdChpIC0gMSkgPT09IDB4M2QpIHtcbiAgICAgICAgaW5RdW90ZXMgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlbmQgPT09IC0xICYmIHRva2VuQ2hhcnNbY29kZV0gPT09IDEpIHtcbiAgICAgICAgaWYgKHN0YXJ0ID09PSAtMSkgc3RhcnQgPSBpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCAhPT0gLTEgJiYgKGNvZGUgPT09IDB4MjAgfHwgY29kZSA9PT0gMHgwOSkpIHtcbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpIGVuZCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDB4M2IgfHwgY29kZSA9PT0gMHgyYykge1xuICAgICAgICBpZiAoc3RhcnQgPT09IC0xKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGBVbmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2l9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW5kID09PSAtMSkgZW5kID0gaTtcbiAgICAgICAgdmFyIHZhbHVlID0gaGVhZGVyLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgICAgICBpZiAobXVzdFVuZXNjYXBlKSB7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICAgICAgICBtdXN0VW5lc2NhcGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoKHBhcmFtcywgcGFyYW1OYW1lLCB2YWx1ZSk7XG4gICAgICAgIGlmIChjb2RlID09PSAweDJjKSB7XG4gICAgICAgICAgcHVzaChvZmZlcnMsIGV4dGVuc2lvbk5hbWUsIHBhcmFtcyk7XG4gICAgICAgICAgcGFyYW1zID0ge307XG4gICAgICAgICAgZXh0ZW5zaW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgc3RhcnQgPSBlbmQgPSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihgVW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtpfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gLTEgfHwgaW5RdW90ZXMpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ1VuZXhwZWN0ZWQgZW5kIG9mIGlucHV0Jyk7XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgZW5kID0gaTtcbiAgY29uc3QgdG9rZW4gPSBoZWFkZXIuc2xpY2Uoc3RhcnQsIGVuZCk7XG4gIGlmIChleHRlbnNpb25OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICBwdXNoKG9mZmVycywgdG9rZW4sIHt9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAocGFyYW1OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHB1c2gocGFyYW1zLCB0b2tlbiwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChtdXN0VW5lc2NhcGUpIHtcbiAgICAgIHB1c2gocGFyYW1zLCBwYXJhbU5hbWUsIHRva2VuLnJlcGxhY2UoL1xcXFwvZywgJycpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChwYXJhbXMsIHBhcmFtTmFtZSwgdG9rZW4pO1xuICAgIH1cbiAgICBwdXNoKG9mZmVycywgZXh0ZW5zaW9uTmFtZSwgcGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiBvZmZlcnM7XG59XG5cbi8qKlxuICogQnVpbGRzIHRoZSBgU2VjLVdlYlNvY2tldC1FeHRlbnNpb25zYCBoZWFkZXIgZmllbGQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGV4dGVuc2lvbnMgVGhlIG1hcCBvZiBleHRlbnNpb25zIGFuZCBwYXJhbWV0ZXJzIHRvIGZvcm1hdFxuICogQHJldHVybiB7U3RyaW5nfSBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGdpdmVuIG9iamVjdFxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBmb3JtYXQgKGV4dGVuc2lvbnMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGV4dGVuc2lvbnMpLm1hcCgoZXh0ZW5zaW9uKSA9PiB7XG4gICAgdmFyIGNvbmZpZ3VyYXRpb25zID0gZXh0ZW5zaW9uc1tleHRlbnNpb25dO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShjb25maWd1cmF0aW9ucykpIGNvbmZpZ3VyYXRpb25zID0gW2NvbmZpZ3VyYXRpb25zXTtcbiAgICByZXR1cm4gY29uZmlndXJhdGlvbnMubWFwKChwYXJhbXMpID0+IHtcbiAgICAgIHJldHVybiBbZXh0ZW5zaW9uXS5jb25jYXQoT2JqZWN0LmtleXMocGFyYW1zKS5tYXAoKGspID0+IHtcbiAgICAgICAgdmFyIHZhbHVlcyA9IHBhcmFtc1trXTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHZhbHVlcyA9IFt2YWx1ZXNdO1xuICAgICAgICByZXR1cm4gdmFsdWVzLm1hcCgodikgPT4gdiA9PT0gdHJ1ZSA/IGsgOiBgJHtrfT0ke3Z9YCkuam9pbignOyAnKTtcbiAgICAgIH0pKS5qb2luKCc7ICcpO1xuICAgIH0pLmpvaW4oJywgJyk7XG4gIH0pLmpvaW4oJywgJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBmb3JtYXQsIHBhcnNlIH07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy93cy9saWIvZXh0ZW5zaW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///72\n");

/***/ }),
/* 73 */
/*!*****************************************!*\
  !*** ./node_modules/ws/lib/receiver.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst safeBuffer = __webpack_require__(/*! safe-buffer */ 14);\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ 25);\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ 41);\nconst validation = __webpack_require__(/*! ./validation */ 74);\nconst constants = __webpack_require__(/*! ./constants */ 26);\n\nconst Buffer = safeBuffer.Buffer;\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n */\nclass Receiver {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} extensions An object containing the negotiated extensions\n   * @param {Number} maxPayload The maximum allowed message length\n   * @param {String} binaryType The type for binary data\n   */\n  constructor (extensions, maxPayload, binaryType) {\n    this._binaryType = binaryType || constants.BINARY_TYPES[0];\n    this._extensions = extensions || {};\n    this._maxPayload = maxPayload | 0;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._mask = null;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._cleanupCallback = null;\n    this._isCleaningUp = false;\n    this._hadError = false;\n    this._loop = false;\n\n    this.add = this.add.bind(this);\n    this.onmessage = null;\n    this.onclose = null;\n    this.onerror = null;\n    this.onping = null;\n    this.onpong = null;\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Consumes `n` bytes from the buffered data, calls `cleanup` if necessary.\n   *\n   * @param {Number} n The number of bytes to consume\n   * @return {(Buffer|null)} The consumed bytes or `null` if `n` bytes are not\n   *     available\n   * @private\n   */\n  consume (n) {\n    if (this._bufferedBytes < n) {\n      this._loop = false;\n      if (this._isCleaningUp) this.cleanup(this._cleanupCallback);\n      return null;\n    }\n\n    this._bufferedBytes -= n;\n\n    if (n === this._buffers[0].length) return this._buffers.shift();\n\n    if (n < this._buffers[0].length) {\n      const buf = this._buffers[0];\n      this._buffers[0] = buf.slice(n);\n      return buf.slice(0, n);\n    }\n\n    const dst = Buffer.allocUnsafe(n);\n\n    do {\n      const buf = this._buffers[0];\n\n      if (n >= buf.length) {\n        this._buffers.shift().copy(dst, dst.length - n);\n      } else {\n        buf.copy(dst, dst.length - n, 0, n);\n        this._buffers[0] = buf.slice(n);\n      }\n\n      n -= buf.length;\n    } while (n > 0);\n\n    return dst;\n  }\n\n  /**\n   * Adds new data to the parser.\n   *\n   * @param {Buffer} chunk A chunk of data\n   * @public\n   */\n  add (chunk) {\n    this._bufferedBytes += chunk.length;\n    this._buffers.push(chunk);\n    this.startLoop();\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @private\n   */\n  startLoop () {\n    this._loop = true;\n\n    do {\n      switch (this._state) {\n        case GET_INFO:\n          this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          this.getData();\n          break;\n        default: // `INFLATING`\n          this._loop = false;\n      }\n    } while (this._loop);\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @private\n   */\n  getInfo () {\n    const buf = this.consume(2);\n    if (buf === null) return;\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this.error(\n        new RangeError('Invalid WebSocket frame: RSV2 and RSV3 must be clear'),\n        1002\n      );\n      return;\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this.error(\n        new RangeError('Invalid WebSocket frame: RSV1 must be clear'),\n        1002\n      );\n      return;\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this.error(\n          new RangeError('Invalid WebSocket frame: RSV1 must be clear'),\n          1002\n        );\n        return;\n      }\n\n      if (!this._fragmented) {\n        this.error(\n          new RangeError('Invalid WebSocket frame: invalid opcode 0'),\n          1002\n        );\n        return;\n      } else {\n        this._opcode = this._fragmented;\n      }\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this.error(\n          new RangeError(\n            `Invalid WebSocket frame: invalid opcode ${this._opcode}`\n          ),\n          1002\n        );\n        return;\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this.error(\n          new RangeError('Invalid WebSocket frame: FIN must be set'),\n          1002\n        );\n        return;\n      }\n\n      if (compressed) {\n        this.error(\n          new RangeError('Invalid WebSocket frame: RSV1 must be clear'),\n          1002\n        );\n        return;\n      }\n\n      if (this._payloadLength > 0x7d) {\n        this.error(\n          new RangeError(\n            `Invalid WebSocket frame: invalid payload length ` +\n              `${this._payloadLength}`\n          ),\n          1002\n        );\n        return;\n      }\n    } else {\n      this.error(\n        new RangeError(\n          `Invalid WebSocket frame: invalid opcode ${this._opcode}`\n        ),\n        1002\n      );\n      return;\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @private\n   */\n  getPayloadLength16 () {\n    const buf = this.consume(2);\n    if (buf === null) return;\n\n    this._payloadLength = buf.readUInt16BE(0, true);\n    this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @private\n   */\n  getPayloadLength64 () {\n    const buf = this.consume(8);\n    if (buf === null) return;\n\n    const num = buf.readUInt32BE(0, true);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this.error(\n        new RangeError(\n          'Unsupported WebSocket frame: payload length > 2^53 - 1'\n        ),\n        1009\n      );\n      return;\n    }\n\n    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4, true);\n    this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @private\n   */\n  haveLength () {\n    if (this._opcode < 0x08 && this.maxPayloadExceeded(this._payloadLength)) {\n      return;\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask () {\n    this._mask = this.consume(4);\n    if (this._mask === null) return;\n\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @private\n   */\n  getData () {\n    var data = constants.EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      data = this.consume(this._payloadLength);\n      if (data === null) return;\n\n      if (this._masked) bufferUtil.unmask(data, this._mask);\n    }\n\n    if (this._opcode > 0x07) {\n      this.controlMessage(data);\n    } else if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data);\n    } else if (this.pushFragment(data)) {\n      this.dataMessage();\n    }\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @private\n   */\n  decompress (data) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) {\n        this.error(err, err.closeCode === 1009 ? 1009 : 1007);\n        return;\n      }\n\n      if (this.pushFragment(buf)) this.dataMessage();\n      this.startLoop();\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @private\n   */\n  dataMessage () {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        var data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = toBuffer(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(toBuffer(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.onmessage(data);\n      } else {\n        const buf = toBuffer(fragments, messageLength);\n\n        if (!validation.isValidUTF8(buf)) {\n          this.error(\n            new Error('Invalid WebSocket frame: invalid UTF-8 sequence'),\n            1007\n          );\n          return;\n        }\n\n        this.onmessage(buf.toString());\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @private\n   */\n  controlMessage (data) {\n    if (this._opcode === 0x08) {\n      if (data.length === 0) {\n        this._loop = false;\n        this.onclose(1005, '');\n        this.cleanup(this._cleanupCallback);\n      } else if (data.length === 1) {\n        this.error(\n          new RangeError('Invalid WebSocket frame: invalid payload length 1'),\n          1002\n        );\n      } else {\n        const code = data.readUInt16BE(0, true);\n\n        if (!validation.isValidStatusCode(code)) {\n          this.error(\n            new RangeError(\n              `Invalid WebSocket frame: invalid status code ${code}`\n            ),\n            1002\n          );\n          return;\n        }\n\n        const buf = data.slice(2);\n\n        if (!validation.isValidUTF8(buf)) {\n          this.error(\n            new Error('Invalid WebSocket frame: invalid UTF-8 sequence'),\n            1007\n          );\n          return;\n        }\n\n        this._loop = false;\n        this.onclose(code, buf.toString());\n        this.cleanup(this._cleanupCallback);\n      }\n\n      return;\n    }\n\n    if (this._opcode === 0x09) this.onping(data);\n    else this.onpong(data);\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles an error.\n   *\n   * @param {Error} err The error\n   * @param {Number} code Close code\n   * @private\n   */\n  error (err, code) {\n    this._hadError = true;\n    this._loop = false;\n    this.onerror(err, code);\n    this.cleanup(this._cleanupCallback);\n  }\n\n  /**\n   * Checks payload size, disconnects socket when it exceeds `maxPayload`.\n   *\n   * @param {Number} length Payload length\n   * @private\n   */\n  maxPayloadExceeded (length) {\n    if (length === 0 || this._maxPayload < 1) return false;\n\n    const fullLength = this._totalPayloadLength + length;\n\n    if (fullLength <= this._maxPayload) {\n      this._totalPayloadLength = fullLength;\n      return false;\n    }\n\n    this.error(new RangeError('Max payload size exceeded'), 1009);\n    return true;\n  }\n\n  /**\n   * Appends a fragment in the fragments array after checking that the sum of\n   * fragment lengths does not exceed `maxPayload`.\n   *\n   * @param {Buffer} fragment The fragment to add\n   * @return {Boolean} `true` if `maxPayload` is not exceeded, else `false`\n   * @private\n   */\n  pushFragment (fragment) {\n    if (fragment.length === 0) return true;\n\n    const totalLength = this._messageLength + fragment.length;\n\n    if (this._maxPayload < 1 || totalLength <= this._maxPayload) {\n      this._messageLength = totalLength;\n      this._fragments.push(fragment);\n      return true;\n    }\n\n    this.error(new RangeError('Max payload size exceeded'), 1009);\n    return false;\n  }\n\n  /**\n   * Releases resources used by the receiver.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  cleanup (cb) {\n    if (this._extensions === null) {\n      if (cb) cb();\n      return;\n    }\n\n    if (!this._hadError && (this._loop || this._state === INFLATING)) {\n      this._cleanupCallback = cb;\n      this._isCleaningUp = true;\n      return;\n    }\n\n    this._extensions = null;\n    this._fragments = null;\n    this._buffers = null;\n    this._mask = null;\n\n    this._cleanupCallback = null;\n    this.onmessage = null;\n    this.onclose = null;\n    this.onerror = null;\n    this.onping = null;\n    this.onpong = null;\n\n    if (cb) cb();\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Makes a buffer from a list of fragments.\n *\n * @param {Buffer[]} fragments The list of fragments composing the message\n * @param {Number} messageLength The length of the message\n * @return {Buffer}\n * @private\n */\nfunction toBuffer (fragments, messageLength) {\n  if (fragments.length === 1) return fragments[0];\n  if (fragments.length > 1) return bufferUtil.concat(fragments, messageLength);\n  return constants.EMPTY_BUFFER;\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n */\nfunction toArrayBuffer (buf) {\n  if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///73\n");

/***/ }),
/* 74 */
/*!*******************************************!*\
  !*** ./node_modules/ws/lib/validation.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\ntry {\n  const isValidUTF8 = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"utf-8-validate\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\n  exports.isValidUTF8 = typeof isValidUTF8 === 'object'\n    ? isValidUTF8.Validation.isValidUTF8 // utf-8-validate@<3.0.0\n    : isValidUTF8;\n} catch (e) /* istanbul ignore next */ {\n  exports.isValidUTF8 = () => true;\n}\n\n/**\n * Checks if a status code is allowed in a close frame.\n *\n * @param {Number} code The status code\n * @return {Boolean} `true` if the status code is valid, else `false`\n * @public\n */\nexports.isValidStatusCode = (code) => {\n  return (\n    (code >= 1000 &&\n      code <= 1013 &&\n      code !== 1004 &&\n      code !== 1005 &&\n      code !== 1006) ||\n    (code >= 3000 && code <= 4999)\n  );\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3MvbGliL3ZhbGlkYXRpb24uanM/N2RkNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnRyeSB7XG4gIGNvbnN0IGlzVmFsaWRVVEY4ID0gcmVxdWlyZSgndXRmLTgtdmFsaWRhdGUnKTtcblxuICBleHBvcnRzLmlzVmFsaWRVVEY4ID0gdHlwZW9mIGlzVmFsaWRVVEY4ID09PSAnb2JqZWN0J1xuICAgID8gaXNWYWxpZFVURjguVmFsaWRhdGlvbi5pc1ZhbGlkVVRGOCAvLyB1dGYtOC12YWxpZGF0ZUA8My4wLjBcbiAgICA6IGlzVmFsaWRVVEY4O1xufSBjYXRjaCAoZSkgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8ge1xuICBleHBvcnRzLmlzVmFsaWRVVEY4ID0gKCkgPT4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBzdGF0dXMgY29kZSBpcyBhbGxvd2VkIGluIGEgY2xvc2UgZnJhbWUuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGNvZGUgVGhlIHN0YXR1cyBjb2RlXG4gKiBAcmV0dXJuIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIHN0YXR1cyBjb2RlIGlzIHZhbGlkLCBlbHNlIGBmYWxzZWBcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5pc1ZhbGlkU3RhdHVzQ29kZSA9IChjb2RlKSA9PiB7XG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gMTAwMCAmJlxuICAgICAgY29kZSA8PSAxMDEzICYmXG4gICAgICBjb2RlICE9PSAxMDA0ICYmXG4gICAgICBjb2RlICE9PSAxMDA1ICYmXG4gICAgICBjb2RlICE9PSAxMDA2KSB8fFxuICAgIChjb2RlID49IDMwMDAgJiYgY29kZSA8PSA0OTk5KVxuICApO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dzL2xpYi92YWxpZGF0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///74\n");

/***/ }),
/* 75 */
/*!***************************************!*\
  !*** ./node_modules/ws/lib/sender.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst safeBuffer = __webpack_require__(/*! safe-buffer */ 14);\nconst crypto = __webpack_require__(/*! crypto */ 24);\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ 25);\nconst bufferUtil = __webpack_require__(/*! ./buffer-util */ 41);\nconst validation = __webpack_require__(/*! ./validation */ 74);\nconst constants = __webpack_require__(/*! ./constants */ 26);\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {net.Socket} socket The connection socket\n   * @param {Object} extensions An object containing the negotiated extensions\n   */\n  constructor (socket, extensions) {\n    this._extensions = extensions || {};\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */\n  static frame (data, options) {\n    const merge = data.length < 1024 || (options.mask && options.readOnly);\n    var offset = options.mask ? 6 : 2;\n    var payloadLength = data.length;\n\n    if (data.length >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (data.length > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(data.length, 2, true);\n    } else if (payloadLength === 127) {\n      target.writeUInt32BE(0, 2, true);\n      target.writeUInt32BE(data.length, 6, true);\n    }\n\n    if (!options.mask) {\n      target[1] = payloadLength;\n      if (merge) {\n        data.copy(target, offset);\n        return [target];\n      }\n\n      return [target, data];\n    }\n\n    const mask = crypto.randomBytes(4);\n\n    target[1] = payloadLength | 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (merge) {\n      bufferUtil.mask(data, mask, target, offset, data.length);\n      return [target];\n    }\n\n    bufferUtil.mask(data, mask, data, 0, data.length);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {(Number|undefined)} code The status code component of the body\n   * @param {String} data The message component of the body\n   * @param {Boolean} mask Specifies whether or not to mask the message\n   * @param {Function} cb Callback\n   * @public\n   */\n  close (code, data, mask, cb) {\n    var buf;\n\n    if (code === undefined) {\n      buf = constants.EMPTY_BUFFER;\n    } else if (typeof code !== 'number' || !validation.isValidStatusCode(code)) {\n      throw new TypeError('First argument must be a valid error code number');\n    } else if (data === undefined || data === '') {\n      buf = Buffer.allocUnsafe(2);\n      buf.writeUInt16BE(code, 0, true);\n    } else {\n      buf = Buffer.allocUnsafe(2 + Buffer.byteLength(data));\n      buf.writeUInt16BE(code, 0, true);\n      buf.write(data, 2);\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doClose, buf, mask, cb]);\n    } else {\n      this.doClose(buf, mask, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @private\n   */\n  doClose (data, mask, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x08,\n      mask,\n      readOnly: false\n    }), cb);\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @public\n   */\n  ping (data, mask, cb) {\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPing, data, mask, readOnly, cb]);\n    } else {\n      this.doPing(data, mask, readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a ping message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @param {Function} cb Callback\n   * @private\n   */\n  doPing (data, mask, readOnly, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x09,\n      mask,\n      readOnly\n    }), cb);\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @public\n   */\n  pong (data, mask, cb) {\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPong, data, mask, readOnly, cb]);\n    } else {\n      this.doPong(data, mask, readOnly, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a pong message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @param {Function} cb Callback\n   * @private\n   */\n  doPong (data, mask, readOnly, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x0a,\n      mask,\n      readOnly\n    }), cb);\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @public\n   */\n  send (data, options, cb) {\n    var opcode = options.binary ? 2 : 1;\n    var rsv1 = options.compress;\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (rsv1 && perMessageDeflate) {\n        rsv1 = data.length >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        fin: options.fin,\n        rsv1,\n        opcode,\n        mask: options.mask,\n        readOnly\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(Sender.frame(data, {\n        fin: options.fin,\n        rsv1: false,\n        opcode,\n        mask: options.mask,\n        readOnly\n      }), cb);\n    }\n  }\n\n  /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} compress Specifies whether or not to compress `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @param {Function} cb Callback\n   * @private\n   */\n  dispatch (data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this._deflating = false;\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue () {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[1].length;\n      params[0].apply(this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue (params) {\n    this._bufferedBytes += params[1].length;\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} cb Callback\n   * @private\n   */\n  sendFrame (list, cb) {\n    if (list.length === 2) {\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n\n/**\n * Converts an `ArrayBuffer` view into a buffer.\n *\n * @param {(DataView|TypedArray)} view The view to convert\n * @return {Buffer} Converted view\n * @private\n */\nfunction viewToBuffer (view) {\n  const buf = Buffer.from(view.buffer);\n\n  if (view.byteLength !== view.buffer.byteLength) {\n    return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);\n  }\n\n  return buf;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvd3MvbGliL3NlbmRlci5qcz9hYTIxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc2FmZUJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJyk7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxuY29uc3QgUGVyTWVzc2FnZURlZmxhdGUgPSByZXF1aXJlKCcuL3Blcm1lc3NhZ2UtZGVmbGF0ZScpO1xuY29uc3QgYnVmZmVyVXRpbCA9IHJlcXVpcmUoJy4vYnVmZmVyLXV0aWwnKTtcbmNvbnN0IHZhbGlkYXRpb24gPSByZXF1aXJlKCcuL3ZhbGlkYXRpb24nKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJyk7XG5cbmNvbnN0IEJ1ZmZlciA9IHNhZmVCdWZmZXIuQnVmZmVyO1xuXG4vKipcbiAqIEh5QmkgU2VuZGVyIGltcGxlbWVudGF0aW9uLlxuICovXG5jbGFzcyBTZW5kZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIFNlbmRlciBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtuZXQuU29ja2V0fSBzb2NrZXQgVGhlIGNvbm5lY3Rpb24gc29ja2V0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBleHRlbnNpb25zIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBuZWdvdGlhdGVkIGV4dGVuc2lvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yIChzb2NrZXQsIGV4dGVuc2lvbnMpIHtcbiAgICB0aGlzLl9leHRlbnNpb25zID0gZXh0ZW5zaW9ucyB8fCB7fTtcbiAgICB0aGlzLl9zb2NrZXQgPSBzb2NrZXQ7XG5cbiAgICB0aGlzLl9maXJzdEZyYWdtZW50ID0gdHJ1ZTtcbiAgICB0aGlzLl9jb21wcmVzcyA9IGZhbHNlO1xuXG4gICAgdGhpcy5fYnVmZmVyZWRCeXRlcyA9IDA7XG4gICAgdGhpcy5fZGVmbGF0aW5nID0gZmFsc2U7XG4gICAgdGhpcy5fcXVldWUgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGcmFtZXMgYSBwaWVjZSBvZiBkYXRhIGFjY29yZGluZyB0byB0aGUgSHlCaSBXZWJTb2NrZXQgcHJvdG9jb2wuXG4gICAqXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhIFRoZSBkYXRhIHRvIGZyYW1lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLm9wY29kZSBUaGUgb3Bjb2RlXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5yZWFkT25seSBTcGVjaWZpZXMgd2hldGhlciBgZGF0YWAgY2FuIGJlIG1vZGlmaWVkXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5maW4gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIHNldCB0aGUgRklOIGJpdFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMubWFzayBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gbWFzayBgZGF0YWBcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLnJzdjEgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIHNldCB0aGUgUlNWMSBiaXRcbiAgICogQHJldHVybiB7QnVmZmVyW119IFRoZSBmcmFtZWQgZGF0YSBhcyBhIGxpc3Qgb2YgYEJ1ZmZlcmAgaW5zdGFuY2VzXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHN0YXRpYyBmcmFtZSAoZGF0YSwgb3B0aW9ucykge1xuICAgIGNvbnN0IG1lcmdlID0gZGF0YS5sZW5ndGggPCAxMDI0IHx8IChvcHRpb25zLm1hc2sgJiYgb3B0aW9ucy5yZWFkT25seSk7XG4gICAgdmFyIG9mZnNldCA9IG9wdGlvbnMubWFzayA/IDYgOiAyO1xuICAgIHZhciBwYXlsb2FkTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgICBpZiAoZGF0YS5sZW5ndGggPj0gNjU1MzYpIHtcbiAgICAgIG9mZnNldCArPSA4O1xuICAgICAgcGF5bG9hZExlbmd0aCA9IDEyNztcbiAgICB9IGVsc2UgaWYgKGRhdGEubGVuZ3RoID4gMTI1KSB7XG4gICAgICBvZmZzZXQgKz0gMjtcbiAgICAgIHBheWxvYWRMZW5ndGggPSAxMjY7XG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG1lcmdlID8gZGF0YS5sZW5ndGggKyBvZmZzZXQgOiBvZmZzZXQpO1xuXG4gICAgdGFyZ2V0WzBdID0gb3B0aW9ucy5maW4gPyBvcHRpb25zLm9wY29kZSB8IDB4ODAgOiBvcHRpb25zLm9wY29kZTtcbiAgICBpZiAob3B0aW9ucy5yc3YxKSB0YXJnZXRbMF0gfD0gMHg0MDtcblxuICAgIGlmIChwYXlsb2FkTGVuZ3RoID09PSAxMjYpIHtcbiAgICAgIHRhcmdldC53cml0ZVVJbnQxNkJFKGRhdGEubGVuZ3RoLCAyLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHBheWxvYWRMZW5ndGggPT09IDEyNykge1xuICAgICAgdGFyZ2V0LndyaXRlVUludDMyQkUoMCwgMiwgdHJ1ZSk7XG4gICAgICB0YXJnZXQud3JpdGVVSW50MzJCRShkYXRhLmxlbmd0aCwgNiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLm1hc2spIHtcbiAgICAgIHRhcmdldFsxXSA9IHBheWxvYWRMZW5ndGg7XG4gICAgICBpZiAobWVyZ2UpIHtcbiAgICAgICAgZGF0YS5jb3B5KHRhcmdldCwgb2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIFt0YXJnZXRdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW3RhcmdldCwgZGF0YV07XG4gICAgfVxuXG4gICAgY29uc3QgbWFzayA9IGNyeXB0by5yYW5kb21CeXRlcyg0KTtcblxuICAgIHRhcmdldFsxXSA9IHBheWxvYWRMZW5ndGggfCAweDgwO1xuICAgIHRhcmdldFtvZmZzZXQgLSA0XSA9IG1hc2tbMF07XG4gICAgdGFyZ2V0W29mZnNldCAtIDNdID0gbWFza1sxXTtcbiAgICB0YXJnZXRbb2Zmc2V0IC0gMl0gPSBtYXNrWzJdO1xuICAgIHRhcmdldFtvZmZzZXQgLSAxXSA9IG1hc2tbM107XG5cbiAgICBpZiAobWVyZ2UpIHtcbiAgICAgIGJ1ZmZlclV0aWwubWFzayhkYXRhLCBtYXNrLCB0YXJnZXQsIG9mZnNldCwgZGF0YS5sZW5ndGgpO1xuICAgICAgcmV0dXJuIFt0YXJnZXRdO1xuICAgIH1cblxuICAgIGJ1ZmZlclV0aWwubWFzayhkYXRhLCBtYXNrLCBkYXRhLCAwLCBkYXRhLmxlbmd0aCk7XG4gICAgcmV0dXJuIFt0YXJnZXQsIGRhdGFdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgY2xvc2UgbWVzc2FnZSB0byB0aGUgb3RoZXIgcGVlci5cbiAgICpcbiAgICogQHBhcmFtIHsoTnVtYmVyfHVuZGVmaW5lZCl9IGNvZGUgVGhlIHN0YXR1cyBjb2RlIGNvbXBvbmVudCBvZiB0aGUgYm9keVxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSBUaGUgbWVzc2FnZSBjb21wb25lbnQgb2YgdGhlIGJvZHlcbiAgICogQHBhcmFtIHtCb29sZWFufSBtYXNrIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBtYXNrIHRoZSBtZXNzYWdlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGNsb3NlIChjb2RlLCBkYXRhLCBtYXNrLCBjYikge1xuICAgIHZhciBidWY7XG5cbiAgICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBidWYgPSBjb25zdGFudHMuRU1QVFlfQlVGRkVSO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvZGUgIT09ICdudW1iZXInIHx8ICF2YWxpZGF0aW9uLmlzVmFsaWRTdGF0dXNDb2RlKGNvZGUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgdmFsaWQgZXJyb3IgY29kZSBudW1iZXInKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCB8fCBkYXRhID09PSAnJykge1xuICAgICAgYnVmID0gQnVmZmVyLmFsbG9jVW5zYWZlKDIpO1xuICAgICAgYnVmLndyaXRlVUludDE2QkUoY29kZSwgMCwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZiA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgyICsgQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkpO1xuICAgICAgYnVmLndyaXRlVUludDE2QkUoY29kZSwgMCwgdHJ1ZSk7XG4gICAgICBidWYud3JpdGUoZGF0YSwgMik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2RlZmxhdGluZykge1xuICAgICAgdGhpcy5lbnF1ZXVlKFt0aGlzLmRvQ2xvc2UsIGJ1ZiwgbWFzaywgY2JdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb0Nsb3NlKGJ1ZiwgbWFzaywgY2IpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGcmFtZXMgYW5kIHNlbmRzIGEgY2xvc2UgbWVzc2FnZS5cbiAgICpcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGRhdGEgVGhlIG1lc3NhZ2UgdG8gc2VuZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1hc2sgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2sgYGRhdGFgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkb0Nsb3NlIChkYXRhLCBtYXNrLCBjYikge1xuICAgIHRoaXMuc2VuZEZyYW1lKFNlbmRlci5mcmFtZShkYXRhLCB7XG4gICAgICBmaW46IHRydWUsXG4gICAgICByc3YxOiBmYWxzZSxcbiAgICAgIG9wY29kZTogMHgwOCxcbiAgICAgIG1hc2ssXG4gICAgICByZWFkT25seTogZmFsc2VcbiAgICB9KSwgY2IpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgcGluZyBtZXNzYWdlIHRvIHRoZSBvdGhlciBwZWVyLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1lc3NhZ2UgdG8gc2VuZFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG1hc2sgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIG1hc2sgYGRhdGFgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHBpbmcgKGRhdGEsIG1hc2ssIGNiKSB7XG4gICAgdmFyIHJlYWRPbmx5ID0gdHJ1ZTtcblxuICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpKSB7XG4gICAgICAgIGRhdGEgPSB2aWV3VG9CdWZmZXIoZGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhID0gQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgICAgIHJlYWRPbmx5ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2RlZmxhdGluZykge1xuICAgICAgdGhpcy5lbnF1ZXVlKFt0aGlzLmRvUGluZywgZGF0YSwgbWFzaywgcmVhZE9ubHksIGNiXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9QaW5nKGRhdGEsIG1hc2ssIHJlYWRPbmx5LCBjYik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZyYW1lcyBhbmQgc2VuZHMgYSBwaW5nIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWVzc2FnZSB0byBzZW5kXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbWFzayBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gbWFzayBgZGF0YWBcbiAgICogQHBhcmFtIHtCb29sZWFufSByZWFkT25seSBTcGVjaWZpZXMgd2hldGhlciBgZGF0YWAgY2FuIGJlIG1vZGlmaWVkXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIENhbGxiYWNrXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBkb1BpbmcgKGRhdGEsIG1hc2ssIHJlYWRPbmx5LCBjYikge1xuICAgIHRoaXMuc2VuZEZyYW1lKFNlbmRlci5mcmFtZShkYXRhLCB7XG4gICAgICBmaW46IHRydWUsXG4gICAgICByc3YxOiBmYWxzZSxcbiAgICAgIG9wY29kZTogMHgwOSxcbiAgICAgIG1hc2ssXG4gICAgICByZWFkT25seVxuICAgIH0pLCBjYik7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBwb25nIG1lc3NhZ2UgdG8gdGhlIG90aGVyIHBlZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZGF0YSBUaGUgbWVzc2FnZSB0byBzZW5kXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gbWFzayBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gbWFzayBgZGF0YWBcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcG9uZyAoZGF0YSwgbWFzaywgY2IpIHtcbiAgICB2YXIgcmVhZE9ubHkgPSB0cnVlO1xuXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IHZpZXdUb0J1ZmZlcihkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgICAgICAgcmVhZE9ubHkgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZGVmbGF0aW5nKSB7XG4gICAgICB0aGlzLmVucXVldWUoW3RoaXMuZG9Qb25nLCBkYXRhLCBtYXNrLCByZWFkT25seSwgY2JdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kb1BvbmcoZGF0YSwgbWFzaywgcmVhZE9ubHksIGNiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRnJhbWVzIGFuZCBzZW5kcyBhIHBvbmcgbWVzc2FnZS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXNzYWdlIHRvIHNlbmRcbiAgICogQHBhcmFtIHtCb29sZWFufSBtYXNrIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBtYXNrIGBkYXRhYFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IHJlYWRPbmx5IFNwZWNpZmllcyB3aGV0aGVyIGBkYXRhYCBjYW4gYmUgbW9kaWZpZWRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRvUG9uZyAoZGF0YSwgbWFzaywgcmVhZE9ubHksIGNiKSB7XG4gICAgdGhpcy5zZW5kRnJhbWUoU2VuZGVyLmZyYW1lKGRhdGEsIHtcbiAgICAgIGZpbjogdHJ1ZSxcbiAgICAgIHJzdjE6IGZhbHNlLFxuICAgICAgb3Bjb2RlOiAweDBhLFxuICAgICAgbWFzayxcbiAgICAgIHJlYWRPbmx5XG4gICAgfSksIGNiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIGRhdGEgbWVzc2FnZSB0byB0aGUgb3RoZXIgcGVlci5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXNzYWdlIHRvIHNlbmRcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvYmplY3RcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmNvbXByZXNzIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBjb21wcmVzcyBgZGF0YWBcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmJpbmFyeSBTcGVjaWZpZXMgd2hldGhlciBgZGF0YWAgaXMgYmluYXJ5IG9yIHRleHRcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmZpbiBTcGVjaWZpZXMgd2hldGhlciB0aGUgZnJhZ21lbnQgaXMgdGhlIGxhc3Qgb25lXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5tYXNrIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBtYXNrIGBkYXRhYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBDYWxsYmFja1xuICAgKiBAcHVibGljXG4gICAqL1xuICBzZW5kIChkYXRhLCBvcHRpb25zLCBjYikge1xuICAgIHZhciBvcGNvZGUgPSBvcHRpb25zLmJpbmFyeSA/IDIgOiAxO1xuICAgIHZhciByc3YxID0gb3B0aW9ucy5jb21wcmVzcztcbiAgICB2YXIgcmVhZE9ubHkgPSB0cnVlO1xuXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpIHtcbiAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoZGF0YSkpIHtcbiAgICAgICAgZGF0YSA9IHZpZXdUb0J1ZmZlcihkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBCdWZmZXIuZnJvbShkYXRhKTtcbiAgICAgICAgcmVhZE9ubHkgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwZXJNZXNzYWdlRGVmbGF0ZSA9IHRoaXMuX2V4dGVuc2lvbnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV07XG5cbiAgICBpZiAodGhpcy5fZmlyc3RGcmFnbWVudCkge1xuICAgICAgdGhpcy5fZmlyc3RGcmFnbWVudCA9IGZhbHNlO1xuICAgICAgaWYgKHJzdjEgJiYgcGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgcnN2MSA9IGRhdGEubGVuZ3RoID49IHBlck1lc3NhZ2VEZWZsYXRlLl90aHJlc2hvbGQ7XG4gICAgICB9XG4gICAgICB0aGlzLl9jb21wcmVzcyA9IHJzdjE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJzdjEgPSBmYWxzZTtcbiAgICAgIG9wY29kZSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZmluKSB0aGlzLl9maXJzdEZyYWdtZW50ID0gdHJ1ZTtcblxuICAgIGlmIChwZXJNZXNzYWdlRGVmbGF0ZSkge1xuICAgICAgY29uc3Qgb3B0cyA9IHtcbiAgICAgICAgZmluOiBvcHRpb25zLmZpbixcbiAgICAgICAgcnN2MSxcbiAgICAgICAgb3Bjb2RlLFxuICAgICAgICBtYXNrOiBvcHRpb25zLm1hc2ssXG4gICAgICAgIHJlYWRPbmx5XG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5fZGVmbGF0aW5nKSB7XG4gICAgICAgIHRoaXMuZW5xdWV1ZShbdGhpcy5kaXNwYXRjaCwgZGF0YSwgdGhpcy5fY29tcHJlc3MsIG9wdHMsIGNiXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKGRhdGEsIHRoaXMuX2NvbXByZXNzLCBvcHRzLCBjYik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VuZEZyYW1lKFNlbmRlci5mcmFtZShkYXRhLCB7XG4gICAgICAgIGZpbjogb3B0aW9ucy5maW4sXG4gICAgICAgIHJzdjE6IGZhbHNlLFxuICAgICAgICBvcGNvZGUsXG4gICAgICAgIG1hc2s6IG9wdGlvbnMubWFzayxcbiAgICAgICAgcmVhZE9ubHlcbiAgICAgIH0pLCBjYik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYSBkYXRhIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7QnVmZmVyfSBkYXRhIFRoZSBtZXNzYWdlIHRvIHNlbmRcbiAgICogQHBhcmFtIHtCb29sZWFufSBjb21wcmVzcyBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gY29tcHJlc3MgYGRhdGFgXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLm9wY29kZSBUaGUgb3Bjb2RlXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5yZWFkT25seSBTcGVjaWZpZXMgd2hldGhlciBgZGF0YWAgY2FuIGJlIG1vZGlmaWVkXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5maW4gU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIHNldCB0aGUgRklOIGJpdFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMubWFzayBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdG8gbWFzayBgZGF0YWBcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLnJzdjEgU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRvIHNldCB0aGUgUlNWMSBiaXRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRpc3BhdGNoIChkYXRhLCBjb21wcmVzcywgb3B0aW9ucywgY2IpIHtcbiAgICBpZiAoIWNvbXByZXNzKSB7XG4gICAgICB0aGlzLnNlbmRGcmFtZShTZW5kZXIuZnJhbWUoZGF0YSwgb3B0aW9ucyksIGNiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBwZXJNZXNzYWdlRGVmbGF0ZSA9IHRoaXMuX2V4dGVuc2lvbnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV07XG5cbiAgICB0aGlzLl9kZWZsYXRpbmcgPSB0cnVlO1xuICAgIHBlck1lc3NhZ2VEZWZsYXRlLmNvbXByZXNzKGRhdGEsIG9wdGlvbnMuZmluLCAoXywgYnVmKSA9PiB7XG4gICAgICBvcHRpb25zLnJlYWRPbmx5ID0gZmFsc2U7XG4gICAgICB0aGlzLnNlbmRGcmFtZShTZW5kZXIuZnJhbWUoYnVmLCBvcHRpb25zKSwgY2IpO1xuICAgICAgdGhpcy5fZGVmbGF0aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmRlcXVldWUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlcyBxdWV1ZWQgc2VuZCBvcGVyYXRpb25zLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGVxdWV1ZSAoKSB7XG4gICAgd2hpbGUgKCF0aGlzLl9kZWZsYXRpbmcgJiYgdGhpcy5fcXVldWUubGVuZ3RoKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLl9xdWV1ZS5zaGlmdCgpO1xuXG4gICAgICB0aGlzLl9idWZmZXJlZEJ5dGVzIC09IHBhcmFtc1sxXS5sZW5ndGg7XG4gICAgICBwYXJhbXNbMF0uYXBwbHkodGhpcywgcGFyYW1zLnNsaWNlKDEpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBzZW5kIG9wZXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gcGFyYW1zIFNlbmQgb3BlcmF0aW9uIHBhcmFtZXRlcnMuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBlbnF1ZXVlIChwYXJhbXMpIHtcbiAgICB0aGlzLl9idWZmZXJlZEJ5dGVzICs9IHBhcmFtc1sxXS5sZW5ndGg7XG4gICAgdGhpcy5fcXVldWUucHVzaChwYXJhbXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgZnJhbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7QnVmZmVyW119IGxpc3QgVGhlIGZyYW1lIHRvIHNlbmRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNlbmRGcmFtZSAobGlzdCwgY2IpIHtcbiAgICBpZiAobGlzdC5sZW5ndGggPT09IDIpIHtcbiAgICAgIHRoaXMuX3NvY2tldC53cml0ZShsaXN0WzBdKTtcbiAgICAgIHRoaXMuX3NvY2tldC53cml0ZShsaXN0WzFdLCBjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3NvY2tldC53cml0ZShsaXN0WzBdLCBjYik7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU2VuZGVyO1xuXG4vKipcbiAqIENvbnZlcnRzIGFuIGBBcnJheUJ1ZmZlcmAgdmlldyBpbnRvIGEgYnVmZmVyLlxuICpcbiAqIEBwYXJhbSB7KERhdGFWaWV3fFR5cGVkQXJyYXkpfSB2aWV3IFRoZSB2aWV3IHRvIGNvbnZlcnRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gQ29udmVydGVkIHZpZXdcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHZpZXdUb0J1ZmZlciAodmlldykge1xuICBjb25zdCBidWYgPSBCdWZmZXIuZnJvbSh2aWV3LmJ1ZmZlcik7XG5cbiAgaWYgKHZpZXcuYnl0ZUxlbmd0aCAhPT0gdmlldy5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiBidWYuc2xpY2Uodmlldy5ieXRlT2Zmc2V0LCB2aWV3LmJ5dGVPZmZzZXQgKyB2aWV3LmJ5dGVMZW5ndGgpO1xuICB9XG5cbiAgcmV0dXJuIGJ1Zjtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dzL2xpYi9zZW5kZXIuanNcbi8vIG1vZHVsZSBpZCA9IDc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///75\n");

/***/ }),
/* 76 */
/*!*********************************************************************!*\
  !*** ./node_modules/prism-media/src/transcoders/MediaTranscoder.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Ffmpeg = __webpack_require__(/*! ./ffmpeg/Ffmpeg */ 159);\r\n\r\nconst transcoders = [\r\n  'ffmpeg',\r\n];\r\n\r\nclass MediaTranscoder {\r\n  constructor(prism) {\r\n    this.prism = prism;\r\n    this.ffmpeg = new Ffmpeg(this);\r\n  }\r\n\r\n  static verifyOptions(options) {\r\n    if (!options) throw new Error('Options must be passed to MediaTranscoder.transcode()');\r\n    if (!options.type) throw new Error('Options.type must be passed to MediaTranscoder.transcode()');\r\n    if (!transcoders.includes(options.type)) throw new Error(`Options.type must be: ${transcoders.join(' ')}`);\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Transcodes a media stream based on specified options\r\n   * @param {Object} options the options to use when transcoding\r\n   * @returns {ReadableStream} the transcodeed stream\r\n   */\r\n  transcode(options) {\r\n    options = MediaTranscoder.verifyOptions(options);\r\n    return this[options.type].transcode(options);\r\n  }\r\n}\r\n\r\nmodule.exports = MediaTranscoder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJpc20tbWVkaWEvc3JjL3RyYW5zY29kZXJzL01lZGlhVHJhbnNjb2Rlci5qcz9jMTYwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEZmbXBlZyA9IHJlcXVpcmUoJy4vZmZtcGVnL0ZmbXBlZycpO1xyXG5cclxuY29uc3QgdHJhbnNjb2RlcnMgPSBbXHJcbiAgJ2ZmbXBlZycsXHJcbl07XHJcblxyXG5jbGFzcyBNZWRpYVRyYW5zY29kZXIge1xyXG4gIGNvbnN0cnVjdG9yKHByaXNtKSB7XHJcbiAgICB0aGlzLnByaXNtID0gcHJpc207XHJcbiAgICB0aGlzLmZmbXBlZyA9IG5ldyBGZm1wZWcodGhpcyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdmVyaWZ5T3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICBpZiAoIW9wdGlvbnMpIHRocm93IG5ldyBFcnJvcignT3B0aW9ucyBtdXN0IGJlIHBhc3NlZCB0byBNZWRpYVRyYW5zY29kZXIudHJhbnNjb2RlKCknKTtcclxuICAgIGlmICghb3B0aW9ucy50eXBlKSB0aHJvdyBuZXcgRXJyb3IoJ09wdGlvbnMudHlwZSBtdXN0IGJlIHBhc3NlZCB0byBNZWRpYVRyYW5zY29kZXIudHJhbnNjb2RlKCknKTtcclxuICAgIGlmICghdHJhbnNjb2RlcnMuaW5jbHVkZXMob3B0aW9ucy50eXBlKSkgdGhyb3cgbmV3IEVycm9yKGBPcHRpb25zLnR5cGUgbXVzdCBiZTogJHt0cmFuc2NvZGVycy5qb2luKCcgJyl9YCk7XHJcbiAgICByZXR1cm4gb3B0aW9ucztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYW5zY29kZXMgYSBtZWRpYSBzdHJlYW0gYmFzZWQgb24gc3BlY2lmaWVkIG9wdGlvbnNcclxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgb3B0aW9ucyB0byB1c2Ugd2hlbiB0cmFuc2NvZGluZ1xyXG4gICAqIEByZXR1cm5zIHtSZWFkYWJsZVN0cmVhbX0gdGhlIHRyYW5zY29kZWVkIHN0cmVhbVxyXG4gICAqL1xyXG4gIHRyYW5zY29kZShvcHRpb25zKSB7XHJcbiAgICBvcHRpb25zID0gTWVkaWFUcmFuc2NvZGVyLnZlcmlmeU9wdGlvbnMob3B0aW9ucyk7XHJcbiAgICByZXR1cm4gdGhpc1tvcHRpb25zLnR5cGVdLnRyYW5zY29kZShvcHRpb25zKTtcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gTWVkaWFUcmFuc2NvZGVyO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wcmlzbS1tZWRpYS9zcmMvdHJhbnNjb2RlcnMvTWVkaWFUcmFuc2NvZGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///76\n");

/***/ }),
/* 77 */
/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/util/VolumeInterface.js ***!
  \**************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const EventEmitter = __webpack_require__(/*! events */ 5);\n\n/**\n * An interface class for volume transformation.\n * @extends {EventEmitter}\n */\nclass VolumeInterface extends EventEmitter {\n  constructor({ volume = 0 } = {}) {\n    super();\n    this.setVolume(volume || 1);\n  }\n\n  /**\n   * The current volume of the broadcast\n   * @readonly\n   * @type {number}\n   */\n  get volume() {\n    return this._volume;\n  }\n\n  /**\n   * The current volume of the broadcast in decibels\n   * @readonly\n   * @type {number}\n   */\n  get volumeDecibels() {\n    return Math.log10(this._volume) * 20;\n  }\n\n  /**\n   * The current volume of the broadcast from a logarithmic scale\n   * @readonly\n   * @type {number}\n   */\n  get volumeLogarithmic() {\n    return Math.pow(this._volume, 1 / 1.660964);\n  }\n\n  applyVolume(buffer, volume) {\n    volume = volume || this._volume;\n    if (volume === 1) return buffer;\n\n    const out = new Buffer(buffer.length);\n    for (let i = 0; i < buffer.length; i += 2) {\n      if (i >= buffer.length - 1) break;\n      const uint = Math.min(32767, Math.max(-32767, Math.floor(volume * buffer.readInt16LE(i))));\n      out.writeInt16LE(uint, i);\n    }\n\n    return out;\n  }\n\n  /**\n   * Sets the volume relative to the input stream - i.e. 1 is normal, 0.5 is half, 2 is double.\n   * @param {number} volume The volume that you want to set\n   */\n  setVolume(volume) {\n    /**\n     * Emitted when the volume of this interface changes.\n     * @event VolumeInterface#volumeChange\n     * @param {number} oldVolume The old volume of this interface\n     * @param {number} newVolume The new volume of this interface\n     */\n    this.emit('volumeChange', this._volume, volume);\n    this._volume = volume;\n  }\n\n  /**\n   * Set the volume in decibels.\n   * @param {number} db The decibels\n   */\n  setVolumeDecibels(db) {\n    this.setVolume(Math.pow(10, db / 20));\n  }\n\n  /**\n   * Set the volume so that a perceived value of 0.5 is half the perceived volume etc.\n   * @param {number} value The value for the volume\n   */\n  setVolumeLogarithmic(value) {\n    this.setVolume(Math.pow(value, 1.660964));\n  }\n}\n\nmodule.exports = VolumeInterface;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL3V0aWwvVm9sdW1lSW50ZXJmYWNlLmpzPzhmZWIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIGNsYXNzIGZvciB2b2x1bWUgdHJhbnNmb3JtYXRpb24uXG4gKiBAZXh0ZW5kcyB7RXZlbnRFbWl0dGVyfVxuICovXG5jbGFzcyBWb2x1bWVJbnRlcmZhY2UgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3Rvcih7IHZvbHVtZSA9IDAgfSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnNldFZvbHVtZSh2b2x1bWUgfHwgMSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgdm9sdW1lIG9mIHRoZSBicm9hZGNhc3RcbiAgICogQHJlYWRvbmx5XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgdm9sdW1lKCkge1xuICAgIHJldHVybiB0aGlzLl92b2x1bWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGN1cnJlbnQgdm9sdW1lIG9mIHRoZSBicm9hZGNhc3QgaW4gZGVjaWJlbHNcbiAgICogQHJlYWRvbmx5XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgdm9sdW1lRGVjaWJlbHMoKSB7XG4gICAgcmV0dXJuIE1hdGgubG9nMTAodGhpcy5fdm9sdW1lKSAqIDIwO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHZvbHVtZSBvZiB0aGUgYnJvYWRjYXN0IGZyb20gYSBsb2dhcml0aG1pYyBzY2FsZVxuICAgKiBAcmVhZG9ubHlcbiAgICogQHR5cGUge251bWJlcn1cbiAgICovXG4gIGdldCB2b2x1bWVMb2dhcml0aG1pYygpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codGhpcy5fdm9sdW1lLCAxIC8gMS42NjA5NjQpO1xuICB9XG5cbiAgYXBwbHlWb2x1bWUoYnVmZmVyLCB2b2x1bWUpIHtcbiAgICB2b2x1bWUgPSB2b2x1bWUgfHwgdGhpcy5fdm9sdW1lO1xuICAgIGlmICh2b2x1bWUgPT09IDEpIHJldHVybiBidWZmZXI7XG5cbiAgICBjb25zdCBvdXQgPSBuZXcgQnVmZmVyKGJ1ZmZlci5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmZmVyLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBpZiAoaSA+PSBidWZmZXIubGVuZ3RoIC0gMSkgYnJlYWs7XG4gICAgICBjb25zdCB1aW50ID0gTWF0aC5taW4oMzI3NjcsIE1hdGgubWF4KC0zMjc2NywgTWF0aC5mbG9vcih2b2x1bWUgKiBidWZmZXIucmVhZEludDE2TEUoaSkpKSk7XG4gICAgICBvdXQud3JpdGVJbnQxNkxFKHVpbnQsIGkpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdm9sdW1lIHJlbGF0aXZlIHRvIHRoZSBpbnB1dCBzdHJlYW0gLSBpLmUuIDEgaXMgbm9ybWFsLCAwLjUgaXMgaGFsZiwgMiBpcyBkb3VibGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2b2x1bWUgVGhlIHZvbHVtZSB0aGF0IHlvdSB3YW50IHRvIHNldFxuICAgKi9cbiAgc2V0Vm9sdW1lKHZvbHVtZSkge1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgd2hlbiB0aGUgdm9sdW1lIG9mIHRoaXMgaW50ZXJmYWNlIGNoYW5nZXMuXG4gICAgICogQGV2ZW50IFZvbHVtZUludGVyZmFjZSN2b2x1bWVDaGFuZ2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2xkVm9sdW1lIFRoZSBvbGQgdm9sdW1lIG9mIHRoaXMgaW50ZXJmYWNlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5ld1ZvbHVtZSBUaGUgbmV3IHZvbHVtZSBvZiB0aGlzIGludGVyZmFjZVxuICAgICAqL1xuICAgIHRoaXMuZW1pdCgndm9sdW1lQ2hhbmdlJywgdGhpcy5fdm9sdW1lLCB2b2x1bWUpO1xuICAgIHRoaXMuX3ZvbHVtZSA9IHZvbHVtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZvbHVtZSBpbiBkZWNpYmVscy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGRiIFRoZSBkZWNpYmVsc1xuICAgKi9cbiAgc2V0Vm9sdW1lRGVjaWJlbHMoZGIpIHtcbiAgICB0aGlzLnNldFZvbHVtZShNYXRoLnBvdygxMCwgZGIgLyAyMCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdm9sdW1lIHNvIHRoYXQgYSBwZXJjZWl2ZWQgdmFsdWUgb2YgMC41IGlzIGhhbGYgdGhlIHBlcmNlaXZlZCB2b2x1bWUgZXRjLlxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgVGhlIHZhbHVlIGZvciB0aGUgdm9sdW1lXG4gICAqL1xuICBzZXRWb2x1bWVMb2dhcml0aG1pYyh2YWx1ZSkge1xuICAgIHRoaXMuc2V0Vm9sdW1lKE1hdGgucG93KHZhbHVlLCAxLjY2MDk2NCkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVm9sdW1lSW50ZXJmYWNlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL3V0aWwvVm9sdW1lSW50ZXJmYWNlLmpzXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///77\n");

/***/ }),
/* 78 */
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/VoiceBroadcast.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const VolumeInterface = __webpack_require__(/*! ./util/VolumeInterface */ 77);\nconst Prism = __webpack_require__(/*! prism-media */ 42);\nconst OpusEncoders = __webpack_require__(/*! ./opus/OpusEngineList */ 44);\nconst Collection = __webpack_require__(/*! ../../util/Collection */ 3);\n\nconst ffmpegArguments = [\n  '-analyzeduration', '0',\n  '-loglevel', '0',\n  '-f', 's16le',\n  '-ar', '48000',\n  '-ac', '2',\n];\n\n/**\n * A voice broadcast can be played across multiple voice connections for improved shared-stream efficiency.\n *\n * Example usage:\n * ```js\n * const broadcast = client.createVoiceBroadcast();\n * broadcast.playFile('./music.mp3');\n * // Play \"music.mp3\" in all voice connections that the client is in\n * for (const connection of client.voiceConnections.values()) {\n *   connection.playBroadcast(broadcast);\n * }\n * ```\n * @implements {VolumeInterface}\n */\nclass VoiceBroadcast extends VolumeInterface {\n  constructor(client) {\n    super();\n    /**\n     * The client that created the broadcast\n     * @type {Client}\n     */\n    this.client = client;\n    this._dispatchers = new Collection();\n    this._encoders = new Collection();\n    /**\n     * The audio transcoder that this broadcast uses\n     * @type {Prism}\n     */\n    this.prism = new Prism();\n    /**\n     * The current audio transcoder that is being used\n     * @type {Object}\n     */\n    this.currentTranscoder = null;\n    this.tickInterval = null;\n    this._volume = 1;\n  }\n\n  /**\n   * An array of subscribed dispatchers\n   * @type {StreamDispatcher[]}\n   * @readonly\n   */\n  get dispatchers() {\n    let d = [];\n    for (const container of this._dispatchers.values()) {\n      d = d.concat(Array.from(container.values()));\n    }\n    return d;\n  }\n\n  get _playableStream() {\n    const currentTranscoder = this.currentTranscoder;\n    if (!currentTranscoder) return null;\n    const transcoder = currentTranscoder.transcoder;\n    const options = currentTranscoder.options;\n    return (transcoder && transcoder.output) || options.stream;\n  }\n\n  unregisterDispatcher(dispatcher, old) {\n    const volume = old || dispatcher.volume;\n\n    /**\n     * Emitted whenever a stream dispatcher unsubscribes from the broadcast.\n     * @event VoiceBroadcast#unsubscribe\n     * @param {StreamDispatcher} dispatcher The unsubscribed dispatcher\n     */\n    this.emit('unsubscribe', dispatcher);\n    for (const container of this._dispatchers.values()) {\n      container.delete(dispatcher);\n\n      if (!container.size) {\n        this._encoders.get(volume).destroy();\n        this._dispatchers.delete(volume);\n        this._encoders.delete(volume);\n      }\n    }\n  }\n\n  registerDispatcher(dispatcher) {\n    if (!this._dispatchers.has(dispatcher.volume)) {\n      this._dispatchers.set(dispatcher.volume, new Set());\n      this._encoders.set(dispatcher.volume, OpusEncoders.fetch());\n    }\n    const container = this._dispatchers.get(dispatcher.volume);\n    if (!container.has(dispatcher)) {\n      container.add(dispatcher);\n      dispatcher.once('end', () => this.unregisterDispatcher(dispatcher));\n      dispatcher.on('volumeChange', (o, n) => {\n        this.unregisterDispatcher(dispatcher, o);\n        if (!this._dispatchers.has(n)) {\n          this._dispatchers.set(n, new Set());\n          this._encoders.set(n, OpusEncoders.fetch());\n        }\n        this._dispatchers.get(n).add(dispatcher);\n      });\n      /**\n       * Emitted whenever a stream dispatcher subscribes to the broadcast.\n       * @event VoiceBroadcast#subscribe\n       * @param {StreamDispatcher} dispatcher The subscribed dispatcher\n       */\n      this.emit('subscribe', dispatcher);\n    }\n  }\n\n  killCurrentTranscoder() {\n    if (this.currentTranscoder) {\n      if (this.currentTranscoder.transcoder) this.currentTranscoder.transcoder.kill();\n      this.currentTranscoder = null;\n      this.emit('end');\n    }\n  }\n\n  /**\n   * Plays any audio stream across the broadcast.\n   * @param {ReadableStream} stream The audio stream to play\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {VoiceBroadcast}\n   * @example\n   * // Play streams using ytdl-core\n   * const ytdl = require('ytdl-core');\n   * const streamOptions = { seek: 0, volume: 1 };\n   * const broadcast = client.createVoiceBroadcast();\n   *\n   * voiceChannel.join()\n   *   .then(connection => {\n   *     const stream = ytdl('https://www.youtube.com/watch?v=XAWgeLF9EVQ', { filter : 'audioonly' });\n   *     broadcast.playStream(stream);\n   *     const dispatcher = connection.playBroadcast(broadcast);\n   *   })\n   *   .catch(console.error);\n   */\n  playStream(stream, options = {}) {\n    this.setVolume(options.volume || 1);\n    return this._playTranscodable(stream, options);\n  }\n\n  /**\n   * Play the given file in the voice connection.\n   * @param {string} file The absolute path to the file\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   * @example\n   * // Play files natively\n   * const broadcast = client.createVoiceBroadcast();\n   *\n   * voiceChannel.join()\n   *   .then(connection => {\n   *     broadcast.playFile('C:/Users/Discord/Desktop/music.mp3');\n   *     const dispatcher = connection.playBroadcast(broadcast);\n   *   })\n   *   .catch(console.error);\n   */\n  playFile(file, options = {}) {\n    this.setVolume(options.volume || 1);\n    return this._playTranscodable(`file:${file}`, options);\n  }\n\n  _playTranscodable(media, options) {\n    this.killCurrentTranscoder();\n    const transcoder = this.prism.transcode({\n      type: 'ffmpeg',\n      media,\n      ffmpegArguments: ffmpegArguments.concat(['-ss', String(options.seek || 0)]),\n    });\n    /**\n     * Emitted whenever an error occurs.\n     * @event VoiceBroadcast#error\n     * @param {Error} error The error that occurred\n     */\n    transcoder.once('error', e => {\n      if (this.listenerCount('error') > 0) this.emit('error', e);\n      /**\n       * Emitted whenever the VoiceBroadcast has any warnings.\n       * @event VoiceBroadcast#warn\n       * @param {string|Error} warning The warning that was raised\n       */\n      else this.emit('warn', e);\n    });\n    /**\n     * Emitted once the broadcast (the audio stream) ends.\n     * @event VoiceBroadcast#end\n     */\n    transcoder.once('end', () => this.killCurrentTranscoder());\n    this.currentTranscoder = {\n      transcoder,\n      options,\n    };\n    transcoder.output.once('readable', () => this._startPlaying());\n    return this;\n  }\n\n  /**\n   * Plays a stream of 16-bit signed stereo PCM.\n   * @param {ReadableStream} stream The audio stream to play\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {VoiceBroadcast}\n   */\n  playConvertedStream(stream, options = {}) {\n    this.killCurrentTranscoder();\n    this.setVolume(options.volume || 1);\n    this.currentTranscoder = { options: { stream } };\n    stream.once('readable', () => this._startPlaying());\n    return this;\n  }\n\n  /**\n   * Plays an Opus encoded stream.\n   * <warn>Note that inline volume is not compatible with this method.</warn>\n   * @param {ReadableStream} stream The Opus audio stream to play\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   */\n  playOpusStream(stream) {\n    this.currentTranscoder = { options: { stream }, opus: true };\n    stream.once('readable', () => this._startPlaying());\n    return this;\n  }\n\n  /**\n   * Play an arbitrary input that can be [handled by ffmpeg](https://ffmpeg.org/ffmpeg-protocols.html#Description)\n   * @param {string} input The arbitrary input\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {VoiceBroadcast}\n   */\n  playArbitraryInput(input, options = {}) {\n    this.setVolume(options.volume || 1);\n    options.input = input;\n    return this._playTranscodable(input, options);\n  }\n\n  /**\n   * Pauses the entire broadcast - all dispatchers also pause.\n   */\n  pause() {\n    this.paused = true;\n    for (const container of this._dispatchers.values()) {\n      for (const dispatcher of container.values()) {\n        dispatcher.pause();\n      }\n    }\n  }\n\n  /**\n   * Resumes the entire broadcast - all dispatchers also resume.\n   */\n  resume() {\n    this.paused = false;\n    for (const container of this._dispatchers.values()) {\n      for (const dispatcher of container.values()) {\n        dispatcher.resume();\n      }\n    }\n  }\n\n  _startPlaying() {\n    if (this.tickInterval) clearInterval(this.tickInterval);\n    // Old code?\n    // this.tickInterval = this.client.setInterval(this.tick.bind(this), 20);\n    this._startTime = Date.now();\n    this._count = 0;\n    this._pausedTime = 0;\n    this._missed = 0;\n    this.tick();\n  }\n\n  tick() {\n    if (!this._playableStream) return;\n    if (this.paused) {\n      this._pausedTime += 20;\n      setTimeout(() => this.tick(), 20);\n      return;\n    }\n\n    const opus = this.currentTranscoder.opus;\n    const buffer = this.readStreamBuffer();\n\n    if (!buffer) {\n      this._missed++;\n      if (this._missed < 5) {\n        this._pausedTime += 200;\n        setTimeout(() => this.tick(), 200);\n      } else {\n        this.killCurrentTranscoder();\n      }\n      return;\n    }\n\n    this._missed = 0;\n\n    let packetMatrix = {};\n\n    const getOpusPacket = volume => {\n      if (packetMatrix[volume]) return packetMatrix[volume];\n\n      const opusEncoder = this._encoders.get(volume);\n      const opusPacket = opusEncoder.encode(this.applyVolume(buffer, this._volume * volume));\n      packetMatrix[volume] = opusPacket;\n      return opusPacket;\n    };\n\n    for (const dispatcher of this.dispatchers) {\n      if (opus) {\n        dispatcher.processPacket(buffer);\n        continue;\n      }\n\n      const volume = dispatcher.volume;\n      dispatcher.processPacket(getOpusPacket(volume));\n    }\n\n    const next = 20 + (this._startTime + this._pausedTime + (this._count * 20) - Date.now());\n    this._count++;\n    setTimeout(() => this.tick(), next);\n  }\n\n  readStreamBuffer() {\n    const opus = this.currentTranscoder.opus;\n    const bufferLength = (opus ? 80 : 1920) * 2;\n    let buffer = this._playableStream.read(bufferLength);\n    if (opus) return buffer;\n    if (!buffer) return null;\n\n    if (buffer.length !== bufferLength) {\n      const newBuffer = Buffer.alloc(bufferLength).fill(0);\n      buffer.copy(newBuffer);\n      buffer = newBuffer;\n    }\n\n    return buffer;\n  }\n\n  /**\n   * Stop the current stream from playing without unsubscribing dispatchers.\n   */\n  end() {\n    this.killCurrentTranscoder();\n  }\n\n  /**\n   * End the current broadcast, all subscribed dispatchers will also end.\n   */\n  destroy() {\n    this.end();\n    for (const container of this._dispatchers.values()) {\n      for (const dispatcher of container.values()) {\n        dispatcher.destroy('end', 'broadcast ended');\n      }\n    }\n  }\n}\n\nmodule.exports = VoiceBroadcast;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL1ZvaWNlQnJvYWRjYXN0LmpzP2M3OTQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVm9sdW1lSW50ZXJmYWNlID0gcmVxdWlyZSgnLi91dGlsL1ZvbHVtZUludGVyZmFjZScpO1xuY29uc3QgUHJpc20gPSByZXF1aXJlKCdwcmlzbS1tZWRpYScpO1xuY29uc3QgT3B1c0VuY29kZXJzID0gcmVxdWlyZSgnLi9vcHVzL09wdXNFbmdpbmVMaXN0Jyk7XG5jb25zdCBDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9Db2xsZWN0aW9uJyk7XG5cbmNvbnN0IGZmbXBlZ0FyZ3VtZW50cyA9IFtcbiAgJy1hbmFseXplZHVyYXRpb24nLCAnMCcsXG4gICctbG9nbGV2ZWwnLCAnMCcsXG4gICctZicsICdzMTZsZScsXG4gICctYXInLCAnNDgwMDAnLFxuICAnLWFjJywgJzInLFxuXTtcblxuLyoqXG4gKiBBIHZvaWNlIGJyb2FkY2FzdCBjYW4gYmUgcGxheWVkIGFjcm9zcyBtdWx0aXBsZSB2b2ljZSBjb25uZWN0aW9ucyBmb3IgaW1wcm92ZWQgc2hhcmVkLXN0cmVhbSBlZmZpY2llbmN5LlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiBgYGBqc1xuICogY29uc3QgYnJvYWRjYXN0ID0gY2xpZW50LmNyZWF0ZVZvaWNlQnJvYWRjYXN0KCk7XG4gKiBicm9hZGNhc3QucGxheUZpbGUoJy4vbXVzaWMubXAzJyk7XG4gKiAvLyBQbGF5IFwibXVzaWMubXAzXCIgaW4gYWxsIHZvaWNlIGNvbm5lY3Rpb25zIHRoYXQgdGhlIGNsaWVudCBpcyBpblxuICogZm9yIChjb25zdCBjb25uZWN0aW9uIG9mIGNsaWVudC52b2ljZUNvbm5lY3Rpb25zLnZhbHVlcygpKSB7XG4gKiAgIGNvbm5lY3Rpb24ucGxheUJyb2FkY2FzdChicm9hZGNhc3QpO1xuICogfVxuICogYGBgXG4gKiBAaW1wbGVtZW50cyB7Vm9sdW1lSW50ZXJmYWNlfVxuICovXG5jbGFzcyBWb2ljZUJyb2FkY2FzdCBleHRlbmRzIFZvbHVtZUludGVyZmFjZSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCB0aGF0IGNyZWF0ZWQgdGhlIGJyb2FkY2FzdFxuICAgICAqIEB0eXBlIHtDbGllbnR9XG4gICAgICovXG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5fZGlzcGF0Y2hlcnMgPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgIHRoaXMuX2VuY29kZXJzID0gbmV3IENvbGxlY3Rpb24oKTtcbiAgICAvKipcbiAgICAgKiBUaGUgYXVkaW8gdHJhbnNjb2RlciB0aGF0IHRoaXMgYnJvYWRjYXN0IHVzZXNcbiAgICAgKiBAdHlwZSB7UHJpc219XG4gICAgICovXG4gICAgdGhpcy5wcmlzbSA9IG5ldyBQcmlzbSgpO1xuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGF1ZGlvIHRyYW5zY29kZXIgdGhhdCBpcyBiZWluZyB1c2VkXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLmN1cnJlbnRUcmFuc2NvZGVyID0gbnVsbDtcbiAgICB0aGlzLnRpY2tJbnRlcnZhbCA9IG51bGw7XG4gICAgdGhpcy5fdm9sdW1lID0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBzdWJzY3JpYmVkIGRpc3BhdGNoZXJzXG4gICAqIEB0eXBlIHtTdHJlYW1EaXNwYXRjaGVyW119XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGRpc3BhdGNoZXJzKCkge1xuICAgIGxldCBkID0gW107XG4gICAgZm9yIChjb25zdCBjb250YWluZXIgb2YgdGhpcy5fZGlzcGF0Y2hlcnMudmFsdWVzKCkpIHtcbiAgICAgIGQgPSBkLmNvbmNhdChBcnJheS5mcm9tKGNvbnRhaW5lci52YWx1ZXMoKSkpO1xuICAgIH1cbiAgICByZXR1cm4gZDtcbiAgfVxuXG4gIGdldCBfcGxheWFibGVTdHJlYW0oKSB7XG4gICAgY29uc3QgY3VycmVudFRyYW5zY29kZXIgPSB0aGlzLmN1cnJlbnRUcmFuc2NvZGVyO1xuICAgIGlmICghY3VycmVudFRyYW5zY29kZXIpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IHRyYW5zY29kZXIgPSBjdXJyZW50VHJhbnNjb2Rlci50cmFuc2NvZGVyO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjdXJyZW50VHJhbnNjb2Rlci5vcHRpb25zO1xuICAgIHJldHVybiAodHJhbnNjb2RlciAmJiB0cmFuc2NvZGVyLm91dHB1dCkgfHwgb3B0aW9ucy5zdHJlYW07XG4gIH1cblxuICB1bnJlZ2lzdGVyRGlzcGF0Y2hlcihkaXNwYXRjaGVyLCBvbGQpIHtcbiAgICBjb25zdCB2b2x1bWUgPSBvbGQgfHwgZGlzcGF0Y2hlci52b2x1bWU7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0dGVkIHdoZW5ldmVyIGEgc3RyZWFtIGRpc3BhdGNoZXIgdW5zdWJzY3JpYmVzIGZyb20gdGhlIGJyb2FkY2FzdC5cbiAgICAgKiBAZXZlbnQgVm9pY2VCcm9hZGNhc3QjdW5zdWJzY3JpYmVcbiAgICAgKiBAcGFyYW0ge1N0cmVhbURpc3BhdGNoZXJ9IGRpc3BhdGNoZXIgVGhlIHVuc3Vic2NyaWJlZCBkaXNwYXRjaGVyXG4gICAgICovXG4gICAgdGhpcy5lbWl0KCd1bnN1YnNjcmliZScsIGRpc3BhdGNoZXIpO1xuICAgIGZvciAoY29uc3QgY29udGFpbmVyIG9mIHRoaXMuX2Rpc3BhdGNoZXJzLnZhbHVlcygpKSB7XG4gICAgICBjb250YWluZXIuZGVsZXRlKGRpc3BhdGNoZXIpO1xuXG4gICAgICBpZiAoIWNvbnRhaW5lci5zaXplKSB7XG4gICAgICAgIHRoaXMuX2VuY29kZXJzLmdldCh2b2x1bWUpLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hlcnMuZGVsZXRlKHZvbHVtZSk7XG4gICAgICAgIHRoaXMuX2VuY29kZXJzLmRlbGV0ZSh2b2x1bWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyRGlzcGF0Y2hlcihkaXNwYXRjaGVyKSB7XG4gICAgaWYgKCF0aGlzLl9kaXNwYXRjaGVycy5oYXMoZGlzcGF0Y2hlci52b2x1bWUpKSB7XG4gICAgICB0aGlzLl9kaXNwYXRjaGVycy5zZXQoZGlzcGF0Y2hlci52b2x1bWUsIG5ldyBTZXQoKSk7XG4gICAgICB0aGlzLl9lbmNvZGVycy5zZXQoZGlzcGF0Y2hlci52b2x1bWUsIE9wdXNFbmNvZGVycy5mZXRjaCgpKTtcbiAgICB9XG4gICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5fZGlzcGF0Y2hlcnMuZ2V0KGRpc3BhdGNoZXIudm9sdW1lKTtcbiAgICBpZiAoIWNvbnRhaW5lci5oYXMoZGlzcGF0Y2hlcikpIHtcbiAgICAgIGNvbnRhaW5lci5hZGQoZGlzcGF0Y2hlcik7XG4gICAgICBkaXNwYXRjaGVyLm9uY2UoJ2VuZCcsICgpID0+IHRoaXMudW5yZWdpc3RlckRpc3BhdGNoZXIoZGlzcGF0Y2hlcikpO1xuICAgICAgZGlzcGF0Y2hlci5vbigndm9sdW1lQ2hhbmdlJywgKG8sIG4pID0+IHtcbiAgICAgICAgdGhpcy51bnJlZ2lzdGVyRGlzcGF0Y2hlcihkaXNwYXRjaGVyLCBvKTtcbiAgICAgICAgaWYgKCF0aGlzLl9kaXNwYXRjaGVycy5oYXMobikpIHtcbiAgICAgICAgICB0aGlzLl9kaXNwYXRjaGVycy5zZXQobiwgbmV3IFNldCgpKTtcbiAgICAgICAgICB0aGlzLl9lbmNvZGVycy5zZXQobiwgT3B1c0VuY29kZXJzLmZldGNoKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoZXJzLmdldChuKS5hZGQoZGlzcGF0Y2hlcik7XG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICogRW1pdHRlZCB3aGVuZXZlciBhIHN0cmVhbSBkaXNwYXRjaGVyIHN1YnNjcmliZXMgdG8gdGhlIGJyb2FkY2FzdC5cbiAgICAgICAqIEBldmVudCBWb2ljZUJyb2FkY2FzdCNzdWJzY3JpYmVcbiAgICAgICAqIEBwYXJhbSB7U3RyZWFtRGlzcGF0Y2hlcn0gZGlzcGF0Y2hlciBUaGUgc3Vic2NyaWJlZCBkaXNwYXRjaGVyXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZW1pdCgnc3Vic2NyaWJlJywgZGlzcGF0Y2hlcik7XG4gICAgfVxuICB9XG5cbiAga2lsbEN1cnJlbnRUcmFuc2NvZGVyKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRUcmFuc2NvZGVyKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50VHJhbnNjb2Rlci50cmFuc2NvZGVyKSB0aGlzLmN1cnJlbnRUcmFuc2NvZGVyLnRyYW5zY29kZXIua2lsbCgpO1xuICAgICAgdGhpcy5jdXJyZW50VHJhbnNjb2RlciA9IG51bGw7XG4gICAgICB0aGlzLmVtaXQoJ2VuZCcpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQbGF5cyBhbnkgYXVkaW8gc3RyZWFtIGFjcm9zcyB0aGUgYnJvYWRjYXN0LlxuICAgKiBAcGFyYW0ge1JlYWRhYmxlU3RyZWFtfSBzdHJlYW0gVGhlIGF1ZGlvIHN0cmVhbSB0byBwbGF5XG4gICAqIEBwYXJhbSB7U3RyZWFtT3B0aW9uc30gW29wdGlvbnNdIE9wdGlvbnMgZm9yIHBsYXlpbmcgdGhlIHN0cmVhbVxuICAgKiBAcmV0dXJucyB7Vm9pY2VCcm9hZGNhc3R9XG4gICAqIEBleGFtcGxlXG4gICAqIC8vIFBsYXkgc3RyZWFtcyB1c2luZyB5dGRsLWNvcmVcbiAgICogY29uc3QgeXRkbCA9IHJlcXVpcmUoJ3l0ZGwtY29yZScpO1xuICAgKiBjb25zdCBzdHJlYW1PcHRpb25zID0geyBzZWVrOiAwLCB2b2x1bWU6IDEgfTtcbiAgICogY29uc3QgYnJvYWRjYXN0ID0gY2xpZW50LmNyZWF0ZVZvaWNlQnJvYWRjYXN0KCk7XG4gICAqXG4gICAqIHZvaWNlQ2hhbm5lbC5qb2luKClcbiAgICogICAudGhlbihjb25uZWN0aW9uID0+IHtcbiAgICogICAgIGNvbnN0IHN0cmVhbSA9IHl0ZGwoJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9WEFXZ2VMRjlFVlEnLCB7IGZpbHRlciA6ICdhdWRpb29ubHknIH0pO1xuICAgKiAgICAgYnJvYWRjYXN0LnBsYXlTdHJlYW0oc3RyZWFtKTtcbiAgICogICAgIGNvbnN0IGRpc3BhdGNoZXIgPSBjb25uZWN0aW9uLnBsYXlCcm9hZGNhc3QoYnJvYWRjYXN0KTtcbiAgICogICB9KVxuICAgKiAgIC5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICovXG4gIHBsYXlTdHJlYW0oc3RyZWFtLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnNldFZvbHVtZShvcHRpb25zLnZvbHVtZSB8fCAxKTtcbiAgICByZXR1cm4gdGhpcy5fcGxheVRyYW5zY29kYWJsZShzdHJlYW0sIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBsYXkgdGhlIGdpdmVuIGZpbGUgaW4gdGhlIHZvaWNlIGNvbm5lY3Rpb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIFRoZSBhYnNvbHV0ZSBwYXRoIHRvIHRoZSBmaWxlXG4gICAqIEBwYXJhbSB7U3RyZWFtT3B0aW9uc30gW29wdGlvbnNdIE9wdGlvbnMgZm9yIHBsYXlpbmcgdGhlIHN0cmVhbVxuICAgKiBAcmV0dXJucyB7U3RyZWFtRGlzcGF0Y2hlcn1cbiAgICogQGV4YW1wbGVcbiAgICogLy8gUGxheSBmaWxlcyBuYXRpdmVseVxuICAgKiBjb25zdCBicm9hZGNhc3QgPSBjbGllbnQuY3JlYXRlVm9pY2VCcm9hZGNhc3QoKTtcbiAgICpcbiAgICogdm9pY2VDaGFubmVsLmpvaW4oKVxuICAgKiAgIC50aGVuKGNvbm5lY3Rpb24gPT4ge1xuICAgKiAgICAgYnJvYWRjYXN0LnBsYXlGaWxlKCdDOi9Vc2Vycy9EaXNjb3JkL0Rlc2t0b3AvbXVzaWMubXAzJyk7XG4gICAqICAgICBjb25zdCBkaXNwYXRjaGVyID0gY29ubmVjdGlvbi5wbGF5QnJvYWRjYXN0KGJyb2FkY2FzdCk7XG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAqL1xuICBwbGF5RmlsZShmaWxlLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnNldFZvbHVtZShvcHRpb25zLnZvbHVtZSB8fCAxKTtcbiAgICByZXR1cm4gdGhpcy5fcGxheVRyYW5zY29kYWJsZShgZmlsZToke2ZpbGV9YCwgb3B0aW9ucyk7XG4gIH1cblxuICBfcGxheVRyYW5zY29kYWJsZShtZWRpYSwgb3B0aW9ucykge1xuICAgIHRoaXMua2lsbEN1cnJlbnRUcmFuc2NvZGVyKCk7XG4gICAgY29uc3QgdHJhbnNjb2RlciA9IHRoaXMucHJpc20udHJhbnNjb2RlKHtcbiAgICAgIHR5cGU6ICdmZm1wZWcnLFxuICAgICAgbWVkaWEsXG4gICAgICBmZm1wZWdBcmd1bWVudHM6IGZmbXBlZ0FyZ3VtZW50cy5jb25jYXQoWyctc3MnLCBTdHJpbmcob3B0aW9ucy5zZWVrIHx8IDApXSksXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogRW1pdHRlZCB3aGVuZXZlciBhbiBlcnJvciBvY2N1cnMuXG4gICAgICogQGV2ZW50IFZvaWNlQnJvYWRjYXN0I2Vycm9yXG4gICAgICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRoYXQgb2NjdXJyZWRcbiAgICAgKi9cbiAgICB0cmFuc2NvZGVyLm9uY2UoJ2Vycm9yJywgZSA9PiB7XG4gICAgICBpZiAodGhpcy5saXN0ZW5lckNvdW50KCdlcnJvcicpID4gMCkgdGhpcy5lbWl0KCdlcnJvcicsIGUpO1xuICAgICAgLyoqXG4gICAgICAgKiBFbWl0dGVkIHdoZW5ldmVyIHRoZSBWb2ljZUJyb2FkY2FzdCBoYXMgYW55IHdhcm5pbmdzLlxuICAgICAgICogQGV2ZW50IFZvaWNlQnJvYWRjYXN0I3dhcm5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfEVycm9yfSB3YXJuaW5nIFRoZSB3YXJuaW5nIHRoYXQgd2FzIHJhaXNlZFxuICAgICAgICovXG4gICAgICBlbHNlIHRoaXMuZW1pdCgnd2FybicsIGUpO1xuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEVtaXR0ZWQgb25jZSB0aGUgYnJvYWRjYXN0ICh0aGUgYXVkaW8gc3RyZWFtKSBlbmRzLlxuICAgICAqIEBldmVudCBWb2ljZUJyb2FkY2FzdCNlbmRcbiAgICAgKi9cbiAgICB0cmFuc2NvZGVyLm9uY2UoJ2VuZCcsICgpID0+IHRoaXMua2lsbEN1cnJlbnRUcmFuc2NvZGVyKCkpO1xuICAgIHRoaXMuY3VycmVudFRyYW5zY29kZXIgPSB7XG4gICAgICB0cmFuc2NvZGVyLFxuICAgICAgb3B0aW9ucyxcbiAgICB9O1xuICAgIHRyYW5zY29kZXIub3V0cHV0Lm9uY2UoJ3JlYWRhYmxlJywgKCkgPT4gdGhpcy5fc3RhcnRQbGF5aW5nKCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFBsYXlzIGEgc3RyZWFtIG9mIDE2LWJpdCBzaWduZWQgc3RlcmVvIFBDTS5cbiAgICogQHBhcmFtIHtSZWFkYWJsZVN0cmVhbX0gc3RyZWFtIFRoZSBhdWRpbyBzdHJlYW0gdG8gcGxheVxuICAgKiBAcGFyYW0ge1N0cmVhbU9wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zIGZvciBwbGF5aW5nIHRoZSBzdHJlYW1cbiAgICogQHJldHVybnMge1ZvaWNlQnJvYWRjYXN0fVxuICAgKi9cbiAgcGxheUNvbnZlcnRlZFN0cmVhbShzdHJlYW0sIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMua2lsbEN1cnJlbnRUcmFuc2NvZGVyKCk7XG4gICAgdGhpcy5zZXRWb2x1bWUob3B0aW9ucy52b2x1bWUgfHwgMSk7XG4gICAgdGhpcy5jdXJyZW50VHJhbnNjb2RlciA9IHsgb3B0aW9uczogeyBzdHJlYW0gfSB9O1xuICAgIHN0cmVhbS5vbmNlKCdyZWFkYWJsZScsICgpID0+IHRoaXMuX3N0YXJ0UGxheWluZygpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBQbGF5cyBhbiBPcHVzIGVuY29kZWQgc3RyZWFtLlxuICAgKiA8d2Fybj5Ob3RlIHRoYXQgaW5saW5lIHZvbHVtZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoaXMgbWV0aG9kLjwvd2Fybj5cbiAgICogQHBhcmFtIHtSZWFkYWJsZVN0cmVhbX0gc3RyZWFtIFRoZSBPcHVzIGF1ZGlvIHN0cmVhbSB0byBwbGF5XG4gICAqIEBwYXJhbSB7U3RyZWFtT3B0aW9uc30gW29wdGlvbnNdIE9wdGlvbnMgZm9yIHBsYXlpbmcgdGhlIHN0cmVhbVxuICAgKiBAcmV0dXJucyB7U3RyZWFtRGlzcGF0Y2hlcn1cbiAgICovXG4gIHBsYXlPcHVzU3RyZWFtKHN0cmVhbSkge1xuICAgIHRoaXMuY3VycmVudFRyYW5zY29kZXIgPSB7IG9wdGlvbnM6IHsgc3RyZWFtIH0sIG9wdXM6IHRydWUgfTtcbiAgICBzdHJlYW0ub25jZSgncmVhZGFibGUnLCAoKSA9PiB0aGlzLl9zdGFydFBsYXlpbmcoKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUGxheSBhbiBhcmJpdHJhcnkgaW5wdXQgdGhhdCBjYW4gYmUgW2hhbmRsZWQgYnkgZmZtcGVnXShodHRwczovL2ZmbXBlZy5vcmcvZmZtcGVnLXByb3RvY29scy5odG1sI0Rlc2NyaXB0aW9uKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgVGhlIGFyYml0cmFyeSBpbnB1dFxuICAgKiBAcGFyYW0ge1N0cmVhbU9wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zIGZvciBwbGF5aW5nIHRoZSBzdHJlYW1cbiAgICogQHJldHVybnMge1ZvaWNlQnJvYWRjYXN0fVxuICAgKi9cbiAgcGxheUFyYml0cmFyeUlucHV0KGlucHV0LCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnNldFZvbHVtZShvcHRpb25zLnZvbHVtZSB8fCAxKTtcbiAgICBvcHRpb25zLmlucHV0ID0gaW5wdXQ7XG4gICAgcmV0dXJuIHRoaXMuX3BsYXlUcmFuc2NvZGFibGUoaW5wdXQsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdXNlcyB0aGUgZW50aXJlIGJyb2FkY2FzdCAtIGFsbCBkaXNwYXRjaGVycyBhbHNvIHBhdXNlLlxuICAgKi9cbiAgcGF1c2UoKSB7XG4gICAgdGhpcy5wYXVzZWQgPSB0cnVlO1xuICAgIGZvciAoY29uc3QgY29udGFpbmVyIG9mIHRoaXMuX2Rpc3BhdGNoZXJzLnZhbHVlcygpKSB7XG4gICAgICBmb3IgKGNvbnN0IGRpc3BhdGNoZXIgb2YgY29udGFpbmVyLnZhbHVlcygpKSB7XG4gICAgICAgIGRpc3BhdGNoZXIucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVzdW1lcyB0aGUgZW50aXJlIGJyb2FkY2FzdCAtIGFsbCBkaXNwYXRjaGVycyBhbHNvIHJlc3VtZS5cbiAgICovXG4gIHJlc3VtZSgpIHtcbiAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgY29udGFpbmVyIG9mIHRoaXMuX2Rpc3BhdGNoZXJzLnZhbHVlcygpKSB7XG4gICAgICBmb3IgKGNvbnN0IGRpc3BhdGNoZXIgb2YgY29udGFpbmVyLnZhbHVlcygpKSB7XG4gICAgICAgIGRpc3BhdGNoZXIucmVzdW1lKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX3N0YXJ0UGxheWluZygpIHtcbiAgICBpZiAodGhpcy50aWNrSW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwodGhpcy50aWNrSW50ZXJ2YWwpO1xuICAgIC8vIE9sZCBjb2RlP1xuICAgIC8vIHRoaXMudGlja0ludGVydmFsID0gdGhpcy5jbGllbnQuc2V0SW50ZXJ2YWwodGhpcy50aWNrLmJpbmQodGhpcyksIDIwKTtcbiAgICB0aGlzLl9zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuX2NvdW50ID0gMDtcbiAgICB0aGlzLl9wYXVzZWRUaW1lID0gMDtcbiAgICB0aGlzLl9taXNzZWQgPSAwO1xuICAgIHRoaXMudGljaygpO1xuICB9XG5cbiAgdGljaygpIHtcbiAgICBpZiAoIXRoaXMuX3BsYXlhYmxlU3RyZWFtKSByZXR1cm47XG4gICAgaWYgKHRoaXMucGF1c2VkKSB7XG4gICAgICB0aGlzLl9wYXVzZWRUaW1lICs9IDIwO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnRpY2soKSwgMjApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdXMgPSB0aGlzLmN1cnJlbnRUcmFuc2NvZGVyLm9wdXM7XG4gICAgY29uc3QgYnVmZmVyID0gdGhpcy5yZWFkU3RyZWFtQnVmZmVyKCk7XG5cbiAgICBpZiAoIWJ1ZmZlcikge1xuICAgICAgdGhpcy5fbWlzc2VkKys7XG4gICAgICBpZiAodGhpcy5fbWlzc2VkIDwgNSkge1xuICAgICAgICB0aGlzLl9wYXVzZWRUaW1lICs9IDIwMDtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLnRpY2soKSwgMjAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMua2lsbEN1cnJlbnRUcmFuc2NvZGVyKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fbWlzc2VkID0gMDtcblxuICAgIGxldCBwYWNrZXRNYXRyaXggPSB7fTtcblxuICAgIGNvbnN0IGdldE9wdXNQYWNrZXQgPSB2b2x1bWUgPT4ge1xuICAgICAgaWYgKHBhY2tldE1hdHJpeFt2b2x1bWVdKSByZXR1cm4gcGFja2V0TWF0cml4W3ZvbHVtZV07XG5cbiAgICAgIGNvbnN0IG9wdXNFbmNvZGVyID0gdGhpcy5fZW5jb2RlcnMuZ2V0KHZvbHVtZSk7XG4gICAgICBjb25zdCBvcHVzUGFja2V0ID0gb3B1c0VuY29kZXIuZW5jb2RlKHRoaXMuYXBwbHlWb2x1bWUoYnVmZmVyLCB0aGlzLl92b2x1bWUgKiB2b2x1bWUpKTtcbiAgICAgIHBhY2tldE1hdHJpeFt2b2x1bWVdID0gb3B1c1BhY2tldDtcbiAgICAgIHJldHVybiBvcHVzUGFja2V0O1xuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IGRpc3BhdGNoZXIgb2YgdGhpcy5kaXNwYXRjaGVycykge1xuICAgICAgaWYgKG9wdXMpIHtcbiAgICAgICAgZGlzcGF0Y2hlci5wcm9jZXNzUGFja2V0KGJ1ZmZlcik7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB2b2x1bWUgPSBkaXNwYXRjaGVyLnZvbHVtZTtcbiAgICAgIGRpc3BhdGNoZXIucHJvY2Vzc1BhY2tldChnZXRPcHVzUGFja2V0KHZvbHVtZSkpO1xuICAgIH1cblxuICAgIGNvbnN0IG5leHQgPSAyMCArICh0aGlzLl9zdGFydFRpbWUgKyB0aGlzLl9wYXVzZWRUaW1lICsgKHRoaXMuX2NvdW50ICogMjApIC0gRGF0ZS5ub3coKSk7XG4gICAgdGhpcy5fY291bnQrKztcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMudGljaygpLCBuZXh0KTtcbiAgfVxuXG4gIHJlYWRTdHJlYW1CdWZmZXIoKSB7XG4gICAgY29uc3Qgb3B1cyA9IHRoaXMuY3VycmVudFRyYW5zY29kZXIub3B1cztcbiAgICBjb25zdCBidWZmZXJMZW5ndGggPSAob3B1cyA/IDgwIDogMTkyMCkgKiAyO1xuICAgIGxldCBidWZmZXIgPSB0aGlzLl9wbGF5YWJsZVN0cmVhbS5yZWFkKGJ1ZmZlckxlbmd0aCk7XG4gICAgaWYgKG9wdXMpIHJldHVybiBidWZmZXI7XG4gICAgaWYgKCFidWZmZXIpIHJldHVybiBudWxsO1xuXG4gICAgaWYgKGJ1ZmZlci5sZW5ndGggIT09IGJ1ZmZlckxlbmd0aCkge1xuICAgICAgY29uc3QgbmV3QnVmZmVyID0gQnVmZmVyLmFsbG9jKGJ1ZmZlckxlbmd0aCkuZmlsbCgwKTtcbiAgICAgIGJ1ZmZlci5jb3B5KG5ld0J1ZmZlcik7XG4gICAgICBidWZmZXIgPSBuZXdCdWZmZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHRoZSBjdXJyZW50IHN0cmVhbSBmcm9tIHBsYXlpbmcgd2l0aG91dCB1bnN1YnNjcmliaW5nIGRpc3BhdGNoZXJzLlxuICAgKi9cbiAgZW5kKCkge1xuICAgIHRoaXMua2lsbEN1cnJlbnRUcmFuc2NvZGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogRW5kIHRoZSBjdXJyZW50IGJyb2FkY2FzdCwgYWxsIHN1YnNjcmliZWQgZGlzcGF0Y2hlcnMgd2lsbCBhbHNvIGVuZC5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5lbmQoKTtcbiAgICBmb3IgKGNvbnN0IGNvbnRhaW5lciBvZiB0aGlzLl9kaXNwYXRjaGVycy52YWx1ZXMoKSkge1xuICAgICAgZm9yIChjb25zdCBkaXNwYXRjaGVyIG9mIGNvbnRhaW5lci52YWx1ZXMoKSkge1xuICAgICAgICBkaXNwYXRjaGVyLmRlc3Ryb3koJ2VuZCcsICdicm9hZGNhc3QgZW5kZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWb2ljZUJyb2FkY2FzdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS9Wb2ljZUJyb2FkY2FzdC5qc1xuLy8gbW9kdWxlIGlkID0gNzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///78\n");

/***/ }),
/* 79 */
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/opus/BaseOpusEngine.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * The base opus encoding engine.\n * @private\n */\nclass BaseOpus {\n  /**\n   * @param {Object} [options] The options to apply to the Opus engine\n   * @param {number} [options.bitrate=48] The desired bitrate (kbps)\n   * @param {boolean} [options.fec=false] Whether to enable forward error correction\n   * @param {number} [options.plp=0] The expected packet loss percentage\n   */\n  constructor({ bitrate = 48, fec = false, plp = 0 } = {}) {\n    this.ctl = {\n      BITRATE: 4002,\n      FEC: 4012,\n      PLP: 4014,\n    };\n\n    this.samplingRate = 48000;\n    this.channels = 2;\n\n    /**\n     * The desired bitrate (kbps)\n     * @type {number}\n     */\n    this.bitrate = bitrate;\n\n    /**\n     * Miscellaneous Opus options\n     * @type {Object}\n     */\n    this.options = { fec, plp };\n  }\n\n  init() {\n    try {\n      this.setBitrate(this.bitrate);\n\n      // Set FEC (forward error correction)\n      if (this.options.fec) this.setFEC(this.options.fec);\n\n      // Set PLP (expected packet loss percentage)\n      if (this.options.plp) this.setPLP(this.options.plp);\n    } catch (err) {\n      // Opus engine likely has no support for libopus CTL\n    }\n  }\n\n  encode(buffer) {\n    return buffer;\n  }\n\n  decode(buffer) {\n    return buffer;\n  }\n\n  destroy() {} // eslint-disable-line no-empty-function\n}\n\nmodule.exports = BaseOpus;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL29wdXMvQmFzZU9wdXNFbmdpbmUuanM/MDgyMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoZSBiYXNlIG9wdXMgZW5jb2RpbmcgZW5naW5lLlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQmFzZU9wdXMge1xuICAvKipcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSBUaGUgb3B0aW9ucyB0byBhcHBseSB0byB0aGUgT3B1cyBlbmdpbmVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmJpdHJhdGU9NDhdIFRoZSBkZXNpcmVkIGJpdHJhdGUgKGticHMpXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZmVjPWZhbHNlXSBXaGV0aGVyIHRvIGVuYWJsZSBmb3J3YXJkIGVycm9yIGNvcnJlY3Rpb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnBscD0wXSBUaGUgZXhwZWN0ZWQgcGFja2V0IGxvc3MgcGVyY2VudGFnZVxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBiaXRyYXRlID0gNDgsIGZlYyA9IGZhbHNlLCBwbHAgPSAwIH0gPSB7fSkge1xuICAgIHRoaXMuY3RsID0ge1xuICAgICAgQklUUkFURTogNDAwMixcbiAgICAgIEZFQzogNDAxMixcbiAgICAgIFBMUDogNDAxNCxcbiAgICB9O1xuXG4gICAgdGhpcy5zYW1wbGluZ1JhdGUgPSA0ODAwMDtcbiAgICB0aGlzLmNoYW5uZWxzID0gMjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkZXNpcmVkIGJpdHJhdGUgKGticHMpXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmJpdHJhdGUgPSBiaXRyYXRlO1xuXG4gICAgLyoqXG4gICAgICogTWlzY2VsbGFuZW91cyBPcHVzIG9wdGlvbnNcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMub3B0aW9ucyA9IHsgZmVjLCBwbHAgfTtcbiAgfVxuXG4gIGluaXQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuc2V0Qml0cmF0ZSh0aGlzLmJpdHJhdGUpO1xuXG4gICAgICAvLyBTZXQgRkVDIChmb3J3YXJkIGVycm9yIGNvcnJlY3Rpb24pXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmZlYykgdGhpcy5zZXRGRUModGhpcy5vcHRpb25zLmZlYyk7XG5cbiAgICAgIC8vIFNldCBQTFAgKGV4cGVjdGVkIHBhY2tldCBsb3NzIHBlcmNlbnRhZ2UpXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnBscCkgdGhpcy5zZXRQTFAodGhpcy5vcHRpb25zLnBscCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBPcHVzIGVuZ2luZSBsaWtlbHkgaGFzIG5vIHN1cHBvcnQgZm9yIGxpYm9wdXMgQ1RMXG4gICAgfVxuICB9XG5cbiAgZW5jb2RlKGJ1ZmZlcikge1xuICAgIHJldHVybiBidWZmZXI7XG4gIH1cblxuICBkZWNvZGUoYnVmZmVyKSB7XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5LWZ1bmN0aW9uXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQmFzZU9wdXM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvdm9pY2Uvb3B1cy9CYXNlT3B1c0VuZ2luZS5qc1xuLy8gbW9kdWxlIGlkID0gNzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///79\n");

/***/ }),
/* 80 */
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/util/Secretbox.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const libs = {\n  sodium: sodium => ({\n    open: sodium.api.crypto_secretbox_open_easy,\n    close: sodium.api.crypto_secretbox_easy,\n  }),\n  'libsodium-wrappers': sodium => ({\n    open: sodium.crypto_secretbox_open_easy,\n    close: sodium.crypto_secretbox_easy,\n  }),\n  tweetnacl: tweetnacl => ({\n    open: tweetnacl.secretbox.open,\n    close: tweetnacl.secretbox,\n  }),\n};\n\nexports.methods = {};\n\nfor (const libName of Object.keys(libs)) {\n  try {\n    const lib = !(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\".\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n    if (libName === 'libsodium-wrappers' && lib.ready) {\n      lib.ready.then(() => {\n        exports.methods = libs[libName](lib);\n      }).catch(() => {\n        const tweetnacl = __webpack_require__(/*! tweetnacl */ 165);\n        exports.methods = libs.tweetnacl(tweetnacl);\n      }).catch(() => undefined);\n    } else {\n      exports.methods = libs[libName](lib);\n    }\n    break;\n  } catch (err) {} // eslint-disable-line no-empty\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL3V0aWwvU2VjcmV0Ym94LmpzP2MzMTEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgbGlicyA9IHtcbiAgc29kaXVtOiBzb2RpdW0gPT4gKHtcbiAgICBvcGVuOiBzb2RpdW0uYXBpLmNyeXB0b19zZWNyZXRib3hfb3Blbl9lYXN5LFxuICAgIGNsb3NlOiBzb2RpdW0uYXBpLmNyeXB0b19zZWNyZXRib3hfZWFzeSxcbiAgfSksXG4gICdsaWJzb2RpdW0td3JhcHBlcnMnOiBzb2RpdW0gPT4gKHtcbiAgICBvcGVuOiBzb2RpdW0uY3J5cHRvX3NlY3JldGJveF9vcGVuX2Vhc3ksXG4gICAgY2xvc2U6IHNvZGl1bS5jcnlwdG9fc2VjcmV0Ym94X2Vhc3ksXG4gIH0pLFxuICB0d2VldG5hY2w6IHR3ZWV0bmFjbCA9PiAoe1xuICAgIG9wZW46IHR3ZWV0bmFjbC5zZWNyZXRib3gub3BlbixcbiAgICBjbG9zZTogdHdlZXRuYWNsLnNlY3JldGJveCxcbiAgfSksXG59O1xuXG5leHBvcnRzLm1ldGhvZHMgPSB7fTtcblxuZm9yIChjb25zdCBsaWJOYW1lIG9mIE9iamVjdC5rZXlzKGxpYnMpKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgbGliID0gcmVxdWlyZShsaWJOYW1lKTtcbiAgICBpZiAobGliTmFtZSA9PT0gJ2xpYnNvZGl1bS13cmFwcGVycycgJiYgbGliLnJlYWR5KSB7XG4gICAgICBsaWIucmVhZHkudGhlbigoKSA9PiB7XG4gICAgICAgIGV4cG9ydHMubWV0aG9kcyA9IGxpYnNbbGliTmFtZV0obGliKTtcbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgY29uc3QgdHdlZXRuYWNsID0gcmVxdWlyZSgndHdlZXRuYWNsJyk7XG4gICAgICAgIGV4cG9ydHMubWV0aG9kcyA9IGxpYnMudHdlZXRuYWNsKHR3ZWV0bmFjbCk7XG4gICAgICB9KS5jYXRjaCgoKSA9PiB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm1ldGhvZHMgPSBsaWJzW2xpYk5hbWVdKGxpYik7XG4gICAgfVxuICAgIGJyZWFrO1xuICB9IGNhdGNoIChlcnIpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS91dGlsL1NlY3JldGJveC5qc1xuLy8gbW9kdWxlIGlkID0gODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///80\n");

/***/ }),
/* 81 */
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/sharding/ShardClientUtil.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Util = __webpack_require__(/*! ../util/Util */ 4);\n\n/**\n * Helper class for sharded clients spawned as a child process, such as from a ShardingManager.\n */\nclass ShardClientUtil {\n  /**\n   * @param {Client} client The client of the current shard\n   */\n  constructor(client) {\n    this.client = client;\n    process.on('message', this._handleMessage.bind(this));\n  }\n\n  /**\n   * ID of this shard\n   * @type {number}\n   * @readonly\n   */\n  get id() {\n    return this.client.options.shardId;\n  }\n\n  /**\n   * Total number of shards\n   * @type {number}\n   * @readonly\n   */\n  get count() {\n    return this.client.options.shardCount;\n  }\n\n  /**\n   * Sends a message to the master process.\n   * @param {*} message Message to send\n   * @returns {Promise<void>}\n   */\n  send(message) {\n    return new Promise((resolve, reject) => {\n      const sent = process.send(message, err => {\n        if (err) reject(err); else resolve();\n      });\n      if (!sent) throw new Error('Failed to send message to master process.');\n    });\n  }\n\n  /**\n   * Fetches a client property value of each shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @returns {Promise<Array>}\n   * @example\n   * client.shard.fetchClientValues('guilds.size')\n   *   .then(results => {\n   *     console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\n   *   })\n   *   .catch(console.error);\n   */\n  fetchClientValues(prop) {\n    return new Promise((resolve, reject) => {\n      const listener = message => {\n        if (!message || message._sFetchProp !== prop) return;\n        process.removeListener('message', listener);\n        if (!message._error) resolve(message._result); else reject(Util.makeError(message._error));\n      };\n      process.on('message', listener);\n\n      this.send({ _sFetchProp: prop }).catch(err => {\n        process.removeListener('message', listener);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Evaluates a script on all shards, in the context of the Clients.\n   * @param {string} script JavaScript to run on each shard\n   * @returns {Promise<Array>} Results of the script execution\n   */\n  broadcastEval(script) {\n    return new Promise((resolve, reject) => {\n      const listener = message => {\n        if (!message || message._sEval !== script) return;\n        process.removeListener('message', listener);\n        if (!message._error) resolve(message._result); else reject(Util.makeError(message._error));\n      };\n      process.on('message', listener);\n\n      this.send({ _sEval: script }).catch(err => {\n        process.removeListener('message', listener);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Handles an IPC message.\n   * @param {*} message Message received\n   * @private\n   */\n  _handleMessage(message) {\n    if (!message) return;\n    if (message._fetchProp) {\n      const props = message._fetchProp.split('.');\n      let value = this.client;\n      for (const prop of props) value = value[prop];\n      this._respond('fetchProp', { _fetchProp: message._fetchProp, _result: value });\n    } else if (message._eval) {\n      try {\n        this._respond('eval', { _eval: message._eval, _result: this.client._eval(message._eval) });\n      } catch (err) {\n        this._respond('eval', { _eval: message._eval, _error: Util.makePlainError(err) });\n      }\n    }\n  }\n\n  /**\n   * Sends a message to the master process, emitting an error from the client upon failure.\n   * @param {string} type Type of response to send\n   * @param {*} message Message to send\n   * @private\n   */\n  _respond(type, message) {\n    this.send(message).catch(err => {\n      err.message = `Error when sending ${type} response to master process: ${err.message}`;\n      this.client.emit('error', err);\n    });\n  }\n\n  /**\n   * Creates/gets the singleton of this class.\n   * @param {Client} client The client to use\n   * @returns {ShardClientUtil}\n   */\n  static singleton(client) {\n    if (!this._singleton) {\n      this._singleton = new this(client);\n    } else {\n      client.emit('warn', 'Multiple clients created in child process; only the first will handle sharding helpers.');\n    }\n    return this._singleton;\n  }\n}\n\nmodule.exports = ShardClientUtil;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc2hhcmRpbmcvU2hhcmRDbGllbnRVdGlsLmpzPzFjMzciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwvVXRpbCcpO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyBmb3Igc2hhcmRlZCBjbGllbnRzIHNwYXduZWQgYXMgYSBjaGlsZCBwcm9jZXNzLCBzdWNoIGFzIGZyb20gYSBTaGFyZGluZ01hbmFnZXIuXG4gKi9cbmNsYXNzIFNoYXJkQ2xpZW50VXRpbCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50IFRoZSBjbGllbnQgb2YgdGhlIGN1cnJlbnQgc2hhcmRcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIHByb2Nlc3Mub24oJ21lc3NhZ2UnLCB0aGlzLl9oYW5kbGVNZXNzYWdlLmJpbmQodGhpcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIElEIG9mIHRoaXMgc2hhcmRcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50Lm9wdGlvbnMuc2hhcmRJZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUb3RhbCBudW1iZXIgb2Ygc2hhcmRzXG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGNvdW50KCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5vcHRpb25zLnNoYXJkQ291bnQ7XG4gIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlIHRvIHRoZSBtYXN0ZXIgcHJvY2Vzcy5cbiAgICogQHBhcmFtIHsqfSBtZXNzYWdlIE1lc3NhZ2UgdG8gc2VuZFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIHNlbmQobWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBzZW50ID0gcHJvY2Vzcy5zZW5kKG1lc3NhZ2UsIGVyciA9PiB7XG4gICAgICAgIGlmIChlcnIpIHJlamVjdChlcnIpOyBlbHNlIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFzZW50KSB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzZW5kIG1lc3NhZ2UgdG8gbWFzdGVyIHByb2Nlc3MuJyk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyBhIGNsaWVudCBwcm9wZXJ0eSB2YWx1ZSBvZiBlYWNoIHNoYXJkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCBOYW1lIG9mIHRoZSBjbGllbnQgcHJvcGVydHkgdG8gZ2V0LCB1c2luZyBwZXJpb2RzIGZvciBuZXN0aW5nXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn1cbiAgICogQGV4YW1wbGVcbiAgICogY2xpZW50LnNoYXJkLmZldGNoQ2xpZW50VmFsdWVzKCdndWlsZHMuc2l6ZScpXG4gICAqICAgLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZyhgJHtyZXN1bHRzLnJlZHVjZSgocHJldiwgdmFsKSA9PiBwcmV2ICsgdmFsLCAwKX0gdG90YWwgZ3VpbGRzYCk7XG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAqL1xuICBmZXRjaENsaWVudFZhbHVlcyhwcm9wKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gbWVzc2FnZSA9PiB7XG4gICAgICAgIGlmICghbWVzc2FnZSB8fCBtZXNzYWdlLl9zRmV0Y2hQcm9wICE9PSBwcm9wKSByZXR1cm47XG4gICAgICAgIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lcik7XG4gICAgICAgIGlmICghbWVzc2FnZS5fZXJyb3IpIHJlc29sdmUobWVzc2FnZS5fcmVzdWx0KTsgZWxzZSByZWplY3QoVXRpbC5tYWtlRXJyb3IobWVzc2FnZS5fZXJyb3IpKTtcbiAgICAgIH07XG4gICAgICBwcm9jZXNzLm9uKCdtZXNzYWdlJywgbGlzdGVuZXIpO1xuXG4gICAgICB0aGlzLnNlbmQoeyBfc0ZldGNoUHJvcDogcHJvcCB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICBwcm9jZXNzLnJlbW92ZUxpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2YWx1YXRlcyBhIHNjcmlwdCBvbiBhbGwgc2hhcmRzLCBpbiB0aGUgY29udGV4dCBvZiB0aGUgQ2xpZW50cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNjcmlwdCBKYXZhU2NyaXB0IHRvIHJ1biBvbiBlYWNoIHNoYXJkXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5Pn0gUmVzdWx0cyBvZiB0aGUgc2NyaXB0IGV4ZWN1dGlvblxuICAgKi9cbiAgYnJvYWRjYXN0RXZhbChzY3JpcHQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgbGlzdGVuZXIgPSBtZXNzYWdlID0+IHtcbiAgICAgICAgaWYgKCFtZXNzYWdlIHx8IG1lc3NhZ2UuX3NFdmFsICE9PSBzY3JpcHQpIHJldHVybjtcbiAgICAgICAgcHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyKTtcbiAgICAgICAgaWYgKCFtZXNzYWdlLl9lcnJvcikgcmVzb2x2ZShtZXNzYWdlLl9yZXN1bHQpOyBlbHNlIHJlamVjdChVdGlsLm1ha2VFcnJvcihtZXNzYWdlLl9lcnJvcikpO1xuICAgICAgfTtcbiAgICAgIHByb2Nlc3Mub24oJ21lc3NhZ2UnLCBsaXN0ZW5lcik7XG5cbiAgICAgIHRoaXMuc2VuZCh7IF9zRXZhbDogc2NyaXB0IH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lcik7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBhbiBJUEMgbWVzc2FnZS5cbiAgICogQHBhcmFtIHsqfSBtZXNzYWdlIE1lc3NhZ2UgcmVjZWl2ZWRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9oYW5kbGVNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBpZiAoIW1lc3NhZ2UpIHJldHVybjtcbiAgICBpZiAobWVzc2FnZS5fZmV0Y2hQcm9wKSB7XG4gICAgICBjb25zdCBwcm9wcyA9IG1lc3NhZ2UuX2ZldGNoUHJvcC5zcGxpdCgnLicpO1xuICAgICAgbGV0IHZhbHVlID0gdGhpcy5jbGllbnQ7XG4gICAgICBmb3IgKGNvbnN0IHByb3Agb2YgcHJvcHMpIHZhbHVlID0gdmFsdWVbcHJvcF07XG4gICAgICB0aGlzLl9yZXNwb25kKCdmZXRjaFByb3AnLCB7IF9mZXRjaFByb3A6IG1lc3NhZ2UuX2ZldGNoUHJvcCwgX3Jlc3VsdDogdmFsdWUgfSk7XG4gICAgfSBlbHNlIGlmIChtZXNzYWdlLl9ldmFsKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9yZXNwb25kKCdldmFsJywgeyBfZXZhbDogbWVzc2FnZS5fZXZhbCwgX3Jlc3VsdDogdGhpcy5jbGllbnQuX2V2YWwobWVzc2FnZS5fZXZhbCkgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhpcy5fcmVzcG9uZCgnZXZhbCcsIHsgX2V2YWw6IG1lc3NhZ2UuX2V2YWwsIF9lcnJvcjogVXRpbC5tYWtlUGxhaW5FcnJvcihlcnIpIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIG1lc3NhZ2UgdG8gdGhlIG1hc3RlciBwcm9jZXNzLCBlbWl0dGluZyBhbiBlcnJvciBmcm9tIHRoZSBjbGllbnQgdXBvbiBmYWlsdXJlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUeXBlIG9mIHJlc3BvbnNlIHRvIHNlbmRcbiAgICogQHBhcmFtIHsqfSBtZXNzYWdlIE1lc3NhZ2UgdG8gc2VuZFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Jlc3BvbmQodHlwZSwgbWVzc2FnZSkge1xuICAgIHRoaXMuc2VuZChtZXNzYWdlKS5jYXRjaChlcnIgPT4ge1xuICAgICAgZXJyLm1lc3NhZ2UgPSBgRXJyb3Igd2hlbiBzZW5kaW5nICR7dHlwZX0gcmVzcG9uc2UgdG8gbWFzdGVyIHByb2Nlc3M6ICR7ZXJyLm1lc3NhZ2V9YDtcbiAgICAgIHRoaXMuY2xpZW50LmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzL2dldHMgdGhlIHNpbmdsZXRvbiBvZiB0aGlzIGNsYXNzLlxuICAgKiBAcGFyYW0ge0NsaWVudH0gY2xpZW50IFRoZSBjbGllbnQgdG8gdXNlXG4gICAqIEByZXR1cm5zIHtTaGFyZENsaWVudFV0aWx9XG4gICAqL1xuICBzdGF0aWMgc2luZ2xldG9uKGNsaWVudCkge1xuICAgIGlmICghdGhpcy5fc2luZ2xldG9uKSB7XG4gICAgICB0aGlzLl9zaW5nbGV0b24gPSBuZXcgdGhpcyhjbGllbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjbGllbnQuZW1pdCgnd2FybicsICdNdWx0aXBsZSBjbGllbnRzIGNyZWF0ZWQgaW4gY2hpbGQgcHJvY2Vzczsgb25seSB0aGUgZmlyc3Qgd2lsbCBoYW5kbGUgc2hhcmRpbmcgaGVscGVycy4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3NpbmdsZXRvbjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNoYXJkQ2xpZW50VXRpbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3NoYXJkaW5nL1NoYXJkQ2xpZW50VXRpbC5qc1xuLy8gbW9kdWxlIGlkID0gODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///81\n");

/***/ }),
/* 82 */
/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/sharding/Shard.js ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const childProcess = __webpack_require__(/*! child_process */ 43);\nconst path = __webpack_require__(/*! path */ 8);\nconst Util = __webpack_require__(/*! ../util/Util */ 4);\n\n/**\n * Represents a Shard spawned by the ShardingManager.\n */\nclass Shard {\n  /**\n   * @param {ShardingManager} manager The sharding manager\n   * @param {number} id The ID of this shard\n   * @param {Array} [args=[]] Command line arguments to pass to the script\n   */\n  constructor(manager, id, args = []) {\n    /**\n     * Manager that created the shard\n     * @type {ShardingManager}\n     */\n    this.manager = manager;\n\n    /**\n     * ID of the shard\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * The environment variables for the shard\n     * @type {Object}\n     */\n    this.env = Object.assign({}, process.env, {\n      SHARD_ID: this.id,\n      SHARD_COUNT: this.manager.totalShards,\n      CLIENT_TOKEN: this.manager.token,\n    });\n\n    /**\n     * Process of the shard\n     * @type {ChildProcess}\n     */\n    this.process = childProcess.fork(path.resolve(this.manager.file), args, {\n      env: this.env,\n    });\n    this.process.on('message', this._handleMessage.bind(this));\n    this.process.once('exit', () => {\n      if (this.manager.respawn) this.manager.createShard(this.id);\n    });\n\n    this._evals = new Map();\n    this._fetches = new Map();\n  }\n\n  /**\n   * Sends a message to the shard's process.\n   * @param {*} message Message to send to the shard\n   * @returns {Promise<Shard>}\n   */\n  send(message) {\n    return new Promise((resolve, reject) => {\n      const sent = this.process.send(message, err => {\n        if (err) reject(err); else resolve(this);\n      });\n      if (!sent) throw new Error('Failed to send message to shard\\'s process.');\n    });\n  }\n\n  /**\n   * Fetches a client property value of the shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @returns {Promise<*>}\n   * @example\n   * shard.fetchClientValue('guilds.size')\n   *   .then(count => {\n   *     console.log(`${count} guilds in shard ${shard.id}`);\n   *   })\n   *   .catch(console.error);\n   */\n  fetchClientValue(prop) {\n    if (this._fetches.has(prop)) return this._fetches.get(prop);\n\n    const promise = new Promise((resolve, reject) => {\n      const listener = message => {\n        if (!message || message._fetchProp !== prop) return;\n        this.process.removeListener('message', listener);\n        this._fetches.delete(prop);\n        resolve(message._result);\n      };\n      this.process.on('message', listener);\n\n      this.send({ _fetchProp: prop }).catch(err => {\n        this.process.removeListener('message', listener);\n        this._fetches.delete(prop);\n        reject(err);\n      });\n    });\n\n    this._fetches.set(prop, promise);\n    return promise;\n  }\n\n  /**\n   * Evaluates a script on the shard, in the context of the client.\n   * @param {string} script JavaScript to run on the shard\n   * @returns {Promise<*>} Result of the script execution\n   */\n  eval(script) {\n    if (this._evals.has(script)) return this._evals.get(script);\n\n    const promise = new Promise((resolve, reject) => {\n      const listener = message => {\n        if (!message || message._eval !== script) return;\n        this.process.removeListener('message', listener);\n        this._evals.delete(script);\n        if (!message._error) resolve(message._result); else reject(Util.makeError(message._error));\n      };\n      this.process.on('message', listener);\n\n      this.send({ _eval: script }).catch(err => {\n        this.process.removeListener('message', listener);\n        this._evals.delete(script);\n        reject(err);\n      });\n    });\n\n    this._evals.set(script, promise);\n    return promise;\n  }\n\n  /**\n   * Handles an IPC message.\n   * @param {*} message Message received\n   * @private\n   */\n  _handleMessage(message) {\n    if (message) {\n      // Shard is requesting a property fetch\n      if (message._sFetchProp) {\n        this.manager.fetchClientValues(message._sFetchProp).then(\n          results => this.send({ _sFetchProp: message._sFetchProp, _result: results }),\n          err => this.send({ _sFetchProp: message._sFetchProp, _error: Util.makePlainError(err) })\n        );\n        return;\n      }\n\n      // Shard is requesting an eval broadcast\n      if (message._sEval) {\n        this.manager.broadcastEval(message._sEval).then(\n          results => this.send({ _sEval: message._sEval, _result: results }),\n          err => this.send({ _sEval: message._sEval, _error: Util.makePlainError(err) })\n        );\n        return;\n      }\n    }\n\n    /**\n     * Emitted upon recieving a message from a shard.\n     * @event ShardingManager#message\n     * @param {Shard} shard Shard that sent the message\n     * @param {*} message Message that was received\n     */\n    this.manager.emit('message', this, message);\n  }\n}\n\nmodule.exports = Shard;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///82\n");

/***/ }),
/* 83 */
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _DiscordBot = __webpack_require__(/*! ./DiscordBot.js */ 84);\n\nvar _DiscordBot2 = _interopRequireDefault(_DiscordBot);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports.App = new _DiscordBot2.default();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL2luZGV4LmpzPzFmZGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IERpc2NvcmRCb3QgZnJvbSAnLi9EaXNjb3JkQm90LmpzJztcbm1vZHVsZS5leHBvcnRzLkFwcCA9IG5ldyBEaXNjb3JkQm90KCk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9pbmRleC5qcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBOzs7OztBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///83\n");

/***/ }),
/* 84 */
/*!***************************!*\
  !*** ./src/DiscordBot.js ***!
  \***************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _discord = __webpack_require__(/*! ../node_modules/discord.js */ 45);\n\nvar _discord2 = _interopRequireDefault(_discord);\n\nvar _CommandCenter = __webpack_require__(/*! ./components/CommandCenter */ 200);\n\nvar _CommandCenter2 = _interopRequireDefault(_CommandCenter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n//  Components\n\n\nvar DiscordBot = function DiscordBot() {\n  _classCallCheck(this, DiscordBot);\n\n  //  Settings up the local objects.\n  var client = new _discord2.default.Client();\n  var commandCenter = new _CommandCenter2.default();\n\n  client.on('ready', function () {\n    console.log('Nightwatch is ready!');\n  });\n\n  client.on(\"message\", function (message) {\n    commandCenter.checkCommands(message);\n  });\n\n  client.login(\"NDI2NDMyNjA2OTE0MjE1OTM2.DZWHwA.xh_0cX3jO0P3e_CRMiGUOjbCDq0\");\n};\n\nexports.default = DiscordBot;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL0Rpc2NvcmRCb3QuanM/MmIwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGlzY29yZCBmcm9tICcuLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcyc7XG5cbi8vICBDb21wb25lbnRzXG5pbXBvcnQgQ29tbWFuZENlbnRlciBmcm9tICcuL2NvbXBvbmVudHMvQ29tbWFuZENlbnRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpc2NvcmRCb3Qge1xuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIC8vICBTZXR0aW5ncyB1cCB0aGUgbG9jYWwgb2JqZWN0cy5cbiAgICBsZXQgY2xpZW50ID0gbmV3IERpc2NvcmQuQ2xpZW50KCk7XG4gICAgbGV0IGNvbW1hbmRDZW50ZXIgPSBuZXcgQ29tbWFuZENlbnRlcigpO1xuXG4gICAgY2xpZW50Lm9uKCdyZWFkeScsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdOaWdodHdhdGNoIGlzIHJlYWR5IScpO1xuICAgIH0pO1xuXG4gICAgY2xpZW50Lm9uKFwibWVzc2FnZVwiLCAobWVzc2FnZSkgPT4ge1xuICAgICAgY29tbWFuZENlbnRlci5jaGVja0NvbW1hbmRzKG1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gICAgY2xpZW50LmxvZ2luKFwiTkRJMk5ETXlOakEyT1RFME1qRTFPVE0yLkRaV0h3QS54aF8wY1gzak8wUDNlX0NSTWlHVU9qYkNEcTBcIik7XG4gIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL0Rpc2NvcmRCb3QuanMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7OztBQUVBO0FBQ0E7Ozs7Ozs7QUFGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFqQkEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///84\n");

/***/ }),
/* 85 */
/*!*****************************************!*\
  !*** ./node_modules/snekfetch/index.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./src */ 86);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL2luZGV4LmpzPzI3Y2QiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NyYycpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA4NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///85\n");

/***/ }),
/* 86 */
/*!*********************************************!*\
  !*** ./node_modules/snekfetch/src/index.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const browser = typeof window !== 'undefined';\nconst querystring = __webpack_require__(/*! querystring */ 46);\nconst transport = browser ? __webpack_require__(/*! ./browser */ 87) : __webpack_require__(/*! ./node */ 88);\n\n/**\n * Snekfetch\n * @extends Stream.Readable\n * @extends Promise\n */\nclass Snekfetch extends transport.Extension {\n  /**\n   * Options to pass to the Snekfetch constructor\n   * @typedef {object} SnekfetchOptions\n   * @memberof Snekfetch\n   * @property {object} [headers] Headers to initialize the request with\n   * @property {object|string|Buffer} [data] Data to initialize the request with\n   * @property {string|Object} [query] Query to intialize the request with\n   * @property {boolean} [followRedirects=true] If the request should follow redirects\n   * @property {object} [qs=querystring] Querystring module to use, any object providing\n   * `stringify` and `parse` for querystrings\n   * @property {number} [version = 1] The http version to use [1 or 2]\n   * @property {external:Agent} [agent] Whether to use an http agent\n   */\n\n  /**\n   * Create a request.\n   * Usually you'll want to do `Snekfetch#method(url [, options])` instead of\n   * `new Snekfetch(method, url [, options])`\n   * @param {string} method HTTP method\n   * @param {string} url URL\n   * @param {SnekfetchOptions} [opts] Options\n   */\n  constructor(method, url, opts = {}) {\n    super();\n    this.options = Object.assign({ version: 1, qs: querystring, followRedirects: true }, opts);\n    this.request = transport.buildRequest.call(this, method, url, opts);\n    if (opts.headers)\n      this.set(opts.headers);\n    if (opts.query)\n      this.query(opts.query);\n    if (opts.data)\n      this.send(opts.data);\n  }\n\n  /**\n   * Add a query param to the request\n   * @param {string|Object} name Name of query param or object to add to query\n   * @param {string} [value] If name is a string value, this will be the value of the query param\n   * @returns {Snekfetch} This request\n   */\n  query(name, value) {\n    if (!this.request.query)\n      this.request.query = {};\n    if (name !== null && typeof name === 'object') {\n      for (const [k, v] of Object.entries(name))\n        this.query(k, v);\n    } else {\n      this.request.query[name] = value;\n    }\n\n    return this;\n  }\n\n  /**\n   * Add a header to the request\n   * @param {string|Object} name Name of query param or object to add to headers\n   * @param {string} [value] If name is a string value, this will be the value of the header\n   * @returns {Snekfetch} This request\n   */\n  set(name, value) {\n    if (name !== null && typeof name === 'object') {\n      for (const key of Object.keys(name))\n        this.set(key, name[key]);\n    } else {\n      this.request.setHeader(name, value);\n    }\n\n    return this;\n  }\n\n  /**\n   * Attach a form data object\n   * @param {string} name Name of the form attachment\n   * @param {string|Object|Buffer} data Data for the attachment\n   * @param {string} [filename] Optional filename if form attachment name needs to be overridden\n   * @returns {Snekfetch} This request\n   */\n  attach(...args) {\n    const form = this.data instanceof transport.FormData ? this.data : this.data = new transport.FormData();\n    if (typeof args[0] === 'object') {\n      for (const [k, v] of Object.entries(args[0]))\n        this.attach(k, v);\n    } else {\n      form.append(...args);\n    }\n\n    return this;\n  }\n\n  /**\n   * Send data with the request\n   * @param {string|Buffer|Object} data Data to send\n   * @returns {Snekfetch} This request\n   */\n  send(data) {\n    if (data instanceof transport.FormData || transport.shouldSendRaw(data)) {\n      this.data = data;\n    } else if (data !== null && typeof data === 'object') {\n      const header = this.request.getHeader('content-type');\n      let serialize;\n      if (header) {\n        if (header.includes('json'))\n          serialize = JSON.stringify;\n        else if (header.includes('urlencoded'))\n          serialize = this.options.qs.stringify;\n      } else {\n        this.set('Content-Type', 'application/json');\n        serialize = JSON.stringify;\n      }\n      this.data = serialize(data);\n    } else {\n      this.data = data;\n    }\n    return this;\n  }\n\n  then(resolver, rejector) {\n    if (this._response)\n      return this._response.then(resolver, rejector);\n    // eslint-disable-next-line no-return-assign\n    return this._response = transport.finalizeRequest.call(this)\n      .then(({ response, raw, redirect, headers }) => {\n        if (redirect) {\n          let method = this.request.method;\n          if ([301, 302].includes(response.statusCode)) {\n            if (method !== 'HEAD')\n              method = 'GET';\n            this.data = null;\n          } else if (response.statusCode === 303) {\n            method = 'GET';\n          }\n\n          const redirectHeaders = this.request.getHeaders();\n          delete redirectHeaders.host;\n          return new Snekfetch(method, redirect, {\n            data: this.data,\n            headers: redirectHeaders,\n            version: this.options.version,\n          });\n        }\n\n        const statusCode = response.statusCode || response.status;\n        // forgive me :(\n        const self = this; // eslint-disable-line consistent-this\n        /**\n         * Response from Snekfetch\n         * @typedef {Object} SnekfetchResponse\n         * @memberof Snekfetch\n         * @prop {HTTP.Request} request\n         * @prop {?string|object|Buffer} body Processed response body\n         * @prop {string} text Raw response body\n         * @prop {boolean} ok If the response code is >= 200 and < 300\n         * @prop {number} status HTTP status code\n         * @prop {string} statusText Human readable HTTP status\n         */\n        const res = {\n          request: this.request,\n          get body() {\n            delete res.body;\n            const type = this.headers['content-type'];\n            if (type && type.includes('application/json')) {\n              try {\n                res.body = JSON.parse(res.text);\n              } catch (err) {\n                res.body = res.text;\n              }\n            } else if (type && type.includes('application/x-www-form-urlencoded')) {\n              res.body = self.options.qs.parse(res.text);\n            } else {\n              res.body = raw;\n            }\n\n            return res.body;\n          },\n          text: raw.toString(),\n          ok: statusCode >= 200 && statusCode < 400,\n          headers: headers || response.headers,\n          status: statusCode,\n          statusText: response.statusText || transport.STATUS_CODES[response.statusCode],\n        };\n\n        if (res.ok) {\n          return res;\n        } else {\n          const err = new Error(`${res.status} ${res.statusText}`.trim());\n          Object.assign(err, res);\n          return Promise.reject(err);\n        }\n      })\n      .then(resolver, rejector);\n  }\n\n  catch(rejector) {\n    return this.then(null, rejector);\n  }\n\n  /**\n   * End the request\n   * @param {Function} [cb] Optional callback to handle the response\n   * @returns {Promise} This request\n   */\n  end(cb) {\n    return this.then(\n      (res) => cb ? cb(null, res) : res,\n      (err) => cb ? cb(err, err.status ? err : null) : Promise.reject(err)\n    );\n  }\n\n  _finalizeRequest() {\n    if (!this.request)\n      return;\n\n    if (this.request.method !== 'HEAD')\n      this.set('Accept-Encoding', 'gzip, deflate');\n    if (this.data && this.data.getBoundary)\n      this.set('Content-Type', `multipart/form-data; boundary=${this.data.getBoundary()}`);\n\n    if (this.request.query) {\n      const [path, query] = this.request.path.split('?');\n      this.request.path = `${path}?${this.options.qs.stringify(this.request.query)}${query ? `&${query}` : ''}`;\n    }\n  }\n}\n\n/**\n * Create a ((THIS)) request\n * @dynamic this.METHODS\n * @method Snekfetch.((THIS)lowerCase)\n * @param {string} url The url to request\n * @param {Snekfetch.snekfetchOptions} [opts] Options\n * @returns {Snekfetch}\n */\nSnekfetch.METHODS = transport.METHODS.concat('BREW').filter((m) => m !== 'M-SEARCH');\nfor (const method of Snekfetch.METHODS) {\n  Snekfetch[method.toLowerCase()] = function runMethod(url, opts) {\n    const Constructor = this.prototype instanceof Snekfetch ? this : Snekfetch;\n    return new Constructor(method, url, opts);\n  };\n}\n\nmodule.exports = Snekfetch;\n\n/**\n * @external Agent\n * @see {@link https://nodejs.org/api/http.html#http_class_http_agent}\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///86\n");

/***/ }),
/* 87 */
/*!***********************************************!*\
  !*** ./node_modules/snekfetch/src/browser.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("function buildRequest(method, url) {\n  return {\n    method,\n    path: url,\n    redirect: this.options.followRedirects ? 'follow' : 'manual',\n    headers: {},\n    setHeader(name, value) {\n      this.headers[name.toLowerCase()] = value;\n    },\n    getHeader(name) {\n      return this.headers[name.toLowerCase()];\n    },\n  };\n}\n\nfunction finalizeRequest() {\n  this._finalizeRequest();\n  if (this.data)\n    this.request.body = this.data;\n  return window.fetch(this.request.path, this.request)\n    .then((r) => r.text().then((t) => {\n      const headers = {};\n      for (const [k, v] of r.headers.entries())\n        headers[k.toLowerCase()] = v;\n      return { response: r, raw: t, headers };\n    }));\n}\n\nmodule.exports = {\n  buildRequest, finalizeRequest,\n  shouldSendRaw: () => false,\n  METHODS: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE', 'CONNECT', 'OPTIONS', 'PATCH'],\n  STATUS_CODES: {},\n  Extension: Object,\n  FormData: window.FormData,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL3NyYy9icm93c2VyLmpzPzVmMWIiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYnVpbGRSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gIHJldHVybiB7XG4gICAgbWV0aG9kLFxuICAgIHBhdGg6IHVybCxcbiAgICByZWRpcmVjdDogdGhpcy5vcHRpb25zLmZvbGxvd1JlZGlyZWN0cyA/ICdmb2xsb3cnIDogJ21hbnVhbCcsXG4gICAgaGVhZGVyczoge30sXG4gICAgc2V0SGVhZGVyKG5hbWUsIHZhbHVlKSB7XG4gICAgICB0aGlzLmhlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXSA9IHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0SGVhZGVyKG5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmhlYWRlcnNbbmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5hbGl6ZVJlcXVlc3QoKSB7XG4gIHRoaXMuX2ZpbmFsaXplUmVxdWVzdCgpO1xuICBpZiAodGhpcy5kYXRhKVxuICAgIHRoaXMucmVxdWVzdC5ib2R5ID0gdGhpcy5kYXRhO1xuICByZXR1cm4gd2luZG93LmZldGNoKHRoaXMucmVxdWVzdC5wYXRoLCB0aGlzLnJlcXVlc3QpXG4gICAgLnRoZW4oKHIpID0+IHIudGV4dCgpLnRoZW4oKHQpID0+IHtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgW2ssIHZdIG9mIHIuaGVhZGVycy5lbnRyaWVzKCkpXG4gICAgICAgIGhlYWRlcnNbay50b0xvd2VyQ2FzZSgpXSA9IHY7XG4gICAgICByZXR1cm4geyByZXNwb25zZTogciwgcmF3OiB0LCBoZWFkZXJzIH07XG4gICAgfSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYnVpbGRSZXF1ZXN0LCBmaW5hbGl6ZVJlcXVlc3QsXG4gIHNob3VsZFNlbmRSYXc6ICgpID0+IGZhbHNlLFxuICBNRVRIT0RTOiBbJ0dFVCcsICdIRUFEJywgJ1BPU1QnLCAnUFVUJywgJ0RFTEVURScsICdDT05ORUNUJywgJ09QVElPTlMnLCAnUEFUQ0gnXSxcbiAgU1RBVFVTX0NPREVTOiB7fSxcbiAgRXh0ZW5zaW9uOiBPYmplY3QsXG4gIEZvcm1EYXRhOiB3aW5kb3cuRm9ybURhdGEsXG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL3NyYy9icm93c2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///87\n");

/***/ }),
/* 88 */
/*!**************************************************!*\
  !*** ./node_modules/snekfetch/src/node/index.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const zlib = __webpack_require__(/*! zlib */ 28);\nconst http = __webpack_require__(/*! http */ 29);\nconst https = __webpack_require__(/*! https */ 47);\nconst URL = __webpack_require__(/*! url */ 30);\nconst Stream = __webpack_require__(/*! stream */ 31);\nconst FormData = __webpack_require__(/*! ./FormData */ 89);\n\nconst Package = __webpack_require__(/*! ../../package.json */ 92);\n\nconst transports = {\n  'http:': http,\n  'https:': https,\n  'file:': __webpack_require__(/*! ./transports/file */ 93),\n};\n\nfunction buildRequest(method, url) {\n  /* istanbul ignore next */\n  this._read = () => {\n    this.resume();\n    if (this._response)\n      return;\n    this.catch((err) => this.emit('error', err));\n  };\n\n  this.options.lastBuiltUrl = url;\n\n  const options = URL.parse(url);\n  options.encoding = 'utf8';\n\n  if (!options.protocol)\n    throw new Error('URL must have a valid protocol');\n\n  const transport = transports[options.protocol];\n  options.method = method.toUpperCase();\n\n  if (this.options.headers)\n    options.headers = this.options.headers;\n\n  if (this.options.agent)\n    options.agent = this.options.agent;\n  else if (transport.Agent && this.options.followRedirects !== false)\n    options.agent = new transport.Agent({ keepAlive: true });\n\n  if (options.port)\n    options.port = parseInt(options.port);\n\n  this.options._req = options;\n  const request = transport.request(options);\n  if (request.setNoDelay)\n    request.setNoDelay(true);\n  return request;\n}\n\nfunction finalizeRequest() {\n  return new Promise((resolve, reject) => {\n    const request = this.request;\n\n    let socket;\n\n    const handleError = (err) => {\n      if (!err)\n        err = new Error('Unknown error occured');\n      err.request = request;\n      reject(err);\n      if (socket)\n        socket.removeListener('error', handleError);\n    };\n\n    request.once('abort', handleError);\n    request.once('error', handleError);\n    request.once('socket', (s) => {\n      socket = s;\n      s.once('error', handleError);\n    });\n\n    request.once('response', (response) => {\n      if (socket)\n        socket.removeListener('error', handleError);\n      let stream = response;\n      if (shouldUnzip(response)) {\n        stream = response.pipe(zlib.createUnzip({\n          flush: zlib.Z_SYNC_FLUSH,\n          finishFlush: zlib.Z_SYNC_FLUSH,\n        }));\n      }\n\n      if (this.options.followRedirects !== false && [301, 302, 303, 307, 308].includes(response.statusCode)) {\n        resolve({\n          response,\n          redirect: URL.resolve(this.options.lastBuiltUrl, response.headers.location),\n        });\n        response.destroy();\n      } else {\n        const body = [];\n\n        stream.on('data', (chunk) => {\n          if (!this.push(chunk))\n            this.pause();\n          body.push(chunk);\n        });\n\n        stream.once('end', () => {\n          this.push(null);\n          const raw = Buffer.concat(body);\n          resolve({ response, raw, redirect: false });\n        });\n      }\n    });\n\n    if (!this.request.getHeader('user-agent'))\n      this.set('User-Agent', `snekfetch/${Package.version} (${Package.homepage})`);\n\n    this._finalizeRequest();\n    let data = this.data;\n    if (data && data.end)\n      data = data.end();\n    if (Array.isArray(data)) {\n      for (const chunk of data)\n        request.write(chunk);\n      request.end();\n    } else if (data instanceof Stream) {\n      data.pipe(request);\n    } else if (data instanceof Buffer) {\n      request.end(data);\n    } else if (data) {\n      request.end(data);\n    } else {\n      request.end();\n    }\n  });\n}\n\nfunction shouldSendRaw(data) {\n  return data instanceof Buffer || data instanceof Stream;\n}\n\nfunction shouldUnzip(res) {\n  if (res.statusCode === 204 || res.statusCode === 304)\n    return false;\n  if (res.headers['content-length'] === '0')\n    return false;\n  return /^\\s*(?:deflate|gzip)\\s*$/.test(res.headers['content-encoding']);\n}\n\nmodule.exports = {\n  buildRequest, finalizeRequest, shouldSendRaw,\n  METHODS: http.METHODS,\n  STATUS_CODES: http.STATUS_CODES,\n  FormData,\n  Extension: Stream.Readable,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL3NyYy9ub2RlL2luZGV4LmpzP2E1OWIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgemxpYiA9IHJlcXVpcmUoJ3psaWInKTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5jb25zdCBVUkwgPSByZXF1aXJlKCd1cmwnKTtcbmNvbnN0IFN0cmVhbSA9IHJlcXVpcmUoJ3N0cmVhbScpO1xuY29uc3QgRm9ybURhdGEgPSByZXF1aXJlKCcuL0Zvcm1EYXRhJyk7XG5cbmNvbnN0IFBhY2thZ2UgPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKTtcblxuY29uc3QgdHJhbnNwb3J0cyA9IHtcbiAgJ2h0dHA6JzogaHR0cCxcbiAgJ2h0dHBzOic6IGh0dHBzLFxuICAnZmlsZTonOiByZXF1aXJlKCcuL3RyYW5zcG9ydHMvZmlsZScpLFxufTtcblxuZnVuY3Rpb24gYnVpbGRSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHRoaXMuX3JlYWQgPSAoKSA9PiB7XG4gICAgdGhpcy5yZXN1bWUoKTtcbiAgICBpZiAodGhpcy5fcmVzcG9uc2UpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5jYXRjaCgoZXJyKSA9PiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKSk7XG4gIH07XG5cbiAgdGhpcy5vcHRpb25zLmxhc3RCdWlsdFVybCA9IHVybDtcblxuICBjb25zdCBvcHRpb25zID0gVVJMLnBhcnNlKHVybCk7XG4gIG9wdGlvbnMuZW5jb2RpbmcgPSAndXRmOCc7XG5cbiAgaWYgKCFvcHRpb25zLnByb3RvY29sKVxuICAgIHRocm93IG5ldyBFcnJvcignVVJMIG11c3QgaGF2ZSBhIHZhbGlkIHByb3RvY29sJyk7XG5cbiAgY29uc3QgdHJhbnNwb3J0ID0gdHJhbnNwb3J0c1tvcHRpb25zLnByb3RvY29sXTtcbiAgb3B0aW9ucy5tZXRob2QgPSBtZXRob2QudG9VcHBlckNhc2UoKTtcblxuICBpZiAodGhpcy5vcHRpb25zLmhlYWRlcnMpXG4gICAgb3B0aW9ucy5oZWFkZXJzID0gdGhpcy5vcHRpb25zLmhlYWRlcnM7XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5hZ2VudClcbiAgICBvcHRpb25zLmFnZW50ID0gdGhpcy5vcHRpb25zLmFnZW50O1xuICBlbHNlIGlmICh0cmFuc3BvcnQuQWdlbnQgJiYgdGhpcy5vcHRpb25zLmZvbGxvd1JlZGlyZWN0cyAhPT0gZmFsc2UpXG4gICAgb3B0aW9ucy5hZ2VudCA9IG5ldyB0cmFuc3BvcnQuQWdlbnQoeyBrZWVwQWxpdmU6IHRydWUgfSk7XG5cbiAgaWYgKG9wdGlvbnMucG9ydClcbiAgICBvcHRpb25zLnBvcnQgPSBwYXJzZUludChvcHRpb25zLnBvcnQpO1xuXG4gIHRoaXMub3B0aW9ucy5fcmVxID0gb3B0aW9ucztcbiAgY29uc3QgcmVxdWVzdCA9IHRyYW5zcG9ydC5yZXF1ZXN0KG9wdGlvbnMpO1xuICBpZiAocmVxdWVzdC5zZXROb0RlbGF5KVxuICAgIHJlcXVlc3Quc2V0Tm9EZWxheSh0cnVlKTtcbiAgcmV0dXJuIHJlcXVlc3Q7XG59XG5cbmZ1bmN0aW9uIGZpbmFsaXplUmVxdWVzdCgpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5yZXF1ZXN0O1xuXG4gICAgbGV0IHNvY2tldDtcblxuICAgIGNvbnN0IGhhbmRsZUVycm9yID0gKGVycikgPT4ge1xuICAgICAgaWYgKCFlcnIpXG4gICAgICAgIGVyciA9IG5ldyBFcnJvcignVW5rbm93biBlcnJvciBvY2N1cmVkJyk7XG4gICAgICBlcnIucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgICByZWplY3QoZXJyKTtcbiAgICAgIGlmIChzb2NrZXQpXG4gICAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBoYW5kbGVFcnJvcik7XG4gICAgfTtcblxuICAgIHJlcXVlc3Qub25jZSgnYWJvcnQnLCBoYW5kbGVFcnJvcik7XG4gICAgcmVxdWVzdC5vbmNlKCdlcnJvcicsIGhhbmRsZUVycm9yKTtcbiAgICByZXF1ZXN0Lm9uY2UoJ3NvY2tldCcsIChzKSA9PiB7XG4gICAgICBzb2NrZXQgPSBzO1xuICAgICAgcy5vbmNlKCdlcnJvcicsIGhhbmRsZUVycm9yKTtcbiAgICB9KTtcblxuICAgIHJlcXVlc3Qub25jZSgncmVzcG9uc2UnLCAocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChzb2NrZXQpXG4gICAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBoYW5kbGVFcnJvcik7XG4gICAgICBsZXQgc3RyZWFtID0gcmVzcG9uc2U7XG4gICAgICBpZiAoc2hvdWxkVW56aXAocmVzcG9uc2UpKSB7XG4gICAgICAgIHN0cmVhbSA9IHJlc3BvbnNlLnBpcGUoemxpYi5jcmVhdGVVbnppcCh7XG4gICAgICAgICAgZmx1c2g6IHpsaWIuWl9TWU5DX0ZMVVNILFxuICAgICAgICAgIGZpbmlzaEZsdXNoOiB6bGliLlpfU1lOQ19GTFVTSCxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmZvbGxvd1JlZGlyZWN0cyAhPT0gZmFsc2UgJiYgWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XS5pbmNsdWRlcyhyZXNwb25zZS5zdGF0dXNDb2RlKSkge1xuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICByZWRpcmVjdDogVVJMLnJlc29sdmUodGhpcy5vcHRpb25zLmxhc3RCdWlsdFVybCwgcmVzcG9uc2UuaGVhZGVycy5sb2NhdGlvbiksXG4gICAgICAgIH0pO1xuICAgICAgICByZXNwb25zZS5kZXN0cm95KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBib2R5ID0gW107XG5cbiAgICAgICAgc3RyZWFtLm9uKCdkYXRhJywgKGNodW5rKSA9PiB7XG4gICAgICAgICAgaWYgKCF0aGlzLnB1c2goY2h1bmspKVxuICAgICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICAgIGJvZHkucHVzaChjaHVuayk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0cmVhbS5vbmNlKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5wdXNoKG51bGwpO1xuICAgICAgICAgIGNvbnN0IHJhdyA9IEJ1ZmZlci5jb25jYXQoYm9keSk7XG4gICAgICAgICAgcmVzb2x2ZSh7IHJlc3BvbnNlLCByYXcsIHJlZGlyZWN0OiBmYWxzZSB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIXRoaXMucmVxdWVzdC5nZXRIZWFkZXIoJ3VzZXItYWdlbnQnKSlcbiAgICAgIHRoaXMuc2V0KCdVc2VyLUFnZW50JywgYHNuZWtmZXRjaC8ke1BhY2thZ2UudmVyc2lvbn0gKCR7UGFja2FnZS5ob21lcGFnZX0pYCk7XG5cbiAgICB0aGlzLl9maW5hbGl6ZVJlcXVlc3QoKTtcbiAgICBsZXQgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmVuZClcbiAgICAgIGRhdGEgPSBkYXRhLmVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBmb3IgKGNvbnN0IGNodW5rIG9mIGRhdGEpXG4gICAgICAgIHJlcXVlc3Qud3JpdGUoY2h1bmspO1xuICAgICAgcmVxdWVzdC5lbmQoKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBTdHJlYW0pIHtcbiAgICAgIGRhdGEucGlwZShyZXF1ZXN0KTtcbiAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgIHJlcXVlc3QuZW5kKGRhdGEpO1xuICAgIH0gZWxzZSBpZiAoZGF0YSkge1xuICAgICAgcmVxdWVzdC5lbmQoZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3QuZW5kKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkU2VuZFJhdyhkYXRhKSB7XG4gIHJldHVybiBkYXRhIGluc3RhbmNlb2YgQnVmZmVyIHx8IGRhdGEgaW5zdGFuY2VvZiBTdHJlYW07XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVuemlwKHJlcykge1xuICBpZiAocmVzLnN0YXR1c0NvZGUgPT09IDIwNCB8fCByZXMuc3RhdHVzQ29kZSA9PT0gMzA0KVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKHJlcy5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddID09PSAnMCcpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gL15cXHMqKD86ZGVmbGF0ZXxnemlwKVxccyokLy50ZXN0KHJlcy5oZWFkZXJzWydjb250ZW50LWVuY29kaW5nJ10pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYnVpbGRSZXF1ZXN0LCBmaW5hbGl6ZVJlcXVlc3QsIHNob3VsZFNlbmRSYXcsXG4gIE1FVEhPRFM6IGh0dHAuTUVUSE9EUyxcbiAgU1RBVFVTX0NPREVTOiBodHRwLlNUQVRVU19DT0RFUyxcbiAgRm9ybURhdGEsXG4gIEV4dGVuc2lvbjogU3RyZWFtLlJlYWRhYmxlLFxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3NuZWtmZXRjaC9zcmMvbm9kZS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gODhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///88\n");

/***/ }),
/* 89 */
/*!*****************************************************!*\
  !*** ./node_modules/snekfetch/src/node/FormData.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const path = __webpack_require__(/*! path */ 8);\nconst mime = __webpack_require__(/*! ./mime */ 48);\n\nclass FormData {\n  constructor() {\n    this.boundary = `--snekfetch--${Math.random().toString().slice(2, 7)}`;\n    this.buffers = [];\n  }\n\n  append(name, data, filename) {\n    if (typeof data === 'undefined')\n      return;\n    let str = `\\r\\n--${this.boundary}\\r\\nContent-Disposition: form-data; name=\"${name}\"`;\n    let mimetype = null;\n    if (filename) {\n      str += `; filename=\"${filename}\"`;\n      mimetype = 'application/octet-stream';\n      const extname = path.extname(filename).slice(1);\n      if (extname)\n        mimetype = mime.lookup(extname);\n    }\n\n    if (data instanceof Buffer) {\n      mimetype = mime.buffer(data);\n    } else if (typeof data === 'object') {\n      mimetype = 'application/json';\n      data = Buffer.from(JSON.stringify(data));\n    } else {\n      data = Buffer.from(String(data));\n    }\n\n    if (mimetype)\n      str += `\\r\\nContent-Type: ${mimetype}`;\n    this.buffers.push(Buffer.from(`${str}\\r\\n\\r\\n`));\n    this.buffers.push(data);\n  }\n\n  getBoundary() {\n    return this.boundary;\n  }\n\n  end() {\n    return Buffer.concat([...this.buffers, Buffer.from(`\\r\\n--${this.boundary}--`)]);\n  }\n\n  get length() {\n    return this.buffers.reduce((sum, b) => sum + Buffer.byteLength(b), 0);\n  }\n}\n\nmodule.exports = FormData;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL3NyYy9ub2RlL0Zvcm1EYXRhLmpzP2Q3YTEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IG1pbWUgPSByZXF1aXJlKCcuL21pbWUnKTtcblxuY2xhc3MgRm9ybURhdGEge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmJvdW5kYXJ5ID0gYC0tc25la2ZldGNoLS0ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoKS5zbGljZSgyLCA3KX1gO1xuICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICB9XG5cbiAgYXBwZW5kKG5hbWUsIGRhdGEsIGZpbGVuYW1lKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJylcbiAgICAgIHJldHVybjtcbiAgICBsZXQgc3RyID0gYFxcclxcbi0tJHt0aGlzLmJvdW5kYXJ5fVxcclxcbkNvbnRlbnQtRGlzcG9zaXRpb246IGZvcm0tZGF0YTsgbmFtZT1cIiR7bmFtZX1cImA7XG4gICAgbGV0IG1pbWV0eXBlID0gbnVsbDtcbiAgICBpZiAoZmlsZW5hbWUpIHtcbiAgICAgIHN0ciArPSBgOyBmaWxlbmFtZT1cIiR7ZmlsZW5hbWV9XCJgO1xuICAgICAgbWltZXR5cGUgPSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJztcbiAgICAgIGNvbnN0IGV4dG5hbWUgPSBwYXRoLmV4dG5hbWUoZmlsZW5hbWUpLnNsaWNlKDEpO1xuICAgICAgaWYgKGV4dG5hbWUpXG4gICAgICAgIG1pbWV0eXBlID0gbWltZS5sb29rdXAoZXh0bmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgIG1pbWV0eXBlID0gbWltZS5idWZmZXIoZGF0YSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1pbWV0eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IEJ1ZmZlci5mcm9tKFN0cmluZyhkYXRhKSk7XG4gICAgfVxuXG4gICAgaWYgKG1pbWV0eXBlKVxuICAgICAgc3RyICs9IGBcXHJcXG5Db250ZW50LVR5cGU6ICR7bWltZXR5cGV9YDtcbiAgICB0aGlzLmJ1ZmZlcnMucHVzaChCdWZmZXIuZnJvbShgJHtzdHJ9XFxyXFxuXFxyXFxuYCkpO1xuICAgIHRoaXMuYnVmZmVycy5wdXNoKGRhdGEpO1xuICB9XG5cbiAgZ2V0Qm91bmRhcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuYm91bmRhcnk7XG4gIH1cblxuICBlbmQoKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoWy4uLnRoaXMuYnVmZmVycywgQnVmZmVyLmZyb20oYFxcclxcbi0tJHt0aGlzLmJvdW5kYXJ5fS0tYCldKTtcbiAgfVxuXG4gIGdldCBsZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuYnVmZmVycy5yZWR1Y2UoKHN1bSwgYikgPT4gc3VtICsgQnVmZmVyLmJ5dGVMZW5ndGgoYiksIDApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRm9ybURhdGE7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zbmVrZmV0Y2gvc3JjL25vZGUvRm9ybURhdGEuanNcbi8vIG1vZHVsZSBpZCA9IDg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///89\n");

/***/ }),
/* 90 */
/*!****************************************************!*\
  !*** ./node_modules/snekfetch/src/node/mimes.json ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = {\"123\":\"application/vnd.lotus-1-2-3\",\"ez\":\"application/andrew-inset\",\"aw\":\"application/applixware\",\"atom\":\"application/atom+xml\",\"atomcat\":\"application/atomcat+xml\",\"atomsvc\":\"application/atomsvc+xml\",\"bdoc\":\"application/x-bdoc\",\"ccxml\":\"application/ccxml+xml\",\"cdmia\":\"application/cdmi-capability\",\"cdmic\":\"application/cdmi-container\",\"cdmid\":\"application/cdmi-domain\",\"cdmio\":\"application/cdmi-object\",\"cdmiq\":\"application/cdmi-queue\",\"cu\":\"application/cu-seeme\",\"mpd\":\"application/dash+xml\",\"davmount\":\"application/davmount+xml\",\"dbk\":\"application/docbook+xml\",\"dssc\":\"application/dssc+der\",\"xdssc\":\"application/dssc+xml\",\"ecma\":\"application/ecmascript\",\"emma\":\"application/emma+xml\",\"epub\":\"application/epub+zip\",\"exi\":\"application/exi\",\"pfr\":\"application/font-tdpfr\",\"woff\":\"application/font-woff\",\"woff2\":\"application/font-woff2\",\"geojson\":\"application/geo+json\",\"gml\":\"application/gml+xml\",\"gpx\":\"application/gpx+xml\",\"gxf\":\"application/gxf\",\"stk\":\"application/hyperstudio\",\"ink\":\"application/inkml+xml\",\"inkml\":\"application/inkml+xml\",\"ipfix\":\"application/ipfix\",\"jar\":\"application/java-archive\",\"war\":\"application/java-archive\",\"ear\":\"application/java-archive\",\"ser\":\"application/java-serialized-object\",\"class\":\"application/java-vm\",\"js\":\"application/javascript\",\"json\":\"application/json\",\"map\":\"application/json\",\"json5\":\"application/json5\",\"jsonml\":\"application/jsonml+json\",\"jsonld\":\"application/ld+json\",\"lostxml\":\"application/lost+xml\",\"hqx\":\"application/mac-binhex40\",\"cpt\":\"application/mac-compactpro\",\"mads\":\"application/mads+xml\",\"webmanifest\":\"application/manifest+json\",\"mrc\":\"application/marc\",\"mrcx\":\"application/marcxml+xml\",\"ma\":\"application/mathematica\",\"nb\":\"application/mathematica\",\"mb\":\"application/mathematica\",\"mathml\":\"application/mathml+xml\",\"mbox\":\"application/mbox\",\"mscml\":\"application/mediaservercontrol+xml\",\"metalink\":\"application/metalink+xml\",\"meta4\":\"application/metalink4+xml\",\"mets\":\"application/mets+xml\",\"mods\":\"application/mods+xml\",\"m21\":\"application/mp21\",\"mp21\":\"application/mp21\",\"mp4s\":\"application/mp4\",\"m4p\":\"application/mp4\",\"doc\":\"application/msword\",\"dot\":\"application/msword\",\"mxf\":\"application/mxf\",\"bin\":\"application/octet-stream\",\"dms\":\"application/octet-stream\",\"lrf\":\"application/octet-stream\",\"mar\":\"application/octet-stream\",\"so\":\"application/octet-stream\",\"dist\":\"application/octet-stream\",\"distz\":\"application/octet-stream\",\"pkg\":\"application/octet-stream\",\"bpk\":\"application/octet-stream\",\"dump\":\"application/octet-stream\",\"elc\":\"application/octet-stream\",\"deploy\":\"application/octet-stream\",\"exe\":\"application/x-msdownload\",\"dll\":\"application/x-msdownload\",\"deb\":\"application/x-debian-package\",\"dmg\":\"application/x-apple-diskimage\",\"iso\":\"application/x-iso9660-image\",\"img\":\"application/octet-stream\",\"msi\":\"application/x-msdownload\",\"msp\":\"application/octet-stream\",\"msm\":\"application/octet-stream\",\"buffer\":\"application/octet-stream\",\"oda\":\"application/oda\",\"opf\":\"application/oebps-package+xml\",\"ogx\":\"application/ogg\",\"omdoc\":\"application/omdoc+xml\",\"onetoc\":\"application/onenote\",\"onetoc2\":\"application/onenote\",\"onetmp\":\"application/onenote\",\"onepkg\":\"application/onenote\",\"oxps\":\"application/oxps\",\"xer\":\"application/patch-ops-error+xml\",\"pdf\":\"application/pdf\",\"pgp\":\"application/pgp-encrypted\",\"asc\":\"application/pgp-signature\",\"sig\":\"application/pgp-signature\",\"prf\":\"application/pics-rules\",\"p10\":\"application/pkcs10\",\"p7m\":\"application/pkcs7-mime\",\"p7c\":\"application/pkcs7-mime\",\"p7s\":\"application/pkcs7-signature\",\"p8\":\"application/pkcs8\",\"ac\":\"application/pkix-attr-cert\",\"cer\":\"application/pkix-cert\",\"crl\":\"application/pkix-crl\",\"pkipath\":\"application/pkix-pkipath\",\"pki\":\"application/pkixcmp\",\"pls\":\"application/pls+xml\",\"ai\":\"application/postscript\",\"eps\":\"application/postscript\",\"ps\":\"application/postscript\",\"cww\":\"application/prs.cww\",\"pskcxml\":\"application/pskc+xml\",\"rdf\":\"application/rdf+xml\",\"rif\":\"application/reginfo+xml\",\"rnc\":\"application/relax-ng-compact-syntax\",\"rl\":\"application/resource-lists+xml\",\"rld\":\"application/resource-lists-diff+xml\",\"rs\":\"application/rls-services+xml\",\"gbr\":\"application/rpki-ghostbusters\",\"mft\":\"application/rpki-manifest\",\"roa\":\"application/rpki-roa\",\"rsd\":\"application/rsd+xml\",\"rss\":\"application/rss+xml\",\"rtf\":\"text/rtf\",\"sbml\":\"application/sbml+xml\",\"scq\":\"application/scvp-cv-request\",\"scs\":\"application/scvp-cv-response\",\"spq\":\"application/scvp-vp-request\",\"spp\":\"application/scvp-vp-response\",\"sdp\":\"application/sdp\",\"setpay\":\"application/set-payment-initiation\",\"setreg\":\"application/set-registration-initiation\",\"shf\":\"application/shf+xml\",\"smi\":\"application/smil+xml\",\"smil\":\"application/smil+xml\",\"rq\":\"application/sparql-query\",\"srx\":\"application/sparql-results+xml\",\"gram\":\"application/srgs\",\"grxml\":\"application/srgs+xml\",\"sru\":\"application/sru+xml\",\"ssdl\":\"application/ssdl+xml\",\"ssml\":\"application/ssml+xml\",\"tei\":\"application/tei+xml\",\"teicorpus\":\"application/tei+xml\",\"tfi\":\"application/thraud+xml\",\"tsd\":\"application/timestamped-data\",\"plb\":\"application/vnd.3gpp.pic-bw-large\",\"psb\":\"application/vnd.3gpp.pic-bw-small\",\"pvb\":\"application/vnd.3gpp.pic-bw-var\",\"tcap\":\"application/vnd.3gpp2.tcap\",\"pwn\":\"application/vnd.3m.post-it-notes\",\"aso\":\"application/vnd.accpac.simply.aso\",\"imp\":\"application/vnd.accpac.simply.imp\",\"acu\":\"application/vnd.acucobol\",\"atc\":\"application/vnd.acucorp\",\"acutc\":\"application/vnd.acucorp\",\"air\":\"application/vnd.adobe.air-application-installer-package+zip\",\"fcdt\":\"application/vnd.adobe.formscentral.fcdt\",\"fxp\":\"application/vnd.adobe.fxp\",\"fxpl\":\"application/vnd.adobe.fxp\",\"xdp\":\"application/vnd.adobe.xdp+xml\",\"xfdf\":\"application/vnd.adobe.xfdf\",\"ahead\":\"application/vnd.ahead.space\",\"azf\":\"application/vnd.airzip.filesecure.azf\",\"azs\":\"application/vnd.airzip.filesecure.azs\",\"azw\":\"application/vnd.amazon.ebook\",\"acc\":\"application/vnd.americandynamics.acc\",\"ami\":\"application/vnd.amiga.ami\",\"apk\":\"application/vnd.android.package-archive\",\"cii\":\"application/vnd.anser-web-certificate-issue-initiation\",\"fti\":\"application/vnd.anser-web-funds-transfer-initiation\",\"atx\":\"application/vnd.antix.game-component\",\"mpkg\":\"application/vnd.apple.installer+xml\",\"m3u8\":\"application/vnd.apple.mpegurl\",\"pkpass\":\"application/vnd.apple.pkpass\",\"swi\":\"application/vnd.aristanetworks.swi\",\"iota\":\"application/vnd.astraea-software.iota\",\"aep\":\"application/vnd.audiograph\",\"mpm\":\"application/vnd.blueice.multipass\",\"bmi\":\"application/vnd.bmi\",\"rep\":\"application/vnd.businessobjects\",\"cdxml\":\"application/vnd.chemdraw+xml\",\"mmd\":\"application/vnd.chipnuts.karaoke-mmd\",\"cdy\":\"application/vnd.cinderella\",\"cla\":\"application/vnd.claymore\",\"rp9\":\"application/vnd.cloanto.rp9\",\"c4g\":\"application/vnd.clonk.c4group\",\"c4d\":\"application/vnd.clonk.c4group\",\"c4f\":\"application/vnd.clonk.c4group\",\"c4p\":\"application/vnd.clonk.c4group\",\"c4u\":\"application/vnd.clonk.c4group\",\"c11amc\":\"application/vnd.cluetrust.cartomobile-config\",\"c11amz\":\"application/vnd.cluetrust.cartomobile-config-pkg\",\"csp\":\"application/vnd.commonspace\",\"cdbcmsg\":\"application/vnd.contact.cmsg\",\"cmc\":\"application/vnd.cosmocaller\",\"clkx\":\"application/vnd.crick.clicker\",\"clkk\":\"application/vnd.crick.clicker.keyboard\",\"clkp\":\"application/vnd.crick.clicker.palette\",\"clkt\":\"application/vnd.crick.clicker.template\",\"clkw\":\"application/vnd.crick.clicker.wordbank\",\"wbs\":\"application/vnd.criticaltools.wbs+xml\",\"pml\":\"application/vnd.ctc-posml\",\"ppd\":\"application/vnd.cups-ppd\",\"car\":\"application/vnd.curl.car\",\"pcurl\":\"application/vnd.curl.pcurl\",\"dart\":\"application/vnd.dart\",\"rdz\":\"application/vnd.data-vision.rdz\",\"uvf\":\"application/vnd.dece.data\",\"uvvf\":\"application/vnd.dece.data\",\"uvd\":\"application/vnd.dece.data\",\"uvvd\":\"application/vnd.dece.data\",\"uvt\":\"application/vnd.dece.ttml+xml\",\"uvvt\":\"application/vnd.dece.ttml+xml\",\"uvx\":\"application/vnd.dece.unspecified\",\"uvvx\":\"application/vnd.dece.unspecified\",\"uvz\":\"application/vnd.dece.zip\",\"uvvz\":\"application/vnd.dece.zip\",\"fe_launch\":\"application/vnd.denovo.fcselayout-link\",\"dna\":\"application/vnd.dna\",\"mlp\":\"application/vnd.dolby.mlp\",\"dpg\":\"application/vnd.dpgraph\",\"dfac\":\"application/vnd.dreamfactory\",\"kpxx\":\"application/vnd.ds-keypoint\",\"ait\":\"application/vnd.dvb.ait\",\"svc\":\"application/vnd.dvb.service\",\"geo\":\"application/vnd.dynageo\",\"mag\":\"application/vnd.ecowin.chart\",\"nml\":\"application/vnd.enliven\",\"esf\":\"application/vnd.epson.esf\",\"msf\":\"application/vnd.epson.msf\",\"qam\":\"application/vnd.epson.quickanime\",\"slt\":\"application/vnd.epson.salt\",\"ssf\":\"application/vnd.epson.ssf\",\"es3\":\"application/vnd.eszigno3+xml\",\"et3\":\"application/vnd.eszigno3+xml\",\"ez2\":\"application/vnd.ezpix-album\",\"ez3\":\"application/vnd.ezpix-package\",\"fdf\":\"application/vnd.fdf\",\"mseed\":\"application/vnd.fdsn.mseed\",\"seed\":\"application/vnd.fdsn.seed\",\"dataless\":\"application/vnd.fdsn.seed\",\"gph\":\"application/vnd.flographit\",\"ftc\":\"application/vnd.fluxtime.clip\",\"fm\":\"application/vnd.framemaker\",\"frame\":\"application/vnd.framemaker\",\"maker\":\"application/vnd.framemaker\",\"book\":\"application/vnd.framemaker\",\"fnc\":\"application/vnd.frogans.fnc\",\"ltf\":\"application/vnd.frogans.ltf\",\"fsc\":\"application/vnd.fsc.weblaunch\",\"oas\":\"application/vnd.fujitsu.oasys\",\"oa2\":\"application/vnd.fujitsu.oasys2\",\"oa3\":\"application/vnd.fujitsu.oasys3\",\"fg5\":\"application/vnd.fujitsu.oasysgp\",\"bh2\":\"application/vnd.fujitsu.oasysprs\",\"ddd\":\"application/vnd.fujixerox.ddd\",\"xdw\":\"application/vnd.fujixerox.docuworks\",\"xbd\":\"application/vnd.fujixerox.docuworks.binder\",\"fzs\":\"application/vnd.fuzzysheet\",\"txd\":\"application/vnd.genomatix.tuxedo\",\"ggb\":\"application/vnd.geogebra.file\",\"ggt\":\"application/vnd.geogebra.tool\",\"gex\":\"application/vnd.geometry-explorer\",\"gre\":\"application/vnd.geometry-explorer\",\"gxt\":\"application/vnd.geonext\",\"g2w\":\"application/vnd.geoplan\",\"g3w\":\"application/vnd.geospace\",\"gmx\":\"application/vnd.gmx\",\"gdoc\":\"application/vnd.google-apps.document\",\"gslides\":\"application/vnd.google-apps.presentation\",\"gsheet\":\"application/vnd.google-apps.spreadsheet\",\"kml\":\"application/vnd.google-earth.kml+xml\",\"kmz\":\"application/vnd.google-earth.kmz\",\"gqf\":\"application/vnd.grafeq\",\"gqs\":\"application/vnd.grafeq\",\"gac\":\"application/vnd.groove-account\",\"ghf\":\"application/vnd.groove-help\",\"gim\":\"application/vnd.groove-identity-message\",\"grv\":\"application/vnd.groove-injector\",\"gtm\":\"application/vnd.groove-tool-message\",\"tpl\":\"application/vnd.groove-tool-template\",\"vcg\":\"application/vnd.groove-vcard\",\"hal\":\"application/vnd.hal+xml\",\"zmm\":\"application/vnd.handheld-entertainment+xml\",\"hbci\":\"application/vnd.hbci\",\"les\":\"application/vnd.hhe.lesson-player\",\"hpgl\":\"application/vnd.hp-hpgl\",\"hpid\":\"application/vnd.hp-hpid\",\"hps\":\"application/vnd.hp-hps\",\"jlt\":\"application/vnd.hp-jlyt\",\"pcl\":\"application/vnd.hp-pcl\",\"pclxl\":\"application/vnd.hp-pclxl\",\"sfd-hdstx\":\"application/vnd.hydrostatix.sof-data\",\"mpy\":\"application/vnd.ibm.minipay\",\"afp\":\"application/vnd.ibm.modcap\",\"listafp\":\"application/vnd.ibm.modcap\",\"list3820\":\"application/vnd.ibm.modcap\",\"irm\":\"application/vnd.ibm.rights-management\",\"sc\":\"application/vnd.ibm.secure-container\",\"icc\":\"application/vnd.iccprofile\",\"icm\":\"application/vnd.iccprofile\",\"igl\":\"application/vnd.igloader\",\"ivp\":\"application/vnd.immervision-ivp\",\"ivu\":\"application/vnd.immervision-ivu\",\"igm\":\"application/vnd.insors.igm\",\"xpw\":\"application/vnd.intercon.formnet\",\"xpx\":\"application/vnd.intercon.formnet\",\"i2g\":\"application/vnd.intergeo\",\"qbo\":\"application/vnd.intu.qbo\",\"qfx\":\"application/vnd.intu.qfx\",\"rcprofile\":\"application/vnd.ipunplugged.rcprofile\",\"irp\":\"application/vnd.irepository.package+xml\",\"xpr\":\"application/vnd.is-xpr\",\"fcs\":\"application/vnd.isac.fcs\",\"jam\":\"application/vnd.jam\",\"rms\":\"application/vnd.jcp.javame.midlet-rms\",\"jisp\":\"application/vnd.jisp\",\"joda\":\"application/vnd.joost.joda-archive\",\"ktz\":\"application/vnd.kahootz\",\"ktr\":\"application/vnd.kahootz\",\"karbon\":\"application/vnd.kde.karbon\",\"chrt\":\"application/vnd.kde.kchart\",\"kfo\":\"application/vnd.kde.kformula\",\"flw\":\"application/vnd.kde.kivio\",\"kon\":\"application/vnd.kde.kontour\",\"kpr\":\"application/vnd.kde.kpresenter\",\"kpt\":\"application/vnd.kde.kpresenter\",\"ksp\":\"application/vnd.kde.kspread\",\"kwd\":\"application/vnd.kde.kword\",\"kwt\":\"application/vnd.kde.kword\",\"htke\":\"application/vnd.kenameaapp\",\"kia\":\"application/vnd.kidspiration\",\"kne\":\"application/vnd.kinar\",\"knp\":\"application/vnd.kinar\",\"skp\":\"application/vnd.koan\",\"skd\":\"application/vnd.koan\",\"skt\":\"application/vnd.koan\",\"skm\":\"application/vnd.koan\",\"sse\":\"application/vnd.kodak-descriptor\",\"lasxml\":\"application/vnd.las.las+xml\",\"lbd\":\"application/vnd.llamagraphics.life-balance.desktop\",\"lbe\":\"application/vnd.llamagraphics.life-balance.exchange+xml\",\"apr\":\"application/vnd.lotus-approach\",\"pre\":\"application/vnd.lotus-freelance\",\"nsf\":\"application/vnd.lotus-notes\",\"org\":\"application/vnd.lotus-organizer\",\"scm\":\"application/vnd.lotus-screencam\",\"lwp\":\"application/vnd.lotus-wordpro\",\"portpkg\":\"application/vnd.macports.portpkg\",\"mcd\":\"application/vnd.mcd\",\"mc1\":\"application/vnd.medcalcdata\",\"cdkey\":\"application/vnd.mediastation.cdkey\",\"mwf\":\"application/vnd.mfer\",\"mfm\":\"application/vnd.mfmp\",\"flo\":\"application/vnd.micrografx.flo\",\"igx\":\"application/vnd.micrografx.igx\",\"mif\":\"application/vnd.mif\",\"daf\":\"application/vnd.mobius.daf\",\"dis\":\"application/vnd.mobius.dis\",\"mbk\":\"application/vnd.mobius.mbk\",\"mqy\":\"application/vnd.mobius.mqy\",\"msl\":\"application/vnd.mobius.msl\",\"plc\":\"application/vnd.mobius.plc\",\"txf\":\"application/vnd.mobius.txf\",\"mpn\":\"application/vnd.mophun.application\",\"mpc\":\"application/vnd.mophun.certificate\",\"xul\":\"application/vnd.mozilla.xul+xml\",\"cil\":\"application/vnd.ms-artgalry\",\"cab\":\"application/vnd.ms-cab-compressed\",\"xls\":\"application/vnd.ms-excel\",\"xlm\":\"application/vnd.ms-excel\",\"xla\":\"application/vnd.ms-excel\",\"xlc\":\"application/vnd.ms-excel\",\"xlt\":\"application/vnd.ms-excel\",\"xlw\":\"application/vnd.ms-excel\",\"xlam\":\"application/vnd.ms-excel.addin.macroenabled.12\",\"xlsb\":\"application/vnd.ms-excel.sheet.binary.macroenabled.12\",\"xlsm\":\"application/vnd.ms-excel.sheet.macroenabled.12\",\"xltm\":\"application/vnd.ms-excel.template.macroenabled.12\",\"eot\":\"application/vnd.ms-fontobject\",\"chm\":\"application/vnd.ms-htmlhelp\",\"ims\":\"application/vnd.ms-ims\",\"lrm\":\"application/vnd.ms-lrm\",\"thmx\":\"application/vnd.ms-officetheme\",\"cat\":\"application/vnd.ms-pki.seccat\",\"stl\":\"application/vnd.ms-pki.stl\",\"ppt\":\"application/vnd.ms-powerpoint\",\"pps\":\"application/vnd.ms-powerpoint\",\"pot\":\"application/vnd.ms-powerpoint\",\"ppam\":\"application/vnd.ms-powerpoint.addin.macroenabled.12\",\"pptm\":\"application/vnd.ms-powerpoint.presentation.macroenabled.12\",\"sldm\":\"application/vnd.ms-powerpoint.slide.macroenabled.12\",\"ppsm\":\"application/vnd.ms-powerpoint.slideshow.macroenabled.12\",\"potm\":\"application/vnd.ms-powerpoint.template.macroenabled.12\",\"mpp\":\"application/vnd.ms-project\",\"mpt\":\"application/vnd.ms-project\",\"docm\":\"application/vnd.ms-word.document.macroenabled.12\",\"dotm\":\"application/vnd.ms-word.template.macroenabled.12\",\"wps\":\"application/vnd.ms-works\",\"wks\":\"application/vnd.ms-works\",\"wcm\":\"application/vnd.ms-works\",\"wdb\":\"application/vnd.ms-works\",\"wpl\":\"application/vnd.ms-wpl\",\"xps\":\"application/vnd.ms-xpsdocument\",\"mseq\":\"application/vnd.mseq\",\"mus\":\"application/vnd.musician\",\"msty\":\"application/vnd.muvee.style\",\"taglet\":\"application/vnd.mynfc\",\"nlu\":\"application/vnd.neurolanguage.nlu\",\"ntf\":\"application/vnd.nitf\",\"nitf\":\"application/vnd.nitf\",\"nnd\":\"application/vnd.noblenet-directory\",\"nns\":\"application/vnd.noblenet-sealer\",\"nnw\":\"application/vnd.noblenet-web\",\"ngdat\":\"application/vnd.nokia.n-gage.data\",\"n-gage\":\"application/vnd.nokia.n-gage.symbian.install\",\"rpst\":\"application/vnd.nokia.radio-preset\",\"rpss\":\"application/vnd.nokia.radio-presets\",\"edm\":\"application/vnd.novadigm.edm\",\"edx\":\"application/vnd.novadigm.edx\",\"ext\":\"application/vnd.novadigm.ext\",\"odc\":\"application/vnd.oasis.opendocument.chart\",\"otc\":\"application/vnd.oasis.opendocument.chart-template\",\"odb\":\"application/vnd.oasis.opendocument.database\",\"odf\":\"application/vnd.oasis.opendocument.formula\",\"odft\":\"application/vnd.oasis.opendocument.formula-template\",\"odg\":\"application/vnd.oasis.opendocument.graphics\",\"otg\":\"application/vnd.oasis.opendocument.graphics-template\",\"odi\":\"application/vnd.oasis.opendocument.image\",\"oti\":\"application/vnd.oasis.opendocument.image-template\",\"odp\":\"application/vnd.oasis.opendocument.presentation\",\"otp\":\"application/vnd.oasis.opendocument.presentation-template\",\"ods\":\"application/vnd.oasis.opendocument.spreadsheet\",\"ots\":\"application/vnd.oasis.opendocument.spreadsheet-template\",\"odt\":\"application/vnd.oasis.opendocument.text\",\"odm\":\"application/vnd.oasis.opendocument.text-master\",\"ott\":\"application/vnd.oasis.opendocument.text-template\",\"oth\":\"application/vnd.oasis.opendocument.text-web\",\"xo\":\"application/vnd.olpc-sugar\",\"dd2\":\"application/vnd.oma.dd2+xml\",\"oxt\":\"application/vnd.openofficeorg.extension\",\"pptx\":\"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\"sldx\":\"application/vnd.openxmlformats-officedocument.presentationml.slide\",\"ppsx\":\"application/vnd.openxmlformats-officedocument.presentationml.slideshow\",\"potx\":\"application/vnd.openxmlformats-officedocument.presentationml.template\",\"xlsx\":\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\"xltx\":\"application/vnd.openxmlformats-officedocument.spreadsheetml.template\",\"docx\":\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\"dotx\":\"application/vnd.openxmlformats-officedocument.wordprocessingml.template\",\"mgp\":\"application/vnd.osgeo.mapguide.package\",\"dp\":\"application/vnd.osgi.dp\",\"esa\":\"application/vnd.osgi.subsystem\",\"pdb\":\"application/x-pilot\",\"pqa\":\"application/vnd.palm\",\"oprc\":\"application/vnd.palm\",\"paw\":\"application/vnd.pawaafile\",\"str\":\"application/vnd.pg.format\",\"ei6\":\"application/vnd.pg.osasli\",\"efif\":\"application/vnd.picsel\",\"wg\":\"application/vnd.pmi.widget\",\"plf\":\"application/vnd.pocketlearn\",\"pbd\":\"application/vnd.powerbuilder6\",\"box\":\"application/vnd.previewsystems.box\",\"mgz\":\"application/vnd.proteus.magazine\",\"qps\":\"application/vnd.publishare-delta-tree\",\"ptid\":\"application/vnd.pvi.ptid1\",\"qxd\":\"application/vnd.quark.quarkxpress\",\"qxt\":\"application/vnd.quark.quarkxpress\",\"qwd\":\"application/vnd.quark.quarkxpress\",\"qwt\":\"application/vnd.quark.quarkxpress\",\"qxl\":\"application/vnd.quark.quarkxpress\",\"qxb\":\"application/vnd.quark.quarkxpress\",\"bed\":\"application/vnd.realvnc.bed\",\"mxl\":\"application/vnd.recordare.musicxml\",\"musicxml\":\"application/vnd.recordare.musicxml+xml\",\"cryptonote\":\"application/vnd.rig.cryptonote\",\"cod\":\"application/vnd.rim.cod\",\"rm\":\"application/vnd.rn-realmedia\",\"rmvb\":\"application/vnd.rn-realmedia-vbr\",\"link66\":\"application/vnd.route66.link66+xml\",\"st\":\"application/vnd.sailingtracker.track\",\"see\":\"application/vnd.seemail\",\"sema\":\"application/vnd.sema\",\"semd\":\"application/vnd.semd\",\"semf\":\"application/vnd.semf\",\"ifm\":\"application/vnd.shana.informed.formdata\",\"itp\":\"application/vnd.shana.informed.formtemplate\",\"iif\":\"application/vnd.shana.informed.interchange\",\"ipk\":\"application/vnd.shana.informed.package\",\"twd\":\"application/vnd.simtech-mindmapper\",\"twds\":\"application/vnd.simtech-mindmapper\",\"mmf\":\"application/vnd.smaf\",\"teacher\":\"application/vnd.smart.teacher\",\"sdkm\":\"application/vnd.solent.sdkm+xml\",\"sdkd\":\"application/vnd.solent.sdkm+xml\",\"dxp\":\"application/vnd.spotfire.dxp\",\"sfs\":\"application/vnd.spotfire.sfs\",\"sdc\":\"application/vnd.stardivision.calc\",\"sda\":\"application/vnd.stardivision.draw\",\"sdd\":\"application/vnd.stardivision.impress\",\"smf\":\"application/vnd.stardivision.math\",\"sdw\":\"application/vnd.stardivision.writer\",\"vor\":\"application/vnd.stardivision.writer\",\"sgl\":\"application/vnd.stardivision.writer-global\",\"smzip\":\"application/vnd.stepmania.package\",\"sm\":\"application/vnd.stepmania.stepchart\",\"sxc\":\"application/vnd.sun.xml.calc\",\"stc\":\"application/vnd.sun.xml.calc.template\",\"sxd\":\"application/vnd.sun.xml.draw\",\"std\":\"application/vnd.sun.xml.draw.template\",\"sxi\":\"application/vnd.sun.xml.impress\",\"sti\":\"application/vnd.sun.xml.impress.template\",\"sxm\":\"application/vnd.sun.xml.math\",\"sxw\":\"application/vnd.sun.xml.writer\",\"sxg\":\"application/vnd.sun.xml.writer.global\",\"stw\":\"application/vnd.sun.xml.writer.template\",\"sus\":\"application/vnd.sus-calendar\",\"susp\":\"application/vnd.sus-calendar\",\"svd\":\"application/vnd.svd\",\"sis\":\"application/vnd.symbian.install\",\"sisx\":\"application/vnd.symbian.install\",\"xsm\":\"application/vnd.syncml+xml\",\"bdm\":\"application/vnd.syncml.dm+wbxml\",\"xdm\":\"application/vnd.syncml.dm+xml\",\"tao\":\"application/vnd.tao.intent-module-archive\",\"pcap\":\"application/vnd.tcpdump.pcap\",\"cap\":\"application/vnd.tcpdump.pcap\",\"dmp\":\"application/vnd.tcpdump.pcap\",\"tmo\":\"application/vnd.tmobile-livetv\",\"tpt\":\"application/vnd.trid.tpt\",\"mxs\":\"application/vnd.triscape.mxs\",\"tra\":\"application/vnd.trueapp\",\"ufd\":\"application/vnd.ufdl\",\"ufdl\":\"application/vnd.ufdl\",\"utz\":\"application/vnd.uiq.theme\",\"umj\":\"application/vnd.umajin\",\"unityweb\":\"application/vnd.unity\",\"uoml\":\"application/vnd.uoml+xml\",\"vcx\":\"application/vnd.vcx\",\"vsd\":\"application/vnd.visio\",\"vst\":\"application/vnd.visio\",\"vss\":\"application/vnd.visio\",\"vsw\":\"application/vnd.visio\",\"vis\":\"application/vnd.visionary\",\"vsf\":\"application/vnd.vsf\",\"wbxml\":\"application/vnd.wap.wbxml\",\"wmlc\":\"application/vnd.wap.wmlc\",\"wmlsc\":\"application/vnd.wap.wmlscriptc\",\"wtb\":\"application/vnd.webturbo\",\"nbp\":\"application/vnd.wolfram.player\",\"wpd\":\"application/vnd.wordperfect\",\"wqd\":\"application/vnd.wqd\",\"stf\":\"application/vnd.wt.stf\",\"xar\":\"application/vnd.xara\",\"xfdl\":\"application/vnd.xfdl\",\"hvd\":\"application/vnd.yamaha.hv-dic\",\"hvs\":\"application/vnd.yamaha.hv-script\",\"hvp\":\"application/vnd.yamaha.hv-voice\",\"osf\":\"application/vnd.yamaha.openscoreformat\",\"osfpvg\":\"application/vnd.yamaha.openscoreformat.osfpvg+xml\",\"saf\":\"application/vnd.yamaha.smaf-audio\",\"spf\":\"application/vnd.yamaha.smaf-phrase\",\"cmp\":\"application/vnd.yellowriver-custom-menu\",\"zir\":\"application/vnd.zul\",\"zirz\":\"application/vnd.zul\",\"zaz\":\"application/vnd.zzazz.deck+xml\",\"vxml\":\"application/voicexml+xml\",\"wgt\":\"application/widget\",\"hlp\":\"application/winhlp\",\"wsdl\":\"application/wsdl+xml\",\"wspolicy\":\"application/wspolicy+xml\",\"7z\":\"application/x-7z-compressed\",\"abw\":\"application/x-abiword\",\"ace\":\"application/x-ace-compressed\",\"aab\":\"application/x-authorware-bin\",\"x32\":\"application/x-authorware-bin\",\"u32\":\"application/x-authorware-bin\",\"vox\":\"application/x-authorware-bin\",\"aam\":\"application/x-authorware-map\",\"aas\":\"application/x-authorware-seg\",\"bcpio\":\"application/x-bcpio\",\"torrent\":\"application/x-bittorrent\",\"blb\":\"application/x-blorb\",\"blorb\":\"application/x-blorb\",\"bz\":\"application/x-bzip\",\"bz2\":\"application/x-bzip2\",\"boz\":\"application/x-bzip2\",\"cbr\":\"application/x-cbr\",\"cba\":\"application/x-cbr\",\"cbt\":\"application/x-cbr\",\"cbz\":\"application/x-cbr\",\"cb7\":\"application/x-cbr\",\"vcd\":\"application/x-cdlink\",\"cfs\":\"application/x-cfs-compressed\",\"chat\":\"application/x-chat\",\"pgn\":\"application/x-chess-pgn\",\"crx\":\"application/x-chrome-extension\",\"cco\":\"application/x-cocoa\",\"nsc\":\"application/x-conference\",\"cpio\":\"application/x-cpio\",\"csh\":\"application/x-csh\",\"udeb\":\"application/x-debian-package\",\"dgc\":\"application/x-dgc-compressed\",\"dir\":\"application/x-director\",\"dcr\":\"application/x-director\",\"dxr\":\"application/x-director\",\"cst\":\"application/x-director\",\"cct\":\"application/x-director\",\"cxt\":\"application/x-director\",\"w3d\":\"application/x-director\",\"fgd\":\"application/x-director\",\"swa\":\"application/x-director\",\"wad\":\"application/x-doom\",\"ncx\":\"application/x-dtbncx+xml\",\"dtb\":\"application/x-dtbook+xml\",\"res\":\"application/x-dtbresource+xml\",\"dvi\":\"application/x-dvi\",\"evy\":\"application/x-envoy\",\"eva\":\"application/x-eva\",\"bdf\":\"application/x-font-bdf\",\"gsf\":\"application/x-font-ghostscript\",\"psf\":\"application/x-font-linux-psf\",\"otf\":\"font/opentype\",\"pcf\":\"application/x-font-pcf\",\"snf\":\"application/x-font-snf\",\"ttf\":\"application/x-font-ttf\",\"ttc\":\"application/x-font-ttf\",\"pfa\":\"application/x-font-type1\",\"pfb\":\"application/x-font-type1\",\"pfm\":\"application/x-font-type1\",\"afm\":\"application/x-font-type1\",\"arc\":\"application/x-freearc\",\"spl\":\"application/x-futuresplash\",\"gca\":\"application/x-gca-compressed\",\"ulx\":\"application/x-glulx\",\"gnumeric\":\"application/x-gnumeric\",\"gramps\":\"application/x-gramps-xml\",\"gtar\":\"application/x-gtar\",\"hdf\":\"application/x-hdf\",\"php\":\"application/x-httpd-php\",\"install\":\"application/x-install-instructions\",\"jardiff\":\"application/x-java-archive-diff\",\"jnlp\":\"application/x-java-jnlp-file\",\"latex\":\"application/x-latex\",\"luac\":\"application/x-lua-bytecode\",\"lzh\":\"application/x-lzh-compressed\",\"lha\":\"application/x-lzh-compressed\",\"run\":\"application/x-makeself\",\"mie\":\"application/x-mie\",\"prc\":\"application/x-pilot\",\"mobi\":\"application/x-mobipocket-ebook\",\"application\":\"application/x-ms-application\",\"lnk\":\"application/x-ms-shortcut\",\"wmd\":\"application/x-ms-wmd\",\"wmz\":\"application/x-msmetafile\",\"xbap\":\"application/x-ms-xbap\",\"mdb\":\"application/x-msaccess\",\"obd\":\"application/x-msbinder\",\"crd\":\"application/x-mscardfile\",\"clp\":\"application/x-msclip\",\"com\":\"application/x-msdownload\",\"bat\":\"application/x-msdownload\",\"mvb\":\"application/x-msmediaview\",\"m13\":\"application/x-msmediaview\",\"m14\":\"application/x-msmediaview\",\"wmf\":\"application/x-msmetafile\",\"emf\":\"application/x-msmetafile\",\"emz\":\"application/x-msmetafile\",\"mny\":\"application/x-msmoney\",\"pub\":\"application/x-mspublisher\",\"scd\":\"application/x-msschedule\",\"trm\":\"application/x-msterminal\",\"wri\":\"application/x-mswrite\",\"nc\":\"application/x-netcdf\",\"cdf\":\"application/x-netcdf\",\"pac\":\"application/x-ns-proxy-autoconfig\",\"nzb\":\"application/x-nzb\",\"pl\":\"application/x-perl\",\"pm\":\"application/x-perl\",\"p12\":\"application/x-pkcs12\",\"pfx\":\"application/x-pkcs12\",\"p7b\":\"application/x-pkcs7-certificates\",\"spc\":\"application/x-pkcs7-certificates\",\"p7r\":\"application/x-pkcs7-certreqresp\",\"rar\":\"application/x-rar-compressed\",\"rpm\":\"application/x-redhat-package-manager\",\"ris\":\"application/x-research-info-systems\",\"sea\":\"application/x-sea\",\"sh\":\"application/x-sh\",\"shar\":\"application/x-shar\",\"swf\":\"application/x-shockwave-flash\",\"xap\":\"application/x-silverlight-app\",\"sql\":\"application/x-sql\",\"sit\":\"application/x-stuffit\",\"sitx\":\"application/x-stuffitx\",\"srt\":\"application/x-subrip\",\"sv4cpio\":\"application/x-sv4cpio\",\"sv4crc\":\"application/x-sv4crc\",\"t3\":\"application/x-t3vm-image\",\"gam\":\"application/x-tads\",\"tar\":\"application/x-tar\",\"tcl\":\"application/x-tcl\",\"tk\":\"application/x-tcl\",\"tex\":\"application/x-tex\",\"tfm\":\"application/x-tex-tfm\",\"texinfo\":\"application/x-texinfo\",\"texi\":\"application/x-texinfo\",\"obj\":\"application/x-tgif\",\"ustar\":\"application/x-ustar\",\"src\":\"application/x-wais-source\",\"webapp\":\"application/x-web-app-manifest+json\",\"der\":\"application/x-x509-ca-cert\",\"crt\":\"application/x-x509-ca-cert\",\"pem\":\"application/x-x509-ca-cert\",\"fig\":\"application/x-xfig\",\"xlf\":\"application/x-xliff+xml\",\"xpi\":\"application/x-xpinstall\",\"xz\":\"application/x-xz\",\"z1\":\"application/x-zmachine\",\"z2\":\"application/x-zmachine\",\"z3\":\"application/x-zmachine\",\"z4\":\"application/x-zmachine\",\"z5\":\"application/x-zmachine\",\"z6\":\"application/x-zmachine\",\"z7\":\"application/x-zmachine\",\"z8\":\"application/x-zmachine\",\"xaml\":\"application/xaml+xml\",\"xdf\":\"application/xcap-diff+xml\",\"xenc\":\"application/xenc+xml\",\"xhtml\":\"application/xhtml+xml\",\"xht\":\"application/xhtml+xml\",\"xml\":\"text/xml\",\"xsl\":\"application/xml\",\"xsd\":\"application/xml\",\"rng\":\"application/xml\",\"dtd\":\"application/xml-dtd\",\"xop\":\"application/xop+xml\",\"xpl\":\"application/xproc+xml\",\"xslt\":\"application/xslt+xml\",\"xspf\":\"application/xspf+xml\",\"mxml\":\"application/xv+xml\",\"xhvml\":\"application/xv+xml\",\"xvml\":\"application/xv+xml\",\"xvm\":\"application/xv+xml\",\"yang\":\"application/yang\",\"yin\":\"application/yin+xml\",\"zip\":\"application/zip\",\"3gpp\":\"video/3gpp\",\"adp\":\"audio/adpcm\",\"au\":\"audio/basic\",\"snd\":\"audio/basic\",\"mid\":\"audio/midi\",\"midi\":\"audio/midi\",\"kar\":\"audio/midi\",\"rmi\":\"audio/midi\",\"mp3\":\"audio/mpeg\",\"m4a\":\"audio/x-m4a\",\"mp4a\":\"audio/mp4\",\"mpga\":\"audio/mpeg\",\"mp2\":\"audio/mpeg\",\"mp2a\":\"audio/mpeg\",\"m2a\":\"audio/mpeg\",\"m3a\":\"audio/mpeg\",\"oga\":\"audio/ogg\",\"ogg\":\"audio/ogg\",\"spx\":\"audio/ogg\",\"s3m\":\"audio/s3m\",\"sil\":\"audio/silk\",\"uva\":\"audio/vnd.dece.audio\",\"uvva\":\"audio/vnd.dece.audio\",\"eol\":\"audio/vnd.digital-winds\",\"dra\":\"audio/vnd.dra\",\"dts\":\"audio/vnd.dts\",\"dtshd\":\"audio/vnd.dts.hd\",\"lvp\":\"audio/vnd.lucent.voice\",\"pya\":\"audio/vnd.ms-playready.media.pya\",\"ecelp4800\":\"audio/vnd.nuera.ecelp4800\",\"ecelp7470\":\"audio/vnd.nuera.ecelp7470\",\"ecelp9600\":\"audio/vnd.nuera.ecelp9600\",\"rip\":\"audio/vnd.rip\",\"wav\":\"audio/x-wav\",\"weba\":\"audio/webm\",\"aac\":\"audio/x-aac\",\"aif\":\"audio/x-aiff\",\"aiff\":\"audio/x-aiff\",\"aifc\":\"audio/x-aiff\",\"caf\":\"audio/x-caf\",\"flac\":\"audio/x-flac\",\"mka\":\"audio/x-matroska\",\"m3u\":\"audio/x-mpegurl\",\"wax\":\"audio/x-ms-wax\",\"wma\":\"audio/x-ms-wma\",\"ram\":\"audio/x-pn-realaudio\",\"ra\":\"audio/x-realaudio\",\"rmp\":\"audio/x-pn-realaudio-plugin\",\"xm\":\"audio/xm\",\"cdx\":\"chemical/x-cdx\",\"cif\":\"chemical/x-cif\",\"cmdf\":\"chemical/x-cmdf\",\"cml\":\"chemical/x-cml\",\"csml\":\"chemical/x-csml\",\"xyz\":\"chemical/x-xyz\",\"bmp\":\"image/x-ms-bmp\",\"cgm\":\"image/cgm\",\"g3\":\"image/g3fax\",\"gif\":\"image/gif\",\"ief\":\"image/ief\",\"jpeg\":\"image/jpeg\",\"jpg\":\"image/jpeg\",\"jpe\":\"image/jpeg\",\"ktx\":\"image/ktx\",\"png\":\"image/png\",\"btif\":\"image/prs.btif\",\"sgi\":\"image/sgi\",\"svg\":\"image/svg+xml\",\"svgz\":\"image/svg+xml\",\"tiff\":\"image/tiff\",\"tif\":\"image/tiff\",\"psd\":\"image/vnd.adobe.photoshop\",\"uvi\":\"image/vnd.dece.graphic\",\"uvvi\":\"image/vnd.dece.graphic\",\"uvg\":\"image/vnd.dece.graphic\",\"uvvg\":\"image/vnd.dece.graphic\",\"djvu\":\"image/vnd.djvu\",\"djv\":\"image/vnd.djvu\",\"sub\":\"text/vnd.dvb.subtitle\",\"dwg\":\"image/vnd.dwg\",\"dxf\":\"image/vnd.dxf\",\"fbs\":\"image/vnd.fastbidsheet\",\"fpx\":\"image/vnd.fpx\",\"fst\":\"image/vnd.fst\",\"mmr\":\"image/vnd.fujixerox.edmics-mmr\",\"rlc\":\"image/vnd.fujixerox.edmics-rlc\",\"mdi\":\"image/vnd.ms-modi\",\"wdp\":\"image/vnd.ms-photo\",\"npx\":\"image/vnd.net-fpx\",\"wbmp\":\"image/vnd.wap.wbmp\",\"xif\":\"image/vnd.xiff\",\"webp\":\"image/webp\",\"3ds\":\"image/x-3ds\",\"ras\":\"image/x-cmu-raster\",\"cmx\":\"image/x-cmx\",\"fh\":\"image/x-freehand\",\"fhc\":\"image/x-freehand\",\"fh4\":\"image/x-freehand\",\"fh5\":\"image/x-freehand\",\"fh7\":\"image/x-freehand\",\"ico\":\"image/x-icon\",\"jng\":\"image/x-jng\",\"sid\":\"image/x-mrsid-image\",\"pcx\":\"image/x-pcx\",\"pic\":\"image/x-pict\",\"pct\":\"image/x-pict\",\"pnm\":\"image/x-portable-anymap\",\"pbm\":\"image/x-portable-bitmap\",\"pgm\":\"image/x-portable-graymap\",\"ppm\":\"image/x-portable-pixmap\",\"rgb\":\"image/x-rgb\",\"tga\":\"image/x-tga\",\"xbm\":\"image/x-xbitmap\",\"xpm\":\"image/x-xpixmap\",\"xwd\":\"image/x-xwindowdump\",\"eml\":\"message/rfc822\",\"mime\":\"message/rfc822\",\"igs\":\"model/iges\",\"iges\":\"model/iges\",\"msh\":\"model/mesh\",\"mesh\":\"model/mesh\",\"silo\":\"model/mesh\",\"dae\":\"model/vnd.collada+xml\",\"dwf\":\"model/vnd.dwf\",\"gdl\":\"model/vnd.gdl\",\"gtw\":\"model/vnd.gtw\",\"mts\":\"model/vnd.mts\",\"vtu\":\"model/vnd.vtu\",\"wrl\":\"model/vrml\",\"vrml\":\"model/vrml\",\"x3db\":\"model/x3d+binary\",\"x3dbz\":\"model/x3d+binary\",\"x3dv\":\"model/x3d+vrml\",\"x3dvz\":\"model/x3d+vrml\",\"x3d\":\"model/x3d+xml\",\"x3dz\":\"model/x3d+xml\",\"appcache\":\"text/cache-manifest\",\"manifest\":\"text/cache-manifest\",\"ics\":\"text/calendar\",\"ifb\":\"text/calendar\",\"coffee\":\"text/coffeescript\",\"litcoffee\":\"text/coffeescript\",\"css\":\"text/css\",\"csv\":\"text/csv\",\"hjson\":\"text/hjson\",\"html\":\"text/html\",\"htm\":\"text/html\",\"shtml\":\"text/html\",\"jade\":\"text/jade\",\"jsx\":\"text/jsx\",\"less\":\"text/less\",\"mml\":\"text/mathml\",\"n3\":\"text/n3\",\"txt\":\"text/plain\",\"text\":\"text/plain\",\"conf\":\"text/plain\",\"def\":\"text/plain\",\"list\":\"text/plain\",\"log\":\"text/plain\",\"in\":\"text/plain\",\"ini\":\"text/plain\",\"dsc\":\"text/prs.lines.tag\",\"rtx\":\"text/richtext\",\"sgml\":\"text/sgml\",\"sgm\":\"text/sgml\",\"slim\":\"text/slim\",\"slm\":\"text/slim\",\"stylus\":\"text/stylus\",\"styl\":\"text/stylus\",\"tsv\":\"text/tab-separated-values\",\"t\":\"text/troff\",\"tr\":\"text/troff\",\"roff\":\"text/troff\",\"man\":\"text/troff\",\"me\":\"text/troff\",\"ms\":\"text/troff\",\"ttl\":\"text/turtle\",\"uri\":\"text/uri-list\",\"uris\":\"text/uri-list\",\"urls\":\"text/uri-list\",\"vcard\":\"text/vcard\",\"curl\":\"text/vnd.curl\",\"dcurl\":\"text/vnd.curl.dcurl\",\"mcurl\":\"text/vnd.curl.mcurl\",\"scurl\":\"text/vnd.curl.scurl\",\"fly\":\"text/vnd.fly\",\"flx\":\"text/vnd.fmi.flexstor\",\"gv\":\"text/vnd.graphviz\",\"3dml\":\"text/vnd.in3d.3dml\",\"spot\":\"text/vnd.in3d.spot\",\"jad\":\"text/vnd.sun.j2me.app-descriptor\",\"wml\":\"text/vnd.wap.wml\",\"wmls\":\"text/vnd.wap.wmlscript\",\"vtt\":\"text/vtt\",\"s\":\"text/x-asm\",\"asm\":\"text/x-asm\",\"c\":\"text/x-c\",\"cc\":\"text/x-c\",\"cxx\":\"text/x-c\",\"cpp\":\"text/x-c\",\"h\":\"text/x-c\",\"hh\":\"text/x-c\",\"dic\":\"text/x-c\",\"htc\":\"text/x-component\",\"f\":\"text/x-fortran\",\"for\":\"text/x-fortran\",\"f77\":\"text/x-fortran\",\"f90\":\"text/x-fortran\",\"hbs\":\"text/x-handlebars-template\",\"java\":\"text/x-java-source\",\"lua\":\"text/x-lua\",\"markdown\":\"text/x-markdown\",\"md\":\"text/x-markdown\",\"mkd\":\"text/x-markdown\",\"nfo\":\"text/x-nfo\",\"opml\":\"text/x-opml\",\"p\":\"text/x-pascal\",\"pas\":\"text/x-pascal\",\"pde\":\"text/x-processing\",\"sass\":\"text/x-sass\",\"scss\":\"text/x-scss\",\"etx\":\"text/x-setext\",\"sfv\":\"text/x-sfv\",\"ymp\":\"text/x-suse-ymp\",\"uu\":\"text/x-uuencode\",\"vcs\":\"text/x-vcalendar\",\"vcf\":\"text/x-vcard\",\"yaml\":\"text/yaml\",\"yml\":\"text/yaml\",\"3gp\":\"video/3gpp\",\"3g2\":\"video/3gpp2\",\"h261\":\"video/h261\",\"h263\":\"video/h263\",\"h264\":\"video/h264\",\"jpgv\":\"video/jpeg\",\"jpm\":\"video/jpm\",\"jpgm\":\"video/jpm\",\"mj2\":\"video/mj2\",\"mjp2\":\"video/mj2\",\"ts\":\"video/mp2t\",\"mp4\":\"video/mp4\",\"mp4v\":\"video/mp4\",\"mpg4\":\"video/mp4\",\"mpeg\":\"video/mpeg\",\"mpg\":\"video/mpeg\",\"mpe\":\"video/mpeg\",\"m1v\":\"video/mpeg\",\"m2v\":\"video/mpeg\",\"ogv\":\"video/ogg\",\"qt\":\"video/quicktime\",\"mov\":\"video/quicktime\",\"uvh\":\"video/vnd.dece.hd\",\"uvvh\":\"video/vnd.dece.hd\",\"uvm\":\"video/vnd.dece.mobile\",\"uvvm\":\"video/vnd.dece.mobile\",\"uvp\":\"video/vnd.dece.pd\",\"uvvp\":\"video/vnd.dece.pd\",\"uvs\":\"video/vnd.dece.sd\",\"uvvs\":\"video/vnd.dece.sd\",\"uvv\":\"video/vnd.dece.video\",\"uvvv\":\"video/vnd.dece.video\",\"dvb\":\"video/vnd.dvb.file\",\"fvt\":\"video/vnd.fvt\",\"mxu\":\"video/vnd.mpegurl\",\"m4u\":\"video/vnd.mpegurl\",\"pyv\":\"video/vnd.ms-playready.media.pyv\",\"uvu\":\"video/vnd.uvvu.mp4\",\"uvvu\":\"video/vnd.uvvu.mp4\",\"viv\":\"video/vnd.vivo\",\"webm\":\"video/webm\",\"f4v\":\"video/x-f4v\",\"fli\":\"video/x-fli\",\"flv\":\"video/x-flv\",\"m4v\":\"video/x-m4v\",\"mkv\":\"video/x-matroska\",\"mk3d\":\"video/x-matroska\",\"mks\":\"video/x-matroska\",\"mng\":\"video/x-mng\",\"asf\":\"video/x-ms-asf\",\"asx\":\"video/x-ms-asf\",\"vob\":\"video/x-ms-vob\",\"wm\":\"video/x-ms-wm\",\"wmv\":\"video/x-ms-wmv\",\"wmx\":\"video/x-ms-wmx\",\"wvx\":\"video/x-ms-wvx\",\"avi\":\"video/x-msvideo\",\"movie\":\"video/x-sgi-movie\",\"smv\":\"video/x-smv\",\"ice\":\"x-conference/x-cooltalk\"}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///90\n");

/***/ }),
/* 91 */
/*!*********************************************************!*\
  !*** ./node_modules/snekfetch/src/node/mimeOfBuffer.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/* eslint complexity: 0 */\n\n// from file-type by @sindresorhus under the MIT license\n// https://github.com/sindresorhus/file-type\n\nfunction mimeOfBuffer(input) {\n  const buf = new Uint8Array(input);\n\n  if (!(buf && buf.length > 1))\n    return null;\n\n\n  if (buf[0] === 0xFF && buf[1] === 0xD8 && buf[2] === 0xFF) {\n    return {\n      ext: 'jpg',\n      mime: 'image/jpeg',\n    };\n  }\n\n  if (buf[0] === 0x89 && buf[1] === 0x50 && buf[2] === 0x4E && buf[3] === 0x47) {\n    return {\n      ext: 'png',\n      mime: 'image/png',\n    };\n  }\n\n  if (buf[0] === 0x47 && buf[1] === 0x49 && buf[2] === 0x46) {\n    return {\n      ext: 'gif',\n      mime: 'image/gif',\n    };\n  }\n\n  if (buf[8] === 0x57 && buf[9] === 0x45 && buf[10] === 0x42 && buf[11] === 0x50) {\n    return {\n      ext: 'webp',\n      mime: 'image/webp',\n    };\n  }\n\n  if (buf[0] === 0x46 && buf[1] === 0x4C && buf[2] === 0x49 && buf[3] === 0x46) {\n    return {\n      ext: 'flif',\n      mime: 'image/flif',\n    };\n  }\n\n  // needs to be before `tif` check\n  if (\n    ((buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0x2A && buf[3] === 0x0) ||\n    (buf[0] === 0x4D && buf[1] === 0x4D && buf[2] === 0x0 && buf[3] === 0x2A)) && buf[8] === 0x43 && buf[9] === 0x52\n  ) {\n    return {\n      ext: 'cr2',\n      mime: 'image/x-canon-cr2',\n    };\n  }\n\n  if (\n    (buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0x2A && buf[3] === 0x0) ||\n    (buf[0] === 0x4D && buf[1] === 0x4D && buf[2] === 0x0 && buf[3] === 0x2A)\n  ) {\n    return {\n      ext: 'tif',\n      mime: 'image/tiff',\n    };\n  }\n\n  if (buf[0] === 0x42 && buf[1] === 0x4D) {\n    return {\n      ext: 'bmp',\n      mime: 'image/bmp',\n    };\n  }\n\n  if (buf[0] === 0x49 && buf[1] === 0x49 && buf[2] === 0xBC) {\n    return {\n      ext: 'jxr',\n      mime: 'image/vnd.ms-photo',\n    };\n  }\n\n  if (buf[0] === 0x38 && buf[1] === 0x42 && buf[2] === 0x50 && buf[3] === 0x53) {\n    return {\n      ext: 'psd',\n      mime: 'image/vnd.adobe.photoshop',\n    };\n  }\n\n  // needs to be before `zip` check\n  if (\n    buf[0] === 0x50 && buf[1] === 0x4B && buf[2] === 0x3 && buf[3] === 0x4 && buf[30] === 0x6D && buf[31] === 0x69 &&\n    buf[32] === 0x6D && buf[33] === 0x65 && buf[34] === 0x74 && buf[35] === 0x79 && buf[36] === 0x70 &&\n    buf[37] === 0x65 && buf[38] === 0x61 && buf[39] === 0x70 && buf[40] === 0x70 && buf[41] === 0x6C &&\n    buf[42] === 0x69 && buf[43] === 0x63 && buf[44] === 0x61 && buf[45] === 0x74 && buf[46] === 0x69 &&\n    buf[47] === 0x6F && buf[48] === 0x6E && buf[49] === 0x2F && buf[50] === 0x65 && buf[51] === 0x70 &&\n    buf[52] === 0x75 && buf[53] === 0x62 && buf[54] === 0x2B && buf[55] === 0x7A && buf[56] === 0x69 &&\n    buf[57] === 0x70\n  ) {\n    return {\n      ext: 'epub',\n      mime: 'application/epub+zip',\n    };\n  }\n\n  // needs to be before `zip` check\n  // assumes signed .xpi from addons.mozilla.org\n  if (\n    buf[0] === 0x50 && buf[1] === 0x4B && buf[2] === 0x3 && buf[3] === 0x4 && buf[30] === 0x4D && buf[31] === 0x45 &&\n    buf[32] === 0x54 && buf[33] === 0x41 && buf[34] === 0x2D && buf[35] === 0x49 && buf[36] === 0x4E &&\n    buf[37] === 0x46 && buf[38] === 0x2F && buf[39] === 0x6D && buf[40] === 0x6F && buf[41] === 0x7A &&\n    buf[42] === 0x69 && buf[43] === 0x6C && buf[44] === 0x6C && buf[45] === 0x61 && buf[46] === 0x2E &&\n    buf[47] === 0x72 && buf[48] === 0x73 && buf[49] === 0x61\n  ) {\n    return {\n      ext: 'xpi',\n      mime: 'application/x-xpinstall',\n    };\n  }\n\n  if (\n    buf[0] === 0x50 && buf[1] === 0x4B && (buf[2] === 0x3 || buf[2] === 0x5 || buf[2] === 0x7) &&\n    (buf[3] === 0x4 || buf[3] === 0x6 || buf[3] === 0x8)\n  ) {\n    return {\n      ext: 'zip',\n      mime: 'application/zip',\n    };\n  }\n\n  if (buf[257] === 0x75 && buf[258] === 0x73 && buf[259] === 0x74 && buf[260] === 0x61 && buf[261] === 0x72) {\n    return {\n      ext: 'tar',\n      mime: 'application/x-tar',\n    };\n  }\n\n  if (\n    buf[0] === 0x52 && buf[1] === 0x61 && buf[2] === 0x72 && buf[3] === 0x21 && buf[4] === 0x1A && buf[5] === 0x7 &&\n    (buf[6] === 0x0 || buf[6] === 0x1)\n  ) {\n    return {\n      ext: 'rar',\n      mime: 'application/x-rar-compressed',\n    };\n  }\n\n  if (buf[0] === 0x1F && buf[1] === 0x8B && buf[2] === 0x8) {\n    return {\n      ext: 'gz',\n      mime: 'application/gzip',\n    };\n  }\n\n  if (buf[0] === 0x42 && buf[1] === 0x5A && buf[2] === 0x68) {\n    return {\n      ext: 'bz2',\n      mime: 'application/x-bzip2',\n    };\n  }\n\n  if (buf[0] === 0x37 && buf[1] === 0x7A && buf[2] === 0xBC && buf[3] === 0xAF && buf[4] === 0x27 && buf[5] === 0x1C) {\n    return {\n      ext: '7z',\n      mime: 'application/x-7z-compressed',\n    };\n  }\n\n  if (buf[0] === 0x78 && buf[1] === 0x01) {\n    return {\n      ext: 'dmg',\n      mime: 'application/x-apple-diskimage',\n    };\n  }\n\n  if (\n    (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && (buf[3] === 0x18 || buf[3] === 0x20) && buf[4] === 0x66 &&\n    buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70) ||\n    (buf[0] === 0x33 && buf[1] === 0x67 && buf[2] === 0x70 && buf[3] === 0x35) ||\n  (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1C && buf[4] === 0x66 && buf[5] === 0x74 &&\n      buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x6D && buf[9] === 0x70 && buf[10] === 0x34 &&\n      buf[11] === 0x32 && buf[16] === 0x6D && buf[17] === 0x70 && buf[18] === 0x34 && buf[19] === 0x31 &&\n      buf[20] === 0x6D && buf[21] === 0x70 && buf[22] === 0x34 && buf[23] === 0x32 && buf[24] === 0x69 &&\n      buf[25] === 0x73 && buf[26] === 0x6F && buf[27] === 0x6D) ||\n  (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1C && buf[4] === 0x66 && buf[5] === 0x74 &&\n      buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x69 && buf[9] === 0x73 && buf[10] === 0x6F &&\n      buf[11] === 0x6D) ||\n  (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1c && buf[4] === 0x66 && buf[5] === 0x74 &&\n      buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x6D && buf[9] === 0x70 && buf[10] === 0x34 &&\n      buf[11] === 0x32 && buf[12] === 0x0 && buf[13] === 0x0 && buf[14] === 0x0 && buf[15] === 0x0)\n  ) {\n    return {\n      ext: 'mp4',\n      mime: 'video/mp4',\n    };\n  }\n\n  if (\n    buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x1C && buf[4] === 0x66 &&\n    buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x4D && buf[9] === 0x34 && buf[10] === 0x56\n  ) {\n    return {\n      ext: 'm4v',\n      mime: 'video/x-m4v',\n    };\n  }\n\n  if (buf[0] === 0x4D && buf[1] === 0x54 && buf[2] === 0x68 && buf[3] === 0x64) {\n    return {\n      ext: 'mid',\n      mime: 'audio/midi',\n    };\n  }\n\n  // https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska\n  if (buf[0] === 0x1A && buf[1] === 0x45 && buf[2] === 0xDF && buf[3] === 0xA3) {\n    const sliced = buf.subarray(4, 4 + 4096);\n    const idPos = sliced.findIndex((el, i, arr) => arr[i] === 0x42 && arr[i + 1] === 0x82);\n\n    if (idPos >= 0) {\n      const docTypePos = idPos + 3;\n      const findDocType = (type) => Array.from(type).every((c, i) => sliced[docTypePos + i] === c.charCodeAt(0));\n\n      if (findDocType('matroska')) {\n        return {\n          ext: 'mkv',\n          mime: 'video/x-matroska',\n        };\n      }\n      if (findDocType('webm')) {\n        return {\n          ext: 'webm',\n          mime: 'video/webm',\n        };\n      }\n    }\n  }\n\n  if (\n    buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x0 && buf[3] === 0x14 && buf[4] === 0x66 && buf[5] === 0x74 &&\n    buf[6] === 0x79 && buf[7] === 0x70\n  ) {\n    return {\n      ext: 'mov',\n      mime: 'video/quicktime',\n    };\n  }\n\n  if (\n    buf[0] === 0x52 && buf[1] === 0x49 && buf[2] === 0x46 && buf[3] === 0x46 && buf[8] === 0x41 && buf[9] === 0x56 &&\n    buf[10] === 0x49\n  ) {\n    return {\n      ext: 'avi',\n      mime: 'video/x-msvideo',\n    };\n  }\n\n  if (\n    buf[0] === 0x30 && buf[1] === 0x26 && buf[2] === 0xB2 && buf[3] === 0x75 && buf[4] === 0x8E && buf[5] === 0x66 &&\n    buf[6] === 0xCF && buf[7] === 0x11 && buf[8] === 0xA6 && buf[9] === 0xD9\n  ) {\n    return {\n      ext: 'wmv',\n      mime: 'video/x-ms-wmv',\n    };\n  }\n\n  if (buf[0] === 0x0 && buf[1] === 0x0 && buf[2] === 0x1 && buf[3].toString(16)[0] === 'b') {\n    return {\n      ext: 'mpg',\n      mime: 'video/mpeg',\n    };\n  }\n\n  if ((buf[0] === 0x49 && buf[1] === 0x44 && buf[2] === 0x33) || (buf[0] === 0xFF && buf[1] === 0xfb)) {\n    return {\n      ext: 'mp3',\n      mime: 'audio/mpeg',\n    };\n  }\n\n  if ((buf[4] === 0x66 && buf[5] === 0x74 && buf[6] === 0x79 && buf[7] === 0x70 && buf[8] === 0x4D &&\n    buf[9] === 0x34 && buf[10] === 0x41) || (buf[0] === 0x4D && buf[1] === 0x34 && buf[2] === 0x41 && buf[3] === 0x20)\n  ) {\n    return {\n      ext: 'm4a',\n      mime: 'audio/m4a',\n    };\n  }\n\n  // needs to be before `ogg` check\n  if (\n    buf[28] === 0x4F && buf[29] === 0x70 && buf[30] === 0x75 && buf[31] === 0x73 && buf[32] === 0x48 &&\n    buf[33] === 0x65 && buf[34] === 0x61 && buf[35] === 0x64\n  ) {\n    return {\n      ext: 'opus',\n      mime: 'audio/opus',\n    };\n  }\n\n  if (buf[0] === 0x4F && buf[1] === 0x67 && buf[2] === 0x67 && buf[3] === 0x53) {\n    return {\n      ext: 'ogg',\n      mime: 'audio/ogg',\n    };\n  }\n\n  if (buf[0] === 0x66 && buf[1] === 0x4C && buf[2] === 0x61 && buf[3] === 0x43) {\n    return {\n      ext: 'flac',\n      mime: 'audio/x-flac',\n    };\n  }\n\n  if (\n    buf[0] === 0x52 && buf[1] === 0x49 && buf[2] === 0x46 && buf[3] === 0x46 && buf[8] === 0x57 && buf[9] === 0x41 &&\n    buf[10] === 0x56 && buf[11] === 0x45\n  ) {\n    return {\n      ext: 'wav',\n      mime: 'audio/x-wav',\n    };\n  }\n\n  if (buf[0] === 0x23 && buf[1] === 0x21 && buf[2] === 0x41 && buf[3] === 0x4D && buf[4] === 0x52 && buf[5] === 0x0A) {\n    return {\n      ext: 'amr',\n      mime: 'audio/amr',\n    };\n  }\n\n  if (buf[0] === 0x25 && buf[1] === 0x50 && buf[2] === 0x44 && buf[3] === 0x46) {\n    return {\n      ext: 'pdf',\n      mime: 'application/pdf',\n    };\n  }\n\n  if (buf[0] === 0x4D && buf[1] === 0x5A) {\n    return {\n      ext: 'exe',\n      mime: 'application/x-msdownload',\n    };\n  }\n\n  if ((buf[0] === 0x43 || buf[0] === 0x46) && buf[1] === 0x57 && buf[2] === 0x53) {\n    return {\n      ext: 'swf',\n      mime: 'application/x-shockwave-flash',\n    };\n  }\n\n  if (buf[0] === 0x7B && buf[1] === 0x5C && buf[2] === 0x72 && buf[3] === 0x74 && buf[4] === 0x66) {\n    return {\n      ext: 'rtf',\n      mime: 'application/rtf',\n    };\n  }\n\n  if (\n    (buf[0] === 0x77 && buf[1] === 0x4F && buf[2] === 0x46 && buf[3] === 0x46) &&\n  (\n    (buf[4] === 0x00 && buf[5] === 0x01 && buf[6] === 0x00 && buf[7] === 0x00) ||\n   (buf[4] === 0x4F && buf[5] === 0x54 && buf[6] === 0x54 && buf[7] === 0x4F)\n  )\n  ) {\n    return {\n      ext: 'woff',\n      mime: 'application/font-woff',\n    };\n  }\n\n  if (\n    (buf[0] === 0x77 && buf[1] === 0x4F && buf[2] === 0x46 && buf[3] === 0x32) &&\n  (\n    (buf[4] === 0x00 && buf[5] === 0x01 && buf[6] === 0x00 && buf[7] === 0x00) ||\n   (buf[4] === 0x4F && buf[5] === 0x54 && buf[6] === 0x54 && buf[7] === 0x4F)\n  )\n  ) {\n    return {\n      ext: 'woff2',\n      mime: 'application/font-woff',\n    };\n  }\n\n  if (\n    (buf[34] === 0x4C && buf[35] === 0x50) &&\n  (\n    (buf[8] === 0x00 && buf[9] === 0x00 && buf[10] === 0x01) ||\n   (buf[8] === 0x01 && buf[9] === 0x00 && buf[10] === 0x02) ||\n   (buf[8] === 0x02 && buf[9] === 0x00 && buf[10] === 0x02)\n  )\n  ) {\n    return {\n      ext: 'eot',\n      mime: 'application/octet-stream',\n    };\n  }\n\n  if (buf[0] === 0x00 && buf[1] === 0x01 && buf[2] === 0x00 && buf[3] === 0x00 && buf[4] === 0x00) {\n    return {\n      ext: 'ttf',\n      mime: 'application/font-sfnt',\n    };\n  }\n\n  if (buf[0] === 0x4F && buf[1] === 0x54 && buf[2] === 0x54 && buf[3] === 0x4F && buf[4] === 0x00) {\n    return {\n      ext: 'otf',\n      mime: 'application/font-sfnt',\n    };\n  }\n\n  if (buf[0] === 0x00 && buf[1] === 0x00 && buf[2] === 0x01 && buf[3] === 0x00) {\n    return {\n      ext: 'ico',\n      mime: 'image/x-icon',\n    };\n  }\n\n  if (buf[0] === 0x46 && buf[1] === 0x4C && buf[2] === 0x56 && buf[3] === 0x01) {\n    return {\n      ext: 'flv',\n      mime: 'video/x-flv',\n    };\n  }\n\n  if (buf[0] === 0x25 && buf[1] === 0x21) {\n    return {\n      ext: 'ps',\n      mime: 'application/postscript',\n    };\n  }\n\n  if (buf[0] === 0xFD && buf[1] === 0x37 && buf[2] === 0x7A && buf[3] === 0x58 && buf[4] === 0x5A && buf[5] === 0x00) {\n    return {\n      ext: 'xz',\n      mime: 'application/x-xz',\n    };\n  }\n\n  if (buf[0] === 0x53 && buf[1] === 0x51 && buf[2] === 0x4C && buf[3] === 0x69) {\n    return {\n      ext: 'sqlite',\n      mime: 'application/x-sqlite3',\n    };\n  }\n\n  if (buf[0] === 0x4E && buf[1] === 0x45 && buf[2] === 0x53 && buf[3] === 0x1A) {\n    return {\n      ext: 'nes',\n      mime: 'application/x-nintendo-nes-rom',\n    };\n  }\n\n  if (buf[0] === 0x43 && buf[1] === 0x72 && buf[2] === 0x32 && buf[3] === 0x34) {\n    return {\n      ext: 'crx',\n      mime: 'application/x-google-chrome-extension',\n    };\n  }\n\n  if (\n    (buf[0] === 0x4D && buf[1] === 0x53 && buf[2] === 0x43 && buf[3] === 0x46) ||\n  (buf[0] === 0x49 && buf[1] === 0x53 && buf[2] === 0x63 && buf[3] === 0x28)\n  ) {\n    return {\n      ext: 'cab',\n      mime: 'application/vnd.ms-cab-compressed',\n    };\n  }\n\n  // needs to be before `ar` check\n  if (\n    buf[0] === 0x21 && buf[1] === 0x3C && buf[2] === 0x61 && buf[3] === 0x72 && buf[4] === 0x63 && buf[5] === 0x68 &&\n    buf[6] === 0x3E && buf[7] === 0x0A && buf[8] === 0x64 && buf[9] === 0x65 && buf[10] === 0x62 && buf[11] === 0x69 &&\n    buf[12] === 0x61 && buf[13] === 0x6E && buf[14] === 0x2D && buf[15] === 0x62 && buf[16] === 0x69 &&\n    buf[17] === 0x6E && buf[18] === 0x61 && buf[19] === 0x72 && buf[20] === 0x79\n  ) {\n    return {\n      ext: 'deb',\n      mime: 'application/x-deb',\n    };\n  }\n\n  if (\n    buf[0] === 0x21 && buf[1] === 0x3C && buf[2] === 0x61 && buf[3] === 0x72 && buf[4] === 0x63 && buf[5] === 0x68 &&\n    buf[6] === 0x3E\n  ) {\n    return {\n      ext: 'ar',\n      mime: 'application/x-unix-archive',\n    };\n  }\n\n  if (buf[0] === 0xED && buf[1] === 0xAB && buf[2] === 0xEE && buf[3] === 0xDB) {\n    return {\n      ext: 'rpm',\n      mime: 'application/x-rpm',\n    };\n  }\n\n  if (\n    (buf[0] === 0x1F && buf[1] === 0xA0) ||\n  (buf[0] === 0x1F && buf[1] === 0x9D)\n  ) {\n    return {\n      ext: 'Z',\n      mime: 'application/x-compress',\n    };\n  }\n\n  if (buf[0] === 0x4C && buf[1] === 0x5A && buf[2] === 0x49 && buf[3] === 0x50) {\n    return {\n      ext: 'lz',\n      mime: 'application/x-lzip',\n    };\n  }\n\n  if (\n    buf[0] === 0xD0 && buf[1] === 0xCF && buf[2] === 0x11 && buf[3] === 0xE0 && buf[4] === 0xA1 && buf[5] === 0xB1 &&\n    buf[6] === 0x1A && buf[7] === 0xE1\n  ) {\n    return {\n      ext: 'msi',\n      mime: 'application/x-msi',\n    };\n  }\n\n  if (\n    buf[0] === 0x06 && buf[1] === 0x0E && buf[2] === 0x2B && buf[3] === 0x34 && buf[4] === 0x02 && buf[5] === 0x05 &&\n    buf[6] === 0x01 && buf[7] === 0x01 && buf[8] === 0x0D && buf[9] === 0x01 && buf[10] === 0x02 && buf[11] === 0x01 &&\n    buf[12] === 0x01 && buf[13] === 0x02\n  ) {\n    return {\n      ext: 'mxf',\n      mime: 'application/mxf',\n    };\n  }\n\n  return null;\n}\n\nmodule.exports = mimeOfBuffer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///91\n");

/***/ }),
/* 92 */
/*!*********************************************!*\
  !*** ./node_modules/snekfetch/package.json ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = {\"_from\":\"snekfetch@^3.6.4\",\"_id\":\"snekfetch@3.6.4\",\"_inBundle\":false,\"_integrity\":\"sha512-NjxjITIj04Ffqid5lqr7XdgwM7X61c/Dns073Ly170bPQHLm6jkmelye/eglS++1nfTWktpP6Y2bFXjdPlQqdw==\",\"_location\":\"/snekfetch\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"range\",\"registry\":true,\"raw\":\"snekfetch@^3.6.4\",\"name\":\"snekfetch\",\"escapedName\":\"snekfetch\",\"rawSpec\":\"^3.6.4\",\"saveSpec\":null,\"fetchSpec\":\"^3.6.4\"},\"_requiredBy\":[\"/discord.js\"],\"_resolved\":\"https://registry.npmjs.org/snekfetch/-/snekfetch-3.6.4.tgz\",\"_shasum\":\"d13e80a616d892f3d38daae4289f4d258a645120\",\"_spec\":\"snekfetch@^3.6.4\",\"_where\":\"/media/zurkloyd/Files And Stuff/projects/development/software/Discord-bot/node_modules/discord.js\",\"author\":{\"name\":\"Gus Caplan\",\"email\":\"me@gus.host\"},\"browser\":{\"./src/node/index.js\":false,\"./src/meta.js\":false},\"bugs\":{\"url\":\"https://github.com/devsnek/snekfetch/issues\"},\"bundleDependencies\":false,\"dependencies\":{},\"deprecated\":false,\"description\":\"Just do http requests without all that weird nastiness from other libs\",\"devDependencies\":{\"@snek/syncify\":\"0.0.6\",\"coveralls\":\"^3.0.0\",\"docma\":\"^1.5.1\",\"eslint\":\"^4.8.0\",\"jest\":\"^21.2.1\",\"jsdoc-dynamic\":\"^1.0.4\",\"json-filter-loader\":\"^1.0.0\",\"node-fetch\":\"github:bitinn/node-fetch\",\"uglifyjs-webpack-plugin\":\"^1.0.0-beta.2\",\"webpack\":\"^3.8.1\"},\"homepage\":\"https://snekfetch.js.org/\",\"jest\":{\"collectCoverage\":true,\"collectCoverageFrom\":[\"src/**/*.js\",\"!src/qs_mock.js\",\"!src/node/mimeOfBuffer.js\",\"!src/node/transports/http2.js\"],\"verbose\":true},\"jsdelivr\":\"browser.js\",\"license\":\"MIT\",\"main\":\"index.js\",\"module\":\"esm.mjs\",\"name\":\"snekfetch\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/devsnek/snekfetch.git\"},\"scripts\":{\"build:browser\":\"webpack\",\"docs\":\"node docs.js\",\"lint\":\"eslint **/*.js\",\"prepublishOnly\":\"npm run build:browser\",\"test\":\"node ./node_modules/.bin/jest\",\"test:coveralls\":\"cat ./coverage/lcov.info | coveralls\"},\"unpkg\":\"browser.js\",\"version\":\"3.6.4\"}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTIuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL3BhY2thZ2UuanNvbj80ZWE2Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1wiX2Zyb21cIjpcInNuZWtmZXRjaEBeMy42LjRcIixcIl9pZFwiOlwic25la2ZldGNoQDMuNi40XCIsXCJfaW5CdW5kbGVcIjpmYWxzZSxcIl9pbnRlZ3JpdHlcIjpcInNoYTUxMi1OanhqSVRJajA0RmZxaWQ1bHFyN1hkZ3dNN1g2MWMvRG5zMDczTHkxNzBiUFFITG02amttZWx5ZS9lZ2xTKysxbmZUV2t0cFA2WTJiRlhqZFBsUXFkdz09XCIsXCJfbG9jYXRpb25cIjpcIi9zbmVrZmV0Y2hcIixcIl9waGFudG9tQ2hpbGRyZW5cIjp7fSxcIl9yZXF1ZXN0ZWRcIjp7XCJ0eXBlXCI6XCJyYW5nZVwiLFwicmVnaXN0cnlcIjp0cnVlLFwicmF3XCI6XCJzbmVrZmV0Y2hAXjMuNi40XCIsXCJuYW1lXCI6XCJzbmVrZmV0Y2hcIixcImVzY2FwZWROYW1lXCI6XCJzbmVrZmV0Y2hcIixcInJhd1NwZWNcIjpcIl4zLjYuNFwiLFwic2F2ZVNwZWNcIjpudWxsLFwiZmV0Y2hTcGVjXCI6XCJeMy42LjRcIn0sXCJfcmVxdWlyZWRCeVwiOltcIi9kaXNjb3JkLmpzXCJdLFwiX3Jlc29sdmVkXCI6XCJodHRwczovL3JlZ2lzdHJ5Lm5wbWpzLm9yZy9zbmVrZmV0Y2gvLS9zbmVrZmV0Y2gtMy42LjQudGd6XCIsXCJfc2hhc3VtXCI6XCJkMTNlODBhNjE2ZDg5MmYzZDM4ZGFhZTQyODlmNGQyNThhNjQ1MTIwXCIsXCJfc3BlY1wiOlwic25la2ZldGNoQF4zLjYuNFwiLFwiX3doZXJlXCI6XCIvbWVkaWEvenVya2xveWQvRmlsZXMgQW5kIFN0dWZmL3Byb2plY3RzL2RldmVsb3BtZW50L3NvZnR3YXJlL0Rpc2NvcmQtYm90L25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzXCIsXCJhdXRob3JcIjp7XCJuYW1lXCI6XCJHdXMgQ2FwbGFuXCIsXCJlbWFpbFwiOlwibWVAZ3VzLmhvc3RcIn0sXCJicm93c2VyXCI6e1wiLi9zcmMvbm9kZS9pbmRleC5qc1wiOmZhbHNlLFwiLi9zcmMvbWV0YS5qc1wiOmZhbHNlfSxcImJ1Z3NcIjp7XCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9kZXZzbmVrL3NuZWtmZXRjaC9pc3N1ZXNcIn0sXCJidW5kbGVEZXBlbmRlbmNpZXNcIjpmYWxzZSxcImRlcGVuZGVuY2llc1wiOnt9LFwiZGVwcmVjYXRlZFwiOmZhbHNlLFwiZGVzY3JpcHRpb25cIjpcIkp1c3QgZG8gaHR0cCByZXF1ZXN0cyB3aXRob3V0IGFsbCB0aGF0IHdlaXJkIG5hc3RpbmVzcyBmcm9tIG90aGVyIGxpYnNcIixcImRldkRlcGVuZGVuY2llc1wiOntcIkBzbmVrL3N5bmNpZnlcIjpcIjAuMC42XCIsXCJjb3ZlcmFsbHNcIjpcIl4zLjAuMFwiLFwiZG9jbWFcIjpcIl4xLjUuMVwiLFwiZXNsaW50XCI6XCJeNC44LjBcIixcImplc3RcIjpcIl4yMS4yLjFcIixcImpzZG9jLWR5bmFtaWNcIjpcIl4xLjAuNFwiLFwianNvbi1maWx0ZXItbG9hZGVyXCI6XCJeMS4wLjBcIixcIm5vZGUtZmV0Y2hcIjpcImdpdGh1YjpiaXRpbm4vbm9kZS1mZXRjaFwiLFwidWdsaWZ5anMtd2VicGFjay1wbHVnaW5cIjpcIl4xLjAuMC1iZXRhLjJcIixcIndlYnBhY2tcIjpcIl4zLjguMVwifSxcImhvbWVwYWdlXCI6XCJodHRwczovL3NuZWtmZXRjaC5qcy5vcmcvXCIsXCJqZXN0XCI6e1wiY29sbGVjdENvdmVyYWdlXCI6dHJ1ZSxcImNvbGxlY3RDb3ZlcmFnZUZyb21cIjpbXCJzcmMvKiovKi5qc1wiLFwiIXNyYy9xc19tb2NrLmpzXCIsXCIhc3JjL25vZGUvbWltZU9mQnVmZmVyLmpzXCIsXCIhc3JjL25vZGUvdHJhbnNwb3J0cy9odHRwMi5qc1wiXSxcInZlcmJvc2VcIjp0cnVlfSxcImpzZGVsaXZyXCI6XCJicm93c2VyLmpzXCIsXCJsaWNlbnNlXCI6XCJNSVRcIixcIm1haW5cIjpcImluZGV4LmpzXCIsXCJtb2R1bGVcIjpcImVzbS5tanNcIixcIm5hbWVcIjpcInNuZWtmZXRjaFwiLFwicmVwb3NpdG9yeVwiOntcInR5cGVcIjpcImdpdFwiLFwidXJsXCI6XCJnaXQraHR0cHM6Ly9naXRodWIuY29tL2RldnNuZWsvc25la2ZldGNoLmdpdFwifSxcInNjcmlwdHNcIjp7XCJidWlsZDpicm93c2VyXCI6XCJ3ZWJwYWNrXCIsXCJkb2NzXCI6XCJub2RlIGRvY3MuanNcIixcImxpbnRcIjpcImVzbGludCAqKi8qLmpzXCIsXCJwcmVwdWJsaXNoT25seVwiOlwibnBtIHJ1biBidWlsZDpicm93c2VyXCIsXCJ0ZXN0XCI6XCJub2RlIC4vbm9kZV9tb2R1bGVzLy5iaW4vamVzdFwiLFwidGVzdDpjb3ZlcmFsbHNcIjpcImNhdCAuL2NvdmVyYWdlL2xjb3YuaW5mbyB8IGNvdmVyYWxsc1wifSxcInVucGtnXCI6XCJicm93c2VyLmpzXCIsXCJ2ZXJzaW9uXCI6XCIzLjYuNFwifVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3NuZWtmZXRjaC9wYWNrYWdlLmpzb25cbi8vIG1vZHVsZSBpZCA9IDkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///92\n");

/***/ }),
/* 93 */
/*!************************************************************!*\
  !*** ./node_modules/snekfetch/src/node/transports/file.js ***!
  \************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const fs = __webpack_require__(/*! fs */ 32);\nconst path = __webpack_require__(/*! path */ 8);\nconst mime = __webpack_require__(/*! ../mime */ 48);\nconst EventEmitter = __webpack_require__(/*! events */ 5);\nconst ResponseStream = __webpack_require__(/*! ./ResponseStream */ 94);\n\nconst methods = {\n  GET: (filename, req) => {\n    req.end = () => {\n      const stream = should404(filename) ?\n        new ResponseStream().error(404, `ENOENT: no such file or directory, open '${filename}'`) :\n        fs.createReadStream(filename);\n      req.res = stream;\n      stream.headers = {\n        'content-length': 0,\n        'content-type': mime.lookup(path.extname(filename)),\n      };\n      stream.on('open', () => {\n        req.emit('response', stream);\n      });\n      if (stream instanceof ResponseStream)\n        return;\n      stream.statusCode = 200;\n      stream.on('end', () => {\n        stream.headers['content-length'] = stream.bytesRead;\n      });\n      /* istanbul ignore next */\n      stream.on('error', (err) => {\n        stream.statusCode = 400;\n        stream.status = err.message;\n      });\n    };\n  },\n  POST: (filename, req) => {\n    const chunks = [];\n    /* istanbul ignore next */\n    req.write = (data) => {\n      chunks.push(data);\n    };\n    req.end = (data) => {\n      chunks.push(data);\n      const stream = fs.createWriteStream(filename);\n      const standin = new ResponseStream();\n      req.res = standin;\n      standin.headers = {\n        'content-length': 0,\n        'content-type': mime.lookup(path.extname(filename)),\n      };\n      stream.on('finish', () => {\n        req.emit('response', standin);\n      });\n      stream.on('open', () => {\n        (function write() {\n          const chunk = chunks.shift();\n          if (!chunk)\n            return;\n          /* istanbul ignore next */\n          if (!stream.write(chunk))\n            stream.once('drain', write);\n          else\n            write();\n        }());\n        stream.end();\n      });\n    };\n  },\n  DELETE: (filename, req) => {\n    req.end = () => {\n      const stream = new ResponseStream();\n      req.res = stream;\n      stream.headers = {\n        'content-length': 0,\n        'content-type': mime.lookup(path.extname(filename)),\n      };\n      fs.unlink(filename, (err) => {\n        req.emit('response', err ? stream.error(400, err.message) : stream);\n      });\n    };\n  },\n};\n\nclass Req extends EventEmitter {\n  constructor() {\n    super();\n    this._headers = {};\n  }\n\n  setHeader() {} // eslint-disable-line no-empty-function\n  getHeader() {} // eslint-disable-line no-empty-function\n}\n\nfunction request(options) {\n  const method = methods[options.method];\n  if (!method)\n    throw new Error(`Invalid request method for file: \"${options.method}\"`);\n  const filename = options.href.replace('file://', '');\n\n  const req = new Req();\n  method(filename, req, options);\n  return req;\n}\n\nfunction should404(p) {\n  try {\n    return fs.lstatSync(p).isDirectory();\n  } catch (err) {\n    return true;\n  }\n}\n\nmodule.exports = {\n  request,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL3NyYy9ub2RlL3RyYW5zcG9ydHMvZmlsZS5qcz8wOTIxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCBtaW1lID0gcmVxdWlyZSgnLi4vbWltZScpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJyk7XG5jb25zdCBSZXNwb25zZVN0cmVhbSA9IHJlcXVpcmUoJy4vUmVzcG9uc2VTdHJlYW0nKTtcblxuY29uc3QgbWV0aG9kcyA9IHtcbiAgR0VUOiAoZmlsZW5hbWUsIHJlcSkgPT4ge1xuICAgIHJlcS5lbmQgPSAoKSA9PiB7XG4gICAgICBjb25zdCBzdHJlYW0gPSBzaG91bGQ0MDQoZmlsZW5hbWUpID9cbiAgICAgICAgbmV3IFJlc3BvbnNlU3RyZWFtKCkuZXJyb3IoNDA0LCBgRU5PRU5UOiBubyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5LCBvcGVuICcke2ZpbGVuYW1lfSdgKSA6XG4gICAgICAgIGZzLmNyZWF0ZVJlYWRTdHJlYW0oZmlsZW5hbWUpO1xuICAgICAgcmVxLnJlcyA9IHN0cmVhbTtcbiAgICAgIHN0cmVhbS5oZWFkZXJzID0ge1xuICAgICAgICAnY29udGVudC1sZW5ndGgnOiAwLFxuICAgICAgICAnY29udGVudC10eXBlJzogbWltZS5sb29rdXAocGF0aC5leHRuYW1lKGZpbGVuYW1lKSksXG4gICAgICB9O1xuICAgICAgc3RyZWFtLm9uKCdvcGVuJywgKCkgPT4ge1xuICAgICAgICByZXEuZW1pdCgncmVzcG9uc2UnLCBzdHJlYW0pO1xuICAgICAgfSk7XG4gICAgICBpZiAoc3RyZWFtIGluc3RhbmNlb2YgUmVzcG9uc2VTdHJlYW0pXG4gICAgICAgIHJldHVybjtcbiAgICAgIHN0cmVhbS5zdGF0dXNDb2RlID0gMjAwO1xuICAgICAgc3RyZWFtLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgIHN0cmVhbS5oZWFkZXJzWydjb250ZW50LWxlbmd0aCddID0gc3RyZWFtLmJ5dGVzUmVhZDtcbiAgICAgIH0pO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIHN0cmVhbS5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgIHN0cmVhbS5zdGF0dXNDb2RlID0gNDAwO1xuICAgICAgICBzdHJlYW0uc3RhdHVzID0gZXJyLm1lc3NhZ2U7XG4gICAgICB9KTtcbiAgICB9O1xuICB9LFxuICBQT1NUOiAoZmlsZW5hbWUsIHJlcSkgPT4ge1xuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmVxLndyaXRlID0gKGRhdGEpID0+IHtcbiAgICAgIGNodW5rcy5wdXNoKGRhdGEpO1xuICAgIH07XG4gICAgcmVxLmVuZCA9IChkYXRhKSA9PiB7XG4gICAgICBjaHVua3MucHVzaChkYXRhKTtcbiAgICAgIGNvbnN0IHN0cmVhbSA9IGZzLmNyZWF0ZVdyaXRlU3RyZWFtKGZpbGVuYW1lKTtcbiAgICAgIGNvbnN0IHN0YW5kaW4gPSBuZXcgUmVzcG9uc2VTdHJlYW0oKTtcbiAgICAgIHJlcS5yZXMgPSBzdGFuZGluO1xuICAgICAgc3RhbmRpbi5oZWFkZXJzID0ge1xuICAgICAgICAnY29udGVudC1sZW5ndGgnOiAwLFxuICAgICAgICAnY29udGVudC10eXBlJzogbWltZS5sb29rdXAocGF0aC5leHRuYW1lKGZpbGVuYW1lKSksXG4gICAgICB9O1xuICAgICAgc3RyZWFtLm9uKCdmaW5pc2gnLCAoKSA9PiB7XG4gICAgICAgIHJlcS5lbWl0KCdyZXNwb25zZScsIHN0YW5kaW4pO1xuICAgICAgfSk7XG4gICAgICBzdHJlYW0ub24oJ29wZW4nLCAoKSA9PiB7XG4gICAgICAgIChmdW5jdGlvbiB3cml0ZSgpIHtcbiAgICAgICAgICBjb25zdCBjaHVuayA9IGNodW5rcy5zaGlmdCgpO1xuICAgICAgICAgIGlmICghY2h1bmspXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgICBpZiAoIXN0cmVhbS53cml0ZShjaHVuaykpXG4gICAgICAgICAgICBzdHJlYW0ub25jZSgnZHJhaW4nLCB3cml0ZSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgd3JpdGUoKTtcbiAgICAgICAgfSgpKTtcbiAgICAgICAgc3RyZWFtLmVuZCgpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSxcbiAgREVMRVRFOiAoZmlsZW5hbWUsIHJlcSkgPT4ge1xuICAgIHJlcS5lbmQgPSAoKSA9PiB7XG4gICAgICBjb25zdCBzdHJlYW0gPSBuZXcgUmVzcG9uc2VTdHJlYW0oKTtcbiAgICAgIHJlcS5yZXMgPSBzdHJlYW07XG4gICAgICBzdHJlYW0uaGVhZGVycyA9IHtcbiAgICAgICAgJ2NvbnRlbnQtbGVuZ3RoJzogMCxcbiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6IG1pbWUubG9va3VwKHBhdGguZXh0bmFtZShmaWxlbmFtZSkpLFxuICAgICAgfTtcbiAgICAgIGZzLnVubGluayhmaWxlbmFtZSwgKGVycikgPT4ge1xuICAgICAgICByZXEuZW1pdCgncmVzcG9uc2UnLCBlcnIgPyBzdHJlYW0uZXJyb3IoNDAwLCBlcnIubWVzc2FnZSkgOiBzdHJlYW0pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfSxcbn07XG5cbmNsYXNzIFJlcSBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5faGVhZGVycyA9IHt9O1xuICB9XG5cbiAgc2V0SGVhZGVyKCkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eS1mdW5jdGlvblxuICBnZXRIZWFkZXIoKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5LWZ1bmN0aW9uXG59XG5cbmZ1bmN0aW9uIHJlcXVlc3Qob3B0aW9ucykge1xuICBjb25zdCBtZXRob2QgPSBtZXRob2RzW29wdGlvbnMubWV0aG9kXTtcbiAgaWYgKCFtZXRob2QpXG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJlcXVlc3QgbWV0aG9kIGZvciBmaWxlOiBcIiR7b3B0aW9ucy5tZXRob2R9XCJgKTtcbiAgY29uc3QgZmlsZW5hbWUgPSBvcHRpb25zLmhyZWYucmVwbGFjZSgnZmlsZTovLycsICcnKTtcblxuICBjb25zdCByZXEgPSBuZXcgUmVxKCk7XG4gIG1ldGhvZChmaWxlbmFtZSwgcmVxLCBvcHRpb25zKTtcbiAgcmV0dXJuIHJlcTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkNDA0KHApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZnMubHN0YXRTeW5jKHApLmlzRGlyZWN0b3J5KCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZXF1ZXN0LFxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3NuZWtmZXRjaC9zcmMvbm9kZS90cmFuc3BvcnRzL2ZpbGUuanNcbi8vIG1vZHVsZSBpZCA9IDkzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///93\n");

/***/ }),
/* 94 */
/*!**********************************************************************!*\
  !*** ./node_modules/snekfetch/src/node/transports/ResponseStream.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Stream = __webpack_require__(/*! stream */ 31);\n\nclass ResponseStream extends Stream.Readable {\n  constructor() {\n    super();\n    this.statusCode = 200;\n    this.status = 'OK';\n  }\n\n  error(code, message) {\n    this.statusCode = code;\n    this.status = message;\n    return this;\n  }\n\n  on(event, handler) {\n    if (['end', 'open'].includes(event))\n      handler();\n  }\n\n  _read() {} // eslint-disable-line no-empty-function\n}\n\nmodule.exports = ResponseStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTQuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc25la2ZldGNoL3NyYy9ub2RlL3RyYW5zcG9ydHMvUmVzcG9uc2VTdHJlYW0uanM/NDQ3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcblxuY2xhc3MgUmVzcG9uc2VTdHJlYW0gZXh0ZW5kcyBTdHJlYW0uUmVhZGFibGUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3RhdHVzQ29kZSA9IDIwMDtcbiAgICB0aGlzLnN0YXR1cyA9ICdPSyc7XG4gIH1cblxuICBlcnJvcihjb2RlLCBtZXNzYWdlKSB7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gY29kZTtcbiAgICB0aGlzLnN0YXR1cyA9IG1lc3NhZ2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBvbihldmVudCwgaGFuZGxlcikge1xuICAgIGlmIChbJ2VuZCcsICdvcGVuJ10uaW5jbHVkZXMoZXZlbnQpKVxuICAgICAgaGFuZGxlcigpO1xuICB9XG5cbiAgX3JlYWQoKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5LWZ1bmN0aW9uXG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzcG9uc2VTdHJlYW07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9zbmVrZmV0Y2gvc3JjL25vZGUvdHJhbnNwb3J0cy9SZXNwb25zZVN0cmVhbS5qc1xuLy8gbW9kdWxlIGlkID0gOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///94\n");

/***/ }),
/* 95 */
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"os\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJvc1wiPzQ5YmMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwib3NcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJvc1wiXG4vLyBtb2R1bGUgaWQgPSA5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///95\n");

/***/ }),
/* 96 */
/*!******************************************************!*\
  !*** ./node_modules/discord.js/src/client/Client.js ***!
  \******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const EventEmitter = __webpack_require__(/*! events */ 5);\nconst Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst Permissions = __webpack_require__(/*! ../util/Permissions */ 7);\nconst Util = __webpack_require__(/*! ../util/Util */ 4);\nconst RESTManager = __webpack_require__(/*! ./rest/RESTManager */ 50);\nconst ClientDataManager = __webpack_require__(/*! ./ClientDataManager */ 105);\nconst ClientManager = __webpack_require__(/*! ./ClientManager */ 106);\nconst ClientDataResolver = __webpack_require__(/*! ./ClientDataResolver */ 34);\nconst ClientVoiceManager = __webpack_require__(/*! ./voice/ClientVoiceManager */ 150);\nconst WebSocketManager = __webpack_require__(/*! ./websocket/WebSocketManager */ 168);\nconst ActionsManager = __webpack_require__(/*! ./actions/ActionsManager */ 169);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst Presence = __webpack_require__(/*! ../structures/Presence */ 12).Presence;\nconst ShardClientUtil = __webpack_require__(/*! ../sharding/ShardClientUtil */ 81);\nconst VoiceBroadcast = __webpack_require__(/*! ./voice/VoiceBroadcast */ 78);\n\n/**\n * The main hub for interacting with the Discord API, and the starting point for any bot.\n * @extends {EventEmitter}\n */\nclass Client extends EventEmitter {\n  /**\n   * @param {ClientOptions} [options] Options for the client\n   */\n  constructor(options = {}) {\n    super();\n\n    // Obtain shard details from environment\n    if (!options.shardId && 'SHARD_ID' in process.env) options.shardId = Number(process.env.SHARD_ID);\n    if (!options.shardCount && 'SHARD_COUNT' in process.env) options.shardCount = Number(process.env.SHARD_COUNT);\n\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n    this.options = Util.mergeDefault(Constants.DefaultOptions, options);\n    this._validateOptions();\n\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n    this.rest = new RESTManager(this);\n\n    /**\n     * The data manager of the client\n     * @type {ClientDataManager}\n     * @private\n     */\n    this.dataManager = new ClientDataManager(this);\n\n    /**\n     * The manager of the client\n     * @type {ClientManager}\n     * @private\n     */\n    this.manager = new ClientManager(this);\n\n    /**\n     * The WebSocket manager of the client\n     * @type {WebSocketManager}\n     * @private\n     */\n    this.ws = new WebSocketManager(this);\n\n    /**\n     * The data resolver of the client\n     * @type {ClientDataResolver}\n     * @private\n     */\n    this.resolver = new ClientDataResolver(this);\n\n    /**\n     * The action manager of the client\n     * @type {ActionsManager}\n     * @private\n     */\n    this.actions = new ActionsManager(this);\n\n    /**\n     * The voice manager of the client (`null` in browsers)\n     * @type {?ClientVoiceManager}\n     * @private\n     */\n    this.voice = !this.browser ? new ClientVoiceManager(this) : null;\n\n    /**\n     * The shard helpers for the client\n     * (only if the process was spawned as a child, such as from a {@link ShardingManager})\n     * @type {?ShardClientUtil}\n     */\n    this.shard = process.send ? ShardClientUtil.singleton(this) : null;\n\n    /**\n     * All of the {@link User} objects that have been cached at any point, mapped by their IDs\n     * @type {Collection<Snowflake, User>}\n     */\n    this.users = new Collection();\n\n    /**\n     * All of the guilds the client is currently handling, mapped by their IDs -\n     * as long as sharding isn't being used, this will be *every* guild the bot is a member of\n     * @type {Collection<Snowflake, Guild>}\n     */\n    this.guilds = new Collection();\n\n    /**\n     * All of the {@link Channel}s that the client is currently handling, mapped by their IDs -\n     * as long as sharding isn't being used, this will be *every* channel in *every* guild, and all DM channels\n     * @type {Collection<Snowflake, Channel>}\n     */\n    this.channels = new Collection();\n\n    /**\n     * Presences that have been received for the client user's friends, mapped by user IDs\n     * <warn>This is only filled when using a user account.</warn>\n     * @type {Collection<Snowflake, Presence>}\n     */\n    this.presences = new Collection();\n\n    Object.defineProperty(this, 'token', { writable: true });\n    if (!this.token && 'CLIENT_TOKEN' in process.env) {\n      /**\n       * Authorization token for the logged in user/bot\n       * <warn>This should be kept private at all times.</warn>\n       * @type {?string}\n       */\n      this.token = process.env.CLIENT_TOKEN;\n    } else {\n      this.token = null;\n    }\n\n    /**\n     * User that the client is logged in as\n     * @type {?ClientUser}\n     */\n    this.user = null;\n\n    /**\n     * Time at which the client was last regarded as being in the `READY` state\n     * (each time the client disconnects and successfully reconnects, this will be overwritten)\n     * @type {?Date}\n     */\n    this.readyAt = null;\n\n    /**\n     * Active voice broadcasts that have been created\n     * @type {VoiceBroadcast[]}\n     */\n    this.broadcasts = [];\n\n    /**\n     * Previous heartbeat pings of the websocket (most recent first, limited to three elements)\n     * @type {number[]}\n     */\n    this.pings = [];\n\n    /**\n     * Timeouts set by {@link Client#setTimeout} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n    this._timeouts = new Set();\n\n    /**\n     * Intervals set by {@link Client#setInterval} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n    this._intervals = new Set();\n\n    if (this.options.messageSweepInterval > 0) {\n      this.setInterval(this.sweepMessages.bind(this), this.options.messageSweepInterval * 1000);\n    }\n  }\n\n  /**\n   * Timestamp of the latest ping's start time\n   * @type {number}\n   * @private\n   */\n  get _pingTimestamp() {\n    return this.ws.connection ? this.ws.connection.lastPingTimestamp : 0;\n  }\n\n  /**\n   * Current status of the client's connection to Discord\n   * @type {?number}\n   * @readonly\n   */\n  get status() {\n    return this.ws.connection.status;\n  }\n\n  /**\n   * How long it has been since the client last entered the `READY` state in milliseconds\n   * @type {?number}\n   * @readonly\n   */\n  get uptime() {\n    return this.readyAt ? Date.now() - this.readyAt : null;\n  }\n\n  /**\n   * Average heartbeat ping of the websocket, obtained by averaging the {@link Client#pings} property\n   * @type {number}\n   * @readonly\n   */\n  get ping() {\n    return this.pings.reduce((prev, p) => prev + p, 0) / this.pings.length;\n  }\n\n  /**\n   * All active voice connections that have been established, mapped by guild ID\n   * @type {Collection<Snowflake, VoiceConnection>}\n   * @readonly\n   */\n  get voiceConnections() {\n    if (this.browser) return new Collection();\n    return this.voice.connections;\n  }\n\n  /**\n   * All custom emojis that the client has access to, mapped by their IDs\n   * @type {Collection<Snowflake, Emoji>}\n   * @readonly\n   */\n  get emojis() {\n    const emojis = new Collection();\n    for (const guild of this.guilds.values()) {\n      for (const emoji of guild.emojis.values()) emojis.set(emoji.id, emoji);\n    }\n    return emojis;\n  }\n\n  /**\n   * Timestamp of the time the client was last `READY` at\n   * @type {?number}\n   * @readonly\n   */\n  get readyTimestamp() {\n    return this.readyAt ? this.readyAt.getTime() : null;\n  }\n\n  /**\n   * Whether the client is in a browser environment\n   * @type {boolean}\n   * @readonly\n   */\n  get browser() {\n    return typeof window !== 'undefined';\n  }\n\n  /**\n   * Creates a voice broadcast.\n   * @returns {VoiceBroadcast}\n   */\n  createVoiceBroadcast() {\n    const broadcast = new VoiceBroadcast(this);\n    this.broadcasts.push(broadcast);\n    return broadcast;\n  }\n\n  /**\n   * Logs the client in, establishing a websocket connection to Discord.\n   * <info>Both bot and regular user accounts are supported, but it is highly recommended to use a bot account whenever\n   * possible. User accounts are subject to harsher ratelimits and other restrictions that don't apply to bot accounts.\n   * Bot accounts also have access to many features that user accounts cannot utilise. User accounts that are found to\n   * be abusing/overusing the API will be banned, locking you out of Discord entirely.</info>\n   * @param {string} token Token of the account to log in with\n   * @returns {Promise<string>} Token of the account used\n   * @example\n   * client.login('my token');\n   */\n  login(token) {\n    return this.rest.methods.login(token);\n  }\n\n  /**\n   * Logs out, terminates the connection to Discord, and destroys the client.\n   * @returns {Promise}\n   */\n  destroy() {\n    for (const t of this._timeouts) clearTimeout(t);\n    for (const i of this._intervals) clearInterval(i);\n    this._timeouts.clear();\n    this._intervals.clear();\n    return this.manager.destroy();\n  }\n\n  /**\n   * Requests a sync of guild data with Discord.\n   * <info>This can be done automatically every 30 seconds by enabling {@link ClientOptions#sync}.</info>\n   * <warn>This is only available when using a user account.</warn>\n   * @param {Guild[]|Collection<Snowflake, Guild>} [guilds=this.guilds] An array or collection of guilds to sync\n   */\n  syncGuilds(guilds = this.guilds) {\n    if (this.user.bot) return;\n    this.ws.send({\n      op: 12,\n      d: guilds instanceof Collection ? guilds.keyArray() : guilds.map(g => g.id),\n    });\n  }\n\n  /**\n   * Obtains a user from Discord, or the user cache if it's already available.\n   * <warn>This is only available when using a bot account.</warn>\n   * @param {Snowflake} id ID of the user\n   * @param {boolean} [cache=true] Whether to cache the new user object if it isn't already\n   * @returns {Promise<User>}\n   */\n  fetchUser(id, cache = true) {\n    if (this.users.has(id)) return Promise.resolve(this.users.get(id));\n    return this.rest.methods.getUser(id, cache);\n  }\n\n  /**\n   * Obtains an invite from Discord.\n   * @param {InviteResolvable} invite Invite code or URL\n   * @returns {Promise<Invite>}\n   */\n  fetchInvite(invite) {\n    const code = this.resolver.resolveInviteCode(invite);\n    return this.rest.methods.getInvite(code);\n  }\n\n  /**\n   * Obtains a webhook from Discord.\n   * @param {Snowflake} id ID of the webhook\n   * @param {string} [token] Token for the webhook\n   * @returns {Promise<Webhook>}\n   */\n  fetchWebhook(id, token) {\n    return this.rest.methods.getWebhook(id, token);\n  }\n\n  /**\n   * Obtains the available voice regions from Discord.\n   * @returns {Collection<string, VoiceRegion>}\n   */\n  fetchVoiceRegions() {\n    return this.rest.methods.fetchVoiceRegions();\n  }\n\n  /**\n   * Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\n   * If the message has been edited, the time of the edit is used rather than the time of the original message.\n   * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)\n   * will be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}\n   * @returns {number} Amount of messages that were removed from the caches,\n   * or -1 if the message cache lifetime is unlimited\n   */\n  sweepMessages(lifetime = this.options.messageCacheLifetime) {\n    if (typeof lifetime !== 'number' || isNaN(lifetime)) throw new TypeError('The lifetime must be a number.');\n    if (lifetime <= 0) {\n      this.emit('debug', 'Didn\\'t sweep messages - lifetime is unlimited');\n      return -1;\n    }\n\n    const lifetimeMs = lifetime * 1000;\n    const now = Date.now();\n    let channels = 0;\n    let messages = 0;\n\n    for (const channel of this.channels.values()) {\n      if (!channel.messages) continue;\n      channels++;\n\n      for (const message of channel.messages.values()) {\n        if (now - (message.editedTimestamp || message.createdTimestamp) > lifetimeMs) {\n          channel.messages.delete(message.id);\n          messages++;\n        }\n      }\n    }\n\n    this.emit('debug', `Swept ${messages} messages older than ${lifetime} seconds in ${channels} text-based channels`);\n    return messages;\n  }\n\n  /**\n   * Obtains the OAuth Application of the bot from Discord.\n   * @param {Snowflake} [id='@me'] ID of application to fetch\n   * @returns {Promise<OAuth2Application>}\n   */\n  fetchApplication(id = '@me') {\n    return this.rest.methods.getApplication(id);\n  }\n\n  /**\n   * Generates a link that can be used to invite the bot to a guild.\n   * <warn>This is only available when using a bot account.</warn>\n   * @param {PermissionResolvable[]|number} [permissions] Permissions to request\n   * @returns {Promise<string>}\n   * @example\n   * client.generateInvite(['SEND_MESSAGES', 'MANAGE_GUILD', 'MENTION_EVERYONE'])\n   *   .then(link => {\n   *     console.log(`Generated bot invite link: ${link}`);\n   *   });\n   */\n  generateInvite(permissions) {\n    if (permissions) {\n      if (permissions instanceof Array) permissions = Permissions.resolve(permissions);\n    } else {\n      permissions = 0;\n    }\n    return this.fetchApplication().then(application =>\n      `https://discordapp.com/oauth2/authorize?client_id=${application.id}&permissions=${permissions}&scope=bot`\n    );\n  }\n\n  /**\n   * Sets a timeout that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n  setTimeout(fn, delay, ...args) {\n    const timeout = setTimeout(() => {\n      fn(...args);\n      this._timeouts.delete(timeout);\n    }, delay);\n    this._timeouts.add(timeout);\n    return timeout;\n  }\n\n  /**\n   * Clears a timeout.\n   * @param {Timeout} timeout Timeout to cancel\n   */\n  clearTimeout(timeout) {\n    clearTimeout(timeout);\n    this._timeouts.delete(timeout);\n  }\n\n  /**\n   * Sets an interval that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n  setInterval(fn, delay, ...args) {\n    const interval = setInterval(fn, delay, ...args);\n    this._intervals.add(interval);\n    return interval;\n  }\n\n  /**\n   * Clears an interval.\n   * @param {Timeout} interval Interval to cancel\n   */\n  clearInterval(interval) {\n    clearInterval(interval);\n    this._intervals.delete(interval);\n  }\n\n  /**\n   * Adds a ping to {@link Client#pings}.\n   * @param {number} startTime Starting time of the ping\n   * @private\n   */\n  _pong(startTime) {\n    this.pings.unshift(Date.now() - startTime);\n    if (this.pings.length > 3) this.pings.length = 3;\n    this.ws.lastHeartbeatAck = true;\n  }\n\n  /**\n   * Adds/updates a friend's presence in {@link Client#presences}.\n   * @param {Snowflake} id ID of the user\n   * @param {Object} presence Raw presence object from Discord\n   * @private\n   */\n  _setPresence(id, presence) {\n    if (this.presences.has(id)) {\n      this.presences.get(id).update(presence);\n      return;\n    }\n    this.presences.set(id, new Presence(presence));\n  }\n\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\n   * with the client as `this`.\n   * @param {string} script Script to eval\n   * @returns {*}\n   * @private\n   */\n  _eval(script) {\n    return eval(script);\n  }\n\n  /**\n   * Validates the client options.\n   * @param {ClientOptions} [options=this.options] Options to validate\n   * @private\n   */\n  _validateOptions(options = this.options) {\n    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount)) {\n      throw new TypeError('The shardCount option must be a number.');\n    }\n    if (typeof options.shardId !== 'number' || isNaN(options.shardId)) {\n      throw new TypeError('The shardId option must be a number.');\n    }\n    if (options.shardCount < 0) throw new RangeError('The shardCount option must be at least 0.');\n    if (options.shardId < 0) throw new RangeError('The shardId option must be at least 0.');\n    if (options.shardId !== 0 && options.shardId >= options.shardCount) {\n      throw new RangeError('The shardId option must be less than shardCount.');\n    }\n    if (typeof options.messageCacheMaxSize !== 'number' || isNaN(options.messageCacheMaxSize)) {\n      throw new TypeError('The messageCacheMaxSize option must be a number.');\n    }\n    if (typeof options.messageCacheLifetime !== 'number' || isNaN(options.messageCacheLifetime)) {\n      throw new TypeError('The messageCacheLifetime option must be a number.');\n    }\n    if (typeof options.messageSweepInterval !== 'number' || isNaN(options.messageSweepInterval)) {\n      throw new TypeError('The messageSweepInterval option must be a number.');\n    }\n    if (typeof options.fetchAllMembers !== 'boolean') {\n      throw new TypeError('The fetchAllMembers option must be a boolean.');\n    }\n    if (typeof options.disableEveryone !== 'boolean') {\n      throw new TypeError('The disableEveryone option must be a boolean.');\n    }\n    if (typeof options.restWsBridgeTimeout !== 'number' || isNaN(options.restWsBridgeTimeout)) {\n      throw new TypeError('The restWsBridgeTimeout option must be a number.');\n    }\n    if (!(options.disabledEvents instanceof Array)) throw new TypeError('The disabledEvents option must be an Array.');\n  }\n}\n\nmodule.exports = Client;\n\n/**\n * Emitted for general warnings.\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * Emitted for general debugging information.\n * @event Client#debug\n * @param {string} info The debug information\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L0NsaWVudC5qcz9iNzAwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vdXRpbC9Db25zdGFudHMnKTtcbmNvbnN0IFBlcm1pc3Npb25zID0gcmVxdWlyZSgnLi4vdXRpbC9QZXJtaXNzaW9ucycpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwvVXRpbCcpO1xuY29uc3QgUkVTVE1hbmFnZXIgPSByZXF1aXJlKCcuL3Jlc3QvUkVTVE1hbmFnZXInKTtcbmNvbnN0IENsaWVudERhdGFNYW5hZ2VyID0gcmVxdWlyZSgnLi9DbGllbnREYXRhTWFuYWdlcicpO1xuY29uc3QgQ2xpZW50TWFuYWdlciA9IHJlcXVpcmUoJy4vQ2xpZW50TWFuYWdlcicpO1xuY29uc3QgQ2xpZW50RGF0YVJlc29sdmVyID0gcmVxdWlyZSgnLi9DbGllbnREYXRhUmVzb2x2ZXInKTtcbmNvbnN0IENsaWVudFZvaWNlTWFuYWdlciA9IHJlcXVpcmUoJy4vdm9pY2UvQ2xpZW50Vm9pY2VNYW5hZ2VyJyk7XG5jb25zdCBXZWJTb2NrZXRNYW5hZ2VyID0gcmVxdWlyZSgnLi93ZWJzb2NrZXQvV2ViU29ja2V0TWFuYWdlcicpO1xuY29uc3QgQWN0aW9uc01hbmFnZXIgPSByZXF1aXJlKCcuL2FjdGlvbnMvQWN0aW9uc01hbmFnZXInKTtcbmNvbnN0IENvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi91dGlsL0NvbGxlY3Rpb24nKTtcbmNvbnN0IFByZXNlbmNlID0gcmVxdWlyZSgnLi4vc3RydWN0dXJlcy9QcmVzZW5jZScpLlByZXNlbmNlO1xuY29uc3QgU2hhcmRDbGllbnRVdGlsID0gcmVxdWlyZSgnLi4vc2hhcmRpbmcvU2hhcmRDbGllbnRVdGlsJyk7XG5jb25zdCBWb2ljZUJyb2FkY2FzdCA9IHJlcXVpcmUoJy4vdm9pY2UvVm9pY2VCcm9hZGNhc3QnKTtcblxuLyoqXG4gKiBUaGUgbWFpbiBodWIgZm9yIGludGVyYWN0aW5nIHdpdGggdGhlIERpc2NvcmQgQVBJLCBhbmQgdGhlIHN0YXJ0aW5nIHBvaW50IGZvciBhbnkgYm90LlxuICogQGV4dGVuZHMge0V2ZW50RW1pdHRlcn1cbiAqL1xuY2xhc3MgQ2xpZW50IGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Q2xpZW50T3B0aW9uc30gW29wdGlvbnNdIE9wdGlvbnMgZm9yIHRoZSBjbGllbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICAvLyBPYnRhaW4gc2hhcmQgZGV0YWlscyBmcm9tIGVudmlyb25tZW50XG4gICAgaWYgKCFvcHRpb25zLnNoYXJkSWQgJiYgJ1NIQVJEX0lEJyBpbiBwcm9jZXNzLmVudikgb3B0aW9ucy5zaGFyZElkID0gTnVtYmVyKHByb2Nlc3MuZW52LlNIQVJEX0lEKTtcbiAgICBpZiAoIW9wdGlvbnMuc2hhcmRDb3VudCAmJiAnU0hBUkRfQ09VTlQnIGluIHByb2Nlc3MuZW52KSBvcHRpb25zLnNoYXJkQ291bnQgPSBOdW1iZXIocHJvY2Vzcy5lbnYuU0hBUkRfQ09VTlQpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGlvbnMgdGhlIGNsaWVudCB3YXMgaW5zdGFudGlhdGVkIHdpdGhcbiAgICAgKiBAdHlwZSB7Q2xpZW50T3B0aW9uc31cbiAgICAgKi9cbiAgICB0aGlzLm9wdGlvbnMgPSBVdGlsLm1lcmdlRGVmYXVsdChDb25zdGFudHMuRGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIHRoaXMuX3ZhbGlkYXRlT3B0aW9ucygpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFJFU1QgbWFuYWdlciBvZiB0aGUgY2xpZW50XG4gICAgICogQHR5cGUge1JFU1RNYW5hZ2VyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5yZXN0ID0gbmV3IFJFU1RNYW5hZ2VyKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRhdGEgbWFuYWdlciBvZiB0aGUgY2xpZW50XG4gICAgICogQHR5cGUge0NsaWVudERhdGFNYW5hZ2VyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5kYXRhTWFuYWdlciA9IG5ldyBDbGllbnREYXRhTWFuYWdlcih0aGlzKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYW5hZ2VyIG9mIHRoZSBjbGllbnRcbiAgICAgKiBAdHlwZSB7Q2xpZW50TWFuYWdlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMubWFuYWdlciA9IG5ldyBDbGllbnRNYW5hZ2VyKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFdlYlNvY2tldCBtYW5hZ2VyIG9mIHRoZSBjbGllbnRcbiAgICAgKiBAdHlwZSB7V2ViU29ja2V0TWFuYWdlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMud3MgPSBuZXcgV2ViU29ja2V0TWFuYWdlcih0aGlzKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBkYXRhIHJlc29sdmVyIG9mIHRoZSBjbGllbnRcbiAgICAgKiBAdHlwZSB7Q2xpZW50RGF0YVJlc29sdmVyfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgdGhpcy5yZXNvbHZlciA9IG5ldyBDbGllbnREYXRhUmVzb2x2ZXIodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYWN0aW9uIG1hbmFnZXIgb2YgdGhlIGNsaWVudFxuICAgICAqIEB0eXBlIHtBY3Rpb25zTWFuYWdlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuYWN0aW9ucyA9IG5ldyBBY3Rpb25zTWFuYWdlcih0aGlzKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2b2ljZSBtYW5hZ2VyIG9mIHRoZSBjbGllbnQgKGBudWxsYCBpbiBicm93c2VycylcbiAgICAgKiBAdHlwZSB7P0NsaWVudFZvaWNlTWFuYWdlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMudm9pY2UgPSAhdGhpcy5icm93c2VyID8gbmV3IENsaWVudFZvaWNlTWFuYWdlcih0aGlzKSA6IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2hhcmQgaGVscGVycyBmb3IgdGhlIGNsaWVudFxuICAgICAqIChvbmx5IGlmIHRoZSBwcm9jZXNzIHdhcyBzcGF3bmVkIGFzIGEgY2hpbGQsIHN1Y2ggYXMgZnJvbSBhIHtAbGluayBTaGFyZGluZ01hbmFnZXJ9KVxuICAgICAqIEB0eXBlIHs/U2hhcmRDbGllbnRVdGlsfVxuICAgICAqL1xuICAgIHRoaXMuc2hhcmQgPSBwcm9jZXNzLnNlbmQgPyBTaGFyZENsaWVudFV0aWwuc2luZ2xldG9uKHRoaXMpIDogbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEFsbCBvZiB0aGUge0BsaW5rIFVzZXJ9IG9iamVjdHMgdGhhdCBoYXZlIGJlZW4gY2FjaGVkIGF0IGFueSBwb2ludCwgbWFwcGVkIGJ5IHRoZWlyIElEc1xuICAgICAqIEB0eXBlIHtDb2xsZWN0aW9uPFNub3dmbGFrZSwgVXNlcj59XG4gICAgICovXG4gICAgdGhpcy51c2VycyA9IG5ldyBDb2xsZWN0aW9uKCk7XG5cbiAgICAvKipcbiAgICAgKiBBbGwgb2YgdGhlIGd1aWxkcyB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSBoYW5kbGluZywgbWFwcGVkIGJ5IHRoZWlyIElEcyAtXG4gICAgICogYXMgbG9uZyBhcyBzaGFyZGluZyBpc24ndCBiZWluZyB1c2VkLCB0aGlzIHdpbGwgYmUgKmV2ZXJ5KiBndWlsZCB0aGUgYm90IGlzIGEgbWVtYmVyIG9mXG4gICAgICogQHR5cGUge0NvbGxlY3Rpb248U25vd2ZsYWtlLCBHdWlsZD59XG4gICAgICovXG4gICAgdGhpcy5ndWlsZHMgPSBuZXcgQ29sbGVjdGlvbigpO1xuXG4gICAgLyoqXG4gICAgICogQWxsIG9mIHRoZSB7QGxpbmsgQ2hhbm5lbH1zIHRoYXQgdGhlIGNsaWVudCBpcyBjdXJyZW50bHkgaGFuZGxpbmcsIG1hcHBlZCBieSB0aGVpciBJRHMgLVxuICAgICAqIGFzIGxvbmcgYXMgc2hhcmRpbmcgaXNuJ3QgYmVpbmcgdXNlZCwgdGhpcyB3aWxsIGJlICpldmVyeSogY2hhbm5lbCBpbiAqZXZlcnkqIGd1aWxkLCBhbmQgYWxsIERNIGNoYW5uZWxzXG4gICAgICogQHR5cGUge0NvbGxlY3Rpb248U25vd2ZsYWtlLCBDaGFubmVsPn1cbiAgICAgKi9cbiAgICB0aGlzLmNoYW5uZWxzID0gbmV3IENvbGxlY3Rpb24oKTtcblxuICAgIC8qKlxuICAgICAqIFByZXNlbmNlcyB0aGF0IGhhdmUgYmVlbiByZWNlaXZlZCBmb3IgdGhlIGNsaWVudCB1c2VyJ3MgZnJpZW5kcywgbWFwcGVkIGJ5IHVzZXIgSURzXG4gICAgICogPHdhcm4+VGhpcyBpcyBvbmx5IGZpbGxlZCB3aGVuIHVzaW5nIGEgdXNlciBhY2NvdW50Ljwvd2Fybj5cbiAgICAgKiBAdHlwZSB7Q29sbGVjdGlvbjxTbm93Zmxha2UsIFByZXNlbmNlPn1cbiAgICAgKi9cbiAgICB0aGlzLnByZXNlbmNlcyA9IG5ldyBDb2xsZWN0aW9uKCk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Rva2VuJywgeyB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgICBpZiAoIXRoaXMudG9rZW4gJiYgJ0NMSUVOVF9UT0tFTicgaW4gcHJvY2Vzcy5lbnYpIHtcbiAgICAgIC8qKlxuICAgICAgICogQXV0aG9yaXphdGlvbiB0b2tlbiBmb3IgdGhlIGxvZ2dlZCBpbiB1c2VyL2JvdFxuICAgICAgICogPHdhcm4+VGhpcyBzaG91bGQgYmUga2VwdCBwcml2YXRlIGF0IGFsbCB0aW1lcy48L3dhcm4+XG4gICAgICAgKiBAdHlwZSB7P3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgdGhpcy50b2tlbiA9IHByb2Nlc3MuZW52LkNMSUVOVF9UT0tFTjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50b2tlbiA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlciB0aGF0IHRoZSBjbGllbnQgaXMgbG9nZ2VkIGluIGFzXG4gICAgICogQHR5cGUgez9DbGllbnRVc2VyfVxuICAgICAqL1xuICAgIHRoaXMudXNlciA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaW1lIGF0IHdoaWNoIHRoZSBjbGllbnQgd2FzIGxhc3QgcmVnYXJkZWQgYXMgYmVpbmcgaW4gdGhlIGBSRUFEWWAgc3RhdGVcbiAgICAgKiAoZWFjaCB0aW1lIHRoZSBjbGllbnQgZGlzY29ubmVjdHMgYW5kIHN1Y2Nlc3NmdWxseSByZWNvbm5lY3RzLCB0aGlzIHdpbGwgYmUgb3ZlcndyaXR0ZW4pXG4gICAgICogQHR5cGUgez9EYXRlfVxuICAgICAqL1xuICAgIHRoaXMucmVhZHlBdCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmUgdm9pY2UgYnJvYWRjYXN0cyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkXG4gICAgICogQHR5cGUge1ZvaWNlQnJvYWRjYXN0W119XG4gICAgICovXG4gICAgdGhpcy5icm9hZGNhc3RzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBQcmV2aW91cyBoZWFydGJlYXQgcGluZ3Mgb2YgdGhlIHdlYnNvY2tldCAobW9zdCByZWNlbnQgZmlyc3QsIGxpbWl0ZWQgdG8gdGhyZWUgZWxlbWVudHMpXG4gICAgICogQHR5cGUge251bWJlcltdfVxuICAgICAqL1xuICAgIHRoaXMucGluZ3MgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFRpbWVvdXRzIHNldCBieSB7QGxpbmsgQ2xpZW50I3NldFRpbWVvdXR9IHRoYXQgYXJlIHN0aWxsIGFjdGl2ZVxuICAgICAqIEB0eXBlIHtTZXQ8VGltZW91dD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl90aW1lb3V0cyA9IG5ldyBTZXQoKTtcblxuICAgIC8qKlxuICAgICAqIEludGVydmFscyBzZXQgYnkge0BsaW5rIENsaWVudCNzZXRJbnRlcnZhbH0gdGhhdCBhcmUgc3RpbGwgYWN0aXZlXG4gICAgICogQHR5cGUge1NldDxUaW1lb3V0Pn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMuX2ludGVydmFscyA9IG5ldyBTZXQoKTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMubWVzc2FnZVN3ZWVwSW50ZXJ2YWwgPiAwKSB7XG4gICAgICB0aGlzLnNldEludGVydmFsKHRoaXMuc3dlZXBNZXNzYWdlcy5iaW5kKHRoaXMpLCB0aGlzLm9wdGlvbnMubWVzc2FnZVN3ZWVwSW50ZXJ2YWwgKiAxMDAwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGltZXN0YW1wIG9mIHRoZSBsYXRlc3QgcGluZydzIHN0YXJ0IHRpbWVcbiAgICogQHR5cGUge251bWJlcn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldCBfcGluZ1RpbWVzdGFtcCgpIHtcbiAgICByZXR1cm4gdGhpcy53cy5jb25uZWN0aW9uID8gdGhpcy53cy5jb25uZWN0aW9uLmxhc3RQaW5nVGltZXN0YW1wIDogMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdXJyZW50IHN0YXR1cyBvZiB0aGUgY2xpZW50J3MgY29ubmVjdGlvbiB0byBEaXNjb3JkXG4gICAqIEB0eXBlIHs/bnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBzdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMud3MuY29ubmVjdGlvbi5zdGF0dXM7XG4gIH1cblxuICAvKipcbiAgICogSG93IGxvbmcgaXQgaGFzIGJlZW4gc2luY2UgdGhlIGNsaWVudCBsYXN0IGVudGVyZWQgdGhlIGBSRUFEWWAgc3RhdGUgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEB0eXBlIHs/bnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCB1cHRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHlBdCA/IERhdGUubm93KCkgLSB0aGlzLnJlYWR5QXQgOiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEF2ZXJhZ2UgaGVhcnRiZWF0IHBpbmcgb2YgdGhlIHdlYnNvY2tldCwgb2J0YWluZWQgYnkgYXZlcmFnaW5nIHRoZSB7QGxpbmsgQ2xpZW50I3BpbmdzfSBwcm9wZXJ0eVxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBwaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnBpbmdzLnJlZHVjZSgocHJldiwgcCkgPT4gcHJldiArIHAsIDApIC8gdGhpcy5waW5ncy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogQWxsIGFjdGl2ZSB2b2ljZSBjb25uZWN0aW9ucyB0aGF0IGhhdmUgYmVlbiBlc3RhYmxpc2hlZCwgbWFwcGVkIGJ5IGd1aWxkIElEXG4gICAqIEB0eXBlIHtDb2xsZWN0aW9uPFNub3dmbGFrZSwgVm9pY2VDb25uZWN0aW9uPn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgdm9pY2VDb25uZWN0aW9ucygpIHtcbiAgICBpZiAodGhpcy5icm93c2VyKSByZXR1cm4gbmV3IENvbGxlY3Rpb24oKTtcbiAgICByZXR1cm4gdGhpcy52b2ljZS5jb25uZWN0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGwgY3VzdG9tIGVtb2ppcyB0aGF0IHRoZSBjbGllbnQgaGFzIGFjY2VzcyB0bywgbWFwcGVkIGJ5IHRoZWlyIElEc1xuICAgKiBAdHlwZSB7Q29sbGVjdGlvbjxTbm93Zmxha2UsIEVtb2ppPn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgZW1vamlzKCkge1xuICAgIGNvbnN0IGVtb2ppcyA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgZm9yIChjb25zdCBndWlsZCBvZiB0aGlzLmd1aWxkcy52YWx1ZXMoKSkge1xuICAgICAgZm9yIChjb25zdCBlbW9qaSBvZiBndWlsZC5lbW9qaXMudmFsdWVzKCkpIGVtb2ppcy5zZXQoZW1vamkuaWQsIGVtb2ppKTtcbiAgICB9XG4gICAgcmV0dXJuIGVtb2ppcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaW1lc3RhbXAgb2YgdGhlIHRpbWUgdGhlIGNsaWVudCB3YXMgbGFzdCBgUkVBRFlgIGF0XG4gICAqIEB0eXBlIHs/bnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCByZWFkeVRpbWVzdGFtcCgpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFkeUF0ID8gdGhpcy5yZWFkeUF0LmdldFRpbWUoKSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGUgY2xpZW50IGlzIGluIGEgYnJvd3NlciBlbnZpcm9ubWVudFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgYnJvd3NlcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHZvaWNlIGJyb2FkY2FzdC5cbiAgICogQHJldHVybnMge1ZvaWNlQnJvYWRjYXN0fVxuICAgKi9cbiAgY3JlYXRlVm9pY2VCcm9hZGNhc3QoKSB7XG4gICAgY29uc3QgYnJvYWRjYXN0ID0gbmV3IFZvaWNlQnJvYWRjYXN0KHRoaXMpO1xuICAgIHRoaXMuYnJvYWRjYXN0cy5wdXNoKGJyb2FkY2FzdCk7XG4gICAgcmV0dXJuIGJyb2FkY2FzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIHRoZSBjbGllbnQgaW4sIGVzdGFibGlzaGluZyBhIHdlYnNvY2tldCBjb25uZWN0aW9uIHRvIERpc2NvcmQuXG4gICAqIDxpbmZvPkJvdGggYm90IGFuZCByZWd1bGFyIHVzZXIgYWNjb3VudHMgYXJlIHN1cHBvcnRlZCwgYnV0IGl0IGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgYSBib3QgYWNjb3VudCB3aGVuZXZlclxuICAgKiBwb3NzaWJsZS4gVXNlciBhY2NvdW50cyBhcmUgc3ViamVjdCB0byBoYXJzaGVyIHJhdGVsaW1pdHMgYW5kIG90aGVyIHJlc3RyaWN0aW9ucyB0aGF0IGRvbid0IGFwcGx5IHRvIGJvdCBhY2NvdW50cy5cbiAgICogQm90IGFjY291bnRzIGFsc28gaGF2ZSBhY2Nlc3MgdG8gbWFueSBmZWF0dXJlcyB0aGF0IHVzZXIgYWNjb3VudHMgY2Fubm90IHV0aWxpc2UuIFVzZXIgYWNjb3VudHMgdGhhdCBhcmUgZm91bmQgdG9cbiAgICogYmUgYWJ1c2luZy9vdmVydXNpbmcgdGhlIEFQSSB3aWxsIGJlIGJhbm5lZCwgbG9ja2luZyB5b3Ugb3V0IG9mIERpc2NvcmQgZW50aXJlbHkuPC9pbmZvPlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9rZW4gVG9rZW4gb2YgdGhlIGFjY291bnQgdG8gbG9nIGluIHdpdGhcbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gVG9rZW4gb2YgdGhlIGFjY291bnQgdXNlZFxuICAgKiBAZXhhbXBsZVxuICAgKiBjbGllbnQubG9naW4oJ215IHRva2VuJyk7XG4gICAqL1xuICBsb2dpbih0b2tlbikge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWV0aG9kcy5sb2dpbih0b2tlbik7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBvdXQsIHRlcm1pbmF0ZXMgdGhlIGNvbm5lY3Rpb24gdG8gRGlzY29yZCwgYW5kIGRlc3Ryb3lzIHRoZSBjbGllbnQuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5fdGltZW91dHMpIGNsZWFyVGltZW91dCh0KTtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5faW50ZXJ2YWxzKSBjbGVhckludGVydmFsKGkpO1xuICAgIHRoaXMuX3RpbWVvdXRzLmNsZWFyKCk7XG4gICAgdGhpcy5faW50ZXJ2YWxzLmNsZWFyKCk7XG4gICAgcmV0dXJuIHRoaXMubWFuYWdlci5kZXN0cm95KCk7XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdHMgYSBzeW5jIG9mIGd1aWxkIGRhdGEgd2l0aCBEaXNjb3JkLlxuICAgKiA8aW5mbz5UaGlzIGNhbiBiZSBkb25lIGF1dG9tYXRpY2FsbHkgZXZlcnkgMzAgc2Vjb25kcyBieSBlbmFibGluZyB7QGxpbmsgQ2xpZW50T3B0aW9ucyNzeW5jfS48L2luZm8+XG4gICAqIDx3YXJuPlRoaXMgaXMgb25seSBhdmFpbGFibGUgd2hlbiB1c2luZyBhIHVzZXIgYWNjb3VudC48L3dhcm4+XG4gICAqIEBwYXJhbSB7R3VpbGRbXXxDb2xsZWN0aW9uPFNub3dmbGFrZSwgR3VpbGQ+fSBbZ3VpbGRzPXRoaXMuZ3VpbGRzXSBBbiBhcnJheSBvciBjb2xsZWN0aW9uIG9mIGd1aWxkcyB0byBzeW5jXG4gICAqL1xuICBzeW5jR3VpbGRzKGd1aWxkcyA9IHRoaXMuZ3VpbGRzKSB7XG4gICAgaWYgKHRoaXMudXNlci5ib3QpIHJldHVybjtcbiAgICB0aGlzLndzLnNlbmQoe1xuICAgICAgb3A6IDEyLFxuICAgICAgZDogZ3VpbGRzIGluc3RhbmNlb2YgQ29sbGVjdGlvbiA/IGd1aWxkcy5rZXlBcnJheSgpIDogZ3VpbGRzLm1hcChnID0+IGcuaWQpLFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGFpbnMgYSB1c2VyIGZyb20gRGlzY29yZCwgb3IgdGhlIHVzZXIgY2FjaGUgaWYgaXQncyBhbHJlYWR5IGF2YWlsYWJsZS5cbiAgICogPHdhcm4+VGhpcyBpcyBvbmx5IGF2YWlsYWJsZSB3aGVuIHVzaW5nIGEgYm90IGFjY291bnQuPC93YXJuPlxuICAgKiBAcGFyYW0ge1Nub3dmbGFrZX0gaWQgSUQgb2YgdGhlIHVzZXJcbiAgICogQHBhcmFtIHtib29sZWFufSBbY2FjaGU9dHJ1ZV0gV2hldGhlciB0byBjYWNoZSB0aGUgbmV3IHVzZXIgb2JqZWN0IGlmIGl0IGlzbid0IGFscmVhZHlcbiAgICogQHJldHVybnMge1Byb21pc2U8VXNlcj59XG4gICAqL1xuICBmZXRjaFVzZXIoaWQsIGNhY2hlID0gdHJ1ZSkge1xuICAgIGlmICh0aGlzLnVzZXJzLmhhcyhpZCkpIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy51c2Vycy5nZXQoaWQpKTtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ldGhvZHMuZ2V0VXNlcihpZCwgY2FjaGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIE9idGFpbnMgYW4gaW52aXRlIGZyb20gRGlzY29yZC5cbiAgICogQHBhcmFtIHtJbnZpdGVSZXNvbHZhYmxlfSBpbnZpdGUgSW52aXRlIGNvZGUgb3IgVVJMXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEludml0ZT59XG4gICAqL1xuICBmZXRjaEludml0ZShpbnZpdGUpIHtcbiAgICBjb25zdCBjb2RlID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlSW52aXRlQ29kZShpbnZpdGUpO1xuICAgIHJldHVybiB0aGlzLnJlc3QubWV0aG9kcy5nZXRJbnZpdGUoY29kZSk7XG4gIH1cblxuICAvKipcbiAgICogT2J0YWlucyBhIHdlYmhvb2sgZnJvbSBEaXNjb3JkLlxuICAgKiBAcGFyYW0ge1Nub3dmbGFrZX0gaWQgSUQgb2YgdGhlIHdlYmhvb2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0b2tlbl0gVG9rZW4gZm9yIHRoZSB3ZWJob29rXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFdlYmhvb2s+fVxuICAgKi9cbiAgZmV0Y2hXZWJob29rKGlkLCB0b2tlbikge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWV0aG9kcy5nZXRXZWJob29rKGlkLCB0b2tlbik7XG4gIH1cblxuICAvKipcbiAgICogT2J0YWlucyB0aGUgYXZhaWxhYmxlIHZvaWNlIHJlZ2lvbnMgZnJvbSBEaXNjb3JkLlxuICAgKiBAcmV0dXJucyB7Q29sbGVjdGlvbjxzdHJpbmcsIFZvaWNlUmVnaW9uPn1cbiAgICovXG4gIGZldGNoVm9pY2VSZWdpb25zKCkge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWV0aG9kcy5mZXRjaFZvaWNlUmVnaW9ucygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN3ZWVwcyBhbGwgdGV4dC1iYXNlZCBjaGFubmVscycgbWVzc2FnZXMgYW5kIHJlbW92ZXMgdGhlIG9uZXMgb2xkZXIgdGhhbiB0aGUgbWF4IG1lc3NhZ2UgbGlmZXRpbWUuXG4gICAqIElmIHRoZSBtZXNzYWdlIGhhcyBiZWVuIGVkaXRlZCwgdGhlIHRpbWUgb2YgdGhlIGVkaXQgaXMgdXNlZCByYXRoZXIgdGhhbiB0aGUgdGltZSBvZiB0aGUgb3JpZ2luYWwgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtsaWZldGltZT10aGlzLm9wdGlvbnMubWVzc2FnZUNhY2hlTGlmZXRpbWVdIE1lc3NhZ2VzIHRoYXQgYXJlIG9sZGVyIHRoYW4gdGhpcyAoaW4gc2Vjb25kcylcbiAgICogd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGNhY2hlcy4gVGhlIGRlZmF1bHQgaXMgYmFzZWQgb24ge0BsaW5rIENsaWVudE9wdGlvbnMjbWVzc2FnZUNhY2hlTGlmZXRpbWV9XG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IEFtb3VudCBvZiBtZXNzYWdlcyB0aGF0IHdlcmUgcmVtb3ZlZCBmcm9tIHRoZSBjYWNoZXMsXG4gICAqIG9yIC0xIGlmIHRoZSBtZXNzYWdlIGNhY2hlIGxpZmV0aW1lIGlzIHVubGltaXRlZFxuICAgKi9cbiAgc3dlZXBNZXNzYWdlcyhsaWZldGltZSA9IHRoaXMub3B0aW9ucy5tZXNzYWdlQ2FjaGVMaWZldGltZSkge1xuICAgIGlmICh0eXBlb2YgbGlmZXRpbWUgIT09ICdudW1iZXInIHx8IGlzTmFOKGxpZmV0aW1lKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGxpZmV0aW1lIG11c3QgYmUgYSBudW1iZXIuJyk7XG4gICAgaWYgKGxpZmV0aW1lIDw9IDApIHtcbiAgICAgIHRoaXMuZW1pdCgnZGVidWcnLCAnRGlkblxcJ3Qgc3dlZXAgbWVzc2FnZXMgLSBsaWZldGltZSBpcyB1bmxpbWl0ZWQnKTtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBjb25zdCBsaWZldGltZU1zID0gbGlmZXRpbWUgKiAxMDAwO1xuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgbGV0IGNoYW5uZWxzID0gMDtcbiAgICBsZXQgbWVzc2FnZXMgPSAwO1xuXG4gICAgZm9yIChjb25zdCBjaGFubmVsIG9mIHRoaXMuY2hhbm5lbHMudmFsdWVzKCkpIHtcbiAgICAgIGlmICghY2hhbm5lbC5tZXNzYWdlcykgY29udGludWU7XG4gICAgICBjaGFubmVscysrO1xuXG4gICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgY2hhbm5lbC5tZXNzYWdlcy52YWx1ZXMoKSkge1xuICAgICAgICBpZiAobm93IC0gKG1lc3NhZ2UuZWRpdGVkVGltZXN0YW1wIHx8IG1lc3NhZ2UuY3JlYXRlZFRpbWVzdGFtcCkgPiBsaWZldGltZU1zKSB7XG4gICAgICAgICAgY2hhbm5lbC5tZXNzYWdlcy5kZWxldGUobWVzc2FnZS5pZCk7XG4gICAgICAgICAgbWVzc2FnZXMrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZW1pdCgnZGVidWcnLCBgU3dlcHQgJHttZXNzYWdlc30gbWVzc2FnZXMgb2xkZXIgdGhhbiAke2xpZmV0aW1lfSBzZWNvbmRzIGluICR7Y2hhbm5lbHN9IHRleHQtYmFzZWQgY2hhbm5lbHNgKTtcbiAgICByZXR1cm4gbWVzc2FnZXM7XG4gIH1cblxuICAvKipcbiAgICogT2J0YWlucyB0aGUgT0F1dGggQXBwbGljYXRpb24gb2YgdGhlIGJvdCBmcm9tIERpc2NvcmQuXG4gICAqIEBwYXJhbSB7U25vd2ZsYWtlfSBbaWQ9J0BtZSddIElEIG9mIGFwcGxpY2F0aW9uIHRvIGZldGNoXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9BdXRoMkFwcGxpY2F0aW9uPn1cbiAgICovXG4gIGZldGNoQXBwbGljYXRpb24oaWQgPSAnQG1lJykge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWV0aG9kcy5nZXRBcHBsaWNhdGlvbihpZCk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgbGluayB0aGF0IGNhbiBiZSB1c2VkIHRvIGludml0ZSB0aGUgYm90IHRvIGEgZ3VpbGQuXG4gICAqIDx3YXJuPlRoaXMgaXMgb25seSBhdmFpbGFibGUgd2hlbiB1c2luZyBhIGJvdCBhY2NvdW50Ljwvd2Fybj5cbiAgICogQHBhcmFtIHtQZXJtaXNzaW9uUmVzb2x2YWJsZVtdfG51bWJlcn0gW3Blcm1pc3Npb25zXSBQZXJtaXNzaW9ucyB0byByZXF1ZXN0XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gICAqIEBleGFtcGxlXG4gICAqIGNsaWVudC5nZW5lcmF0ZUludml0ZShbJ1NFTkRfTUVTU0FHRVMnLCAnTUFOQUdFX0dVSUxEJywgJ01FTlRJT05fRVZFUllPTkUnXSlcbiAgICogICAudGhlbihsaW5rID0+IHtcbiAgICogICAgIGNvbnNvbGUubG9nKGBHZW5lcmF0ZWQgYm90IGludml0ZSBsaW5rOiAke2xpbmt9YCk7XG4gICAqICAgfSk7XG4gICAqL1xuICBnZW5lcmF0ZUludml0ZShwZXJtaXNzaW9ucykge1xuICAgIGlmIChwZXJtaXNzaW9ucykge1xuICAgICAgaWYgKHBlcm1pc3Npb25zIGluc3RhbmNlb2YgQXJyYXkpIHBlcm1pc3Npb25zID0gUGVybWlzc2lvbnMucmVzb2x2ZShwZXJtaXNzaW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlcm1pc3Npb25zID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hBcHBsaWNhdGlvbigpLnRoZW4oYXBwbGljYXRpb24gPT5cbiAgICAgIGBodHRwczovL2Rpc2NvcmRhcHAuY29tL29hdXRoMi9hdXRob3JpemU/Y2xpZW50X2lkPSR7YXBwbGljYXRpb24uaWR9JnBlcm1pc3Npb25zPSR7cGVybWlzc2lvbnN9JnNjb3BlPWJvdGBcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYSB0aW1lb3V0IHRoYXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNhbmNlbGxlZCBpZiB0aGUgY2xpZW50IGlzIGRlc3Ryb3llZC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gZXhlY3V0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVsYXkgVGltZSB0byB3YWl0IGJlZm9yZSBleGVjdXRpbmcgKGluIG1pbGxpc2Vjb25kcylcbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzIEFyZ3VtZW50cyBmb3IgdGhlIGZ1bmN0aW9uXG4gICAqIEByZXR1cm5zIHtUaW1lb3V0fVxuICAgKi9cbiAgc2V0VGltZW91dChmbiwgZGVsYXksIC4uLmFyZ3MpIHtcbiAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBmbiguLi5hcmdzKTtcbiAgICAgIHRoaXMuX3RpbWVvdXRzLmRlbGV0ZSh0aW1lb3V0KTtcbiAgICB9LCBkZWxheSk7XG4gICAgdGhpcy5fdGltZW91dHMuYWRkKHRpbWVvdXQpO1xuICAgIHJldHVybiB0aW1lb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhIHRpbWVvdXQuXG4gICAqIEBwYXJhbSB7VGltZW91dH0gdGltZW91dCBUaW1lb3V0IHRvIGNhbmNlbFxuICAgKi9cbiAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpIHtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGhpcy5fdGltZW91dHMuZGVsZXRlKHRpbWVvdXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgYW4gaW50ZXJ2YWwgdGhhdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2FuY2VsbGVkIGlmIHRoZSBjbGllbnQgaXMgZGVzdHJveWVkLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBleGVjdXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBUaW1lIHRvIHdhaXQgYmVmb3JlIGV4ZWN1dGluZyAoaW4gbWlsbGlzZWNvbmRzKVxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzIGZvciB0aGUgZnVuY3Rpb25cbiAgICogQHJldHVybnMge1RpbWVvdXR9XG4gICAqL1xuICBzZXRJbnRlcnZhbChmbiwgZGVsYXksIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKGZuLCBkZWxheSwgLi4uYXJncyk7XG4gICAgdGhpcy5faW50ZXJ2YWxzLmFkZChpbnRlcnZhbCk7XG4gICAgcmV0dXJuIGludGVydmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhbiBpbnRlcnZhbC5cbiAgICogQHBhcmFtIHtUaW1lb3V0fSBpbnRlcnZhbCBJbnRlcnZhbCB0byBjYW5jZWxcbiAgICovXG4gIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICB0aGlzLl9pbnRlcnZhbHMuZGVsZXRlKGludGVydmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgcGluZyB0byB7QGxpbmsgQ2xpZW50I3BpbmdzfS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0VGltZSBTdGFydGluZyB0aW1lIG9mIHRoZSBwaW5nXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcG9uZyhzdGFydFRpbWUpIHtcbiAgICB0aGlzLnBpbmdzLnVuc2hpZnQoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSk7XG4gICAgaWYgKHRoaXMucGluZ3MubGVuZ3RoID4gMykgdGhpcy5waW5ncy5sZW5ndGggPSAzO1xuICAgIHRoaXMud3MubGFzdEhlYXJ0YmVhdEFjayA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQWRkcy91cGRhdGVzIGEgZnJpZW5kJ3MgcHJlc2VuY2UgaW4ge0BsaW5rIENsaWVudCNwcmVzZW5jZXN9LlxuICAgKiBAcGFyYW0ge1Nub3dmbGFrZX0gaWQgSUQgb2YgdGhlIHVzZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IHByZXNlbmNlIFJhdyBwcmVzZW5jZSBvYmplY3QgZnJvbSBEaXNjb3JkXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfc2V0UHJlc2VuY2UoaWQsIHByZXNlbmNlKSB7XG4gICAgaWYgKHRoaXMucHJlc2VuY2VzLmhhcyhpZCkpIHtcbiAgICAgIHRoaXMucHJlc2VuY2VzLmdldChpZCkudXBkYXRlKHByZXNlbmNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wcmVzZW5jZXMuc2V0KGlkLCBuZXcgUHJlc2VuY2UocHJlc2VuY2UpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxscyB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvZXZhbH0gb24gYSBzY3JpcHRcbiAgICogd2l0aCB0aGUgY2xpZW50IGFzIGB0aGlzYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNjcmlwdCBTY3JpcHQgdG8gZXZhbFxuICAgKiBAcmV0dXJucyB7Kn1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9ldmFsKHNjcmlwdCkge1xuICAgIHJldHVybiBldmFsKHNjcmlwdCk7XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoZSBjbGllbnQgb3B0aW9ucy5cbiAgICogQHBhcmFtIHtDbGllbnRPcHRpb25zfSBbb3B0aW9ucz10aGlzLm9wdGlvbnNdIE9wdGlvbnMgdG8gdmFsaWRhdGVcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF92YWxpZGF0ZU9wdGlvbnMob3B0aW9ucyA9IHRoaXMub3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zaGFyZENvdW50ICE9PSAnbnVtYmVyJyB8fCBpc05hTihvcHRpb25zLnNoYXJkQ291bnQpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgc2hhcmRDb3VudCBvcHRpb24gbXVzdCBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnNoYXJkSWQgIT09ICdudW1iZXInIHx8IGlzTmFOKG9wdGlvbnMuc2hhcmRJZCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBzaGFyZElkIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5zaGFyZENvdW50IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSBzaGFyZENvdW50IG9wdGlvbiBtdXN0IGJlIGF0IGxlYXN0IDAuJyk7XG4gICAgaWYgKG9wdGlvbnMuc2hhcmRJZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgc2hhcmRJZCBvcHRpb24gbXVzdCBiZSBhdCBsZWFzdCAwLicpO1xuICAgIGlmIChvcHRpb25zLnNoYXJkSWQgIT09IDAgJiYgb3B0aW9ucy5zaGFyZElkID49IG9wdGlvbnMuc2hhcmRDb3VudCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSBzaGFyZElkIG9wdGlvbiBtdXN0IGJlIGxlc3MgdGhhbiBzaGFyZENvdW50LicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMubWVzc2FnZUNhY2hlTWF4U2l6ZSAhPT0gJ251bWJlcicgfHwgaXNOYU4ob3B0aW9ucy5tZXNzYWdlQ2FjaGVNYXhTaXplKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIG1lc3NhZ2VDYWNoZU1heFNpemUgb3B0aW9uIG11c3QgYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tZXNzYWdlQ2FjaGVMaWZldGltZSAhPT0gJ251bWJlcicgfHwgaXNOYU4ob3B0aW9ucy5tZXNzYWdlQ2FjaGVMaWZldGltZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBtZXNzYWdlQ2FjaGVMaWZldGltZSBvcHRpb24gbXVzdCBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLm1lc3NhZ2VTd2VlcEludGVydmFsICE9PSAnbnVtYmVyJyB8fCBpc05hTihvcHRpb25zLm1lc3NhZ2VTd2VlcEludGVydmFsKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIG1lc3NhZ2VTd2VlcEludGVydmFsIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmV0Y2hBbGxNZW1iZXJzICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBmZXRjaEFsbE1lbWJlcnMgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGlzYWJsZUV2ZXJ5b25lICE9PSAnYm9vbGVhbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBkaXNhYmxlRXZlcnlvbmUgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucmVzdFdzQnJpZGdlVGltZW91dCAhPT0gJ251bWJlcicgfHwgaXNOYU4ob3B0aW9ucy5yZXN0V3NCcmlkZ2VUaW1lb3V0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIHJlc3RXc0JyaWRnZVRpbWVvdXQgb3B0aW9uIG11c3QgYmUgYSBudW1iZXIuJyk7XG4gICAgfVxuICAgIGlmICghKG9wdGlvbnMuZGlzYWJsZWRFdmVudHMgaW5zdGFuY2VvZiBBcnJheSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBkaXNhYmxlZEV2ZW50cyBvcHRpb24gbXVzdCBiZSBhbiBBcnJheS4nKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENsaWVudDtcblxuLyoqXG4gKiBFbWl0dGVkIGZvciBnZW5lcmFsIHdhcm5pbmdzLlxuICogQGV2ZW50IENsaWVudCN3YXJuXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5mbyBUaGUgd2FybmluZ1xuICovXG5cbi8qKlxuICogRW1pdHRlZCBmb3IgZ2VuZXJhbCBkZWJ1Z2dpbmcgaW5mb3JtYXRpb24uXG4gKiBAZXZlbnQgQ2xpZW50I2RlYnVnXG4gKiBAcGFyYW0ge3N0cmluZ30gaW5mbyBUaGUgZGVidWcgaW5mb3JtYXRpb25cbiAqL1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L0NsaWVudC5qc1xuLy8gbW9kdWxlIGlkID0gOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///96\n");

/***/ }),
/* 97 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/UserAgentManager.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass UserAgentManager {\n  constructor() {\n    this.build(this.constructor.DEFAULT);\n  }\n\n  set({ url, version } = {}) {\n    this.build({\n      url: url || this.constructor.DFEAULT.url,\n      version: version || this.constructor.DEFAULT.version,\n    });\n  }\n\n  build(ua) {\n    this.userAgent = `DiscordBot (${ua.url}, ${ua.version}) Node.js/${process.version}`;\n  }\n}\n\nUserAgentManager.DEFAULT = {\n  url: Constants.Package.homepage.split('#')[0],\n  version: Constants.Package.version,\n};\n\nmodule.exports = UserAgentManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTcuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3Jlc3QvVXNlckFnZW50TWFuYWdlci5qcz85MGFhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbmNsYXNzIFVzZXJBZ2VudE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmJ1aWxkKHRoaXMuY29uc3RydWN0b3IuREVGQVVMVCk7XG4gIH1cblxuICBzZXQoeyB1cmwsIHZlcnNpb24gfSA9IHt9KSB7XG4gICAgdGhpcy5idWlsZCh7XG4gICAgICB1cmw6IHVybCB8fCB0aGlzLmNvbnN0cnVjdG9yLkRGRUFVTFQudXJsLFxuICAgICAgdmVyc2lvbjogdmVyc2lvbiB8fCB0aGlzLmNvbnN0cnVjdG9yLkRFRkFVTFQudmVyc2lvbixcbiAgICB9KTtcbiAgfVxuXG4gIGJ1aWxkKHVhKSB7XG4gICAgdGhpcy51c2VyQWdlbnQgPSBgRGlzY29yZEJvdCAoJHt1YS51cmx9LCAke3VhLnZlcnNpb259KSBOb2RlLmpzLyR7cHJvY2Vzcy52ZXJzaW9ufWA7XG4gIH1cbn1cblxuVXNlckFnZW50TWFuYWdlci5ERUZBVUxUID0ge1xuICB1cmw6IENvbnN0YW50cy5QYWNrYWdlLmhvbWVwYWdlLnNwbGl0KCcjJylbMF0sXG4gIHZlcnNpb246IENvbnN0YW50cy5QYWNrYWdlLnZlcnNpb24sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXJBZ2VudE1hbmFnZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvcmVzdC9Vc2VyQWdlbnRNYW5hZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSA5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///97\n");

/***/ }),
/* 98 */
/*!****************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/RESTMethods.js ***!
  \****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const querystring = __webpack_require__(/*! querystring */ 46);\nconst long = __webpack_require__(/*! long */ 33);\nconst Permissions = __webpack_require__(/*! ../../util/Permissions */ 7);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst Endpoints = Constants.Endpoints;\nconst Collection = __webpack_require__(/*! ../../util/Collection */ 3);\nconst Util = __webpack_require__(/*! ../../util/Util */ 4);\n\nconst User = __webpack_require__(/*! ../../structures/User */ 11);\nconst GuildMember = __webpack_require__(/*! ../../structures/GuildMember */ 18);\nconst Message = __webpack_require__(/*! ../../structures/Message */ 16);\nconst Role = __webpack_require__(/*! ../../structures/Role */ 10);\nconst Invite = __webpack_require__(/*! ../../structures/Invite */ 37);\nconst Webhook = __webpack_require__(/*! ../../structures/Webhook */ 23);\nconst UserProfile = __webpack_require__(/*! ../../structures/UserProfile */ 99);\nconst OAuth2Application = __webpack_require__(/*! ../../structures/OAuth2Application */ 38);\nconst Channel = __webpack_require__(/*! ../../structures/Channel */ 13);\nconst GroupDMChannel = __webpack_require__(/*! ../../structures/GroupDMChannel */ 39);\nconst Guild = __webpack_require__(/*! ../../structures/Guild */ 22);\nconst VoiceRegion = __webpack_require__(/*! ../../structures/VoiceRegion */ 101);\nconst GuildAuditLogs = __webpack_require__(/*! ../../structures/GuildAuditLogs */ 59);\n\nclass RESTMethods {\n  constructor(restManager) {\n    this.rest = restManager;\n    this.client = restManager.client;\n    this._ackToken = null;\n  }\n\n  login(token = this.client.token) {\n    return new Promise((resolve, reject) => {\n      if (typeof token !== 'string') throw new Error(Constants.Errors.INVALID_TOKEN);\n      token = token.replace(/^Bot\\s*/i, '');\n      this.client.manager.connectToWebSocket(token, resolve, reject);\n    });\n  }\n\n  logout() {\n    return this.rest.makeRequest('post', Endpoints.logout, true, {});\n  }\n\n  getGateway(bot = false) {\n    return this.rest.makeRequest('get', bot ? Endpoints.gateway.bot : Endpoints.gateway, true);\n  }\n\n  fetchVoiceRegions(guildID) {\n    let endpoint;\n    if (guildID) endpoint = Endpoints.Guild(guildID).voiceRegions;\n    else endpoint = Endpoints.voiceRegions;\n    return this.rest.makeRequest('get', endpoint, true).then(res => {\n      const regions = new Collection();\n      for (const region of res) regions.set(region.id, new VoiceRegion(region));\n      return regions;\n    });\n  }\n\n  sendMessage(channel, content, { tts, nonce, embed, disableEveryone, split, code, reply } = {}, files = null) {\n    return new Promise((resolve, reject) => { // eslint-disable-line complexity\n      if (typeof content !== 'undefined') content = this.client.resolver.resolveString(content);\n\n      // The nonce has to be a uint64 :<\n      if (typeof nonce !== 'undefined') {\n        nonce = parseInt(nonce);\n        if (isNaN(nonce) || nonce < 0) throw new RangeError('Message nonce must fit in an unsigned 64-bit integer.');\n      }\n\n      if (content) {\n        if (split && typeof split !== 'object') split = {};\n\n        // Wrap everything in a code block\n        if (typeof code !== 'undefined' && (typeof code !== 'boolean' || code === true)) {\n          content = Util.escapeMarkdown(this.client.resolver.resolveString(content), true);\n          content = `\\`\\`\\`${typeof code !== 'boolean' ? code || '' : ''}\\n${content}\\n\\`\\`\\``;\n          if (split) {\n            split.prepend = `\\`\\`\\`${typeof code !== 'boolean' ? code || '' : ''}\\n`;\n            split.append = '\\n```';\n          }\n        }\n\n        // Add zero-width spaces to @everyone/@here\n        if (disableEveryone || (typeof disableEveryone === 'undefined' && this.client.options.disableEveryone)) {\n          content = content.replace(/@(everyone|here)/g, '@\\u200b$1');\n        }\n\n        // Add the reply prefix\n        if (reply && !(channel instanceof User || channel instanceof GuildMember) && channel.type !== 'dm') {\n          const id = this.client.resolver.resolveUserID(reply);\n          const mention = `<@${reply instanceof GuildMember && reply.nickname ? '!' : ''}${id}>`;\n          content = `${mention}${content ? `, ${content}` : ''}`;\n          if (split) split.prepend = `${mention}, ${split.prepend || ''}`;\n        }\n\n        // Split the content\n        if (split) content = Util.splitMessage(content, split);\n      } else if (reply && !(channel instanceof User || channel instanceof GuildMember) && channel.type !== 'dm') {\n        const id = this.client.resolver.resolveUserID(reply);\n        content = `<@${reply instanceof GuildMember && reply.nickname ? '!' : ''}${id}>`;\n      }\n\n      const send = chan => {\n        if (content instanceof Array) {\n          const messages = [];\n          (function sendChunk(list, index) {\n            const options = index === list.length - 1 ? { tts, embed, files } : { tts };\n            chan.send(list[index], options).then(message => {\n              messages.push(message);\n              if (index >= list.length - 1) return resolve(messages);\n              return sendChunk(list, ++index);\n            }).catch(reject);\n          }(content, 0));\n        } else {\n          this.rest.makeRequest('post', Endpoints.Channel(chan).messages, true, {\n            content, tts, nonce, embed,\n          }, files).then(data => resolve(this.client.actions.MessageCreate.handle(data).message), reject);\n        }\n      };\n\n      if (channel instanceof User || channel instanceof GuildMember) this.createDM(channel).then(send, reject);\n      else send(channel);\n    });\n  }\n\n  updateMessage(message, content, { embed, code, reply } = {}) {\n    if (typeof content !== 'undefined') content = this.client.resolver.resolveString(content);\n\n    // Wrap everything in a code block\n    if (typeof code !== 'undefined' && (typeof code !== 'boolean' || code === true)) {\n      content = Util.escapeMarkdown(this.client.resolver.resolveString(content), true);\n      content = `\\`\\`\\`${typeof code !== 'boolean' ? code || '' : ''}\\n${content}\\n\\`\\`\\``;\n    }\n\n    // Add the reply prefix\n    if (reply && message.channel.type !== 'dm') {\n      const id = this.client.resolver.resolveUserID(reply);\n      const mention = `<@${reply instanceof GuildMember && reply.nickname ? '!' : ''}${id}>`;\n      content = `${mention}${content ? `, ${content}` : ''}`;\n    }\n\n    return this.rest.makeRequest('patch', Endpoints.Message(message), true, {\n      content, embed,\n    }).then(data => this.client.actions.MessageUpdate.handle(data).updated);\n  }\n\n  deleteMessage(message) {\n    return this.rest.makeRequest('delete', Endpoints.Message(message), true)\n      .then(() =>\n        this.client.actions.MessageDelete.handle({\n          id: message.id,\n          channel_id: message.channel.id,\n        }).message\n      );\n  }\n\n  ackMessage(message) {\n    return this.rest.makeRequest('post', Endpoints.Message(message).ack, true, { token: this._ackToken }).then(res => {\n      if (res.token) this._ackToken = res.token;\n      return message;\n    });\n  }\n\n  ackTextChannel(channel) {\n    return this.rest.makeRequest('post', Endpoints.Channel(channel).Message(channel.lastMessageID).ack, true, {\n      token: this._ackToken,\n    }).then(res => {\n      if (res.token) this._ackToken = res.token;\n      return channel;\n    });\n  }\n\n  ackGuild(guild) {\n    return this.rest.makeRequest('post', Endpoints.Guild(guild).ack, true).then(() => guild);\n  }\n\n  bulkDeleteMessages(channel, messages) {\n    return this.rest.makeRequest('post', Endpoints.Channel(channel).messages.bulkDelete, true, {\n      messages: messages.map(m => m.id),\n    }).then(() =>\n      this.client.actions.MessageDeleteBulk.handle({\n        channel_id: channel.id,\n        messages,\n      }).messages\n    );\n  }\n\n  search(target, options) {\n    if (typeof options === 'string') options = { content: options };\n    if (options.before) {\n      if (!(options.before instanceof Date)) options.before = new Date(options.before);\n      options.maxID = long.fromNumber(options.before.getTime() - 14200704e5).shiftLeft(22).toString();\n    }\n    if (options.after) {\n      if (!(options.after instanceof Date)) options.after = new Date(options.after);\n      options.minID = long.fromNumber(options.after.getTime() - 14200704e5).shiftLeft(22).toString();\n    }\n    if (options.during) {\n      if (!(options.during instanceof Date)) options.during = new Date(options.during);\n      const t = options.during.getTime() - 14200704e5;\n      options.minID = long.fromNumber(t).shiftLeft(22).toString();\n      options.maxID = long.fromNumber(t + 86400000).shiftLeft(22).toString();\n    }\n    if (options.channel) options.channel = this.client.resolver.resolveChannelID(options.channel);\n    if (options.author) options.author = this.client.resolver.resolveUserID(options.author);\n    if (options.mentions) options.mentions = this.client.resolver.resolveUserID(options.options.mentions);\n    options = {\n      content: options.content,\n      max_id: options.maxID,\n      min_id: options.minID,\n      has: options.has,\n      channel_id: options.channel,\n      author_id: options.author,\n      author_type: options.authorType,\n      context_size: options.contextSize,\n      sort_by: options.sortBy,\n      sort_order: options.sortOrder,\n      limit: options.limit,\n      offset: options.offset,\n      mentions: options.mentions,\n      mentions_everyone: options.mentionsEveryone,\n      link_hostname: options.linkHostname,\n      embed_provider: options.embedProvider,\n      embed_type: options.embedType,\n      attachment_filename: options.attachmentFilename,\n      attachment_extension: options.attachmentExtension,\n      include_nsfw: options.nsfw,\n    };\n\n    for (const key in options) if (options[key] === undefined) delete options[key];\n    const queryString = (querystring.stringify(options).match(/[^=&?]+=[^=&?]+/g) || []).join('&');\n\n    let endpoint;\n    if (target instanceof Channel) {\n      endpoint = Endpoints.Channel(target).search;\n    } else if (target instanceof Guild) {\n      endpoint = Endpoints.Guild(target).search;\n    } else {\n      throw new TypeError('Target must be a TextChannel, DMChannel, GroupDMChannel, or Guild.');\n    }\n    return this.rest.makeRequest('get', `${endpoint}?${queryString}`, true).then(body => {\n      const messages = body.messages.map(x =>\n        x.map(m => new Message(this.client.channels.get(m.channel_id), m, this.client))\n      );\n      return {\n        totalResults: body.total_results,\n        messages,\n      };\n    });\n  }\n\n  createChannel(guild, channelName, channelType, overwrites, reason) {\n    if (overwrites instanceof Collection || overwrites instanceof Array) {\n      overwrites = overwrites.map(overwrite => {\n        let allow = overwrite.allow || overwrite._allowed;\n        let deny = overwrite.deny || overwrite._denied;\n        if (allow instanceof Array) allow = Permissions.resolve(allow);\n        if (deny instanceof Array) deny = Permissions.resolve(deny);\n\n        const role = this.client.resolver.resolveRole(guild, overwrite.id);\n        if (role) {\n          overwrite.id = role.id;\n          overwrite.type = 'role';\n        } else {\n          overwrite.id = this.client.resolver.resolveUserID(overwrite.id);\n          overwrite.type = 'member';\n        }\n\n        return {\n          allow,\n          deny,\n          type: overwrite.type,\n          id: overwrite.id,\n        };\n      });\n    }\n    return this.rest.makeRequest('post', Endpoints.Guild(guild).channels, true, {\n      name: channelName,\n      type: channelType ? Constants.ChannelTypes[channelType.toUpperCase()] : 'text',\n      permission_overwrites: overwrites,\n    }, undefined, reason).then(data => this.client.actions.ChannelCreate.handle(data).channel);\n  }\n\n  createDM(recipient) {\n    const dmChannel = this.getExistingDM(recipient);\n    if (dmChannel) return Promise.resolve(dmChannel);\n    return this.rest.makeRequest('post', Endpoints.User(this.client.user).channels, true, {\n      recipient_id: recipient.id,\n    }).then(data => this.client.actions.ChannelCreate.handle(data).channel);\n  }\n\n  createGroupDM(options) {\n    const data = this.client.user.bot ?\n      { access_tokens: options.accessTokens, nicks: options.nicks } :\n      { recipients: options.recipients };\n    return this.rest.makeRequest('post', Endpoints.User('@me').channels, true, data)\n      .then(res => new GroupDMChannel(this.client, res));\n  }\n\n  addUserToGroupDM(channel, options) {\n    const data = this.client.user.bot ?\n      { nick: options.nick, access_token: options.accessToken } :\n      { recipient: options.id };\n    return this.rest.makeRequest('put', Endpoints.Channel(channel).Recipient(options.id), true, data)\n      .then(() => channel);\n  }\n\n  removeUserFromGroupDM(channel, userId) {\n    return this.rest.makeRequest('delete', Endpoints.Channel(channel).Recipient(userId), true)\n      .then(() => channel);\n  }\n\n  updateGroupDMChannel(channel, _data) {\n    const data = {};\n    data.name = _data.name;\n    data.icon = _data.icon;\n    return this.rest.makeRequest('patch', Endpoints.Channel(channel), true, data).then(() => channel);\n  }\n\n  getExistingDM(recipient) {\n    return this.client.channels.find(channel =>\n      channel.recipient && channel.recipient.id === recipient.id\n    );\n  }\n\n  deleteChannel(channel, reason) {\n    if (channel instanceof User || channel instanceof GuildMember) channel = this.getExistingDM(channel);\n    if (!channel) return Promise.reject(new Error('No channel to delete.'));\n    return this.rest.makeRequest('delete', Endpoints.Channel(channel), true, undefined, undefined, reason)\n      .then(data => {\n        data.id = channel.id;\n        return this.client.actions.ChannelDelete.handle(data).channel;\n      });\n  }\n\n  updateChannel(channel, _data, reason) {\n    const data = {};\n    data.name = (_data.name || channel.name).trim();\n    data.topic = _data.topic || channel.topic;\n    data.position = _data.position || channel.position;\n    data.bitrate = _data.bitrate || (channel.bitrate ? channel.bitrate * 1000 : undefined);\n    data.user_limit = typeof _data.userLimit !== 'undefined' ? _data.userLimit : channel.userLimit;\n    data.parent_id = _data.parent || (channel.parent ? channel.parent.id : undefined);\n    return this.rest.makeRequest('patch', Endpoints.Channel(channel), true, data, undefined, reason).then(newData =>\n      this.client.actions.ChannelUpdate.handle(newData).updated\n    );\n  }\n\n  leaveGuild(guild) {\n    if (guild.ownerID === this.client.user.id) return Promise.reject(new Error('Guild is owned by the client.'));\n    return this.rest.makeRequest('delete', Endpoints.User('@me').Guild(guild.id), true).then(() =>\n      this.client.actions.GuildDelete.handle({ id: guild.id }).guild\n    );\n  }\n\n  createGuild(options) {\n    options.icon = this.client.resolver.resolveBase64(options.icon) || null;\n    options.region = options.region || 'us-central';\n    return new Promise((resolve, reject) => {\n      this.rest.makeRequest('post', Endpoints.guilds, true, options).then(data => {\n        if (this.client.guilds.has(data.id)) return resolve(this.client.guilds.get(data.id));\n\n        const handleGuild = guild => {\n          if (guild.id === data.id) {\n            this.client.removeListener(Constants.Events.GUILD_CREATE, handleGuild);\n            this.client.clearTimeout(timeout);\n            resolve(guild);\n          }\n        };\n        this.client.on(Constants.Events.GUILD_CREATE, handleGuild);\n\n        const timeout = this.client.setTimeout(() => {\n          this.client.removeListener(Constants.Events.GUILD_CREATE, handleGuild);\n          reject(new Error('Took too long to receive guild data.'));\n        }, 10000);\n        return undefined;\n      }, reject);\n    });\n  }\n\n  // Untested but probably will work\n  deleteGuild(guild) {\n    return this.rest.makeRequest('delete', Endpoints.Guild(guild), true).then(() =>\n      this.client.actions.GuildDelete.handle({ id: guild.id }).guild\n    );\n  }\n\n  getUser(userID, cache) {\n    return this.rest.makeRequest('get', Endpoints.User(userID), true).then(data => {\n      if (cache) return this.client.actions.UserGet.handle(data).user;\n      else return new User(this.client, data);\n    });\n  }\n\n  updateCurrentUser(_data, password) {\n    const user = this.client.user;\n    const data = {};\n    data.username = _data.username || user.username;\n    data.avatar = typeof _data.avatar === 'undefined' ? user.avatar : this.client.resolver.resolveBase64(_data.avatar);\n    if (!user.bot) {\n      data.email = _data.email || user.email;\n      data.password = password;\n      if (_data.new_password) data.new_password = _data.newPassword;\n    }\n    return this.rest.makeRequest('patch', Endpoints.User('@me'), true, data).then(newData =>\n      this.client.actions.UserUpdate.handle(newData).updated\n    );\n  }\n\n  updateGuild(guild, data, reason) {\n    return this.rest.makeRequest('patch', Endpoints.Guild(guild), true, data, undefined, reason).then(newData =>\n      this.client.actions.GuildUpdate.handle(newData).updated\n    );\n  }\n\n  kickGuildMember(guild, member, reason) {\n    return this.rest.makeRequest(\n      'delete', Endpoints.Guild(guild).Member(member), true,\n      undefined, undefined, reason)\n      .then(() =>\n        this.client.actions.GuildMemberRemove.handle({\n          guild_id: guild.id,\n          user: member.user,\n        }).member\n      );\n  }\n\n  createGuildRole(guild, data, reason) {\n    if (data.color) data.color = this.client.resolver.resolveColor(data.color);\n    if (data.permissions) data.permissions = Permissions.resolve(data.permissions);\n    return this.rest.makeRequest('post', Endpoints.Guild(guild).roles, true, data, undefined, reason).then(r => {\n      const { role } = this.client.actions.GuildRoleCreate.handle({\n        guild_id: guild.id,\n        role: r,\n      });\n      if (data.position) return role.setPosition(data.position, reason);\n      return role;\n    });\n  }\n\n  deleteGuildRole(role, reason) {\n    return this.rest.makeRequest(\n      'delete', Endpoints.Guild(role.guild).Role(role.id), true,\n      undefined, undefined, reason)\n      .then(() =>\n        this.client.actions.GuildRoleDelete.handle({\n          guild_id: role.guild.id,\n          role_id: role.id,\n        }).role\n      );\n  }\n\n  setChannelOverwrite(channel, payload) {\n    return this.rest.makeRequest('put', `${Endpoints.Channel(channel).permissions}/${payload.id}`, true, payload);\n  }\n\n  deletePermissionOverwrites(overwrite, reason) {\n    return this.rest.makeRequest(\n      'delete', `${Endpoints.Channel(overwrite.channel).permissions}/${overwrite.id}`,\n      true, undefined, undefined, reason\n    ).then(() => overwrite);\n  }\n\n  getChannelMessages(channel, payload = {}) {\n    const params = [];\n    if (payload.limit) params.push(`limit=${payload.limit}`);\n    if (payload.around) params.push(`around=${payload.around}`);\n    else if (payload.before) params.push(`before=${payload.before}`);\n    else if (payload.after) params.push(`after=${payload.after}`);\n\n    let endpoint = Endpoints.Channel(channel).messages;\n    if (params.length > 0) endpoint += `?${params.join('&')}`;\n    return this.rest.makeRequest('get', endpoint, true);\n  }\n\n  getChannelMessage(channel, messageID) {\n    const msg = channel.messages.get(messageID);\n    if (msg) return Promise.resolve(msg);\n    return this.rest.makeRequest('get', Endpoints.Channel(channel).Message(messageID), true);\n  }\n\n  putGuildMember(guild, user, options) {\n    options.access_token = options.accessToken;\n    if (options.roles) {\n      const roles = options.roles;\n      if (roles instanceof Collection || (roles instanceof Array && roles[0] instanceof Role)) {\n        options.roles = roles.map(role => role.id);\n      }\n    }\n    return this.rest.makeRequest('put', Endpoints.Guild(guild).Member(user.id), true, options)\n      .then(data => this.client.actions.GuildMemberGet.handle(guild, data).member);\n  }\n\n  getGuildMember(guild, user, cache) {\n    return this.rest.makeRequest('get', Endpoints.Guild(guild).Member(user.id), true).then(data => {\n      if (cache) return this.client.actions.GuildMemberGet.handle(guild, data).member;\n      else return new GuildMember(guild, data);\n    });\n  }\n\n  updateGuildMember(member, data, reason) {\n    if (data.channel) {\n      data.channel_id = this.client.resolver.resolveChannel(data.channel).id;\n      data.channel = null;\n    }\n    if (data.roles) data.roles = data.roles.map(role => role instanceof Role ? role.id : role);\n\n    let endpoint = Endpoints.Member(member);\n    // Fix your endpoints, discord ;-;\n    if (member.id === this.client.user.id) {\n      const keys = Object.keys(data);\n      if (keys.length === 1 && keys[0] === 'nick') {\n        endpoint = Endpoints.Member(member).nickname;\n      }\n    }\n\n    return this.rest.makeRequest('patch', endpoint, true, data, undefined, reason).then(newData =>\n      member.guild._updateMember(member, newData).mem\n    );\n  }\n\n  addMemberRole(member, role, reason) {\n    return new Promise((resolve, reject) => {\n      if (member._roles.includes(role.id)) return resolve(member);\n\n      const listener = (oldMember, newMember) => {\n        if (!oldMember._roles.includes(role.id) && newMember._roles.includes(role.id)) {\n          this.client.removeListener(Constants.Events.GUILD_MEMBER_UPDATE, listener);\n          resolve(newMember);\n        }\n      };\n\n      this.client.on(Constants.Events.GUILD_MEMBER_UPDATE, listener);\n      const timeout = this.client.setTimeout(() =>\n        this.client.removeListener(Constants.Events.GUILD_MEMBER_UPDATE, listener), 10e3);\n\n      return this.rest.makeRequest('put', Endpoints.Member(member).Role(role.id), true, undefined, undefined, reason)\n        .catch(err => {\n          this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);\n          this.client.clearTimeout(timeout);\n          reject(err);\n        });\n    });\n  }\n\n  removeMemberRole(member, role, reason) {\n    return new Promise((resolve, reject) => {\n      if (!member._roles.includes(role.id)) return resolve(member);\n\n      const listener = (oldMember, newMember) => {\n        if (oldMember._roles.includes(role.id) && !newMember._roles.includes(role.id)) {\n          this.client.removeListener(Constants.Events.GUILD_MEMBER_UPDATE, listener);\n          resolve(newMember);\n        }\n      };\n\n      this.client.on(Constants.Events.GUILD_MEMBER_UPDATE, listener);\n      const timeout = this.client.setTimeout(() =>\n        this.client.removeListener(Constants.Events.GUILD_MEMBER_UPDATE, listener), 10e3);\n\n      return this.rest.makeRequest('delete', Endpoints.Member(member).Role(role.id), true, undefined, undefined, reason)\n        .catch(err => {\n          this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);\n          this.client.clearTimeout(timeout);\n          reject(err);\n        });\n    });\n  }\n\n  sendTyping(channelID) {\n    return this.rest.makeRequest('post', Endpoints.Channel(channelID).typing, true);\n  }\n\n  banGuildMember(guild, member, options) {\n    const id = this.client.resolver.resolveUserID(member);\n    if (!id) return Promise.reject(new Error('Couldn\\'t resolve the user ID to ban.'));\n\n    const url = `${Endpoints.Guild(guild).bans}/${id}?${querystring.stringify(options)}`;\n    return this.rest.makeRequest('put', url, true).then(() => {\n      if (member instanceof GuildMember) return member;\n      const user = this.client.resolver.resolveUser(id);\n      if (user) {\n        member = this.client.resolver.resolveGuildMember(guild, user);\n        return member || user;\n      }\n      return id;\n    });\n  }\n\n  unbanGuildMember(guild, member, reason) {\n    return new Promise((resolve, reject) => {\n      const id = this.client.resolver.resolveUserID(member);\n      if (!id) throw new Error('Couldn\\'t resolve the user ID to unban.');\n\n      const listener = (eGuild, eUser) => {\n        if (eGuild.id === guild.id && eUser.id === id) {\n          this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);\n          this.client.clearTimeout(timeout);\n          resolve(eUser);\n        }\n      };\n      this.client.on(Constants.Events.GUILD_BAN_REMOVE, listener);\n\n      const timeout = this.client.setTimeout(() => {\n        this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);\n        reject(new Error('Took too long to receive the ban remove event.'));\n      }, 10000);\n\n      this.rest.makeRequest('delete', `${Endpoints.Guild(guild).bans}/${id}`, true, undefined, undefined, reason)\n        .catch(err => {\n          this.client.removeListener(Constants.Events.GUILD_BAN_REMOVE, listener);\n          this.client.clearTimeout(timeout);\n          reject(err);\n        });\n    });\n  }\n\n  getGuildBans(guild) {\n    return this.rest.makeRequest('get', Endpoints.Guild(guild).bans, true).then(bans =>\n      bans.reduce((collection, ban) => {\n        collection.set(ban.user.id, {\n          reason: ban.reason,\n          user: this.client.dataManager.newUser(ban.user),\n        });\n        return collection;\n      }, new Collection())\n    );\n  }\n\n  updateGuildRole(role, _data, reason) {\n    const data = {};\n    data.name = _data.name || role.name;\n    data.position = typeof _data.position !== 'undefined' ? _data.position : role.position;\n    data.color = this.client.resolver.resolveColor(_data.color || role.color);\n    data.hoist = typeof _data.hoist !== 'undefined' ? _data.hoist : role.hoist;\n    data.mentionable = typeof _data.mentionable !== 'undefined' ? _data.mentionable : role.mentionable;\n\n    if (_data.permissions) data.permissions = Permissions.resolve(_data.permissions);\n    else data.permissions = role.permissions;\n\n    return this.rest.makeRequest('patch', Endpoints.Guild(role.guild).Role(role.id), true, data, undefined, reason)\n      .then(_role =>\n        this.client.actions.GuildRoleUpdate.handle({\n          role: _role,\n          guild_id: role.guild.id,\n        }).updated\n      );\n  }\n\n  pinMessage(message) {\n    return this.rest.makeRequest('put', Endpoints.Channel(message.channel).Pin(message.id), true)\n      .then(() => message);\n  }\n\n  unpinMessage(message) {\n    return this.rest.makeRequest('delete', Endpoints.Channel(message.channel).Pin(message.id), true)\n      .then(() => message);\n  }\n\n  getChannelPinnedMessages(channel) {\n    return this.rest.makeRequest('get', Endpoints.Channel(channel).pins, true);\n  }\n\n  createChannelInvite(channel, options, reason) {\n    const payload = {};\n    payload.temporary = options.temporary;\n    payload.max_age = options.maxAge;\n    payload.max_uses = options.maxUses;\n    payload.unique = options.unique;\n    return this.rest.makeRequest('post', Endpoints.Channel(channel).invites, true, payload, undefined, reason)\n      .then(invite => new Invite(this.client, invite));\n  }\n\n  deleteInvite(invite, reason) {\n    return this.rest.makeRequest('delete', Endpoints.Invite(invite.code), true, undefined, undefined, reason)\n      .then(() => invite);\n  }\n\n  getInvite(code) {\n    return this.rest.makeRequest('get', Endpoints.Invite(code), true).then(invite =>\n      new Invite(this.client, invite)\n    );\n  }\n\n  getGuildInvites(guild) {\n    return this.rest.makeRequest('get', Endpoints.Guild(guild).invites, true).then(inviteItems => {\n      const invites = new Collection();\n      for (const inviteItem of inviteItems) {\n        const invite = new Invite(this.client, inviteItem);\n        invites.set(invite.code, invite);\n      }\n      return invites;\n    });\n  }\n\n  pruneGuildMembers(guild, days, dry, reason) {\n    return this.rest.makeRequest(dry ?\n      'get' :\n      'post',\n    `${Endpoints.Guild(guild).prune}?days=${days}`, true, undefined, undefined, reason)\n      .then(data => data.pruned);\n  }\n\n  createEmoji(guild, image, name, roles, reason) {\n    const data = { image, name };\n    if (roles) data.roles = roles.map(r => r.id ? r.id : r);\n    return this.rest.makeRequest('post', Endpoints.Guild(guild).emojis, true, data, undefined, reason)\n      .then(emoji => this.client.actions.GuildEmojiCreate.handle(guild, emoji).emoji);\n  }\n\n  updateEmoji(emoji, _data, reason) {\n    const data = {};\n    if (_data.name) data.name = _data.name;\n    if (_data.roles) data.roles = _data.roles.map(r => r.id ? r.id : r);\n    return this.rest.makeRequest('patch', Endpoints.Guild(emoji.guild).Emoji(emoji.id), true, data, undefined, reason)\n      .then(newEmoji => this.client.actions.GuildEmojiUpdate.handle(emoji, newEmoji).emoji);\n  }\n\n  deleteEmoji(emoji, reason) {\n    return this.rest.makeRequest('delete', Endpoints.Guild(emoji.guild).Emoji(emoji.id), true, undefined, reason)\n      .then(() => this.client.actions.GuildEmojiDelete.handle(emoji).data);\n  }\n\n  getGuildAuditLogs(guild, options = {}) {\n    if (options.before && options.before instanceof GuildAuditLogs.Entry) options.before = options.before.id;\n    if (options.after && options.after instanceof GuildAuditLogs.Entry) options.after = options.after.id;\n    if (typeof options.type === 'string') options.type = GuildAuditLogs.Actions[options.type];\n\n    const queryString = (querystring.stringify({\n      before: options.before,\n      after: options.after,\n      limit: options.limit,\n      user_id: this.client.resolver.resolveUserID(options.user),\n      action_type: options.type,\n    }).match(/[^=&?]+=[^=&?]+/g) || []).join('&');\n\n    return this.rest.makeRequest('get', `${Endpoints.Guild(guild).auditLogs}?${queryString}`, true)\n      .then(data => GuildAuditLogs.build(guild, data));\n  }\n\n  getWebhook(id, token) {\n    return this.rest.makeRequest('get', Endpoints.Webhook(id, token), !token).then(data =>\n      new Webhook(this.client, data)\n    );\n  }\n\n  getGuildWebhooks(guild) {\n    return this.rest.makeRequest('get', Endpoints.Guild(guild).webhooks, true).then(data => {\n      const hooks = new Collection();\n      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n      return hooks;\n    });\n  }\n\n  getChannelWebhooks(channel) {\n    return this.rest.makeRequest('get', Endpoints.Channel(channel).webhooks, true).then(data => {\n      const hooks = new Collection();\n      for (const hook of data) hooks.set(hook.id, new Webhook(this.client, hook));\n      return hooks;\n    });\n  }\n\n  createWebhook(channel, name, avatar, reason) {\n    return this.rest.makeRequest('post', Endpoints.Channel(channel).webhooks, true, { name, avatar }, undefined, reason)\n      .then(data => new Webhook(this.client, data));\n  }\n\n  editWebhook(webhook, name, avatar) {\n    return this.rest.makeRequest('patch', Endpoints.Webhook(webhook.id, webhook.token), false, {\n      name,\n      avatar,\n    }).then(data => {\n      webhook.name = data.name;\n      webhook.avatar = data.avatar;\n      return webhook;\n    });\n  }\n\n  deleteWebhook(webhook, reason) {\n    return this.rest.makeRequest(\n      'delete', Endpoints.Webhook(webhook.id, webhook.token),\n      false, undefined, undefined, reason);\n  }\n\n  sendWebhookMessage(webhook, content, { avatarURL, tts, embeds, username } = {}, files = null) {\n    return new Promise((resolve, reject) => {\n      username = username || webhook.name;\n\n      if (content instanceof Array) {\n        const messages = [];\n        (function sendChunk(list, index) {\n          const options = index === list.length - 1 ? { tts, embeds, files } : { tts };\n          webhook.send(list[index], options).then(message => {\n            messages.push(message);\n            if (index >= list.length - 1) return resolve(messages);\n            return sendChunk(list, ++index);\n          }).catch(reject);\n        }(content, 0));\n      } else {\n        this.rest.makeRequest('post', `${Endpoints.Webhook(webhook.id, webhook.token)}?wait=true`, false, {\n          username,\n          avatar_url: avatarURL,\n          content,\n          tts,\n          embeds,\n        }, files).then(data => {\n          if (!this.client.channels) resolve(data);\n          else resolve(this.client.actions.MessageCreate.handle(data).message);\n        }, reject);\n      }\n    });\n  }\n\n  sendSlackWebhookMessage(webhook, body) {\n    return this.rest.makeRequest(\n      'post', `${Endpoints.Webhook(webhook.id, webhook.token)}/slack?wait=true`, false, body\n    );\n  }\n\n  fetchUserProfile(user) {\n    return this.rest.makeRequest('get', Endpoints.User(user).profile, true).then(data =>\n      new UserProfile(user, data)\n    );\n  }\n\n  fetchMentions(options) {\n    if (options.guild instanceof Guild) options.guild = options.guild.id;\n    Util.mergeDefault({ limit: 25, roles: true, everyone: true, guild: null }, options);\n\n    return this.rest.makeRequest(\n      'get', Endpoints.User('@me').Mentions(options.limit, options.roles, options.everyone, options.guild), true\n    ).then(data => data.map(m => new Message(this.client.channels.get(m.channel_id), m, this.client)));\n  }\n\n  addFriend(user) {\n    return this.rest.makeRequest('post', Endpoints.User('@me'), true, {\n      username: user.username,\n      discriminator: user.discriminator,\n    }).then(() => user);\n  }\n\n  removeFriend(user) {\n    return this.rest.makeRequest('delete', Endpoints.User('@me').Relationship(user.id), true)\n      .then(() => user);\n  }\n\n  blockUser(user) {\n    return this.rest.makeRequest('put', Endpoints.User('@me').Relationship(user.id), true, { type: 2 })\n      .then(() => user);\n  }\n\n  unblockUser(user) {\n    return this.rest.makeRequest('delete', Endpoints.User('@me').Relationship(user.id), true)\n      .then(() => user);\n  }\n\n  updateChannelPositions(guildID, channels) {\n    const data = new Array(channels.length);\n    for (let i = 0; i < channels.length; i++) {\n      data[i] = {\n        id: this.client.resolver.resolveChannelID(channels[i].channel),\n        position: channels[i].position,\n      };\n    }\n\n    return this.rest.makeRequest('patch', Endpoints.Guild(guildID).channels, true, data).then(() =>\n      this.client.actions.GuildChannelsPositionUpdate.handle({\n        guild_id: guildID,\n        channels,\n      }).guild\n    );\n  }\n\n  setRolePositions(guildID, roles) {\n    return this.rest.makeRequest('patch', Endpoints.Guild(guildID).roles, true, roles).then(() =>\n      this.client.actions.GuildRolesPositionUpdate.handle({\n        guild_id: guildID,\n        roles,\n      }).guild\n    );\n  }\n\n  setChannelPositions(guildID, channels) {\n    return this.rest.makeRequest('patch', Endpoints.Guild(guildID).channels, true, channels).then(() =>\n      this.client.actions.GuildChannelsPositionUpdate.handle({\n        guild_id: guildID,\n        channels,\n      }).guild\n    );\n  }\n\n  addMessageReaction(message, emoji) {\n    return this.rest.makeRequest(\n      'put', Endpoints.Message(message).Reaction(emoji).User('@me'), true\n    ).then(() =>\n      message._addReaction(Util.parseEmoji(emoji), message.client.user)\n    );\n  }\n\n  removeMessageReaction(message, emoji, userID) {\n    const endpoint = Endpoints.Message(message).Reaction(emoji).User(userID === this.client.user.id ? '@me' : userID);\n    return this.rest.makeRequest('delete', endpoint, true).then(() =>\n      this.client.actions.MessageReactionRemove.handle({\n        user_id: userID,\n        message_id: message.id,\n        emoji: Util.parseEmoji(emoji),\n        channel_id: message.channel.id,\n      }).reaction\n    );\n  }\n\n  removeMessageReactions(message) {\n    return this.rest.makeRequest('delete', Endpoints.Message(message).reactions, true)\n      .then(() => message);\n  }\n\n  getMessageReactionUsers(message, emoji, options) {\n    const queryString = (querystring.stringify(options).match(/[^=&?]+=[^=&?]+/g) || []).join('&');\n\n    return this.rest.makeRequest('get', `${Endpoints.Message(message).Reaction(emoji)}?${queryString}`, true);\n  }\n\n  getApplication(id) {\n    return this.rest.makeRequest('get', Endpoints.OAUTH2.Application(id), true).then(app =>\n      new OAuth2Application(this.client, app)\n    );\n  }\n\n  resetApplication(id) {\n    return this.rest.makeRequest('post', Endpoints.OAUTH2.Application(id).resetToken, true)\n      .then(() => this.rest.makeRequest('post', Endpoints.OAUTH2.Application(id).resetSecret, true))\n      .then(app => new OAuth2Application(this.client, app));\n  }\n\n  setNote(user, note) {\n    return this.rest.makeRequest('put', Endpoints.User(user).note, true, { note }).then(() => user);\n  }\n\n  acceptInvite(code) {\n    if (code.id) code = code.id;\n    return new Promise((resolve, reject) =>\n      this.rest.makeRequest('post', Endpoints.Invite(code), true).then(res => {\n        const handler = guild => {\n          if (guild.id === res.id) {\n            resolve(guild);\n            this.client.removeListener(Constants.Events.GUILD_CREATE, handler);\n          }\n        };\n        this.client.on(Constants.Events.GUILD_CREATE, handler);\n        this.client.setTimeout(() => {\n          this.client.removeListener(Constants.Events.GUILD_CREATE, handler);\n          reject(new Error('Accepting invite timed out'));\n        }, 120e3);\n      })\n    );\n  }\n\n  patchUserSettings(data) {\n    return this.rest.makeRequest('patch', Constants.Endpoints.User('@me').settings, true, data);\n  }\n\n  patchClientUserGuildSettings(guildID, data) {\n    return this.rest.makeRequest('patch', Constants.Endpoints.User('@me').Guild(guildID).settings, true, data);\n  }\n}\n\nmodule.exports = RESTMethods;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3Jlc3QvUkVTVE1ldGhvZHMuanM/NjRkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5jb25zdCBsb25nID0gcmVxdWlyZSgnbG9uZycpO1xuY29uc3QgUGVybWlzc2lvbnMgPSByZXF1aXJlKCcuLi8uLi91dGlsL1Blcm1pc3Npb25zJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi91dGlsL0NvbnN0YW50cycpO1xuY29uc3QgRW5kcG9pbnRzID0gQ29uc3RhbnRzLkVuZHBvaW50cztcbmNvbnN0IENvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi91dGlsL0NvbGxlY3Rpb24nKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCcuLi8uLi91dGlsL1V0aWwnKTtcblxuY29uc3QgVXNlciA9IHJlcXVpcmUoJy4uLy4uL3N0cnVjdHVyZXMvVXNlcicpO1xuY29uc3QgR3VpbGRNZW1iZXIgPSByZXF1aXJlKCcuLi8uLi9zdHJ1Y3R1cmVzL0d1aWxkTWVtYmVyJyk7XG5jb25zdCBNZXNzYWdlID0gcmVxdWlyZSgnLi4vLi4vc3RydWN0dXJlcy9NZXNzYWdlJyk7XG5jb25zdCBSb2xlID0gcmVxdWlyZSgnLi4vLi4vc3RydWN0dXJlcy9Sb2xlJyk7XG5jb25zdCBJbnZpdGUgPSByZXF1aXJlKCcuLi8uLi9zdHJ1Y3R1cmVzL0ludml0ZScpO1xuY29uc3QgV2ViaG9vayA9IHJlcXVpcmUoJy4uLy4uL3N0cnVjdHVyZXMvV2ViaG9vaycpO1xuY29uc3QgVXNlclByb2ZpbGUgPSByZXF1aXJlKCcuLi8uLi9zdHJ1Y3R1cmVzL1VzZXJQcm9maWxlJyk7XG5jb25zdCBPQXV0aDJBcHBsaWNhdGlvbiA9IHJlcXVpcmUoJy4uLy4uL3N0cnVjdHVyZXMvT0F1dGgyQXBwbGljYXRpb24nKTtcbmNvbnN0IENoYW5uZWwgPSByZXF1aXJlKCcuLi8uLi9zdHJ1Y3R1cmVzL0NoYW5uZWwnKTtcbmNvbnN0IEdyb3VwRE1DaGFubmVsID0gcmVxdWlyZSgnLi4vLi4vc3RydWN0dXJlcy9Hcm91cERNQ2hhbm5lbCcpO1xuY29uc3QgR3VpbGQgPSByZXF1aXJlKCcuLi8uLi9zdHJ1Y3R1cmVzL0d1aWxkJyk7XG5jb25zdCBWb2ljZVJlZ2lvbiA9IHJlcXVpcmUoJy4uLy4uL3N0cnVjdHVyZXMvVm9pY2VSZWdpb24nKTtcbmNvbnN0IEd1aWxkQXVkaXRMb2dzID0gcmVxdWlyZSgnLi4vLi4vc3RydWN0dXJlcy9HdWlsZEF1ZGl0TG9ncycpO1xuXG5jbGFzcyBSRVNUTWV0aG9kcyB7XG4gIGNvbnN0cnVjdG9yKHJlc3RNYW5hZ2VyKSB7XG4gICAgdGhpcy5yZXN0ID0gcmVzdE1hbmFnZXI7XG4gICAgdGhpcy5jbGllbnQgPSByZXN0TWFuYWdlci5jbGllbnQ7XG4gICAgdGhpcy5fYWNrVG9rZW4gPSBudWxsO1xuICB9XG5cbiAgbG9naW4odG9rZW4gPSB0aGlzLmNsaWVudC50b2tlbikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHRva2VuICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKENvbnN0YW50cy5FcnJvcnMuSU5WQUxJRF9UT0tFTik7XG4gICAgICB0b2tlbiA9IHRva2VuLnJlcGxhY2UoL15Cb3RcXHMqL2ksICcnKTtcbiAgICAgIHRoaXMuY2xpZW50Lm1hbmFnZXIuY29ubmVjdFRvV2ViU29ja2V0KHRva2VuLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0pO1xuICB9XG5cbiAgbG9nb3V0KCkge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3Bvc3QnLCBFbmRwb2ludHMubG9nb3V0LCB0cnVlLCB7fSk7XG4gIH1cblxuICBnZXRHYXRld2F5KGJvdCA9IGZhbHNlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgnZ2V0JywgYm90ID8gRW5kcG9pbnRzLmdhdGV3YXkuYm90IDogRW5kcG9pbnRzLmdhdGV3YXksIHRydWUpO1xuICB9XG5cbiAgZmV0Y2hWb2ljZVJlZ2lvbnMoZ3VpbGRJRCkge1xuICAgIGxldCBlbmRwb2ludDtcbiAgICBpZiAoZ3VpbGRJRCkgZW5kcG9pbnQgPSBFbmRwb2ludHMuR3VpbGQoZ3VpbGRJRCkudm9pY2VSZWdpb25zO1xuICAgIGVsc2UgZW5kcG9pbnQgPSBFbmRwb2ludHMudm9pY2VSZWdpb25zO1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2dldCcsIGVuZHBvaW50LCB0cnVlKS50aGVuKHJlcyA9PiB7XG4gICAgICBjb25zdCByZWdpb25zID0gbmV3IENvbGxlY3Rpb24oKTtcbiAgICAgIGZvciAoY29uc3QgcmVnaW9uIG9mIHJlcykgcmVnaW9ucy5zZXQocmVnaW9uLmlkLCBuZXcgVm9pY2VSZWdpb24ocmVnaW9uKSk7XG4gICAgICByZXR1cm4gcmVnaW9ucztcbiAgICB9KTtcbiAgfVxuXG4gIHNlbmRNZXNzYWdlKGNoYW5uZWwsIGNvbnRlbnQsIHsgdHRzLCBub25jZSwgZW1iZWQsIGRpc2FibGVFdmVyeW9uZSwgc3BsaXQsIGNvZGUsIHJlcGx5IH0gPSB7fSwgZmlsZXMgPSBudWxsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb21wbGV4aXR5XG4gICAgICBpZiAodHlwZW9mIGNvbnRlbnQgIT09ICd1bmRlZmluZWQnKSBjb250ZW50ID0gdGhpcy5jbGllbnQucmVzb2x2ZXIucmVzb2x2ZVN0cmluZyhjb250ZW50KTtcblxuICAgICAgLy8gVGhlIG5vbmNlIGhhcyB0byBiZSBhIHVpbnQ2NCA6PFxuICAgICAgaWYgKHR5cGVvZiBub25jZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbm9uY2UgPSBwYXJzZUludChub25jZSk7XG4gICAgICAgIGlmIChpc05hTihub25jZSkgfHwgbm9uY2UgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWVzc2FnZSBub25jZSBtdXN0IGZpdCBpbiBhbiB1bnNpZ25lZCA2NC1iaXQgaW50ZWdlci4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKHNwbGl0ICYmIHR5cGVvZiBzcGxpdCAhPT0gJ29iamVjdCcpIHNwbGl0ID0ge307XG5cbiAgICAgICAgLy8gV3JhcCBldmVyeXRoaW5nIGluIGEgY29kZSBibG9ja1xuICAgICAgICBpZiAodHlwZW9mIGNvZGUgIT09ICd1bmRlZmluZWQnICYmICh0eXBlb2YgY29kZSAhPT0gJ2Jvb2xlYW4nIHx8IGNvZGUgPT09IHRydWUpKSB7XG4gICAgICAgICAgY29udGVudCA9IFV0aWwuZXNjYXBlTWFya2Rvd24odGhpcy5jbGllbnQucmVzb2x2ZXIucmVzb2x2ZVN0cmluZyhjb250ZW50KSwgdHJ1ZSk7XG4gICAgICAgICAgY29udGVudCA9IGBcXGBcXGBcXGAke3R5cGVvZiBjb2RlICE9PSAnYm9vbGVhbicgPyBjb2RlIHx8ICcnIDogJyd9XFxuJHtjb250ZW50fVxcblxcYFxcYFxcYGA7XG4gICAgICAgICAgaWYgKHNwbGl0KSB7XG4gICAgICAgICAgICBzcGxpdC5wcmVwZW5kID0gYFxcYFxcYFxcYCR7dHlwZW9mIGNvZGUgIT09ICdib29sZWFuJyA/IGNvZGUgfHwgJycgOiAnJ31cXG5gO1xuICAgICAgICAgICAgc3BsaXQuYXBwZW5kID0gJ1xcbmBgYCc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHplcm8td2lkdGggc3BhY2VzIHRvIEBldmVyeW9uZS9AaGVyZVxuICAgICAgICBpZiAoZGlzYWJsZUV2ZXJ5b25lIHx8ICh0eXBlb2YgZGlzYWJsZUV2ZXJ5b25lID09PSAndW5kZWZpbmVkJyAmJiB0aGlzLmNsaWVudC5vcHRpb25zLmRpc2FibGVFdmVyeW9uZSkpIHtcbiAgICAgICAgICBjb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9AKGV2ZXJ5b25lfGhlcmUpL2csICdAXFx1MjAwYiQxJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgdGhlIHJlcGx5IHByZWZpeFxuICAgICAgICBpZiAocmVwbHkgJiYgIShjaGFubmVsIGluc3RhbmNlb2YgVXNlciB8fCBjaGFubmVsIGluc3RhbmNlb2YgR3VpbGRNZW1iZXIpICYmIGNoYW5uZWwudHlwZSAhPT0gJ2RtJykge1xuICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy5jbGllbnQucmVzb2x2ZXIucmVzb2x2ZVVzZXJJRChyZXBseSk7XG4gICAgICAgICAgY29uc3QgbWVudGlvbiA9IGA8QCR7cmVwbHkgaW5zdGFuY2VvZiBHdWlsZE1lbWJlciAmJiByZXBseS5uaWNrbmFtZSA/ICchJyA6ICcnfSR7aWR9PmA7XG4gICAgICAgICAgY29udGVudCA9IGAke21lbnRpb259JHtjb250ZW50ID8gYCwgJHtjb250ZW50fWAgOiAnJ31gO1xuICAgICAgICAgIGlmIChzcGxpdCkgc3BsaXQucHJlcGVuZCA9IGAke21lbnRpb259LCAke3NwbGl0LnByZXBlbmQgfHwgJyd9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNwbGl0IHRoZSBjb250ZW50XG4gICAgICAgIGlmIChzcGxpdCkgY29udGVudCA9IFV0aWwuc3BsaXRNZXNzYWdlKGNvbnRlbnQsIHNwbGl0KTtcbiAgICAgIH0gZWxzZSBpZiAocmVwbHkgJiYgIShjaGFubmVsIGluc3RhbmNlb2YgVXNlciB8fCBjaGFubmVsIGluc3RhbmNlb2YgR3VpbGRNZW1iZXIpICYmIGNoYW5uZWwudHlwZSAhPT0gJ2RtJykge1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVVc2VySUQocmVwbHkpO1xuICAgICAgICBjb250ZW50ID0gYDxAJHtyZXBseSBpbnN0YW5jZW9mIEd1aWxkTWVtYmVyICYmIHJlcGx5Lm5pY2tuYW1lID8gJyEnIDogJyd9JHtpZH0+YDtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2VuZCA9IGNoYW4gPT4ge1xuICAgICAgICBpZiAoY29udGVudCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBbXTtcbiAgICAgICAgICAoZnVuY3Rpb24gc2VuZENodW5rKGxpc3QsIGluZGV4KSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gaW5kZXggPT09IGxpc3QubGVuZ3RoIC0gMSA/IHsgdHRzLCBlbWJlZCwgZmlsZXMgfSA6IHsgdHRzIH07XG4gICAgICAgICAgICBjaGFuLnNlbmQobGlzdFtpbmRleF0sIG9wdGlvbnMpLnRoZW4obWVzc2FnZSA9PiB7XG4gICAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgICAgICAgIGlmIChpbmRleCA+PSBsaXN0Lmxlbmd0aCAtIDEpIHJldHVybiByZXNvbHZlKG1lc3NhZ2VzKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbmRDaHVuayhsaXN0LCArK2luZGV4KTtcbiAgICAgICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gICAgICAgICAgfShjb250ZW50LCAwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwb3N0JywgRW5kcG9pbnRzLkNoYW5uZWwoY2hhbikubWVzc2FnZXMsIHRydWUsIHtcbiAgICAgICAgICAgIGNvbnRlbnQsIHR0cywgbm9uY2UsIGVtYmVkLFxuICAgICAgICAgIH0sIGZpbGVzKS50aGVuKGRhdGEgPT4gcmVzb2x2ZSh0aGlzLmNsaWVudC5hY3Rpb25zLk1lc3NhZ2VDcmVhdGUuaGFuZGxlKGRhdGEpLm1lc3NhZ2UpLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAoY2hhbm5lbCBpbnN0YW5jZW9mIFVzZXIgfHwgY2hhbm5lbCBpbnN0YW5jZW9mIEd1aWxkTWVtYmVyKSB0aGlzLmNyZWF0ZURNKGNoYW5uZWwpLnRoZW4oc2VuZCwgcmVqZWN0KTtcbiAgICAgIGVsc2Ugc2VuZChjaGFubmVsKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZU1lc3NhZ2UobWVzc2FnZSwgY29udGVudCwgeyBlbWJlZCwgY29kZSwgcmVwbHkgfSA9IHt9KSB7XG4gICAgaWYgKHR5cGVvZiBjb250ZW50ICE9PSAndW5kZWZpbmVkJykgY29udGVudCA9IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVTdHJpbmcoY29udGVudCk7XG5cbiAgICAvLyBXcmFwIGV2ZXJ5dGhpbmcgaW4gYSBjb2RlIGJsb2NrXG4gICAgaWYgKHR5cGVvZiBjb2RlICE9PSAndW5kZWZpbmVkJyAmJiAodHlwZW9mIGNvZGUgIT09ICdib29sZWFuJyB8fCBjb2RlID09PSB0cnVlKSkge1xuICAgICAgY29udGVudCA9IFV0aWwuZXNjYXBlTWFya2Rvd24odGhpcy5jbGllbnQucmVzb2x2ZXIucmVzb2x2ZVN0cmluZyhjb250ZW50KSwgdHJ1ZSk7XG4gICAgICBjb250ZW50ID0gYFxcYFxcYFxcYCR7dHlwZW9mIGNvZGUgIT09ICdib29sZWFuJyA/IGNvZGUgfHwgJycgOiAnJ31cXG4ke2NvbnRlbnR9XFxuXFxgXFxgXFxgYDtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIHJlcGx5IHByZWZpeFxuICAgIGlmIChyZXBseSAmJiBtZXNzYWdlLmNoYW5uZWwudHlwZSAhPT0gJ2RtJykge1xuICAgICAgY29uc3QgaWQgPSB0aGlzLmNsaWVudC5yZXNvbHZlci5yZXNvbHZlVXNlcklEKHJlcGx5KTtcbiAgICAgIGNvbnN0IG1lbnRpb24gPSBgPEAke3JlcGx5IGluc3RhbmNlb2YgR3VpbGRNZW1iZXIgJiYgcmVwbHkubmlja25hbWUgPyAnIScgOiAnJ30ke2lkfT5gO1xuICAgICAgY29udGVudCA9IGAke21lbnRpb259JHtjb250ZW50ID8gYCwgJHtjb250ZW50fWAgOiAnJ31gO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3BhdGNoJywgRW5kcG9pbnRzLk1lc3NhZ2UobWVzc2FnZSksIHRydWUsIHtcbiAgICAgIGNvbnRlbnQsIGVtYmVkLFxuICAgIH0pLnRoZW4oZGF0YSA9PiB0aGlzLmNsaWVudC5hY3Rpb25zLk1lc3NhZ2VVcGRhdGUuaGFuZGxlKGRhdGEpLnVwZGF0ZWQpO1xuICB9XG5cbiAgZGVsZXRlTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgnZGVsZXRlJywgRW5kcG9pbnRzLk1lc3NhZ2UobWVzc2FnZSksIHRydWUpXG4gICAgICAudGhlbigoKSA9PlxuICAgICAgICB0aGlzLmNsaWVudC5hY3Rpb25zLk1lc3NhZ2VEZWxldGUuaGFuZGxlKHtcbiAgICAgICAgICBpZDogbWVzc2FnZS5pZCxcbiAgICAgICAgICBjaGFubmVsX2lkOiBtZXNzYWdlLmNoYW5uZWwuaWQsXG4gICAgICAgIH0pLm1lc3NhZ2VcbiAgICAgICk7XG4gIH1cblxuICBhY2tNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwb3N0JywgRW5kcG9pbnRzLk1lc3NhZ2UobWVzc2FnZSkuYWNrLCB0cnVlLCB7IHRva2VuOiB0aGlzLl9hY2tUb2tlbiB9KS50aGVuKHJlcyA9PiB7XG4gICAgICBpZiAocmVzLnRva2VuKSB0aGlzLl9hY2tUb2tlbiA9IHJlcy50b2tlbjtcbiAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH0pO1xuICB9XG5cbiAgYWNrVGV4dENoYW5uZWwoY2hhbm5lbCkge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3Bvc3QnLCBFbmRwb2ludHMuQ2hhbm5lbChjaGFubmVsKS5NZXNzYWdlKGNoYW5uZWwubGFzdE1lc3NhZ2VJRCkuYWNrLCB0cnVlLCB7XG4gICAgICB0b2tlbjogdGhpcy5fYWNrVG9rZW4sXG4gICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgaWYgKHJlcy50b2tlbikgdGhpcy5fYWNrVG9rZW4gPSByZXMudG9rZW47XG4gICAgICByZXR1cm4gY2hhbm5lbDtcbiAgICB9KTtcbiAgfVxuXG4gIGFja0d1aWxkKGd1aWxkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncG9zdCcsIEVuZHBvaW50cy5HdWlsZChndWlsZCkuYWNrLCB0cnVlKS50aGVuKCgpID0+IGd1aWxkKTtcbiAgfVxuXG4gIGJ1bGtEZWxldGVNZXNzYWdlcyhjaGFubmVsLCBtZXNzYWdlcykge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3Bvc3QnLCBFbmRwb2ludHMuQ2hhbm5lbChjaGFubmVsKS5tZXNzYWdlcy5idWxrRGVsZXRlLCB0cnVlLCB7XG4gICAgICBtZXNzYWdlczogbWVzc2FnZXMubWFwKG0gPT4gbS5pZCksXG4gICAgfSkudGhlbigoKSA9PlxuICAgICAgdGhpcy5jbGllbnQuYWN0aW9ucy5NZXNzYWdlRGVsZXRlQnVsay5oYW5kbGUoe1xuICAgICAgICBjaGFubmVsX2lkOiBjaGFubmVsLmlkLFxuICAgICAgICBtZXNzYWdlcyxcbiAgICAgIH0pLm1lc3NhZ2VzXG4gICAgKTtcbiAgfVxuXG4gIHNlYXJjaCh0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSBvcHRpb25zID0geyBjb250ZW50OiBvcHRpb25zIH07XG4gICAgaWYgKG9wdGlvbnMuYmVmb3JlKSB7XG4gICAgICBpZiAoIShvcHRpb25zLmJlZm9yZSBpbnN0YW5jZW9mIERhdGUpKSBvcHRpb25zLmJlZm9yZSA9IG5ldyBEYXRlKG9wdGlvbnMuYmVmb3JlKTtcbiAgICAgIG9wdGlvbnMubWF4SUQgPSBsb25nLmZyb21OdW1iZXIob3B0aW9ucy5iZWZvcmUuZ2V0VGltZSgpIC0gMTQyMDA3MDRlNSkuc2hpZnRMZWZ0KDIyKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5hZnRlcikge1xuICAgICAgaWYgKCEob3B0aW9ucy5hZnRlciBpbnN0YW5jZW9mIERhdGUpKSBvcHRpb25zLmFmdGVyID0gbmV3IERhdGUob3B0aW9ucy5hZnRlcik7XG4gICAgICBvcHRpb25zLm1pbklEID0gbG9uZy5mcm9tTnVtYmVyKG9wdGlvbnMuYWZ0ZXIuZ2V0VGltZSgpIC0gMTQyMDA3MDRlNSkuc2hpZnRMZWZ0KDIyKS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5kdXJpbmcpIHtcbiAgICAgIGlmICghKG9wdGlvbnMuZHVyaW5nIGluc3RhbmNlb2YgRGF0ZSkpIG9wdGlvbnMuZHVyaW5nID0gbmV3IERhdGUob3B0aW9ucy5kdXJpbmcpO1xuICAgICAgY29uc3QgdCA9IG9wdGlvbnMuZHVyaW5nLmdldFRpbWUoKSAtIDE0MjAwNzA0ZTU7XG4gICAgICBvcHRpb25zLm1pbklEID0gbG9uZy5mcm9tTnVtYmVyKHQpLnNoaWZ0TGVmdCgyMikudG9TdHJpbmcoKTtcbiAgICAgIG9wdGlvbnMubWF4SUQgPSBsb25nLmZyb21OdW1iZXIodCArIDg2NDAwMDAwKS5zaGlmdExlZnQoMjIpLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmNoYW5uZWwpIG9wdGlvbnMuY2hhbm5lbCA9IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVDaGFubmVsSUQob3B0aW9ucy5jaGFubmVsKTtcbiAgICBpZiAob3B0aW9ucy5hdXRob3IpIG9wdGlvbnMuYXV0aG9yID0gdGhpcy5jbGllbnQucmVzb2x2ZXIucmVzb2x2ZVVzZXJJRChvcHRpb25zLmF1dGhvcik7XG4gICAgaWYgKG9wdGlvbnMubWVudGlvbnMpIG9wdGlvbnMubWVudGlvbnMgPSB0aGlzLmNsaWVudC5yZXNvbHZlci5yZXNvbHZlVXNlcklEKG9wdGlvbnMub3B0aW9ucy5tZW50aW9ucyk7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIGNvbnRlbnQ6IG9wdGlvbnMuY29udGVudCxcbiAgICAgIG1heF9pZDogb3B0aW9ucy5tYXhJRCxcbiAgICAgIG1pbl9pZDogb3B0aW9ucy5taW5JRCxcbiAgICAgIGhhczogb3B0aW9ucy5oYXMsXG4gICAgICBjaGFubmVsX2lkOiBvcHRpb25zLmNoYW5uZWwsXG4gICAgICBhdXRob3JfaWQ6IG9wdGlvbnMuYXV0aG9yLFxuICAgICAgYXV0aG9yX3R5cGU6IG9wdGlvbnMuYXV0aG9yVHlwZSxcbiAgICAgIGNvbnRleHRfc2l6ZTogb3B0aW9ucy5jb250ZXh0U2l6ZSxcbiAgICAgIHNvcnRfYnk6IG9wdGlvbnMuc29ydEJ5LFxuICAgICAgc29ydF9vcmRlcjogb3B0aW9ucy5zb3J0T3JkZXIsXG4gICAgICBsaW1pdDogb3B0aW9ucy5saW1pdCxcbiAgICAgIG9mZnNldDogb3B0aW9ucy5vZmZzZXQsXG4gICAgICBtZW50aW9uczogb3B0aW9ucy5tZW50aW9ucyxcbiAgICAgIG1lbnRpb25zX2V2ZXJ5b25lOiBvcHRpb25zLm1lbnRpb25zRXZlcnlvbmUsXG4gICAgICBsaW5rX2hvc3RuYW1lOiBvcHRpb25zLmxpbmtIb3N0bmFtZSxcbiAgICAgIGVtYmVkX3Byb3ZpZGVyOiBvcHRpb25zLmVtYmVkUHJvdmlkZXIsXG4gICAgICBlbWJlZF90eXBlOiBvcHRpb25zLmVtYmVkVHlwZSxcbiAgICAgIGF0dGFjaG1lbnRfZmlsZW5hbWU6IG9wdGlvbnMuYXR0YWNobWVudEZpbGVuYW1lLFxuICAgICAgYXR0YWNobWVudF9leHRlbnNpb246IG9wdGlvbnMuYXR0YWNobWVudEV4dGVuc2lvbixcbiAgICAgIGluY2x1ZGVfbnNmdzogb3B0aW9ucy5uc2Z3LFxuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKSBpZiAob3B0aW9uc1trZXldID09PSB1bmRlZmluZWQpIGRlbGV0ZSBvcHRpb25zW2tleV07XG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSAocXVlcnlzdHJpbmcuc3RyaW5naWZ5KG9wdGlvbnMpLm1hdGNoKC9bXj0mP10rPVtePSY/XSsvZykgfHwgW10pLmpvaW4oJyYnKTtcblxuICAgIGxldCBlbmRwb2ludDtcbiAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgQ2hhbm5lbCkge1xuICAgICAgZW5kcG9pbnQgPSBFbmRwb2ludHMuQ2hhbm5lbCh0YXJnZXQpLnNlYXJjaDtcbiAgICB9IGVsc2UgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEd1aWxkKSB7XG4gICAgICBlbmRwb2ludCA9IEVuZHBvaW50cy5HdWlsZCh0YXJnZXQpLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGFyZ2V0IG11c3QgYmUgYSBUZXh0Q2hhbm5lbCwgRE1DaGFubmVsLCBHcm91cERNQ2hhbm5lbCwgb3IgR3VpbGQuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2dldCcsIGAke2VuZHBvaW50fT8ke3F1ZXJ5U3RyaW5nfWAsIHRydWUpLnRoZW4oYm9keSA9PiB7XG4gICAgICBjb25zdCBtZXNzYWdlcyA9IGJvZHkubWVzc2FnZXMubWFwKHggPT5cbiAgICAgICAgeC5tYXAobSA9PiBuZXcgTWVzc2FnZSh0aGlzLmNsaWVudC5jaGFubmVscy5nZXQobS5jaGFubmVsX2lkKSwgbSwgdGhpcy5jbGllbnQpKVxuICAgICAgKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvdGFsUmVzdWx0czogYm9keS50b3RhbF9yZXN1bHRzLFxuICAgICAgICBtZXNzYWdlcyxcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBjcmVhdGVDaGFubmVsKGd1aWxkLCBjaGFubmVsTmFtZSwgY2hhbm5lbFR5cGUsIG92ZXJ3cml0ZXMsIHJlYXNvbikge1xuICAgIGlmIChvdmVyd3JpdGVzIGluc3RhbmNlb2YgQ29sbGVjdGlvbiB8fCBvdmVyd3JpdGVzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIG92ZXJ3cml0ZXMgPSBvdmVyd3JpdGVzLm1hcChvdmVyd3JpdGUgPT4ge1xuICAgICAgICBsZXQgYWxsb3cgPSBvdmVyd3JpdGUuYWxsb3cgfHwgb3ZlcndyaXRlLl9hbGxvd2VkO1xuICAgICAgICBsZXQgZGVueSA9IG92ZXJ3cml0ZS5kZW55IHx8IG92ZXJ3cml0ZS5fZGVuaWVkO1xuICAgICAgICBpZiAoYWxsb3cgaW5zdGFuY2VvZiBBcnJheSkgYWxsb3cgPSBQZXJtaXNzaW9ucy5yZXNvbHZlKGFsbG93KTtcbiAgICAgICAgaWYgKGRlbnkgaW5zdGFuY2VvZiBBcnJheSkgZGVueSA9IFBlcm1pc3Npb25zLnJlc29sdmUoZGVueSk7XG5cbiAgICAgICAgY29uc3Qgcm9sZSA9IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVSb2xlKGd1aWxkLCBvdmVyd3JpdGUuaWQpO1xuICAgICAgICBpZiAocm9sZSkge1xuICAgICAgICAgIG92ZXJ3cml0ZS5pZCA9IHJvbGUuaWQ7XG4gICAgICAgICAgb3ZlcndyaXRlLnR5cGUgPSAncm9sZSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3ZlcndyaXRlLmlkID0gdGhpcy5jbGllbnQucmVzb2x2ZXIucmVzb2x2ZVVzZXJJRChvdmVyd3JpdGUuaWQpO1xuICAgICAgICAgIG92ZXJ3cml0ZS50eXBlID0gJ21lbWJlcic7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGFsbG93LFxuICAgICAgICAgIGRlbnksXG4gICAgICAgICAgdHlwZTogb3ZlcndyaXRlLnR5cGUsXG4gICAgICAgICAgaWQ6IG92ZXJ3cml0ZS5pZCxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwb3N0JywgRW5kcG9pbnRzLkd1aWxkKGd1aWxkKS5jaGFubmVscywgdHJ1ZSwge1xuICAgICAgbmFtZTogY2hhbm5lbE5hbWUsXG4gICAgICB0eXBlOiBjaGFubmVsVHlwZSA/IENvbnN0YW50cy5DaGFubmVsVHlwZXNbY2hhbm5lbFR5cGUudG9VcHBlckNhc2UoKV0gOiAndGV4dCcsXG4gICAgICBwZXJtaXNzaW9uX292ZXJ3cml0ZXM6IG92ZXJ3cml0ZXMsXG4gICAgfSwgdW5kZWZpbmVkLCByZWFzb24pLnRoZW4oZGF0YSA9PiB0aGlzLmNsaWVudC5hY3Rpb25zLkNoYW5uZWxDcmVhdGUuaGFuZGxlKGRhdGEpLmNoYW5uZWwpO1xuICB9XG5cbiAgY3JlYXRlRE0ocmVjaXBpZW50KSB7XG4gICAgY29uc3QgZG1DaGFubmVsID0gdGhpcy5nZXRFeGlzdGluZ0RNKHJlY2lwaWVudCk7XG4gICAgaWYgKGRtQ2hhbm5lbCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkbUNoYW5uZWwpO1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3Bvc3QnLCBFbmRwb2ludHMuVXNlcih0aGlzLmNsaWVudC51c2VyKS5jaGFubmVscywgdHJ1ZSwge1xuICAgICAgcmVjaXBpZW50X2lkOiByZWNpcGllbnQuaWQsXG4gICAgfSkudGhlbihkYXRhID0+IHRoaXMuY2xpZW50LmFjdGlvbnMuQ2hhbm5lbENyZWF0ZS5oYW5kbGUoZGF0YSkuY2hhbm5lbCk7XG4gIH1cblxuICBjcmVhdGVHcm91cERNKG9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5jbGllbnQudXNlci5ib3QgP1xuICAgICAgeyBhY2Nlc3NfdG9rZW5zOiBvcHRpb25zLmFjY2Vzc1Rva2Vucywgbmlja3M6IG9wdGlvbnMubmlja3MgfSA6XG4gICAgICB7IHJlY2lwaWVudHM6IG9wdGlvbnMucmVjaXBpZW50cyB9O1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3Bvc3QnLCBFbmRwb2ludHMuVXNlcignQG1lJykuY2hhbm5lbHMsIHRydWUsIGRhdGEpXG4gICAgICAudGhlbihyZXMgPT4gbmV3IEdyb3VwRE1DaGFubmVsKHRoaXMuY2xpZW50LCByZXMpKTtcbiAgfVxuXG4gIGFkZFVzZXJUb0dyb3VwRE0oY2hhbm5lbCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNsaWVudC51c2VyLmJvdCA/XG4gICAgICB7IG5pY2s6IG9wdGlvbnMubmljaywgYWNjZXNzX3Rva2VuOiBvcHRpb25zLmFjY2Vzc1Rva2VuIH0gOlxuICAgICAgeyByZWNpcGllbnQ6IG9wdGlvbnMuaWQgfTtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwdXQnLCBFbmRwb2ludHMuQ2hhbm5lbChjaGFubmVsKS5SZWNpcGllbnQob3B0aW9ucy5pZCksIHRydWUsIGRhdGEpXG4gICAgICAudGhlbigoKSA9PiBjaGFubmVsKTtcbiAgfVxuXG4gIHJlbW92ZVVzZXJGcm9tR3JvdXBETShjaGFubmVsLCB1c2VySWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdkZWxldGUnLCBFbmRwb2ludHMuQ2hhbm5lbChjaGFubmVsKS5SZWNpcGllbnQodXNlcklkKSwgdHJ1ZSlcbiAgICAgIC50aGVuKCgpID0+IGNoYW5uZWwpO1xuICB9XG5cbiAgdXBkYXRlR3JvdXBETUNoYW5uZWwoY2hhbm5lbCwgX2RhdGEpIHtcbiAgICBjb25zdCBkYXRhID0ge307XG4gICAgZGF0YS5uYW1lID0gX2RhdGEubmFtZTtcbiAgICBkYXRhLmljb24gPSBfZGF0YS5pY29uO1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3BhdGNoJywgRW5kcG9pbnRzLkNoYW5uZWwoY2hhbm5lbCksIHRydWUsIGRhdGEpLnRoZW4oKCkgPT4gY2hhbm5lbCk7XG4gIH1cblxuICBnZXRFeGlzdGluZ0RNKHJlY2lwaWVudCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC5jaGFubmVscy5maW5kKGNoYW5uZWwgPT5cbiAgICAgIGNoYW5uZWwucmVjaXBpZW50ICYmIGNoYW5uZWwucmVjaXBpZW50LmlkID09PSByZWNpcGllbnQuaWRcbiAgICApO1xuICB9XG5cbiAgZGVsZXRlQ2hhbm5lbChjaGFubmVsLCByZWFzb24pIHtcbiAgICBpZiAoY2hhbm5lbCBpbnN0YW5jZW9mIFVzZXIgfHwgY2hhbm5lbCBpbnN0YW5jZW9mIEd1aWxkTWVtYmVyKSBjaGFubmVsID0gdGhpcy5nZXRFeGlzdGluZ0RNKGNoYW5uZWwpO1xuICAgIGlmICghY2hhbm5lbCkgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignTm8gY2hhbm5lbCB0byBkZWxldGUuJykpO1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2RlbGV0ZScsIEVuZHBvaW50cy5DaGFubmVsKGNoYW5uZWwpLCB0cnVlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgcmVhc29uKVxuICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIGRhdGEuaWQgPSBjaGFubmVsLmlkO1xuICAgICAgICByZXR1cm4gdGhpcy5jbGllbnQuYWN0aW9ucy5DaGFubmVsRGVsZXRlLmhhbmRsZShkYXRhKS5jaGFubmVsO1xuICAgICAgfSk7XG4gIH1cblxuICB1cGRhdGVDaGFubmVsKGNoYW5uZWwsIF9kYXRhLCByZWFzb24pIHtcbiAgICBjb25zdCBkYXRhID0ge307XG4gICAgZGF0YS5uYW1lID0gKF9kYXRhLm5hbWUgfHwgY2hhbm5lbC5uYW1lKS50cmltKCk7XG4gICAgZGF0YS50b3BpYyA9IF9kYXRhLnRvcGljIHx8IGNoYW5uZWwudG9waWM7XG4gICAgZGF0YS5wb3NpdGlvbiA9IF9kYXRhLnBvc2l0aW9uIHx8IGNoYW5uZWwucG9zaXRpb247XG4gICAgZGF0YS5iaXRyYXRlID0gX2RhdGEuYml0cmF0ZSB8fCAoY2hhbm5lbC5iaXRyYXRlID8gY2hhbm5lbC5iaXRyYXRlICogMTAwMCA6IHVuZGVmaW5lZCk7XG4gICAgZGF0YS51c2VyX2xpbWl0ID0gdHlwZW9mIF9kYXRhLnVzZXJMaW1pdCAhPT0gJ3VuZGVmaW5lZCcgPyBfZGF0YS51c2VyTGltaXQgOiBjaGFubmVsLnVzZXJMaW1pdDtcbiAgICBkYXRhLnBhcmVudF9pZCA9IF9kYXRhLnBhcmVudCB8fCAoY2hhbm5lbC5wYXJlbnQgPyBjaGFubmVsLnBhcmVudC5pZCA6IHVuZGVmaW5lZCk7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncGF0Y2gnLCBFbmRwb2ludHMuQ2hhbm5lbChjaGFubmVsKSwgdHJ1ZSwgZGF0YSwgdW5kZWZpbmVkLCByZWFzb24pLnRoZW4obmV3RGF0YSA9PlxuICAgICAgdGhpcy5jbGllbnQuYWN0aW9ucy5DaGFubmVsVXBkYXRlLmhhbmRsZShuZXdEYXRhKS51cGRhdGVkXG4gICAgKTtcbiAgfVxuXG4gIGxlYXZlR3VpbGQoZ3VpbGQpIHtcbiAgICBpZiAoZ3VpbGQub3duZXJJRCA9PT0gdGhpcy5jbGllbnQudXNlci5pZCkgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignR3VpbGQgaXMgb3duZWQgYnkgdGhlIGNsaWVudC4nKSk7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgnZGVsZXRlJywgRW5kcG9pbnRzLlVzZXIoJ0BtZScpLkd1aWxkKGd1aWxkLmlkKSwgdHJ1ZSkudGhlbigoKSA9PlxuICAgICAgdGhpcy5jbGllbnQuYWN0aW9ucy5HdWlsZERlbGV0ZS5oYW5kbGUoeyBpZDogZ3VpbGQuaWQgfSkuZ3VpbGRcbiAgICApO1xuICB9XG5cbiAgY3JlYXRlR3VpbGQob3B0aW9ucykge1xuICAgIG9wdGlvbnMuaWNvbiA9IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVCYXNlNjQob3B0aW9ucy5pY29uKSB8fCBudWxsO1xuICAgIG9wdGlvbnMucmVnaW9uID0gb3B0aW9ucy5yZWdpb24gfHwgJ3VzLWNlbnRyYWwnO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3Bvc3QnLCBFbmRwb2ludHMuZ3VpbGRzLCB0cnVlLCBvcHRpb25zKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICBpZiAodGhpcy5jbGllbnQuZ3VpbGRzLmhhcyhkYXRhLmlkKSkgcmV0dXJuIHJlc29sdmUodGhpcy5jbGllbnQuZ3VpbGRzLmdldChkYXRhLmlkKSk7XG5cbiAgICAgICAgY29uc3QgaGFuZGxlR3VpbGQgPSBndWlsZCA9PiB7XG4gICAgICAgICAgaWYgKGd1aWxkLmlkID09PSBkYXRhLmlkKSB7XG4gICAgICAgICAgICB0aGlzLmNsaWVudC5yZW1vdmVMaXN0ZW5lcihDb25zdGFudHMuRXZlbnRzLkdVSUxEX0NSRUFURSwgaGFuZGxlR3VpbGQpO1xuICAgICAgICAgICAgdGhpcy5jbGllbnQuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgcmVzb2x2ZShndWlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsaWVudC5vbihDb25zdGFudHMuRXZlbnRzLkdVSUxEX0NSRUFURSwgaGFuZGxlR3VpbGQpO1xuXG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSB0aGlzLmNsaWVudC5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLmNsaWVudC5yZW1vdmVMaXN0ZW5lcihDb25zdGFudHMuRXZlbnRzLkdVSUxEX0NSRUFURSwgaGFuZGxlR3VpbGQpO1xuICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1Rvb2sgdG9vIGxvbmcgdG8gcmVjZWl2ZSBndWlsZCBkYXRhLicpKTtcbiAgICAgICAgfSwgMTAwMDApO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFVudGVzdGVkIGJ1dCBwcm9iYWJseSB3aWxsIHdvcmtcbiAgZGVsZXRlR3VpbGQoZ3VpbGQpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdkZWxldGUnLCBFbmRwb2ludHMuR3VpbGQoZ3VpbGQpLCB0cnVlKS50aGVuKCgpID0+XG4gICAgICB0aGlzLmNsaWVudC5hY3Rpb25zLkd1aWxkRGVsZXRlLmhhbmRsZSh7IGlkOiBndWlsZC5pZCB9KS5ndWlsZFxuICAgICk7XG4gIH1cblxuICBnZXRVc2VyKHVzZXJJRCwgY2FjaGUpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdnZXQnLCBFbmRwb2ludHMuVXNlcih1c2VySUQpLCB0cnVlKS50aGVuKGRhdGEgPT4ge1xuICAgICAgaWYgKGNhY2hlKSByZXR1cm4gdGhpcy5jbGllbnQuYWN0aW9ucy5Vc2VyR2V0LmhhbmRsZShkYXRhKS51c2VyO1xuICAgICAgZWxzZSByZXR1cm4gbmV3IFVzZXIodGhpcy5jbGllbnQsIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlQ3VycmVudFVzZXIoX2RhdGEsIHBhc3N3b3JkKSB7XG4gICAgY29uc3QgdXNlciA9IHRoaXMuY2xpZW50LnVzZXI7XG4gICAgY29uc3QgZGF0YSA9IHt9O1xuICAgIGRhdGEudXNlcm5hbWUgPSBfZGF0YS51c2VybmFtZSB8fCB1c2VyLnVzZXJuYW1lO1xuICAgIGRhdGEuYXZhdGFyID0gdHlwZW9mIF9kYXRhLmF2YXRhciA9PT0gJ3VuZGVmaW5lZCcgPyB1c2VyLmF2YXRhciA6IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVCYXNlNjQoX2RhdGEuYXZhdGFyKTtcbiAgICBpZiAoIXVzZXIuYm90KSB7XG4gICAgICBkYXRhLmVtYWlsID0gX2RhdGEuZW1haWwgfHwgdXNlci5lbWFpbDtcbiAgICAgIGRhdGEucGFzc3dvcmQgPSBwYXNzd29yZDtcbiAgICAgIGlmIChfZGF0YS5uZXdfcGFzc3dvcmQpIGRhdGEubmV3X3Bhc3N3b3JkID0gX2RhdGEubmV3UGFzc3dvcmQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3BhdGNoJywgRW5kcG9pbnRzLlVzZXIoJ0BtZScpLCB0cnVlLCBkYXRhKS50aGVuKG5ld0RhdGEgPT5cbiAgICAgIHRoaXMuY2xpZW50LmFjdGlvbnMuVXNlclVwZGF0ZS5oYW5kbGUobmV3RGF0YSkudXBkYXRlZFxuICAgICk7XG4gIH1cblxuICB1cGRhdGVHdWlsZChndWlsZCwgZGF0YSwgcmVhc29uKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncGF0Y2gnLCBFbmRwb2ludHMuR3VpbGQoZ3VpbGQpLCB0cnVlLCBkYXRhLCB1bmRlZmluZWQsIHJlYXNvbikudGhlbihuZXdEYXRhID0+XG4gICAgICB0aGlzLmNsaWVudC5hY3Rpb25zLkd1aWxkVXBkYXRlLmhhbmRsZShuZXdEYXRhKS51cGRhdGVkXG4gICAgKTtcbiAgfVxuXG4gIGtpY2tHdWlsZE1lbWJlcihndWlsZCwgbWVtYmVyLCByZWFzb24pIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KFxuICAgICAgJ2RlbGV0ZScsIEVuZHBvaW50cy5HdWlsZChndWlsZCkuTWVtYmVyKG1lbWJlciksIHRydWUsXG4gICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgcmVhc29uKVxuICAgICAgLnRoZW4oKCkgPT5cbiAgICAgICAgdGhpcy5jbGllbnQuYWN0aW9ucy5HdWlsZE1lbWJlclJlbW92ZS5oYW5kbGUoe1xuICAgICAgICAgIGd1aWxkX2lkOiBndWlsZC5pZCxcbiAgICAgICAgICB1c2VyOiBtZW1iZXIudXNlcixcbiAgICAgICAgfSkubWVtYmVyXG4gICAgICApO1xuICB9XG5cbiAgY3JlYXRlR3VpbGRSb2xlKGd1aWxkLCBkYXRhLCByZWFzb24pIHtcbiAgICBpZiAoZGF0YS5jb2xvcikgZGF0YS5jb2xvciA9IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVDb2xvcihkYXRhLmNvbG9yKTtcbiAgICBpZiAoZGF0YS5wZXJtaXNzaW9ucykgZGF0YS5wZXJtaXNzaW9ucyA9IFBlcm1pc3Npb25zLnJlc29sdmUoZGF0YS5wZXJtaXNzaW9ucyk7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncG9zdCcsIEVuZHBvaW50cy5HdWlsZChndWlsZCkucm9sZXMsIHRydWUsIGRhdGEsIHVuZGVmaW5lZCwgcmVhc29uKS50aGVuKHIgPT4ge1xuICAgICAgY29uc3QgeyByb2xlIH0gPSB0aGlzLmNsaWVudC5hY3Rpb25zLkd1aWxkUm9sZUNyZWF0ZS5oYW5kbGUoe1xuICAgICAgICBndWlsZF9pZDogZ3VpbGQuaWQsXG4gICAgICAgIHJvbGU6IHIsXG4gICAgICB9KTtcbiAgICAgIGlmIChkYXRhLnBvc2l0aW9uKSByZXR1cm4gcm9sZS5zZXRQb3NpdGlvbihkYXRhLnBvc2l0aW9uLCByZWFzb24pO1xuICAgICAgcmV0dXJuIHJvbGU7XG4gICAgfSk7XG4gIH1cblxuICBkZWxldGVHdWlsZFJvbGUocm9sZSwgcmVhc29uKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdChcbiAgICAgICdkZWxldGUnLCBFbmRwb2ludHMuR3VpbGQocm9sZS5ndWlsZCkuUm9sZShyb2xlLmlkKSwgdHJ1ZSxcbiAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCByZWFzb24pXG4gICAgICAudGhlbigoKSA9PlxuICAgICAgICB0aGlzLmNsaWVudC5hY3Rpb25zLkd1aWxkUm9sZURlbGV0ZS5oYW5kbGUoe1xuICAgICAgICAgIGd1aWxkX2lkOiByb2xlLmd1aWxkLmlkLFxuICAgICAgICAgIHJvbGVfaWQ6IHJvbGUuaWQsXG4gICAgICAgIH0pLnJvbGVcbiAgICAgICk7XG4gIH1cblxuICBzZXRDaGFubmVsT3ZlcndyaXRlKGNoYW5uZWwsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwdXQnLCBgJHtFbmRwb2ludHMuQ2hhbm5lbChjaGFubmVsKS5wZXJtaXNzaW9uc30vJHtwYXlsb2FkLmlkfWAsIHRydWUsIHBheWxvYWQpO1xuICB9XG5cbiAgZGVsZXRlUGVybWlzc2lvbk92ZXJ3cml0ZXMob3ZlcndyaXRlLCByZWFzb24pIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KFxuICAgICAgJ2RlbGV0ZScsIGAke0VuZHBvaW50cy5DaGFubmVsKG92ZXJ3cml0ZS5jaGFubmVsKS5wZXJtaXNzaW9uc30vJHtvdmVyd3JpdGUuaWR9YCxcbiAgICAgIHRydWUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCByZWFzb25cbiAgICApLnRoZW4oKCkgPT4gb3ZlcndyaXRlKTtcbiAgfVxuXG4gIGdldENoYW5uZWxNZXNzYWdlcyhjaGFubmVsLCBwYXlsb2FkID0ge30pIHtcbiAgICBjb25zdCBwYXJhbXMgPSBbXTtcbiAgICBpZiAocGF5bG9hZC5saW1pdCkgcGFyYW1zLnB1c2goYGxpbWl0PSR7cGF5bG9hZC5saW1pdH1gKTtcbiAgICBpZiAocGF5bG9hZC5hcm91bmQpIHBhcmFtcy5wdXNoKGBhcm91bmQ9JHtwYXlsb2FkLmFyb3VuZH1gKTtcbiAgICBlbHNlIGlmIChwYXlsb2FkLmJlZm9yZSkgcGFyYW1zLnB1c2goYGJlZm9yZT0ke3BheWxvYWQuYmVmb3JlfWApO1xuICAgIGVsc2UgaWYgKHBheWxvYWQuYWZ0ZXIpIHBhcmFtcy5wdXNoKGBhZnRlcj0ke3BheWxvYWQuYWZ0ZXJ9YCk7XG5cbiAgICBsZXQgZW5kcG9pbnQgPSBFbmRwb2ludHMuQ2hhbm5lbChjaGFubmVsKS5tZXNzYWdlcztcbiAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDApIGVuZHBvaW50ICs9IGA/JHtwYXJhbXMuam9pbignJicpfWA7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgnZ2V0JywgZW5kcG9pbnQsIHRydWUpO1xuICB9XG5cbiAgZ2V0Q2hhbm5lbE1lc3NhZ2UoY2hhbm5lbCwgbWVzc2FnZUlEKSB7XG4gICAgY29uc3QgbXNnID0gY2hhbm5lbC5tZXNzYWdlcy5nZXQobWVzc2FnZUlEKTtcbiAgICBpZiAobXNnKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1zZyk7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgnZ2V0JywgRW5kcG9pbnRzLkNoYW5uZWwoY2hhbm5lbCkuTWVzc2FnZShtZXNzYWdlSUQpLCB0cnVlKTtcbiAgfVxuXG4gIHB1dEd1aWxkTWVtYmVyKGd1aWxkLCB1c2VyLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucy5hY2Nlc3NfdG9rZW4gPSBvcHRpb25zLmFjY2Vzc1Rva2VuO1xuICAgIGlmIChvcHRpb25zLnJvbGVzKSB7XG4gICAgICBjb25zdCByb2xlcyA9IG9wdGlvbnMucm9sZXM7XG4gICAgICBpZiAocm9sZXMgaW5zdGFuY2VvZiBDb2xsZWN0aW9uIHx8IChyb2xlcyBpbnN0YW5jZW9mIEFycmF5ICYmIHJvbGVzWzBdIGluc3RhbmNlb2YgUm9sZSkpIHtcbiAgICAgICAgb3B0aW9ucy5yb2xlcyA9IHJvbGVzLm1hcChyb2xlID0+IHJvbGUuaWQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwdXQnLCBFbmRwb2ludHMuR3VpbGQoZ3VpbGQpLk1lbWJlcih1c2VyLmlkKSwgdHJ1ZSwgb3B0aW9ucylcbiAgICAgIC50aGVuKGRhdGEgPT4gdGhpcy5jbGllbnQuYWN0aW9ucy5HdWlsZE1lbWJlckdldC5oYW5kbGUoZ3VpbGQsIGRhdGEpLm1lbWJlcik7XG4gIH1cblxuICBnZXRHdWlsZE1lbWJlcihndWlsZCwgdXNlciwgY2FjaGUpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdnZXQnLCBFbmRwb2ludHMuR3VpbGQoZ3VpbGQpLk1lbWJlcih1c2VyLmlkKSwgdHJ1ZSkudGhlbihkYXRhID0+IHtcbiAgICAgIGlmIChjYWNoZSkgcmV0dXJuIHRoaXMuY2xpZW50LmFjdGlvbnMuR3VpbGRNZW1iZXJHZXQuaGFuZGxlKGd1aWxkLCBkYXRhKS5tZW1iZXI7XG4gICAgICBlbHNlIHJldHVybiBuZXcgR3VpbGRNZW1iZXIoZ3VpbGQsIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlR3VpbGRNZW1iZXIobWVtYmVyLCBkYXRhLCByZWFzb24pIHtcbiAgICBpZiAoZGF0YS5jaGFubmVsKSB7XG4gICAgICBkYXRhLmNoYW5uZWxfaWQgPSB0aGlzLmNsaWVudC5yZXNvbHZlci5yZXNvbHZlQ2hhbm5lbChkYXRhLmNoYW5uZWwpLmlkO1xuICAgICAgZGF0YS5jaGFubmVsID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGRhdGEucm9sZXMpIGRhdGEucm9sZXMgPSBkYXRhLnJvbGVzLm1hcChyb2xlID0+IHJvbGUgaW5zdGFuY2VvZiBSb2xlID8gcm9sZS5pZCA6IHJvbGUpO1xuXG4gICAgbGV0IGVuZHBvaW50ID0gRW5kcG9pbnRzLk1lbWJlcihtZW1iZXIpO1xuICAgIC8vIEZpeCB5b3VyIGVuZHBvaW50cywgZGlzY29yZCA7LTtcbiAgICBpZiAobWVtYmVyLmlkID09PSB0aGlzLmNsaWVudC51c2VyLmlkKSB7XG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgICBpZiAoa2V5cy5sZW5ndGggPT09IDEgJiYga2V5c1swXSA9PT0gJ25pY2snKSB7XG4gICAgICAgIGVuZHBvaW50ID0gRW5kcG9pbnRzLk1lbWJlcihtZW1iZXIpLm5pY2tuYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3BhdGNoJywgZW5kcG9pbnQsIHRydWUsIGRhdGEsIHVuZGVmaW5lZCwgcmVhc29uKS50aGVuKG5ld0RhdGEgPT5cbiAgICAgIG1lbWJlci5ndWlsZC5fdXBkYXRlTWVtYmVyKG1lbWJlciwgbmV3RGF0YSkubWVtXG4gICAgKTtcbiAgfVxuXG4gIGFkZE1lbWJlclJvbGUobWVtYmVyLCByb2xlLCByZWFzb24pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKG1lbWJlci5fcm9sZXMuaW5jbHVkZXMocm9sZS5pZCkpIHJldHVybiByZXNvbHZlKG1lbWJlcik7XG5cbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKG9sZE1lbWJlciwgbmV3TWVtYmVyKSA9PiB7XG4gICAgICAgIGlmICghb2xkTWVtYmVyLl9yb2xlcy5pbmNsdWRlcyhyb2xlLmlkKSAmJiBuZXdNZW1iZXIuX3JvbGVzLmluY2x1ZGVzKHJvbGUuaWQpKSB7XG4gICAgICAgICAgdGhpcy5jbGllbnQucmVtb3ZlTGlzdGVuZXIoQ29uc3RhbnRzLkV2ZW50cy5HVUlMRF9NRU1CRVJfVVBEQVRFLCBsaXN0ZW5lcik7XG4gICAgICAgICAgcmVzb2x2ZShuZXdNZW1iZXIpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB0aGlzLmNsaWVudC5vbihDb25zdGFudHMuRXZlbnRzLkdVSUxEX01FTUJFUl9VUERBVEUsIGxpc3RlbmVyKTtcbiAgICAgIGNvbnN0IHRpbWVvdXQgPSB0aGlzLmNsaWVudC5zZXRUaW1lb3V0KCgpID0+XG4gICAgICAgIHRoaXMuY2xpZW50LnJlbW92ZUxpc3RlbmVyKENvbnN0YW50cy5FdmVudHMuR1VJTERfTUVNQkVSX1VQREFURSwgbGlzdGVuZXIpLCAxMGUzKTtcblxuICAgICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncHV0JywgRW5kcG9pbnRzLk1lbWJlcihtZW1iZXIpLlJvbGUocm9sZS5pZCksIHRydWUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCByZWFzb24pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIHRoaXMuY2xpZW50LnJlbW92ZUxpc3RlbmVyKENvbnN0YW50cy5FdmVudHMuR1VJTERfQkFOX1JFTU9WRSwgbGlzdGVuZXIpO1xuICAgICAgICAgIHRoaXMuY2xpZW50LmNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVNZW1iZXJSb2xlKG1lbWJlciwgcm9sZSwgcmVhc29uKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICghbWVtYmVyLl9yb2xlcy5pbmNsdWRlcyhyb2xlLmlkKSkgcmV0dXJuIHJlc29sdmUobWVtYmVyKTtcblxuICAgICAgY29uc3QgbGlzdGVuZXIgPSAob2xkTWVtYmVyLCBuZXdNZW1iZXIpID0+IHtcbiAgICAgICAgaWYgKG9sZE1lbWJlci5fcm9sZXMuaW5jbHVkZXMocm9sZS5pZCkgJiYgIW5ld01lbWJlci5fcm9sZXMuaW5jbHVkZXMocm9sZS5pZCkpIHtcbiAgICAgICAgICB0aGlzLmNsaWVudC5yZW1vdmVMaXN0ZW5lcihDb25zdGFudHMuRXZlbnRzLkdVSUxEX01FTUJFUl9VUERBVEUsIGxpc3RlbmVyKTtcbiAgICAgICAgICByZXNvbHZlKG5ld01lbWJlcik7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuY2xpZW50Lm9uKENvbnN0YW50cy5FdmVudHMuR1VJTERfTUVNQkVSX1VQREFURSwgbGlzdGVuZXIpO1xuICAgICAgY29uc3QgdGltZW91dCA9IHRoaXMuY2xpZW50LnNldFRpbWVvdXQoKCkgPT5cbiAgICAgICAgdGhpcy5jbGllbnQucmVtb3ZlTGlzdGVuZXIoQ29uc3RhbnRzLkV2ZW50cy5HVUlMRF9NRU1CRVJfVVBEQVRFLCBsaXN0ZW5lciksIDEwZTMpO1xuXG4gICAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdkZWxldGUnLCBFbmRwb2ludHMuTWVtYmVyKG1lbWJlcikuUm9sZShyb2xlLmlkKSwgdHJ1ZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHJlYXNvbilcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgdGhpcy5jbGllbnQucmVtb3ZlTGlzdGVuZXIoQ29uc3RhbnRzLkV2ZW50cy5HVUlMRF9CQU5fUkVNT1ZFLCBsaXN0ZW5lcik7XG4gICAgICAgICAgdGhpcy5jbGllbnQuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHNlbmRUeXBpbmcoY2hhbm5lbElEKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncG9zdCcsIEVuZHBvaW50cy5DaGFubmVsKGNoYW5uZWxJRCkudHlwaW5nLCB0cnVlKTtcbiAgfVxuXG4gIGJhbkd1aWxkTWVtYmVyKGd1aWxkLCBtZW1iZXIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVVc2VySUQobWVtYmVyKTtcbiAgICBpZiAoIWlkKSByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCdDb3VsZG5cXCd0IHJlc29sdmUgdGhlIHVzZXIgSUQgdG8gYmFuLicpKTtcblxuICAgIGNvbnN0IHVybCA9IGAke0VuZHBvaW50cy5HdWlsZChndWlsZCkuYmFuc30vJHtpZH0/JHtxdWVyeXN0cmluZy5zdHJpbmdpZnkob3B0aW9ucyl9YDtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwdXQnLCB1cmwsIHRydWUpLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKG1lbWJlciBpbnN0YW5jZW9mIEd1aWxkTWVtYmVyKSByZXR1cm4gbWVtYmVyO1xuICAgICAgY29uc3QgdXNlciA9IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVVc2VyKGlkKTtcbiAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgIG1lbWJlciA9IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVHdWlsZE1lbWJlcihndWlsZCwgdXNlcik7XG4gICAgICAgIHJldHVybiBtZW1iZXIgfHwgdXNlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpZDtcbiAgICB9KTtcbiAgfVxuXG4gIHVuYmFuR3VpbGRNZW1iZXIoZ3VpbGQsIG1lbWJlciwgcmVhc29uKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGlkID0gdGhpcy5jbGllbnQucmVzb2x2ZXIucmVzb2x2ZVVzZXJJRChtZW1iZXIpO1xuICAgICAgaWYgKCFpZCkgdGhyb3cgbmV3IEVycm9yKCdDb3VsZG5cXCd0IHJlc29sdmUgdGhlIHVzZXIgSUQgdG8gdW5iYW4uJyk7XG5cbiAgICAgIGNvbnN0IGxpc3RlbmVyID0gKGVHdWlsZCwgZVVzZXIpID0+IHtcbiAgICAgICAgaWYgKGVHdWlsZC5pZCA9PT0gZ3VpbGQuaWQgJiYgZVVzZXIuaWQgPT09IGlkKSB7XG4gICAgICAgICAgdGhpcy5jbGllbnQucmVtb3ZlTGlzdGVuZXIoQ29uc3RhbnRzLkV2ZW50cy5HVUlMRF9CQU5fUkVNT1ZFLCBsaXN0ZW5lcik7XG4gICAgICAgICAgdGhpcy5jbGllbnQuY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHJlc29sdmUoZVVzZXIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5jbGllbnQub24oQ29uc3RhbnRzLkV2ZW50cy5HVUlMRF9CQU5fUkVNT1ZFLCBsaXN0ZW5lcik7XG5cbiAgICAgIGNvbnN0IHRpbWVvdXQgPSB0aGlzLmNsaWVudC5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5jbGllbnQucmVtb3ZlTGlzdGVuZXIoQ29uc3RhbnRzLkV2ZW50cy5HVUlMRF9CQU5fUkVNT1ZFLCBsaXN0ZW5lcik7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1Rvb2sgdG9vIGxvbmcgdG8gcmVjZWl2ZSB0aGUgYmFuIHJlbW92ZSBldmVudC4nKSk7XG4gICAgICB9LCAxMDAwMCk7XG5cbiAgICAgIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgnZGVsZXRlJywgYCR7RW5kcG9pbnRzLkd1aWxkKGd1aWxkKS5iYW5zfS8ke2lkfWAsIHRydWUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCByZWFzb24pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIHRoaXMuY2xpZW50LnJlbW92ZUxpc3RlbmVyKENvbnN0YW50cy5FdmVudHMuR1VJTERfQkFOX1JFTU9WRSwgbGlzdGVuZXIpO1xuICAgICAgICAgIHRoaXMuY2xpZW50LmNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRHdWlsZEJhbnMoZ3VpbGQpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdnZXQnLCBFbmRwb2ludHMuR3VpbGQoZ3VpbGQpLmJhbnMsIHRydWUpLnRoZW4oYmFucyA9PlxuICAgICAgYmFucy5yZWR1Y2UoKGNvbGxlY3Rpb24sIGJhbikgPT4ge1xuICAgICAgICBjb2xsZWN0aW9uLnNldChiYW4udXNlci5pZCwge1xuICAgICAgICAgIHJlYXNvbjogYmFuLnJlYXNvbixcbiAgICAgICAgICB1c2VyOiB0aGlzLmNsaWVudC5kYXRhTWFuYWdlci5uZXdVc2VyKGJhbi51c2VyKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfSwgbmV3IENvbGxlY3Rpb24oKSlcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlR3VpbGRSb2xlKHJvbGUsIF9kYXRhLCByZWFzb24pIHtcbiAgICBjb25zdCBkYXRhID0ge307XG4gICAgZGF0YS5uYW1lID0gX2RhdGEubmFtZSB8fCByb2xlLm5hbWU7XG4gICAgZGF0YS5wb3NpdGlvbiA9IHR5cGVvZiBfZGF0YS5wb3NpdGlvbiAhPT0gJ3VuZGVmaW5lZCcgPyBfZGF0YS5wb3NpdGlvbiA6IHJvbGUucG9zaXRpb247XG4gICAgZGF0YS5jb2xvciA9IHRoaXMuY2xpZW50LnJlc29sdmVyLnJlc29sdmVDb2xvcihfZGF0YS5jb2xvciB8fCByb2xlLmNvbG9yKTtcbiAgICBkYXRhLmhvaXN0ID0gdHlwZW9mIF9kYXRhLmhvaXN0ICE9PSAndW5kZWZpbmVkJyA/IF9kYXRhLmhvaXN0IDogcm9sZS5ob2lzdDtcbiAgICBkYXRhLm1lbnRpb25hYmxlID0gdHlwZW9mIF9kYXRhLm1lbnRpb25hYmxlICE9PSAndW5kZWZpbmVkJyA/IF9kYXRhLm1lbnRpb25hYmxlIDogcm9sZS5tZW50aW9uYWJsZTtcblxuICAgIGlmIChfZGF0YS5wZXJtaXNzaW9ucykgZGF0YS5wZXJtaXNzaW9ucyA9IFBlcm1pc3Npb25zLnJlc29sdmUoX2RhdGEucGVybWlzc2lvbnMpO1xuICAgIGVsc2UgZGF0YS5wZXJtaXNzaW9ucyA9IHJvbGUucGVybWlzc2lvbnM7XG5cbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwYXRjaCcsIEVuZHBvaW50cy5HdWlsZChyb2xlLmd1aWxkKS5Sb2xlKHJvbGUuaWQpLCB0cnVlLCBkYXRhLCB1bmRlZmluZWQsIHJlYXNvbilcbiAgICAgIC50aGVuKF9yb2xlID0+XG4gICAgICAgIHRoaXMuY2xpZW50LmFjdGlvbnMuR3VpbGRSb2xlVXBkYXRlLmhhbmRsZSh7XG4gICAgICAgICAgcm9sZTogX3JvbGUsXG4gICAgICAgICAgZ3VpbGRfaWQ6IHJvbGUuZ3VpbGQuaWQsXG4gICAgICAgIH0pLnVwZGF0ZWRcbiAgICAgICk7XG4gIH1cblxuICBwaW5NZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwdXQnLCBFbmRwb2ludHMuQ2hhbm5lbChtZXNzYWdlLmNoYW5uZWwpLlBpbihtZXNzYWdlLmlkKSwgdHJ1ZSlcbiAgICAgIC50aGVuKCgpID0+IG1lc3NhZ2UpO1xuICB9XG5cbiAgdW5waW5NZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdkZWxldGUnLCBFbmRwb2ludHMuQ2hhbm5lbChtZXNzYWdlLmNoYW5uZWwpLlBpbihtZXNzYWdlLmlkKSwgdHJ1ZSlcbiAgICAgIC50aGVuKCgpID0+IG1lc3NhZ2UpO1xuICB9XG5cbiAgZ2V0Q2hhbm5lbFBpbm5lZE1lc3NhZ2VzKGNoYW5uZWwpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdnZXQnLCBFbmRwb2ludHMuQ2hhbm5lbChjaGFubmVsKS5waW5zLCB0cnVlKTtcbiAgfVxuXG4gIGNyZWF0ZUNoYW5uZWxJbnZpdGUoY2hhbm5lbCwgb3B0aW9ucywgcmVhc29uKSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIHBheWxvYWQudGVtcG9yYXJ5ID0gb3B0aW9ucy50ZW1wb3Jhcnk7XG4gICAgcGF5bG9hZC5tYXhfYWdlID0gb3B0aW9ucy5tYXhBZ2U7XG4gICAgcGF5bG9hZC5tYXhfdXNlcyA9IG9wdGlvbnMubWF4VXNlcztcbiAgICBwYXlsb2FkLnVuaXF1ZSA9IG9wdGlvbnMudW5pcXVlO1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3Bvc3QnLCBFbmRwb2ludHMuQ2hhbm5lbChjaGFubmVsKS5pbnZpdGVzLCB0cnVlLCBwYXlsb2FkLCB1bmRlZmluZWQsIHJlYXNvbilcbiAgICAgIC50aGVuKGludml0ZSA9PiBuZXcgSW52aXRlKHRoaXMuY2xpZW50LCBpbnZpdGUpKTtcbiAgfVxuXG4gIGRlbGV0ZUludml0ZShpbnZpdGUsIHJlYXNvbikge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2RlbGV0ZScsIEVuZHBvaW50cy5JbnZpdGUoaW52aXRlLmNvZGUpLCB0cnVlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgcmVhc29uKVxuICAgICAgLnRoZW4oKCkgPT4gaW52aXRlKTtcbiAgfVxuXG4gIGdldEludml0ZShjb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgnZ2V0JywgRW5kcG9pbnRzLkludml0ZShjb2RlKSwgdHJ1ZSkudGhlbihpbnZpdGUgPT5cbiAgICAgIG5ldyBJbnZpdGUodGhpcy5jbGllbnQsIGludml0ZSlcbiAgICApO1xuICB9XG5cbiAgZ2V0R3VpbGRJbnZpdGVzKGd1aWxkKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgnZ2V0JywgRW5kcG9pbnRzLkd1aWxkKGd1aWxkKS5pbnZpdGVzLCB0cnVlKS50aGVuKGludml0ZUl0ZW1zID0+IHtcbiAgICAgIGNvbnN0IGludml0ZXMgPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgICAgZm9yIChjb25zdCBpbnZpdGVJdGVtIG9mIGludml0ZUl0ZW1zKSB7XG4gICAgICAgIGNvbnN0IGludml0ZSA9IG5ldyBJbnZpdGUodGhpcy5jbGllbnQsIGludml0ZUl0ZW0pO1xuICAgICAgICBpbnZpdGVzLnNldChpbnZpdGUuY29kZSwgaW52aXRlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnZpdGVzO1xuICAgIH0pO1xuICB9XG5cbiAgcHJ1bmVHdWlsZE1lbWJlcnMoZ3VpbGQsIGRheXMsIGRyeSwgcmVhc29uKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdChkcnkgP1xuICAgICAgJ2dldCcgOlxuICAgICAgJ3Bvc3QnLFxuICAgIGAke0VuZHBvaW50cy5HdWlsZChndWlsZCkucHJ1bmV9P2RheXM9JHtkYXlzfWAsIHRydWUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCByZWFzb24pXG4gICAgICAudGhlbihkYXRhID0+IGRhdGEucHJ1bmVkKTtcbiAgfVxuXG4gIGNyZWF0ZUVtb2ppKGd1aWxkLCBpbWFnZSwgbmFtZSwgcm9sZXMsIHJlYXNvbikge1xuICAgIGNvbnN0IGRhdGEgPSB7IGltYWdlLCBuYW1lIH07XG4gICAgaWYgKHJvbGVzKSBkYXRhLnJvbGVzID0gcm9sZXMubWFwKHIgPT4gci5pZCA/IHIuaWQgOiByKTtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwb3N0JywgRW5kcG9pbnRzLkd1aWxkKGd1aWxkKS5lbW9qaXMsIHRydWUsIGRhdGEsIHVuZGVmaW5lZCwgcmVhc29uKVxuICAgICAgLnRoZW4oZW1vamkgPT4gdGhpcy5jbGllbnQuYWN0aW9ucy5HdWlsZEVtb2ppQ3JlYXRlLmhhbmRsZShndWlsZCwgZW1vamkpLmVtb2ppKTtcbiAgfVxuXG4gIHVwZGF0ZUVtb2ppKGVtb2ppLCBfZGF0YSwgcmVhc29uKSB7XG4gICAgY29uc3QgZGF0YSA9IHt9O1xuICAgIGlmIChfZGF0YS5uYW1lKSBkYXRhLm5hbWUgPSBfZGF0YS5uYW1lO1xuICAgIGlmIChfZGF0YS5yb2xlcykgZGF0YS5yb2xlcyA9IF9kYXRhLnJvbGVzLm1hcChyID0+IHIuaWQgPyByLmlkIDogcik7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncGF0Y2gnLCBFbmRwb2ludHMuR3VpbGQoZW1vamkuZ3VpbGQpLkVtb2ppKGVtb2ppLmlkKSwgdHJ1ZSwgZGF0YSwgdW5kZWZpbmVkLCByZWFzb24pXG4gICAgICAudGhlbihuZXdFbW9qaSA9PiB0aGlzLmNsaWVudC5hY3Rpb25zLkd1aWxkRW1vamlVcGRhdGUuaGFuZGxlKGVtb2ppLCBuZXdFbW9qaSkuZW1vamkpO1xuICB9XG5cbiAgZGVsZXRlRW1vamkoZW1vamksIHJlYXNvbikge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2RlbGV0ZScsIEVuZHBvaW50cy5HdWlsZChlbW9qaS5ndWlsZCkuRW1vamkoZW1vamkuaWQpLCB0cnVlLCB1bmRlZmluZWQsIHJlYXNvbilcbiAgICAgIC50aGVuKCgpID0+IHRoaXMuY2xpZW50LmFjdGlvbnMuR3VpbGRFbW9qaURlbGV0ZS5oYW5kbGUoZW1vamkpLmRhdGEpO1xuICB9XG5cbiAgZ2V0R3VpbGRBdWRpdExvZ3MoZ3VpbGQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmIChvcHRpb25zLmJlZm9yZSAmJiBvcHRpb25zLmJlZm9yZSBpbnN0YW5jZW9mIEd1aWxkQXVkaXRMb2dzLkVudHJ5KSBvcHRpb25zLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlLmlkO1xuICAgIGlmIChvcHRpb25zLmFmdGVyICYmIG9wdGlvbnMuYWZ0ZXIgaW5zdGFuY2VvZiBHdWlsZEF1ZGl0TG9ncy5FbnRyeSkgb3B0aW9ucy5hZnRlciA9IG9wdGlvbnMuYWZ0ZXIuaWQ7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnR5cGUgPT09ICdzdHJpbmcnKSBvcHRpb25zLnR5cGUgPSBHdWlsZEF1ZGl0TG9ncy5BY3Rpb25zW29wdGlvbnMudHlwZV07XG5cbiAgICBjb25zdCBxdWVyeVN0cmluZyA9IChxdWVyeXN0cmluZy5zdHJpbmdpZnkoe1xuICAgICAgYmVmb3JlOiBvcHRpb25zLmJlZm9yZSxcbiAgICAgIGFmdGVyOiBvcHRpb25zLmFmdGVyLFxuICAgICAgbGltaXQ6IG9wdGlvbnMubGltaXQsXG4gICAgICB1c2VyX2lkOiB0aGlzLmNsaWVudC5yZXNvbHZlci5yZXNvbHZlVXNlcklEKG9wdGlvbnMudXNlciksXG4gICAgICBhY3Rpb25fdHlwZTogb3B0aW9ucy50eXBlLFxuICAgIH0pLm1hdGNoKC9bXj0mP10rPVtePSY/XSsvZykgfHwgW10pLmpvaW4oJyYnKTtcblxuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2dldCcsIGAke0VuZHBvaW50cy5HdWlsZChndWlsZCkuYXVkaXRMb2dzfT8ke3F1ZXJ5U3RyaW5nfWAsIHRydWUpXG4gICAgICAudGhlbihkYXRhID0+IEd1aWxkQXVkaXRMb2dzLmJ1aWxkKGd1aWxkLCBkYXRhKSk7XG4gIH1cblxuICBnZXRXZWJob29rKGlkLCB0b2tlbikge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2dldCcsIEVuZHBvaW50cy5XZWJob29rKGlkLCB0b2tlbiksICF0b2tlbikudGhlbihkYXRhID0+XG4gICAgICBuZXcgV2ViaG9vayh0aGlzLmNsaWVudCwgZGF0YSlcbiAgICApO1xuICB9XG5cbiAgZ2V0R3VpbGRXZWJob29rcyhndWlsZCkge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2dldCcsIEVuZHBvaW50cy5HdWlsZChndWlsZCkud2ViaG9va3MsIHRydWUpLnRoZW4oZGF0YSA9PiB7XG4gICAgICBjb25zdCBob29rcyA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgICBmb3IgKGNvbnN0IGhvb2sgb2YgZGF0YSkgaG9va3Muc2V0KGhvb2suaWQsIG5ldyBXZWJob29rKHRoaXMuY2xpZW50LCBob29rKSk7XG4gICAgICByZXR1cm4gaG9va3M7XG4gICAgfSk7XG4gIH1cblxuICBnZXRDaGFubmVsV2ViaG9va3MoY2hhbm5lbCkge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2dldCcsIEVuZHBvaW50cy5DaGFubmVsKGNoYW5uZWwpLndlYmhvb2tzLCB0cnVlKS50aGVuKGRhdGEgPT4ge1xuICAgICAgY29uc3QgaG9va3MgPSBuZXcgQ29sbGVjdGlvbigpO1xuICAgICAgZm9yIChjb25zdCBob29rIG9mIGRhdGEpIGhvb2tzLnNldChob29rLmlkLCBuZXcgV2ViaG9vayh0aGlzLmNsaWVudCwgaG9vaykpO1xuICAgICAgcmV0dXJuIGhvb2tzO1xuICAgIH0pO1xuICB9XG5cbiAgY3JlYXRlV2ViaG9vayhjaGFubmVsLCBuYW1lLCBhdmF0YXIsIHJlYXNvbikge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3Bvc3QnLCBFbmRwb2ludHMuQ2hhbm5lbChjaGFubmVsKS53ZWJob29rcywgdHJ1ZSwgeyBuYW1lLCBhdmF0YXIgfSwgdW5kZWZpbmVkLCByZWFzb24pXG4gICAgICAudGhlbihkYXRhID0+IG5ldyBXZWJob29rKHRoaXMuY2xpZW50LCBkYXRhKSk7XG4gIH1cblxuICBlZGl0V2ViaG9vayh3ZWJob29rLCBuYW1lLCBhdmF0YXIpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwYXRjaCcsIEVuZHBvaW50cy5XZWJob29rKHdlYmhvb2suaWQsIHdlYmhvb2sudG9rZW4pLCBmYWxzZSwge1xuICAgICAgbmFtZSxcbiAgICAgIGF2YXRhcixcbiAgICB9KS50aGVuKGRhdGEgPT4ge1xuICAgICAgd2ViaG9vay5uYW1lID0gZGF0YS5uYW1lO1xuICAgICAgd2ViaG9vay5hdmF0YXIgPSBkYXRhLmF2YXRhcjtcbiAgICAgIHJldHVybiB3ZWJob29rO1xuICAgIH0pO1xuICB9XG5cbiAgZGVsZXRlV2ViaG9vayh3ZWJob29rLCByZWFzb24pIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KFxuICAgICAgJ2RlbGV0ZScsIEVuZHBvaW50cy5XZWJob29rKHdlYmhvb2suaWQsIHdlYmhvb2sudG9rZW4pLFxuICAgICAgZmFsc2UsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCByZWFzb24pO1xuICB9XG5cbiAgc2VuZFdlYmhvb2tNZXNzYWdlKHdlYmhvb2ssIGNvbnRlbnQsIHsgYXZhdGFyVVJMLCB0dHMsIGVtYmVkcywgdXNlcm5hbWUgfSA9IHt9LCBmaWxlcyA9IG51bGwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdXNlcm5hbWUgPSB1c2VybmFtZSB8fCB3ZWJob29rLm5hbWU7XG5cbiAgICAgIGlmIChjb250ZW50IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSBbXTtcbiAgICAgICAgKGZ1bmN0aW9uIHNlbmRDaHVuayhsaXN0LCBpbmRleCkge1xuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSBpbmRleCA9PT0gbGlzdC5sZW5ndGggLSAxID8geyB0dHMsIGVtYmVkcywgZmlsZXMgfSA6IHsgdHRzIH07XG4gICAgICAgICAgd2ViaG9vay5zZW5kKGxpc3RbaW5kZXhdLCBvcHRpb25zKS50aGVuKG1lc3NhZ2UgPT4ge1xuICAgICAgICAgICAgbWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSBsaXN0Lmxlbmd0aCAtIDEpIHJldHVybiByZXNvbHZlKG1lc3NhZ2VzKTtcbiAgICAgICAgICAgIHJldHVybiBzZW5kQ2h1bmsobGlzdCwgKytpbmRleCk7XG4gICAgICAgICAgfSkuY2F0Y2gocmVqZWN0KTtcbiAgICAgICAgfShjb250ZW50LCAwKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3Bvc3QnLCBgJHtFbmRwb2ludHMuV2ViaG9vayh3ZWJob29rLmlkLCB3ZWJob29rLnRva2VuKX0/d2FpdD10cnVlYCwgZmFsc2UsIHtcbiAgICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgICBhdmF0YXJfdXJsOiBhdmF0YXJVUkwsXG4gICAgICAgICAgY29udGVudCxcbiAgICAgICAgICB0dHMsXG4gICAgICAgICAgZW1iZWRzLFxuICAgICAgICB9LCBmaWxlcykudGhlbihkYXRhID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuY2xpZW50LmNoYW5uZWxzKSByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgIGVsc2UgcmVzb2x2ZSh0aGlzLmNsaWVudC5hY3Rpb25zLk1lc3NhZ2VDcmVhdGUuaGFuZGxlKGRhdGEpLm1lc3NhZ2UpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc2VuZFNsYWNrV2ViaG9va01lc3NhZ2Uod2ViaG9vaywgYm9keSkge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoXG4gICAgICAncG9zdCcsIGAke0VuZHBvaW50cy5XZWJob29rKHdlYmhvb2suaWQsIHdlYmhvb2sudG9rZW4pfS9zbGFjaz93YWl0PXRydWVgLCBmYWxzZSwgYm9keVxuICAgICk7XG4gIH1cblxuICBmZXRjaFVzZXJQcm9maWxlKHVzZXIpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdnZXQnLCBFbmRwb2ludHMuVXNlcih1c2VyKS5wcm9maWxlLCB0cnVlKS50aGVuKGRhdGEgPT5cbiAgICAgIG5ldyBVc2VyUHJvZmlsZSh1c2VyLCBkYXRhKVxuICAgICk7XG4gIH1cblxuICBmZXRjaE1lbnRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5ndWlsZCBpbnN0YW5jZW9mIEd1aWxkKSBvcHRpb25zLmd1aWxkID0gb3B0aW9ucy5ndWlsZC5pZDtcbiAgICBVdGlsLm1lcmdlRGVmYXVsdCh7IGxpbWl0OiAyNSwgcm9sZXM6IHRydWUsIGV2ZXJ5b25lOiB0cnVlLCBndWlsZDogbnVsbCB9LCBvcHRpb25zKTtcblxuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoXG4gICAgICAnZ2V0JywgRW5kcG9pbnRzLlVzZXIoJ0BtZScpLk1lbnRpb25zKG9wdGlvbnMubGltaXQsIG9wdGlvbnMucm9sZXMsIG9wdGlvbnMuZXZlcnlvbmUsIG9wdGlvbnMuZ3VpbGQpLCB0cnVlXG4gICAgKS50aGVuKGRhdGEgPT4gZGF0YS5tYXAobSA9PiBuZXcgTWVzc2FnZSh0aGlzLmNsaWVudC5jaGFubmVscy5nZXQobS5jaGFubmVsX2lkKSwgbSwgdGhpcy5jbGllbnQpKSk7XG4gIH1cblxuICBhZGRGcmllbmQodXNlcikge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3Bvc3QnLCBFbmRwb2ludHMuVXNlcignQG1lJyksIHRydWUsIHtcbiAgICAgIHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLFxuICAgICAgZGlzY3JpbWluYXRvcjogdXNlci5kaXNjcmltaW5hdG9yLFxuICAgIH0pLnRoZW4oKCkgPT4gdXNlcik7XG4gIH1cblxuICByZW1vdmVGcmllbmQodXNlcikge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2RlbGV0ZScsIEVuZHBvaW50cy5Vc2VyKCdAbWUnKS5SZWxhdGlvbnNoaXAodXNlci5pZCksIHRydWUpXG4gICAgICAudGhlbigoKSA9PiB1c2VyKTtcbiAgfVxuXG4gIGJsb2NrVXNlcih1c2VyKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncHV0JywgRW5kcG9pbnRzLlVzZXIoJ0BtZScpLlJlbGF0aW9uc2hpcCh1c2VyLmlkKSwgdHJ1ZSwgeyB0eXBlOiAyIH0pXG4gICAgICAudGhlbigoKSA9PiB1c2VyKTtcbiAgfVxuXG4gIHVuYmxvY2tVc2VyKHVzZXIpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdkZWxldGUnLCBFbmRwb2ludHMuVXNlcignQG1lJykuUmVsYXRpb25zaGlwKHVzZXIuaWQpLCB0cnVlKVxuICAgICAgLnRoZW4oKCkgPT4gdXNlcik7XG4gIH1cblxuICB1cGRhdGVDaGFubmVsUG9zaXRpb25zKGd1aWxkSUQsIGNoYW5uZWxzKSB7XG4gICAgY29uc3QgZGF0YSA9IG5ldyBBcnJheShjaGFubmVscy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhbm5lbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSB7XG4gICAgICAgIGlkOiB0aGlzLmNsaWVudC5yZXNvbHZlci5yZXNvbHZlQ2hhbm5lbElEKGNoYW5uZWxzW2ldLmNoYW5uZWwpLFxuICAgICAgICBwb3NpdGlvbjogY2hhbm5lbHNbaV0ucG9zaXRpb24sXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3BhdGNoJywgRW5kcG9pbnRzLkd1aWxkKGd1aWxkSUQpLmNoYW5uZWxzLCB0cnVlLCBkYXRhKS50aGVuKCgpID0+XG4gICAgICB0aGlzLmNsaWVudC5hY3Rpb25zLkd1aWxkQ2hhbm5lbHNQb3NpdGlvblVwZGF0ZS5oYW5kbGUoe1xuICAgICAgICBndWlsZF9pZDogZ3VpbGRJRCxcbiAgICAgICAgY2hhbm5lbHMsXG4gICAgICB9KS5ndWlsZFxuICAgICk7XG4gIH1cblxuICBzZXRSb2xlUG9zaXRpb25zKGd1aWxkSUQsIHJvbGVzKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncGF0Y2gnLCBFbmRwb2ludHMuR3VpbGQoZ3VpbGRJRCkucm9sZXMsIHRydWUsIHJvbGVzKS50aGVuKCgpID0+XG4gICAgICB0aGlzLmNsaWVudC5hY3Rpb25zLkd1aWxkUm9sZXNQb3NpdGlvblVwZGF0ZS5oYW5kbGUoe1xuICAgICAgICBndWlsZF9pZDogZ3VpbGRJRCxcbiAgICAgICAgcm9sZXMsXG4gICAgICB9KS5ndWlsZFxuICAgICk7XG4gIH1cblxuICBzZXRDaGFubmVsUG9zaXRpb25zKGd1aWxkSUQsIGNoYW5uZWxzKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncGF0Y2gnLCBFbmRwb2ludHMuR3VpbGQoZ3VpbGRJRCkuY2hhbm5lbHMsIHRydWUsIGNoYW5uZWxzKS50aGVuKCgpID0+XG4gICAgICB0aGlzLmNsaWVudC5hY3Rpb25zLkd1aWxkQ2hhbm5lbHNQb3NpdGlvblVwZGF0ZS5oYW5kbGUoe1xuICAgICAgICBndWlsZF9pZDogZ3VpbGRJRCxcbiAgICAgICAgY2hhbm5lbHMsXG4gICAgICB9KS5ndWlsZFxuICAgICk7XG4gIH1cblxuICBhZGRNZXNzYWdlUmVhY3Rpb24obWVzc2FnZSwgZW1vamkpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KFxuICAgICAgJ3B1dCcsIEVuZHBvaW50cy5NZXNzYWdlKG1lc3NhZ2UpLlJlYWN0aW9uKGVtb2ppKS5Vc2VyKCdAbWUnKSwgdHJ1ZVxuICAgICkudGhlbigoKSA9PlxuICAgICAgbWVzc2FnZS5fYWRkUmVhY3Rpb24oVXRpbC5wYXJzZUVtb2ppKGVtb2ppKSwgbWVzc2FnZS5jbGllbnQudXNlcilcbiAgICApO1xuICB9XG5cbiAgcmVtb3ZlTWVzc2FnZVJlYWN0aW9uKG1lc3NhZ2UsIGVtb2ppLCB1c2VySUQpIHtcbiAgICBjb25zdCBlbmRwb2ludCA9IEVuZHBvaW50cy5NZXNzYWdlKG1lc3NhZ2UpLlJlYWN0aW9uKGVtb2ppKS5Vc2VyKHVzZXJJRCA9PT0gdGhpcy5jbGllbnQudXNlci5pZCA/ICdAbWUnIDogdXNlcklEKTtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdkZWxldGUnLCBlbmRwb2ludCwgdHJ1ZSkudGhlbigoKSA9PlxuICAgICAgdGhpcy5jbGllbnQuYWN0aW9ucy5NZXNzYWdlUmVhY3Rpb25SZW1vdmUuaGFuZGxlKHtcbiAgICAgICAgdXNlcl9pZDogdXNlcklELFxuICAgICAgICBtZXNzYWdlX2lkOiBtZXNzYWdlLmlkLFxuICAgICAgICBlbW9qaTogVXRpbC5wYXJzZUVtb2ppKGVtb2ppKSxcbiAgICAgICAgY2hhbm5lbF9pZDogbWVzc2FnZS5jaGFubmVsLmlkLFxuICAgICAgfSkucmVhY3Rpb25cbiAgICApO1xuICB9XG5cbiAgcmVtb3ZlTWVzc2FnZVJlYWN0aW9ucyhtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgnZGVsZXRlJywgRW5kcG9pbnRzLk1lc3NhZ2UobWVzc2FnZSkucmVhY3Rpb25zLCB0cnVlKVxuICAgICAgLnRoZW4oKCkgPT4gbWVzc2FnZSk7XG4gIH1cblxuICBnZXRNZXNzYWdlUmVhY3Rpb25Vc2VycyhtZXNzYWdlLCBlbW9qaSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHF1ZXJ5U3RyaW5nID0gKHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShvcHRpb25zKS5tYXRjaCgvW149Jj9dKz1bXj0mP10rL2cpIHx8IFtdKS5qb2luKCcmJyk7XG5cbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdnZXQnLCBgJHtFbmRwb2ludHMuTWVzc2FnZShtZXNzYWdlKS5SZWFjdGlvbihlbW9qaSl9PyR7cXVlcnlTdHJpbmd9YCwgdHJ1ZSk7XG4gIH1cblxuICBnZXRBcHBsaWNhdGlvbihpZCkge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ2dldCcsIEVuZHBvaW50cy5PQVVUSDIuQXBwbGljYXRpb24oaWQpLCB0cnVlKS50aGVuKGFwcCA9PlxuICAgICAgbmV3IE9BdXRoMkFwcGxpY2F0aW9uKHRoaXMuY2xpZW50LCBhcHApXG4gICAgKTtcbiAgfVxuXG4gIHJlc2V0QXBwbGljYXRpb24oaWQpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwb3N0JywgRW5kcG9pbnRzLk9BVVRIMi5BcHBsaWNhdGlvbihpZCkucmVzZXRUb2tlbiwgdHJ1ZSlcbiAgICAgIC50aGVuKCgpID0+IHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncG9zdCcsIEVuZHBvaW50cy5PQVVUSDIuQXBwbGljYXRpb24oaWQpLnJlc2V0U2VjcmV0LCB0cnVlKSlcbiAgICAgIC50aGVuKGFwcCA9PiBuZXcgT0F1dGgyQXBwbGljYXRpb24odGhpcy5jbGllbnQsIGFwcCkpO1xuICB9XG5cbiAgc2V0Tm90ZSh1c2VyLCBub3RlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncHV0JywgRW5kcG9pbnRzLlVzZXIodXNlcikubm90ZSwgdHJ1ZSwgeyBub3RlIH0pLnRoZW4oKCkgPT4gdXNlcik7XG4gIH1cblxuICBhY2NlcHRJbnZpdGUoY29kZSkge1xuICAgIGlmIChjb2RlLmlkKSBjb2RlID0gY29kZS5pZDtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT5cbiAgICAgIHRoaXMucmVzdC5tYWtlUmVxdWVzdCgncG9zdCcsIEVuZHBvaW50cy5JbnZpdGUoY29kZSksIHRydWUpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGd1aWxkID0+IHtcbiAgICAgICAgICBpZiAoZ3VpbGQuaWQgPT09IHJlcy5pZCkge1xuICAgICAgICAgICAgcmVzb2x2ZShndWlsZCk7XG4gICAgICAgICAgICB0aGlzLmNsaWVudC5yZW1vdmVMaXN0ZW5lcihDb25zdGFudHMuRXZlbnRzLkdVSUxEX0NSRUFURSwgaGFuZGxlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsaWVudC5vbihDb25zdGFudHMuRXZlbnRzLkdVSUxEX0NSRUFURSwgaGFuZGxlcik7XG4gICAgICAgIHRoaXMuY2xpZW50LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuY2xpZW50LnJlbW92ZUxpc3RlbmVyKENvbnN0YW50cy5FdmVudHMuR1VJTERfQ1JFQVRFLCBoYW5kbGVyKTtcbiAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdBY2NlcHRpbmcgaW52aXRlIHRpbWVkIG91dCcpKTtcbiAgICAgICAgfSwgMTIwZTMpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcGF0Y2hVc2VyU2V0dGluZ3MoZGF0YSkge1xuICAgIHJldHVybiB0aGlzLnJlc3QubWFrZVJlcXVlc3QoJ3BhdGNoJywgQ29uc3RhbnRzLkVuZHBvaW50cy5Vc2VyKCdAbWUnKS5zZXR0aW5ncywgdHJ1ZSwgZGF0YSk7XG4gIH1cblxuICBwYXRjaENsaWVudFVzZXJHdWlsZFNldHRpbmdzKGd1aWxkSUQsIGRhdGEpIHtcbiAgICByZXR1cm4gdGhpcy5yZXN0Lm1ha2VSZXF1ZXN0KCdwYXRjaCcsIENvbnN0YW50cy5FbmRwb2ludHMuVXNlcignQG1lJykuR3VpbGQoZ3VpbGRJRCkuc2V0dGluZ3MsIHRydWUsIGRhdGEpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUkVTVE1ldGhvZHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvcmVzdC9SRVNUTWV0aG9kcy5qc1xuLy8gbW9kdWxlIGlkID0gOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///98\n");

/***/ }),
/* 99 */
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/UserProfile.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst UserConnection = __webpack_require__(/*! ./UserConnection */ 100);\n\n/**\n * Represents a user's profile on Discord.\n */\nclass UserProfile {\n  constructor(user, data) {\n    /**\n     * The owner of the profile\n     * @type {User}\n     */\n    this.user = user;\n\n    /**\n     * The client that created the instance of the UserProfile\n     * @name UserProfile#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: user.client });\n\n    /**\n     * The guilds that the client user and the user share\n     * @type {Collection<Snowflake, Guild>}\n     */\n    this.mutualGuilds = new Collection();\n\n    /**\n     * The user's connections\n     * @type {Collection<Snowflake, UserConnection>}\n     */\n    this.connections = new Collection();\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * If the user has Discord Premium\n     * @type {boolean}\n     */\n    this.premium = data.premium;\n\n    /**\n     * The date since which the user has had Discord Premium\n     * @type {?Date}\n     */\n    this.premiumSince = data.premium_since ? new Date(data.premium_since) : null;\n\n    for (const guild of data.mutual_guilds) {\n      if (this.client.guilds.has(guild.id)) {\n        this.mutualGuilds.set(guild.id, this.client.guilds.get(guild.id));\n      }\n    }\n    for (const connection of data.connected_accounts) {\n      this.connections.set(connection.id, new UserConnection(this.user, connection));\n    }\n  }\n}\n\nmodule.exports = UserProfile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9Vc2VyUHJvZmlsZS5qcz80Y2JmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi91dGlsL0NvbGxlY3Rpb24nKTtcbmNvbnN0IFVzZXJDb25uZWN0aW9uID0gcmVxdWlyZSgnLi9Vc2VyQ29ubmVjdGlvbicpO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSB1c2VyJ3MgcHJvZmlsZSBvbiBEaXNjb3JkLlxuICovXG5jbGFzcyBVc2VyUHJvZmlsZSB7XG4gIGNvbnN0cnVjdG9yKHVzZXIsIGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgb3duZXIgb2YgdGhlIHByb2ZpbGVcbiAgICAgKiBAdHlwZSB7VXNlcn1cbiAgICAgKi9cbiAgICB0aGlzLnVzZXIgPSB1c2VyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCB0aGF0IGNyZWF0ZWQgdGhlIGluc3RhbmNlIG9mIHRoZSBVc2VyUHJvZmlsZVxuICAgICAqIEBuYW1lIFVzZXJQcm9maWxlI2NsaWVudFxuICAgICAqIEB0eXBlIHtDbGllbnR9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjbGllbnQnLCB7IHZhbHVlOiB1c2VyLmNsaWVudCB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBndWlsZHMgdGhhdCB0aGUgY2xpZW50IHVzZXIgYW5kIHRoZSB1c2VyIHNoYXJlXG4gICAgICogQHR5cGUge0NvbGxlY3Rpb248U25vd2ZsYWtlLCBHdWlsZD59XG4gICAgICovXG4gICAgdGhpcy5tdXR1YWxHdWlsZHMgPSBuZXcgQ29sbGVjdGlvbigpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHVzZXIncyBjb25uZWN0aW9uc1xuICAgICAqIEB0eXBlIHtDb2xsZWN0aW9uPFNub3dmbGFrZSwgVXNlckNvbm5lY3Rpb24+fVxuICAgICAqL1xuICAgIHRoaXMuY29ubmVjdGlvbnMgPSBuZXcgQ29sbGVjdGlvbigpO1xuXG4gICAgdGhpcy5zZXR1cChkYXRhKTtcbiAgfVxuXG4gIHNldHVwKGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdXNlciBoYXMgRGlzY29yZCBQcmVtaXVtXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5wcmVtaXVtID0gZGF0YS5wcmVtaXVtO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgc2luY2Ugd2hpY2ggdGhlIHVzZXIgaGFzIGhhZCBEaXNjb3JkIFByZW1pdW1cbiAgICAgKiBAdHlwZSB7P0RhdGV9XG4gICAgICovXG4gICAgdGhpcy5wcmVtaXVtU2luY2UgPSBkYXRhLnByZW1pdW1fc2luY2UgPyBuZXcgRGF0ZShkYXRhLnByZW1pdW1fc2luY2UpIDogbnVsbDtcblxuICAgIGZvciAoY29uc3QgZ3VpbGQgb2YgZGF0YS5tdXR1YWxfZ3VpbGRzKSB7XG4gICAgICBpZiAodGhpcy5jbGllbnQuZ3VpbGRzLmhhcyhndWlsZC5pZCkpIHtcbiAgICAgICAgdGhpcy5tdXR1YWxHdWlsZHMuc2V0KGd1aWxkLmlkLCB0aGlzLmNsaWVudC5ndWlsZHMuZ2V0KGd1aWxkLmlkKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgY29ubmVjdGlvbiBvZiBkYXRhLmNvbm5lY3RlZF9hY2NvdW50cykge1xuICAgICAgdGhpcy5jb25uZWN0aW9ucy5zZXQoY29ubmVjdGlvbi5pZCwgbmV3IFVzZXJDb25uZWN0aW9uKHRoaXMudXNlciwgY29ubmVjdGlvbikpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXJQcm9maWxlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9Vc2VyUHJvZmlsZS5qc1xuLy8gbW9kdWxlIGlkID0gOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///99\n");

/***/ }),
/* 100 */
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/UserConnection.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * Represents a user connection (or \"platform identity\").\n */\nclass UserConnection {\n  constructor(user, data) {\n    /**\n     * The user that owns the connection\n     * @type {User}\n     */\n    this.user = user;\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The type of the connection\n     * @type {string}\n     */\n    this.type = data.type;\n\n    /**\n     * The username of the connection account\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The id of the connection account\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * Whether the connection is revoked\n     * @type {boolean}\n     */\n    this.revoked = data.revoked;\n\n    /**\n     * Partial server integrations (not yet implemented)\n     * @type {Object[]}\n     */\n    this.integrations = data.integrations;\n  }\n}\n\nmodule.exports = UserConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3N0cnVjdHVyZXMvVXNlckNvbm5lY3Rpb24uanM/OWY3YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlcHJlc2VudHMgYSB1c2VyIGNvbm5lY3Rpb24gKG9yIFwicGxhdGZvcm0gaWRlbnRpdHlcIikuXG4gKi9cbmNsYXNzIFVzZXJDb25uZWN0aW9uIHtcbiAgY29uc3RydWN0b3IodXNlciwgZGF0YSkge1xuICAgIC8qKlxuICAgICAqIFRoZSB1c2VyIHRoYXQgb3ducyB0aGUgY29ubmVjdGlvblxuICAgICAqIEB0eXBlIHtVc2VyfVxuICAgICAqL1xuICAgIHRoaXMudXNlciA9IHVzZXI7XG5cbiAgICB0aGlzLnNldHVwKGRhdGEpO1xuICB9XG5cbiAgc2V0dXAoZGF0YSkge1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBjb25uZWN0aW9uXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdXNlcm5hbWUgb2YgdGhlIGNvbm5lY3Rpb24gYWNjb3VudFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5uYW1lID0gZGF0YS5uYW1lO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGlkIG9mIHRoZSBjb25uZWN0aW9uIGFjY291bnRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBkYXRhLmlkO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgY29ubmVjdGlvbiBpcyByZXZva2VkXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5yZXZva2VkID0gZGF0YS5yZXZva2VkO1xuXG4gICAgLyoqXG4gICAgICogUGFydGlhbCBzZXJ2ZXIgaW50ZWdyYXRpb25zIChub3QgeWV0IGltcGxlbWVudGVkKVxuICAgICAqIEB0eXBlIHtPYmplY3RbXX1cbiAgICAgKi9cbiAgICB0aGlzLmludGVncmF0aW9ucyA9IGRhdGEuaW50ZWdyYXRpb25zO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXNlckNvbm5lY3Rpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9zdHJ1Y3R1cmVzL1VzZXJDb25uZWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///100\n");

/***/ }),
/* 101 */
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/VoiceRegion.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * Represents a Discord voice region for guilds.\n */\nclass VoiceRegion {\n  constructor(data) {\n    /**\n     * The ID of the region\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * Name of the region\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * Whether the region is VIP-only\n     * @type {boolean}\n     */\n    this.vip = data.vip;\n\n    /**\n     * Whether the region is deprecated\n     * @type {boolean}\n     */\n    this.deprecated = data.deprecated;\n\n    /**\n     * Whether the region is optimal\n     * @type {boolean}\n     */\n    this.optimal = data.optimal;\n\n    /**\n     * Whether the region is custom\n     * @type {boolean}\n     */\n    this.custom = data.custom;\n\n    /**\n     * A sample hostname for what a connection might look like\n     * @type {string}\n     */\n    this.sampleHostname = data.sample_hostname;\n  }\n}\n\nmodule.exports = VoiceRegion;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3N0cnVjdHVyZXMvVm9pY2VSZWdpb24uanM/NDFkOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlcHJlc2VudHMgYSBEaXNjb3JkIHZvaWNlIHJlZ2lvbiBmb3IgZ3VpbGRzLlxuICovXG5jbGFzcyBWb2ljZVJlZ2lvbiB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgSUQgb2YgdGhlIHJlZ2lvblxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5pZCA9IGRhdGEuaWQ7XG5cbiAgICAvKipcbiAgICAgKiBOYW1lIG9mIHRoZSByZWdpb25cbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IGRhdGEubmFtZTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHJlZ2lvbiBpcyBWSVAtb25seVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMudmlwID0gZGF0YS52aXA7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSByZWdpb24gaXMgZGVwcmVjYXRlZFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuZGVwcmVjYXRlZCA9IGRhdGEuZGVwcmVjYXRlZDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHJlZ2lvbiBpcyBvcHRpbWFsXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5vcHRpbWFsID0gZGF0YS5vcHRpbWFsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGUgcmVnaW9uIGlzIGN1c3RvbVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuY3VzdG9tID0gZGF0YS5jdXN0b207XG5cbiAgICAvKipcbiAgICAgKiBBIHNhbXBsZSBob3N0bmFtZSBmb3Igd2hhdCBhIGNvbm5lY3Rpb24gbWlnaHQgbG9vayBsaWtlXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLnNhbXBsZUhvc3RuYW1lID0gZGF0YS5zYW1wbGVfaG9zdG5hbWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWb2ljZVJlZ2lvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3N0cnVjdHVyZXMvVm9pY2VSZWdpb24uanNcbi8vIG1vZHVsZSBpZCA9IDEwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///101\n");

/***/ }),
/* 102 */
/*!*******************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/RequestHandlers/Sequential.js ***!
  \*******************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const RequestHandler = __webpack_require__(/*! ./RequestHandler */ 60);\nconst DiscordAPIError = __webpack_require__(/*! ../DiscordAPIError */ 40);\n\n/**\n * Handles API Requests sequentially, i.e. we wait until the current request is finished before moving onto\n * the next. This plays a _lot_ nicer in terms of avoiding 429's when there is more than one session of the account,\n * but it can be slower.\n * @extends {RequestHandler}\n * @private\n */\nclass SequentialRequestHandler extends RequestHandler {\n  /**\n   * @param {RESTManager} restManager The REST manager to use\n   * @param {string} endpoint The endpoint to handle\n   */\n  constructor(restManager, endpoint) {\n    super(restManager, endpoint);\n\n    /**\n     * The endpoint that this handler is handling\n     * @type {string}\n     */\n    this.endpoint = endpoint;\n\n    /**\n     * The time difference between Discord's Dates and the local computer's Dates. A positive number means the local\n     * computer's time is ahead of Discord's\n     * @type {number}\n     */\n    this.timeDifference = 0;\n\n    /**\n     * Whether the queue is being processed or not\n     * @type {boolean}\n     */\n    this.busy = false;\n  }\n\n  push(request) {\n    super.push(request);\n    this.handle();\n  }\n\n  /**\n   * Performs a request then resolves a promise to indicate its readiness for a new request.\n   * @param {APIRequest} item The item to execute\n   * @returns {Promise<?Object|Error>}\n   */\n  execute(item) {\n    this.busy = true;\n    return new Promise(resolve => {\n      item.request.gen().end((err, res) => {\n        if (res && res.headers) {\n          this.requestLimit = Number(res.headers['x-ratelimit-limit']);\n          this.requestResetTime = Number(res.headers['x-ratelimit-reset']) * 1000;\n          this.requestRemaining = Number(res.headers['x-ratelimit-remaining']);\n          this.timeDifference = Date.now() - new Date(res.headers.date).getTime();\n        }\n        if (err) {\n          if (err.status === 429) {\n            this.queue.unshift(item);\n            this.restManager.client.setTimeout(() => {\n              this.globalLimit = false;\n              resolve();\n            }, Number(res.headers['retry-after']) + this.restManager.client.options.restTimeOffset);\n            if (res.headers['x-ratelimit-global']) this.globalLimit = true;\n          } else if (err.status >= 500 && err.status < 600) {\n            this.queue.unshift(item);\n            this.restManager.client.setTimeout(resolve, 1e3 + this.restManager.client.options.restTimeOffset);\n          } else {\n            item.reject(err.status >= 400 && err.status < 500 ? new DiscordAPIError(res.request.path, res.body) : err);\n            resolve(err);\n          }\n        } else {\n          this.globalLimit = false;\n          const data = res && res.body ? res.body : {};\n          item.resolve(data);\n          if (this.requestRemaining === 0) {\n            this.restManager.client.setTimeout(\n              () => resolve(data),\n              this.requestResetTime - Date.now() + this.timeDifference + this.restManager.client.options.restTimeOffset\n            );\n          } else {\n            resolve(data);\n          }\n        }\n      });\n    });\n  }\n\n  handle() {\n    super.handle();\n    if (this.busy || this.remaining === 0 || this.queue.length === 0 || this.globalLimit) return;\n    this.execute(this.queue.shift()).then(() => {\n      this.busy = false;\n      this.handle();\n    });\n  }\n}\n\nmodule.exports = SequentialRequestHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9yZXN0L1JlcXVlc3RIYW5kbGVycy9TZXF1ZW50aWFsLmpzPzU3MjciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVxdWVzdEhhbmRsZXIgPSByZXF1aXJlKCcuL1JlcXVlc3RIYW5kbGVyJyk7XG5jb25zdCBEaXNjb3JkQVBJRXJyb3IgPSByZXF1aXJlKCcuLi9EaXNjb3JkQVBJRXJyb3InKTtcblxuLyoqXG4gKiBIYW5kbGVzIEFQSSBSZXF1ZXN0cyBzZXF1ZW50aWFsbHksIGkuZS4gd2Ugd2FpdCB1bnRpbCB0aGUgY3VycmVudCByZXF1ZXN0IGlzIGZpbmlzaGVkIGJlZm9yZSBtb3Zpbmcgb250b1xuICogdGhlIG5leHQuIFRoaXMgcGxheXMgYSBfbG90XyBuaWNlciBpbiB0ZXJtcyBvZiBhdm9pZGluZyA0MjkncyB3aGVuIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmUgc2Vzc2lvbiBvZiB0aGUgYWNjb3VudCxcbiAqIGJ1dCBpdCBjYW4gYmUgc2xvd2VyLlxuICogQGV4dGVuZHMge1JlcXVlc3RIYW5kbGVyfVxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgU2VxdWVudGlhbFJlcXVlc3RIYW5kbGVyIGV4dGVuZHMgUmVxdWVzdEhhbmRsZXIge1xuICAvKipcbiAgICogQHBhcmFtIHtSRVNUTWFuYWdlcn0gcmVzdE1hbmFnZXIgVGhlIFJFU1QgbWFuYWdlciB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVuZHBvaW50IFRoZSBlbmRwb2ludCB0byBoYW5kbGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlc3RNYW5hZ2VyLCBlbmRwb2ludCkge1xuICAgIHN1cGVyKHJlc3RNYW5hZ2VyLCBlbmRwb2ludCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZW5kcG9pbnQgdGhhdCB0aGlzIGhhbmRsZXIgaXMgaGFuZGxpbmdcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZW5kcG9pbnQgPSBlbmRwb2ludDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiBEaXNjb3JkJ3MgRGF0ZXMgYW5kIHRoZSBsb2NhbCBjb21wdXRlcidzIERhdGVzLiBBIHBvc2l0aXZlIG51bWJlciBtZWFucyB0aGUgbG9jYWxcbiAgICAgKiBjb21wdXRlcidzIHRpbWUgaXMgYWhlYWQgb2YgRGlzY29yZCdzXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnRpbWVEaWZmZXJlbmNlID0gMDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHF1ZXVlIGlzIGJlaW5nIHByb2Nlc3NlZCBvciBub3RcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICB0aGlzLmJ1c3kgPSBmYWxzZTtcbiAgfVxuXG4gIHB1c2gocmVxdWVzdCkge1xuICAgIHN1cGVyLnB1c2gocmVxdWVzdCk7XG4gICAgdGhpcy5oYW5kbGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHJlcXVlc3QgdGhlbiByZXNvbHZlcyBhIHByb21pc2UgdG8gaW5kaWNhdGUgaXRzIHJlYWRpbmVzcyBmb3IgYSBuZXcgcmVxdWVzdC5cbiAgICogQHBhcmFtIHtBUElSZXF1ZXN0fSBpdGVtIFRoZSBpdGVtIHRvIGV4ZWN1dGVcbiAgICogQHJldHVybnMge1Byb21pc2U8P09iamVjdHxFcnJvcj59XG4gICAqL1xuICBleGVjdXRlKGl0ZW0pIHtcbiAgICB0aGlzLmJ1c3kgPSB0cnVlO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIGl0ZW0ucmVxdWVzdC5nZW4oKS5lbmQoKGVyciwgcmVzKSA9PiB7XG4gICAgICAgIGlmIChyZXMgJiYgcmVzLmhlYWRlcnMpIHtcbiAgICAgICAgICB0aGlzLnJlcXVlc3RMaW1pdCA9IE51bWJlcihyZXMuaGVhZGVyc1sneC1yYXRlbGltaXQtbGltaXQnXSk7XG4gICAgICAgICAgdGhpcy5yZXF1ZXN0UmVzZXRUaW1lID0gTnVtYmVyKHJlcy5oZWFkZXJzWyd4LXJhdGVsaW1pdC1yZXNldCddKSAqIDEwMDA7XG4gICAgICAgICAgdGhpcy5yZXF1ZXN0UmVtYWluaW5nID0gTnVtYmVyKHJlcy5oZWFkZXJzWyd4LXJhdGVsaW1pdC1yZW1haW5pbmcnXSk7XG4gICAgICAgICAgdGhpcy50aW1lRGlmZmVyZW5jZSA9IERhdGUubm93KCkgLSBuZXcgRGF0ZShyZXMuaGVhZGVycy5kYXRlKS5nZXRUaW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGlmIChlcnIuc3RhdHVzID09PSA0MjkpIHtcbiAgICAgICAgICAgIHRoaXMucXVldWUudW5zaGlmdChpdGVtKTtcbiAgICAgICAgICAgIHRoaXMucmVzdE1hbmFnZXIuY2xpZW50LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmdsb2JhbExpbWl0ID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0sIE51bWJlcihyZXMuaGVhZGVyc1sncmV0cnktYWZ0ZXInXSkgKyB0aGlzLnJlc3RNYW5hZ2VyLmNsaWVudC5vcHRpb25zLnJlc3RUaW1lT2Zmc2V0KTtcbiAgICAgICAgICAgIGlmIChyZXMuaGVhZGVyc1sneC1yYXRlbGltaXQtZ2xvYmFsJ10pIHRoaXMuZ2xvYmFsTGltaXQgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZXJyLnN0YXR1cyA+PSA1MDAgJiYgZXJyLnN0YXR1cyA8IDYwMCkge1xuICAgICAgICAgICAgdGhpcy5xdWV1ZS51bnNoaWZ0KGl0ZW0pO1xuICAgICAgICAgICAgdGhpcy5yZXN0TWFuYWdlci5jbGllbnQuc2V0VGltZW91dChyZXNvbHZlLCAxZTMgKyB0aGlzLnJlc3RNYW5hZ2VyLmNsaWVudC5vcHRpb25zLnJlc3RUaW1lT2Zmc2V0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5yZWplY3QoZXJyLnN0YXR1cyA+PSA0MDAgJiYgZXJyLnN0YXR1cyA8IDUwMCA/IG5ldyBEaXNjb3JkQVBJRXJyb3IocmVzLnJlcXVlc3QucGF0aCwgcmVzLmJvZHkpIDogZXJyKTtcbiAgICAgICAgICAgIHJlc29sdmUoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5nbG9iYWxMaW1pdCA9IGZhbHNlO1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXMgJiYgcmVzLmJvZHkgPyByZXMuYm9keSA6IHt9O1xuICAgICAgICAgIGl0ZW0ucmVzb2x2ZShkYXRhKTtcbiAgICAgICAgICBpZiAodGhpcy5yZXF1ZXN0UmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3RNYW5hZ2VyLmNsaWVudC5zZXRUaW1lb3V0KFxuICAgICAgICAgICAgICAoKSA9PiByZXNvbHZlKGRhdGEpLFxuICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RSZXNldFRpbWUgLSBEYXRlLm5vdygpICsgdGhpcy50aW1lRGlmZmVyZW5jZSArIHRoaXMucmVzdE1hbmFnZXIuY2xpZW50Lm9wdGlvbnMucmVzdFRpbWVPZmZzZXRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZSgpIHtcbiAgICBzdXBlci5oYW5kbGUoKTtcbiAgICBpZiAodGhpcy5idXN5IHx8IHRoaXMucmVtYWluaW5nID09PSAwIHx8IHRoaXMucXVldWUubGVuZ3RoID09PSAwIHx8IHRoaXMuZ2xvYmFsTGltaXQpIHJldHVybjtcbiAgICB0aGlzLmV4ZWN1dGUodGhpcy5xdWV1ZS5zaGlmdCgpKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMuYnVzeSA9IGZhbHNlO1xuICAgICAgdGhpcy5oYW5kbGUoKTtcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcXVlbnRpYWxSZXF1ZXN0SGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9yZXN0L1JlcXVlc3RIYW5kbGVycy9TZXF1ZW50aWFsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///102\n");

/***/ }),
/* 103 */
/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/RequestHandlers/Burst.js ***!
  \**************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const RequestHandler = __webpack_require__(/*! ./RequestHandler */ 60);\nconst DiscordAPIError = __webpack_require__(/*! ../DiscordAPIError */ 40);\n\nclass BurstRequestHandler extends RequestHandler {\n  constructor(restManager, endpoint) {\n    super(restManager, endpoint);\n\n    this.client = restManager.client;\n\n    this.limit = Infinity;\n    this.resetTime = null;\n    this.remaining = 1;\n    this.timeDifference = 0;\n\n    this.resetTimeout = null;\n  }\n\n  push(request) {\n    super.push(request);\n    this.handle();\n  }\n\n  execute(item) {\n    if (!item) return;\n    item.request.gen().end((err, res) => {\n      if (res && res.headers) {\n        this.limit = Number(res.headers['x-ratelimit-limit']);\n        this.resetTime = Number(res.headers['x-ratelimit-reset']) * 1000;\n        this.remaining = Number(res.headers['x-ratelimit-remaining']);\n        this.timeDifference = Date.now() - new Date(res.headers.date).getTime();\n      }\n      if (err) {\n        if (err.status === 429) {\n          this.queue.unshift(item);\n          if (res.headers['x-ratelimit-global']) this.globalLimit = true;\n          if (this.resetTimeout) return;\n          this.resetTimeout = this.client.setTimeout(() => {\n            this.remaining = this.limit;\n            this.globalLimit = false;\n            this.handle();\n            this.resetTimeout = null;\n          }, Number(res.headers['retry-after']) + this.client.options.restTimeOffset);\n        } else if (err.status >= 500 && err.status < 600) {\n          this.queue.unshift(item);\n          this.resetTimeout = this.client.setTimeout(() => {\n            this.handle();\n            this.resetTimeout = null;\n          }, 1e3 + this.client.options.restTimeOffset);\n        } else {\n          item.reject(err.status >= 400 && err.status < 500 ? new DiscordAPIError(res.request.path, res.body) : err);\n          this.handle();\n        }\n      } else {\n        this.globalLimit = false;\n        const data = res && res.body ? res.body : {};\n        item.resolve(data);\n        this.handle();\n      }\n    });\n  }\n\n  handle() {\n    super.handle();\n    if (this.remaining <= 0 || this.queue.length === 0 || this.globalLimit) return;\n    this.execute(this.queue.shift());\n    this.remaining--;\n    this.handle();\n  }\n}\n\nmodule.exports = BurstRequestHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTAzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9yZXN0L1JlcXVlc3RIYW5kbGVycy9CdXJzdC5qcz9mOGVjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlcXVlc3RIYW5kbGVyID0gcmVxdWlyZSgnLi9SZXF1ZXN0SGFuZGxlcicpO1xuY29uc3QgRGlzY29yZEFQSUVycm9yID0gcmVxdWlyZSgnLi4vRGlzY29yZEFQSUVycm9yJyk7XG5cbmNsYXNzIEJ1cnN0UmVxdWVzdEhhbmRsZXIgZXh0ZW5kcyBSZXF1ZXN0SGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKHJlc3RNYW5hZ2VyLCBlbmRwb2ludCkge1xuICAgIHN1cGVyKHJlc3RNYW5hZ2VyLCBlbmRwb2ludCk7XG5cbiAgICB0aGlzLmNsaWVudCA9IHJlc3RNYW5hZ2VyLmNsaWVudDtcblxuICAgIHRoaXMubGltaXQgPSBJbmZpbml0eTtcbiAgICB0aGlzLnJlc2V0VGltZSA9IG51bGw7XG4gICAgdGhpcy5yZW1haW5pbmcgPSAxO1xuICAgIHRoaXMudGltZURpZmZlcmVuY2UgPSAwO1xuXG4gICAgdGhpcy5yZXNldFRpbWVvdXQgPSBudWxsO1xuICB9XG5cbiAgcHVzaChyZXF1ZXN0KSB7XG4gICAgc3VwZXIucHVzaChyZXF1ZXN0KTtcbiAgICB0aGlzLmhhbmRsZSgpO1xuICB9XG5cbiAgZXhlY3V0ZShpdGVtKSB7XG4gICAgaWYgKCFpdGVtKSByZXR1cm47XG4gICAgaXRlbS5yZXF1ZXN0LmdlbigpLmVuZCgoZXJyLCByZXMpID0+IHtcbiAgICAgIGlmIChyZXMgJiYgcmVzLmhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5saW1pdCA9IE51bWJlcihyZXMuaGVhZGVyc1sneC1yYXRlbGltaXQtbGltaXQnXSk7XG4gICAgICAgIHRoaXMucmVzZXRUaW1lID0gTnVtYmVyKHJlcy5oZWFkZXJzWyd4LXJhdGVsaW1pdC1yZXNldCddKSAqIDEwMDA7XG4gICAgICAgIHRoaXMucmVtYWluaW5nID0gTnVtYmVyKHJlcy5oZWFkZXJzWyd4LXJhdGVsaW1pdC1yZW1haW5pbmcnXSk7XG4gICAgICAgIHRoaXMudGltZURpZmZlcmVuY2UgPSBEYXRlLm5vdygpIC0gbmV3IERhdGUocmVzLmhlYWRlcnMuZGF0ZSkuZ2V0VGltZSgpO1xuICAgICAgfVxuICAgICAgaWYgKGVycikge1xuICAgICAgICBpZiAoZXJyLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgICAgdGhpcy5xdWV1ZS51bnNoaWZ0KGl0ZW0pO1xuICAgICAgICAgIGlmIChyZXMuaGVhZGVyc1sneC1yYXRlbGltaXQtZ2xvYmFsJ10pIHRoaXMuZ2xvYmFsTGltaXQgPSB0cnVlO1xuICAgICAgICAgIGlmICh0aGlzLnJlc2V0VGltZW91dCkgcmV0dXJuO1xuICAgICAgICAgIHRoaXMucmVzZXRUaW1lb3V0ID0gdGhpcy5jbGllbnQuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbWFpbmluZyA9IHRoaXMubGltaXQ7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbExpbWl0ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZSgpO1xuICAgICAgICAgICAgdGhpcy5yZXNldFRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIH0sIE51bWJlcihyZXMuaGVhZGVyc1sncmV0cnktYWZ0ZXInXSkgKyB0aGlzLmNsaWVudC5vcHRpb25zLnJlc3RUaW1lT2Zmc2V0KTtcbiAgICAgICAgfSBlbHNlIGlmIChlcnIuc3RhdHVzID49IDUwMCAmJiBlcnIuc3RhdHVzIDwgNjAwKSB7XG4gICAgICAgICAgdGhpcy5xdWV1ZS51bnNoaWZ0KGl0ZW0pO1xuICAgICAgICAgIHRoaXMucmVzZXRUaW1lb3V0ID0gdGhpcy5jbGllbnQuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZSgpO1xuICAgICAgICAgICAgdGhpcy5yZXNldFRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIH0sIDFlMyArIHRoaXMuY2xpZW50Lm9wdGlvbnMucmVzdFRpbWVPZmZzZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW0ucmVqZWN0KGVyci5zdGF0dXMgPj0gNDAwICYmIGVyci5zdGF0dXMgPCA1MDAgPyBuZXcgRGlzY29yZEFQSUVycm9yKHJlcy5yZXF1ZXN0LnBhdGgsIHJlcy5ib2R5KSA6IGVycik7XG4gICAgICAgICAgdGhpcy5oYW5kbGUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5nbG9iYWxMaW1pdCA9IGZhbHNlO1xuICAgICAgICBjb25zdCBkYXRhID0gcmVzICYmIHJlcy5ib2R5ID8gcmVzLmJvZHkgOiB7fTtcbiAgICAgICAgaXRlbS5yZXNvbHZlKGRhdGEpO1xuICAgICAgICB0aGlzLmhhbmRsZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlKCkge1xuICAgIHN1cGVyLmhhbmRsZSgpO1xuICAgIGlmICh0aGlzLnJlbWFpbmluZyA8PSAwIHx8IHRoaXMucXVldWUubGVuZ3RoID09PSAwIHx8IHRoaXMuZ2xvYmFsTGltaXQpIHJldHVybjtcbiAgICB0aGlzLmV4ZWN1dGUodGhpcy5xdWV1ZS5zaGlmdCgpKTtcbiAgICB0aGlzLnJlbWFpbmluZy0tO1xuICAgIHRoaXMuaGFuZGxlKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCdXJzdFJlcXVlc3RIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3Jlc3QvUmVxdWVzdEhhbmRsZXJzL0J1cnN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///103\n");

/***/ }),
/* 104 */
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/client/rest/APIRequest.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const snekfetch = __webpack_require__(/*! snekfetch */ 27);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass APIRequest {\n  constructor(rest, method, path, auth, data, files, reason) {\n    this.rest = rest;\n    this.client = rest.client;\n    this.method = method;\n    this.path = path.toString();\n    this.auth = auth;\n    this.data = data;\n    this.files = files;\n    this.route = this.getRoute(this.path);\n    this.reason = reason;\n  }\n\n  getRoute(url) {\n    let route = url.split('?')[0];\n    if (route.includes('/channels/') || route.includes('/guilds/')) {\n      const startInd = route.includes('/channels/') ? route.indexOf('/channels/') : route.indexOf('/guilds/');\n      const majorID = route.substring(startInd).split('/')[2];\n      route = route.replace(/(\\d{8,})/g, ':id').replace(':id', majorID);\n    }\n    return route;\n  }\n\n  getAuth() {\n    if (this.client.token && this.client.user && this.client.user.bot) {\n      return `Bot ${this.client.token}`;\n    } else if (this.client.token) {\n      return this.client.token;\n    }\n    throw new Error(Constants.Errors.NO_TOKEN);\n  }\n\n  gen() {\n    const API = `${this.client.options.http.host}/api/v${this.client.options.http.version}`;\n    const request = snekfetch[this.method](`${API}${this.path}`);\n    if (this.auth) request.set('Authorization', this.getAuth());\n    if (this.reason) request.set('X-Audit-Log-Reason', encodeURIComponent(this.reason));\n    if (!this.rest.client.browser) request.set('User-Agent', this.rest.userAgentManager.userAgent);\n    if (this.files) {\n      for (const file of this.files) if (file && file.file) request.attach(file.name, file.file, file.name);\n      if (typeof this.data !== 'undefined') request.attach('payload_json', JSON.stringify(this.data));\n    } else if (this.data) {\n      request.send(this.data);\n    }\n    return request;\n  }\n}\n\nmodule.exports = APIRequest;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9yZXN0L0FQSVJlcXVlc3QuanM/OGIyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzbmVrZmV0Y2ggPSByZXF1aXJlKCdzbmVrZmV0Y2gnKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbmNsYXNzIEFQSVJlcXVlc3Qge1xuICBjb25zdHJ1Y3RvcihyZXN0LCBtZXRob2QsIHBhdGgsIGF1dGgsIGRhdGEsIGZpbGVzLCByZWFzb24pIHtcbiAgICB0aGlzLnJlc3QgPSByZXN0O1xuICAgIHRoaXMuY2xpZW50ID0gcmVzdC5jbGllbnQ7XG4gICAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gICAgdGhpcy5wYXRoID0gcGF0aC50b1N0cmluZygpO1xuICAgIHRoaXMuYXV0aCA9IGF1dGg7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmZpbGVzID0gZmlsZXM7XG4gICAgdGhpcy5yb3V0ZSA9IHRoaXMuZ2V0Um91dGUodGhpcy5wYXRoKTtcbiAgICB0aGlzLnJlYXNvbiA9IHJlYXNvbjtcbiAgfVxuXG4gIGdldFJvdXRlKHVybCkge1xuICAgIGxldCByb3V0ZSA9IHVybC5zcGxpdCgnPycpWzBdO1xuICAgIGlmIChyb3V0ZS5pbmNsdWRlcygnL2NoYW5uZWxzLycpIHx8IHJvdXRlLmluY2x1ZGVzKCcvZ3VpbGRzLycpKSB7XG4gICAgICBjb25zdCBzdGFydEluZCA9IHJvdXRlLmluY2x1ZGVzKCcvY2hhbm5lbHMvJykgPyByb3V0ZS5pbmRleE9mKCcvY2hhbm5lbHMvJykgOiByb3V0ZS5pbmRleE9mKCcvZ3VpbGRzLycpO1xuICAgICAgY29uc3QgbWFqb3JJRCA9IHJvdXRlLnN1YnN0cmluZyhzdGFydEluZCkuc3BsaXQoJy8nKVsyXTtcbiAgICAgIHJvdXRlID0gcm91dGUucmVwbGFjZSgvKFxcZHs4LH0pL2csICc6aWQnKS5yZXBsYWNlKCc6aWQnLCBtYWpvcklEKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvdXRlO1xuICB9XG5cbiAgZ2V0QXV0aCgpIHtcbiAgICBpZiAodGhpcy5jbGllbnQudG9rZW4gJiYgdGhpcy5jbGllbnQudXNlciAmJiB0aGlzLmNsaWVudC51c2VyLmJvdCkge1xuICAgICAgcmV0dXJuIGBCb3QgJHt0aGlzLmNsaWVudC50b2tlbn1gO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jbGllbnQudG9rZW4pIHtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC50b2tlbjtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKENvbnN0YW50cy5FcnJvcnMuTk9fVE9LRU4pO1xuICB9XG5cbiAgZ2VuKCkge1xuICAgIGNvbnN0IEFQSSA9IGAke3RoaXMuY2xpZW50Lm9wdGlvbnMuaHR0cC5ob3N0fS9hcGkvdiR7dGhpcy5jbGllbnQub3B0aW9ucy5odHRwLnZlcnNpb259YDtcbiAgICBjb25zdCByZXF1ZXN0ID0gc25la2ZldGNoW3RoaXMubWV0aG9kXShgJHtBUEl9JHt0aGlzLnBhdGh9YCk7XG4gICAgaWYgKHRoaXMuYXV0aCkgcmVxdWVzdC5zZXQoJ0F1dGhvcml6YXRpb24nLCB0aGlzLmdldEF1dGgoKSk7XG4gICAgaWYgKHRoaXMucmVhc29uKSByZXF1ZXN0LnNldCgnWC1BdWRpdC1Mb2ctUmVhc29uJywgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMucmVhc29uKSk7XG4gICAgaWYgKCF0aGlzLnJlc3QuY2xpZW50LmJyb3dzZXIpIHJlcXVlc3Quc2V0KCdVc2VyLUFnZW50JywgdGhpcy5yZXN0LnVzZXJBZ2VudE1hbmFnZXIudXNlckFnZW50KTtcbiAgICBpZiAodGhpcy5maWxlcykge1xuICAgICAgZm9yIChjb25zdCBmaWxlIG9mIHRoaXMuZmlsZXMpIGlmIChmaWxlICYmIGZpbGUuZmlsZSkgcmVxdWVzdC5hdHRhY2goZmlsZS5uYW1lLCBmaWxlLmZpbGUsIGZpbGUubmFtZSk7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuZGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHJlcXVlc3QuYXR0YWNoKCdwYXlsb2FkX2pzb24nLCBKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YSkge1xuICAgICAgcmVxdWVzdC5zZW5kKHRoaXMuZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiByZXF1ZXN0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQVBJUmVxdWVzdDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9yZXN0L0FQSVJlcXVlc3QuanNcbi8vIG1vZHVsZSBpZCA9IDEwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///104\n");

/***/ }),
/* 105 */
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/client/ClientDataManager.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst Util = __webpack_require__(/*! ../util/Util */ 4);\nconst Guild = __webpack_require__(/*! ../structures/Guild */ 22);\nconst User = __webpack_require__(/*! ../structures/User */ 11);\nconst CategoryChannel = __webpack_require__(/*! ../structures/CategoryChannel */ 61);\nconst DMChannel = __webpack_require__(/*! ../structures/DMChannel */ 63);\nconst Emoji = __webpack_require__(/*! ../structures/Emoji */ 17);\nconst TextChannel = __webpack_require__(/*! ../structures/TextChannel */ 64);\nconst VoiceChannel = __webpack_require__(/*! ../structures/VoiceChannel */ 65);\nconst GuildChannel = __webpack_require__(/*! ../structures/GuildChannel */ 19);\nconst GroupDMChannel = __webpack_require__(/*! ../structures/GroupDMChannel */ 39);\n\nclass ClientDataManager {\n  constructor(client) {\n    this.client = client;\n  }\n\n  get pastReady() {\n    return this.client.ws.connection.status === Constants.Status.READY;\n  }\n\n  newGuild(data) {\n    const already = this.client.guilds.has(data.id);\n    const guild = new Guild(this.client, data);\n    this.client.guilds.set(guild.id, guild);\n    if (this.pastReady && !already) {\n      /**\n       * Emitted whenever the client joins a guild.\n       * @event Client#guildCreate\n       * @param {Guild} guild The created guild\n       */\n      if (this.client.options.fetchAllMembers) {\n        guild.fetchMembers().then(() => { this.client.emit(Constants.Events.GUILD_CREATE, guild); });\n      } else {\n        this.client.emit(Constants.Events.GUILD_CREATE, guild);\n      }\n    }\n\n    return guild;\n  }\n\n  newUser(data) {\n    if (this.client.users.has(data.id)) return this.client.users.get(data.id);\n    const user = new User(this.client, data);\n    this.client.users.set(user.id, user);\n    return user;\n  }\n\n  newChannel(data, guild) {\n    const already = this.client.channels.has(data.id);\n    let channel;\n    if (data.type === Constants.ChannelTypes.DM) {\n      channel = new DMChannel(this.client, data);\n    } else if (data.type === Constants.ChannelTypes.GROUP_DM) {\n      channel = new GroupDMChannel(this.client, data);\n    } else {\n      guild = guild || this.client.guilds.get(data.guild_id);\n      if (guild) {\n        if (data.type === Constants.ChannelTypes.TEXT) {\n          channel = new TextChannel(guild, data);\n          guild.channels.set(channel.id, channel);\n        } else if (data.type === Constants.ChannelTypes.VOICE) {\n          channel = new VoiceChannel(guild, data);\n          guild.channels.set(channel.id, channel);\n        } else if (data.type === Constants.ChannelTypes.CATEGORY) {\n          channel = new CategoryChannel(guild, data);\n          guild.channels.set(channel.id, channel);\n        }\n      }\n    }\n\n    if (channel && !already) {\n      if (this.pastReady) this.client.emit(Constants.Events.CHANNEL_CREATE, channel);\n      this.client.channels.set(channel.id, channel);\n      return channel;\n    } else if (already) {\n      return channel;\n    }\n\n    return null;\n  }\n\n  newEmoji(data, guild) {\n    const already = guild.emojis.has(data.id);\n    if (data && !already) {\n      let emoji = new Emoji(guild, data);\n      this.client.emit(Constants.Events.GUILD_EMOJI_CREATE, emoji);\n      guild.emojis.set(emoji.id, emoji);\n      return emoji;\n    } else if (already) {\n      return guild.emojis.get(data.id);\n    }\n\n    return null;\n  }\n\n  killEmoji(emoji) {\n    if (!(emoji instanceof Emoji && emoji.guild)) return;\n    this.client.emit(Constants.Events.GUILD_EMOJI_DELETE, emoji);\n    emoji.guild.emojis.delete(emoji.id);\n  }\n\n  killGuild(guild) {\n    const already = this.client.guilds.has(guild.id);\n    this.client.guilds.delete(guild.id);\n    if (already && this.pastReady) this.client.emit(Constants.Events.GUILD_DELETE, guild);\n  }\n\n  killUser(user) {\n    this.client.users.delete(user.id);\n  }\n\n  killChannel(channel) {\n    this.client.channels.delete(channel.id);\n    if (channel instanceof GuildChannel) channel.guild.channels.delete(channel.id);\n  }\n\n  updateGuild(currentGuild, newData) {\n    const oldGuild = Util.cloneObject(currentGuild);\n    currentGuild.setup(newData);\n    if (this.pastReady) this.client.emit(Constants.Events.GUILD_UPDATE, oldGuild, currentGuild);\n  }\n\n  updateChannel(currentChannel, newData) {\n    currentChannel.setup(newData);\n  }\n\n  updateEmoji(currentEmoji, newData) {\n    const oldEmoji = Util.cloneObject(currentEmoji);\n    currentEmoji.setup(newData);\n    this.client.emit(Constants.Events.GUILD_EMOJI_UPDATE, oldEmoji, currentEmoji);\n    return currentEmoji;\n  }\n}\n\nmodule.exports = ClientDataManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9DbGllbnREYXRhTWFuYWdlci5qcz9iMGJiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vdXRpbC9VdGlsJyk7XG5jb25zdCBHdWlsZCA9IHJlcXVpcmUoJy4uL3N0cnVjdHVyZXMvR3VpbGQnKTtcbmNvbnN0IFVzZXIgPSByZXF1aXJlKCcuLi9zdHJ1Y3R1cmVzL1VzZXInKTtcbmNvbnN0IENhdGVnb3J5Q2hhbm5lbCA9IHJlcXVpcmUoJy4uL3N0cnVjdHVyZXMvQ2F0ZWdvcnlDaGFubmVsJyk7XG5jb25zdCBETUNoYW5uZWwgPSByZXF1aXJlKCcuLi9zdHJ1Y3R1cmVzL0RNQ2hhbm5lbCcpO1xuY29uc3QgRW1vamkgPSByZXF1aXJlKCcuLi9zdHJ1Y3R1cmVzL0Vtb2ppJyk7XG5jb25zdCBUZXh0Q2hhbm5lbCA9IHJlcXVpcmUoJy4uL3N0cnVjdHVyZXMvVGV4dENoYW5uZWwnKTtcbmNvbnN0IFZvaWNlQ2hhbm5lbCA9IHJlcXVpcmUoJy4uL3N0cnVjdHVyZXMvVm9pY2VDaGFubmVsJyk7XG5jb25zdCBHdWlsZENoYW5uZWwgPSByZXF1aXJlKCcuLi9zdHJ1Y3R1cmVzL0d1aWxkQ2hhbm5lbCcpO1xuY29uc3QgR3JvdXBETUNoYW5uZWwgPSByZXF1aXJlKCcuLi9zdHJ1Y3R1cmVzL0dyb3VwRE1DaGFubmVsJyk7XG5cbmNsYXNzIENsaWVudERhdGFNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cblxuICBnZXQgcGFzdFJlYWR5KCkge1xuICAgIHJldHVybiB0aGlzLmNsaWVudC53cy5jb25uZWN0aW9uLnN0YXR1cyA9PT0gQ29uc3RhbnRzLlN0YXR1cy5SRUFEWTtcbiAgfVxuXG4gIG5ld0d1aWxkKGRhdGEpIHtcbiAgICBjb25zdCBhbHJlYWR5ID0gdGhpcy5jbGllbnQuZ3VpbGRzLmhhcyhkYXRhLmlkKTtcbiAgICBjb25zdCBndWlsZCA9IG5ldyBHdWlsZCh0aGlzLmNsaWVudCwgZGF0YSk7XG4gICAgdGhpcy5jbGllbnQuZ3VpbGRzLnNldChndWlsZC5pZCwgZ3VpbGQpO1xuICAgIGlmICh0aGlzLnBhc3RSZWFkeSAmJiAhYWxyZWFkeSkge1xuICAgICAgLyoqXG4gICAgICAgKiBFbWl0dGVkIHdoZW5ldmVyIHRoZSBjbGllbnQgam9pbnMgYSBndWlsZC5cbiAgICAgICAqIEBldmVudCBDbGllbnQjZ3VpbGRDcmVhdGVcbiAgICAgICAqIEBwYXJhbSB7R3VpbGR9IGd1aWxkIFRoZSBjcmVhdGVkIGd1aWxkXG4gICAgICAgKi9cbiAgICAgIGlmICh0aGlzLmNsaWVudC5vcHRpb25zLmZldGNoQWxsTWVtYmVycykge1xuICAgICAgICBndWlsZC5mZXRjaE1lbWJlcnMoKS50aGVuKCgpID0+IHsgdGhpcy5jbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLkdVSUxEX0NSRUFURSwgZ3VpbGQpOyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5HVUlMRF9DUkVBVEUsIGd1aWxkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZ3VpbGQ7XG4gIH1cblxuICBuZXdVc2VyKGRhdGEpIHtcbiAgICBpZiAodGhpcy5jbGllbnQudXNlcnMuaGFzKGRhdGEuaWQpKSByZXR1cm4gdGhpcy5jbGllbnQudXNlcnMuZ2V0KGRhdGEuaWQpO1xuICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcih0aGlzLmNsaWVudCwgZGF0YSk7XG4gICAgdGhpcy5jbGllbnQudXNlcnMuc2V0KHVzZXIuaWQsIHVzZXIpO1xuICAgIHJldHVybiB1c2VyO1xuICB9XG5cbiAgbmV3Q2hhbm5lbChkYXRhLCBndWlsZCkge1xuICAgIGNvbnN0IGFscmVhZHkgPSB0aGlzLmNsaWVudC5jaGFubmVscy5oYXMoZGF0YS5pZCk7XG4gICAgbGV0IGNoYW5uZWw7XG4gICAgaWYgKGRhdGEudHlwZSA9PT0gQ29uc3RhbnRzLkNoYW5uZWxUeXBlcy5ETSkge1xuICAgICAgY2hhbm5lbCA9IG5ldyBETUNoYW5uZWwodGhpcy5jbGllbnQsIGRhdGEpO1xuICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSBDb25zdGFudHMuQ2hhbm5lbFR5cGVzLkdST1VQX0RNKSB7XG4gICAgICBjaGFubmVsID0gbmV3IEdyb3VwRE1DaGFubmVsKHRoaXMuY2xpZW50LCBkYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ3VpbGQgPSBndWlsZCB8fCB0aGlzLmNsaWVudC5ndWlsZHMuZ2V0KGRhdGEuZ3VpbGRfaWQpO1xuICAgICAgaWYgKGd1aWxkKSB7XG4gICAgICAgIGlmIChkYXRhLnR5cGUgPT09IENvbnN0YW50cy5DaGFubmVsVHlwZXMuVEVYVCkge1xuICAgICAgICAgIGNoYW5uZWwgPSBuZXcgVGV4dENoYW5uZWwoZ3VpbGQsIGRhdGEpO1xuICAgICAgICAgIGd1aWxkLmNoYW5uZWxzLnNldChjaGFubmVsLmlkLCBjaGFubmVsKTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT09IENvbnN0YW50cy5DaGFubmVsVHlwZXMuVk9JQ0UpIHtcbiAgICAgICAgICBjaGFubmVsID0gbmV3IFZvaWNlQ2hhbm5lbChndWlsZCwgZGF0YSk7XG4gICAgICAgICAgZ3VpbGQuY2hhbm5lbHMuc2V0KGNoYW5uZWwuaWQsIGNoYW5uZWwpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gQ29uc3RhbnRzLkNoYW5uZWxUeXBlcy5DQVRFR09SWSkge1xuICAgICAgICAgIGNoYW5uZWwgPSBuZXcgQ2F0ZWdvcnlDaGFubmVsKGd1aWxkLCBkYXRhKTtcbiAgICAgICAgICBndWlsZC5jaGFubmVscy5zZXQoY2hhbm5lbC5pZCwgY2hhbm5lbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2hhbm5lbCAmJiAhYWxyZWFkeSkge1xuICAgICAgaWYgKHRoaXMucGFzdFJlYWR5KSB0aGlzLmNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuQ0hBTk5FTF9DUkVBVEUsIGNoYW5uZWwpO1xuICAgICAgdGhpcy5jbGllbnQuY2hhbm5lbHMuc2V0KGNoYW5uZWwuaWQsIGNoYW5uZWwpO1xuICAgICAgcmV0dXJuIGNoYW5uZWw7XG4gICAgfSBlbHNlIGlmIChhbHJlYWR5KSB7XG4gICAgICByZXR1cm4gY2hhbm5lbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG5ld0Vtb2ppKGRhdGEsIGd1aWxkKSB7XG4gICAgY29uc3QgYWxyZWFkeSA9IGd1aWxkLmVtb2ppcy5oYXMoZGF0YS5pZCk7XG4gICAgaWYgKGRhdGEgJiYgIWFscmVhZHkpIHtcbiAgICAgIGxldCBlbW9qaSA9IG5ldyBFbW9qaShndWlsZCwgZGF0YSk7XG4gICAgICB0aGlzLmNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuR1VJTERfRU1PSklfQ1JFQVRFLCBlbW9qaSk7XG4gICAgICBndWlsZC5lbW9qaXMuc2V0KGVtb2ppLmlkLCBlbW9qaSk7XG4gICAgICByZXR1cm4gZW1vamk7XG4gICAgfSBlbHNlIGlmIChhbHJlYWR5KSB7XG4gICAgICByZXR1cm4gZ3VpbGQuZW1vamlzLmdldChkYXRhLmlkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGtpbGxFbW9qaShlbW9qaSkge1xuICAgIGlmICghKGVtb2ppIGluc3RhbmNlb2YgRW1vamkgJiYgZW1vamkuZ3VpbGQpKSByZXR1cm47XG4gICAgdGhpcy5jbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLkdVSUxEX0VNT0pJX0RFTEVURSwgZW1vamkpO1xuICAgIGVtb2ppLmd1aWxkLmVtb2ppcy5kZWxldGUoZW1vamkuaWQpO1xuICB9XG5cbiAga2lsbEd1aWxkKGd1aWxkKSB7XG4gICAgY29uc3QgYWxyZWFkeSA9IHRoaXMuY2xpZW50Lmd1aWxkcy5oYXMoZ3VpbGQuaWQpO1xuICAgIHRoaXMuY2xpZW50Lmd1aWxkcy5kZWxldGUoZ3VpbGQuaWQpO1xuICAgIGlmIChhbHJlYWR5ICYmIHRoaXMucGFzdFJlYWR5KSB0aGlzLmNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuR1VJTERfREVMRVRFLCBndWlsZCk7XG4gIH1cblxuICBraWxsVXNlcih1c2VyKSB7XG4gICAgdGhpcy5jbGllbnQudXNlcnMuZGVsZXRlKHVzZXIuaWQpO1xuICB9XG5cbiAga2lsbENoYW5uZWwoY2hhbm5lbCkge1xuICAgIHRoaXMuY2xpZW50LmNoYW5uZWxzLmRlbGV0ZShjaGFubmVsLmlkKTtcbiAgICBpZiAoY2hhbm5lbCBpbnN0YW5jZW9mIEd1aWxkQ2hhbm5lbCkgY2hhbm5lbC5ndWlsZC5jaGFubmVscy5kZWxldGUoY2hhbm5lbC5pZCk7XG4gIH1cblxuICB1cGRhdGVHdWlsZChjdXJyZW50R3VpbGQsIG5ld0RhdGEpIHtcbiAgICBjb25zdCBvbGRHdWlsZCA9IFV0aWwuY2xvbmVPYmplY3QoY3VycmVudEd1aWxkKTtcbiAgICBjdXJyZW50R3VpbGQuc2V0dXAobmV3RGF0YSk7XG4gICAgaWYgKHRoaXMucGFzdFJlYWR5KSB0aGlzLmNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuR1VJTERfVVBEQVRFLCBvbGRHdWlsZCwgY3VycmVudEd1aWxkKTtcbiAgfVxuXG4gIHVwZGF0ZUNoYW5uZWwoY3VycmVudENoYW5uZWwsIG5ld0RhdGEpIHtcbiAgICBjdXJyZW50Q2hhbm5lbC5zZXR1cChuZXdEYXRhKTtcbiAgfVxuXG4gIHVwZGF0ZUVtb2ppKGN1cnJlbnRFbW9qaSwgbmV3RGF0YSkge1xuICAgIGNvbnN0IG9sZEVtb2ppID0gVXRpbC5jbG9uZU9iamVjdChjdXJyZW50RW1vamkpO1xuICAgIGN1cnJlbnRFbW9qaS5zZXR1cChuZXdEYXRhKTtcbiAgICB0aGlzLmNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuR1VJTERfRU1PSklfVVBEQVRFLCBvbGRFbW9qaSwgY3VycmVudEVtb2ppKTtcbiAgICByZXR1cm4gY3VycmVudEVtb2ppO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2xpZW50RGF0YU1hbmFnZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvQ2xpZW50RGF0YU1hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDEwNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///105\n");

/***/ }),
/* 106 */
/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/client/ClientManager.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst WebSocketConnection = __webpack_require__(/*! ./websocket/WebSocketConnection */ 66);\n\n/**\n * Manages the state and background tasks of the client.\n * @private\n */\nclass ClientManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this Manager\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * The heartbeat interval\n     * @type {?number}\n     */\n    this.heartbeatInterval = null;\n  }\n\n  /**\n   * The status of the client\n   * @type {number}\n   */\n  get status() {\n    return this.connection ? this.connection.status : Constants.Status.IDLE;\n  }\n\n  /**\n   * Connects the client to the WebSocket.\n   * @param {string} token The authorization token\n   * @param {Function} resolve Function to run when connection is successful\n   * @param {Function} reject Function to run when connection fails\n   */\n  connectToWebSocket(token, resolve, reject) {\n    this.client.emit(Constants.Events.DEBUG, `Authenticated using token ${token}`);\n    this.client.token = token;\n    const timeout = this.client.setTimeout(() => reject(new Error(Constants.Errors.TOOK_TOO_LONG)), 1000 * 300);\n    this.client.rest.methods.getGateway().then(res => {\n      const protocolVersion = Constants.DefaultOptions.ws.version;\n      const gateway = `${res.url}/?v=${protocolVersion}&encoding=${WebSocketConnection.ENCODING}`;\n      this.client.emit(Constants.Events.DEBUG, `Using gateway ${gateway}`);\n      this.client.ws.connect(gateway);\n      this.client.ws.connection.once('close', event => {\n        if (event.code === 4004) reject(new Error(Constants.Errors.BAD_LOGIN));\n        if (event.code === 4010) reject(new Error(Constants.Errors.INVALID_SHARD));\n        if (event.code === 4011) reject(new Error(Constants.Errors.SHARDING_REQUIRED));\n      });\n      this.client.once(Constants.Events.READY, () => {\n        resolve(token);\n        this.client.clearTimeout(timeout);\n      });\n    }, reject);\n  }\n\n  destroy() {\n    this.client.ws.destroy();\n    this.client.rest.destroy();\n    if (!this.client.user) return Promise.resolve();\n    if (this.client.user.bot) {\n      this.client.token = null;\n      return Promise.resolve();\n    } else {\n      return this.client.rest.methods.logout().then(() => {\n        this.client.token = null;\n      });\n    }\n  }\n}\n\nmodule.exports = ClientManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9DbGllbnRNYW5hZ2VyLmpzPzZhNjYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vdXRpbC9Db25zdGFudHMnKTtcbmNvbnN0IFdlYlNvY2tldENvbm5lY3Rpb24gPSByZXF1aXJlKCcuL3dlYnNvY2tldC9XZWJTb2NrZXRDb25uZWN0aW9uJyk7XG5cbi8qKlxuICogTWFuYWdlcyB0aGUgc3RhdGUgYW5kIGJhY2tncm91bmQgdGFza3Mgb2YgdGhlIGNsaWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENsaWVudE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY2xpZW50IHRoYXQgaW5zdGFudGlhdGVkIHRoaXMgTWFuYWdlclxuICAgICAqIEB0eXBlIHtDbGllbnR9XG4gICAgICovXG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGVhcnRiZWF0IGludGVydmFsXG4gICAgICogQHR5cGUgez9udW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5oZWFydGJlYXRJbnRlcnZhbCA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogVGhlIHN0YXR1cyBvZiB0aGUgY2xpZW50XG4gICAqIEB0eXBlIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgc3RhdHVzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbm5lY3Rpb24gPyB0aGlzLmNvbm5lY3Rpb24uc3RhdHVzIDogQ29uc3RhbnRzLlN0YXR1cy5JRExFO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbm5lY3RzIHRoZSBjbGllbnQgdG8gdGhlIFdlYlNvY2tldC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuIFRoZSBhdXRob3JpemF0aW9uIHRva2VuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgRnVuY3Rpb24gdG8gcnVuIHdoZW4gY29ubmVjdGlvbiBpcyBzdWNjZXNzZnVsXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBGdW5jdGlvbiB0byBydW4gd2hlbiBjb25uZWN0aW9uIGZhaWxzXG4gICAqL1xuICBjb25uZWN0VG9XZWJTb2NrZXQodG9rZW4sIHJlc29sdmUsIHJlamVjdCkge1xuICAgIHRoaXMuY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5ERUJVRywgYEF1dGhlbnRpY2F0ZWQgdXNpbmcgdG9rZW4gJHt0b2tlbn1gKTtcbiAgICB0aGlzLmNsaWVudC50b2tlbiA9IHRva2VuO1xuICAgIGNvbnN0IHRpbWVvdXQgPSB0aGlzLmNsaWVudC5zZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoQ29uc3RhbnRzLkVycm9ycy5UT09LX1RPT19MT05HKSksIDEwMDAgKiAzMDApO1xuICAgIHRoaXMuY2xpZW50LnJlc3QubWV0aG9kcy5nZXRHYXRld2F5KCkudGhlbihyZXMgPT4ge1xuICAgICAgY29uc3QgcHJvdG9jb2xWZXJzaW9uID0gQ29uc3RhbnRzLkRlZmF1bHRPcHRpb25zLndzLnZlcnNpb247XG4gICAgICBjb25zdCBnYXRld2F5ID0gYCR7cmVzLnVybH0vP3Y9JHtwcm90b2NvbFZlcnNpb259JmVuY29kaW5nPSR7V2ViU29ja2V0Q29ubmVjdGlvbi5FTkNPRElOR31gO1xuICAgICAgdGhpcy5jbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLkRFQlVHLCBgVXNpbmcgZ2F0ZXdheSAke2dhdGV3YXl9YCk7XG4gICAgICB0aGlzLmNsaWVudC53cy5jb25uZWN0KGdhdGV3YXkpO1xuICAgICAgdGhpcy5jbGllbnQud3MuY29ubmVjdGlvbi5vbmNlKCdjbG9zZScsIGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09IDQwMDQpIHJlamVjdChuZXcgRXJyb3IoQ29uc3RhbnRzLkVycm9ycy5CQURfTE9HSU4pKTtcbiAgICAgICAgaWYgKGV2ZW50LmNvZGUgPT09IDQwMTApIHJlamVjdChuZXcgRXJyb3IoQ29uc3RhbnRzLkVycm9ycy5JTlZBTElEX1NIQVJEKSk7XG4gICAgICAgIGlmIChldmVudC5jb2RlID09PSA0MDExKSByZWplY3QobmV3IEVycm9yKENvbnN0YW50cy5FcnJvcnMuU0hBUkRJTkdfUkVRVUlSRUQpKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jbGllbnQub25jZShDb25zdGFudHMuRXZlbnRzLlJFQURZLCAoKSA9PiB7XG4gICAgICAgIHJlc29sdmUodG9rZW4pO1xuICAgICAgICB0aGlzLmNsaWVudC5jbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB9KTtcbiAgICB9LCByZWplY3QpO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmNsaWVudC53cy5kZXN0cm95KCk7XG4gICAgdGhpcy5jbGllbnQucmVzdC5kZXN0cm95KCk7XG4gICAgaWYgKCF0aGlzLmNsaWVudC51c2VyKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgaWYgKHRoaXMuY2xpZW50LnVzZXIuYm90KSB7XG4gICAgICB0aGlzLmNsaWVudC50b2tlbiA9IG51bGw7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNsaWVudC5yZXN0Lm1ldGhvZHMubG9nb3V0KCkudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuY2xpZW50LnRva2VuID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENsaWVudE1hbmFnZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvQ2xpZW50TWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMTA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///106\n");

/***/ }),
/* 107 */
/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/WebSocketPacketManager.js ***!
  \****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../../../util/Constants */ 0);\n\nconst BeforeReadyWhitelist = [\n  Constants.WSEvents.READY,\n  Constants.WSEvents.RESUMED,\n  Constants.WSEvents.GUILD_CREATE,\n  Constants.WSEvents.GUILD_DELETE,\n  Constants.WSEvents.GUILD_MEMBERS_CHUNK,\n  Constants.WSEvents.GUILD_MEMBER_ADD,\n  Constants.WSEvents.GUILD_MEMBER_REMOVE,\n];\n\nclass WebSocketPacketManager {\n  constructor(connection) {\n    this.ws = connection;\n    this.handlers = {};\n    this.queue = [];\n\n    this.register(Constants.WSEvents.READY, __webpack_require__(/*! ./handlers/Ready */ 108));\n    this.register(Constants.WSEvents.RESUMED, __webpack_require__(/*! ./handlers/Resumed */ 110));\n    this.register(Constants.WSEvents.GUILD_CREATE, __webpack_require__(/*! ./handlers/GuildCreate */ 111));\n    this.register(Constants.WSEvents.GUILD_DELETE, __webpack_require__(/*! ./handlers/GuildDelete */ 112));\n    this.register(Constants.WSEvents.GUILD_UPDATE, __webpack_require__(/*! ./handlers/GuildUpdate */ 113));\n    this.register(Constants.WSEvents.GUILD_BAN_ADD, __webpack_require__(/*! ./handlers/GuildBanAdd */ 114));\n    this.register(Constants.WSEvents.GUILD_BAN_REMOVE, __webpack_require__(/*! ./handlers/GuildBanRemove */ 115));\n    this.register(Constants.WSEvents.GUILD_MEMBER_ADD, __webpack_require__(/*! ./handlers/GuildMemberAdd */ 116));\n    this.register(Constants.WSEvents.GUILD_MEMBER_REMOVE, __webpack_require__(/*! ./handlers/GuildMemberRemove */ 117));\n    this.register(Constants.WSEvents.GUILD_MEMBER_UPDATE, __webpack_require__(/*! ./handlers/GuildMemberUpdate */ 118));\n    this.register(Constants.WSEvents.GUILD_ROLE_CREATE, __webpack_require__(/*! ./handlers/GuildRoleCreate */ 119));\n    this.register(Constants.WSEvents.GUILD_ROLE_DELETE, __webpack_require__(/*! ./handlers/GuildRoleDelete */ 120));\n    this.register(Constants.WSEvents.GUILD_ROLE_UPDATE, __webpack_require__(/*! ./handlers/GuildRoleUpdate */ 121));\n    this.register(Constants.WSEvents.GUILD_EMOJIS_UPDATE, __webpack_require__(/*! ./handlers/GuildEmojisUpdate */ 122));\n    this.register(Constants.WSEvents.GUILD_MEMBERS_CHUNK, __webpack_require__(/*! ./handlers/GuildMembersChunk */ 123));\n    this.register(Constants.WSEvents.CHANNEL_CREATE, __webpack_require__(/*! ./handlers/ChannelCreate */ 124));\n    this.register(Constants.WSEvents.CHANNEL_DELETE, __webpack_require__(/*! ./handlers/ChannelDelete */ 125));\n    this.register(Constants.WSEvents.CHANNEL_UPDATE, __webpack_require__(/*! ./handlers/ChannelUpdate */ 126));\n    this.register(Constants.WSEvents.CHANNEL_PINS_UPDATE, __webpack_require__(/*! ./handlers/ChannelPinsUpdate */ 127));\n    this.register(Constants.WSEvents.PRESENCE_UPDATE, __webpack_require__(/*! ./handlers/PresenceUpdate */ 128));\n    this.register(Constants.WSEvents.USER_UPDATE, __webpack_require__(/*! ./handlers/UserUpdate */ 129));\n    this.register(Constants.WSEvents.USER_NOTE_UPDATE, __webpack_require__(/*! ./handlers/UserNoteUpdate */ 130));\n    this.register(Constants.WSEvents.USER_SETTINGS_UPDATE, __webpack_require__(/*! ./handlers/UserSettingsUpdate */ 131));\n    this.register(Constants.WSEvents.USER_GUILD_SETTINGS_UPDATE, __webpack_require__(/*! ./handlers/UserGuildSettingsUpdate */ 132));\n    this.register(Constants.WSEvents.VOICE_STATE_UPDATE, __webpack_require__(/*! ./handlers/VoiceStateUpdate */ 133));\n    this.register(Constants.WSEvents.TYPING_START, __webpack_require__(/*! ./handlers/TypingStart */ 134));\n    this.register(Constants.WSEvents.MESSAGE_CREATE, __webpack_require__(/*! ./handlers/MessageCreate */ 135));\n    this.register(Constants.WSEvents.MESSAGE_DELETE, __webpack_require__(/*! ./handlers/MessageDelete */ 136));\n    this.register(Constants.WSEvents.MESSAGE_UPDATE, __webpack_require__(/*! ./handlers/MessageUpdate */ 137));\n    this.register(Constants.WSEvents.MESSAGE_DELETE_BULK, __webpack_require__(/*! ./handlers/MessageDeleteBulk */ 138));\n    this.register(Constants.WSEvents.VOICE_SERVER_UPDATE, __webpack_require__(/*! ./handlers/VoiceServerUpdate */ 139));\n    this.register(Constants.WSEvents.GUILD_SYNC, __webpack_require__(/*! ./handlers/GuildSync */ 140));\n    this.register(Constants.WSEvents.RELATIONSHIP_ADD, __webpack_require__(/*! ./handlers/RelationshipAdd */ 141));\n    this.register(Constants.WSEvents.RELATIONSHIP_REMOVE, __webpack_require__(/*! ./handlers/RelationshipRemove */ 142));\n    this.register(Constants.WSEvents.MESSAGE_REACTION_ADD, __webpack_require__(/*! ./handlers/MessageReactionAdd */ 143));\n    this.register(Constants.WSEvents.MESSAGE_REACTION_REMOVE, __webpack_require__(/*! ./handlers/MessageReactionRemove */ 144));\n    this.register(Constants.WSEvents.MESSAGE_REACTION_REMOVE_ALL, __webpack_require__(/*! ./handlers/MessageReactionRemoveAll */ 145));\n  }\n\n  get client() {\n    return this.ws.client;\n  }\n\n  register(event, Handler) {\n    this.handlers[event] = new Handler(this);\n  }\n\n  handleQueue() {\n    this.queue.forEach((element, index) => {\n      this.handle(this.queue[index], true);\n      this.queue.splice(index, 1);\n    });\n  }\n\n  handle(packet, queue = false) {\n    if (packet.op === Constants.OPCodes.HEARTBEAT_ACK) {\n      this.ws.client._pong(this.ws.client._pingTimestamp);\n      this.ws.lastHeartbeatAck = true;\n      this.ws.client.emit('debug', 'Heartbeat acknowledged');\n    } else if (packet.op === Constants.OPCodes.HEARTBEAT) {\n      this.client.ws.send({\n        op: Constants.OPCodes.HEARTBEAT,\n        d: this.client.ws.sequence,\n      });\n      this.ws.client.emit('debug', 'Received gateway heartbeat');\n    }\n\n    if (this.ws.status === Constants.Status.RECONNECTING) {\n      this.ws.reconnecting = false;\n      this.ws.checkIfReady();\n    }\n\n    this.ws.setSequence(packet.s);\n\n    if (this.ws.disabledEvents[packet.t] !== undefined) return false;\n\n    if (this.ws.status !== Constants.Status.READY) {\n      if (BeforeReadyWhitelist.indexOf(packet.t) === -1) {\n        this.queue.push(packet);\n        return false;\n      }\n    }\n\n    if (!queue && this.queue.length > 0) this.handleQueue();\n    if (this.handlers[packet.t]) return this.handlers[packet.t].handle(packet);\n    return false;\n  }\n}\n\nmodule.exports = WebSocketPacketManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///107\n");

/***/ }),
/* 108 */
/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/Ready.js ***!
  \********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nconst ClientUser = __webpack_require__(/*! ../../../../structures/ClientUser */ 67);\n\nclass ReadyHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n\n    client.ws.heartbeat();\n\n    data.user.user_settings = data.user_settings;\n    data.user.user_guild_settings = data.user_guild_settings;\n\n    const clientUser = new ClientUser(client, data.user);\n    client.user = clientUser;\n    client.readyAt = new Date();\n    client.users.set(clientUser.id, clientUser);\n\n    for (const guild of data.guilds) if (!client.guilds.has(guild.id)) client.dataManager.newGuild(guild);\n    for (const privateDM of data.private_channels) client.dataManager.newChannel(privateDM);\n\n    for (const relation of data.relationships) {\n      const user = client.dataManager.newUser(relation.user);\n      if (relation.type === 1) {\n        client.user.friends.set(user.id, user);\n      } else if (relation.type === 2) {\n        client.user.blocked.set(user.id, user);\n      }\n    }\n\n    data.presences = data.presences || [];\n    for (const presence of data.presences) {\n      client.dataManager.newUser(presence.user);\n      client._setPresence(presence.user.id, presence);\n    }\n\n    if (data.notes) {\n      for (const user in data.notes) {\n        let note = data.notes[user];\n        if (!note.length) note = null;\n\n        client.user.notes.set(user, note);\n      }\n    }\n\n    if (!client.user.bot && client.options.sync) client.setInterval(client.syncGuilds.bind(client), 30000);\n\n    if (!client.users.has('1')) {\n      client.dataManager.newUser({\n        id: '1',\n        username: 'Clyde',\n        discriminator: '0000',\n        avatar: 'https://discordapp.com/assets/f78426a064bc9dd24847519259bc42af.png',\n        bot: true,\n        status: 'online',\n        game: null,\n        verified: true,\n      });\n    }\n\n    const t = client.setTimeout(() => {\n      client.ws.connection.triggerReady();\n    }, 1200 * data.guilds.length);\n\n    client.setMaxListeners(data.guilds.length + 10);\n\n    client.once('ready', () => {\n      client.syncGuilds();\n      client.setMaxListeners(10);\n      client.clearTimeout(t);\n    });\n\n    const ws = this.packetManager.ws;\n\n    ws.sessionID = data.session_id;\n    ws._trace = data._trace;\n    client.emit('debug', `READY ${ws._trace.join(' -> ')} ${ws.sessionID}`);\n    ws.checkIfReady();\n  }\n}\n\nmodule.exports = ReadyHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9SZWFkeS5qcz8zYTNmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbmNvbnN0IENsaWVudFVzZXIgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9zdHJ1Y3R1cmVzL0NsaWVudFVzZXInKTtcblxuY2xhc3MgUmVhZHlIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuXG4gICAgY2xpZW50LndzLmhlYXJ0YmVhdCgpO1xuXG4gICAgZGF0YS51c2VyLnVzZXJfc2V0dGluZ3MgPSBkYXRhLnVzZXJfc2V0dGluZ3M7XG4gICAgZGF0YS51c2VyLnVzZXJfZ3VpbGRfc2V0dGluZ3MgPSBkYXRhLnVzZXJfZ3VpbGRfc2V0dGluZ3M7XG5cbiAgICBjb25zdCBjbGllbnRVc2VyID0gbmV3IENsaWVudFVzZXIoY2xpZW50LCBkYXRhLnVzZXIpO1xuICAgIGNsaWVudC51c2VyID0gY2xpZW50VXNlcjtcbiAgICBjbGllbnQucmVhZHlBdCA9IG5ldyBEYXRlKCk7XG4gICAgY2xpZW50LnVzZXJzLnNldChjbGllbnRVc2VyLmlkLCBjbGllbnRVc2VyKTtcblxuICAgIGZvciAoY29uc3QgZ3VpbGQgb2YgZGF0YS5ndWlsZHMpIGlmICghY2xpZW50Lmd1aWxkcy5oYXMoZ3VpbGQuaWQpKSBjbGllbnQuZGF0YU1hbmFnZXIubmV3R3VpbGQoZ3VpbGQpO1xuICAgIGZvciAoY29uc3QgcHJpdmF0ZURNIG9mIGRhdGEucHJpdmF0ZV9jaGFubmVscykgY2xpZW50LmRhdGFNYW5hZ2VyLm5ld0NoYW5uZWwocHJpdmF0ZURNKTtcblxuICAgIGZvciAoY29uc3QgcmVsYXRpb24gb2YgZGF0YS5yZWxhdGlvbnNoaXBzKSB7XG4gICAgICBjb25zdCB1c2VyID0gY2xpZW50LmRhdGFNYW5hZ2VyLm5ld1VzZXIocmVsYXRpb24udXNlcik7XG4gICAgICBpZiAocmVsYXRpb24udHlwZSA9PT0gMSkge1xuICAgICAgICBjbGllbnQudXNlci5mcmllbmRzLnNldCh1c2VyLmlkLCB1c2VyKTtcbiAgICAgIH0gZWxzZSBpZiAocmVsYXRpb24udHlwZSA9PT0gMikge1xuICAgICAgICBjbGllbnQudXNlci5ibG9ja2VkLnNldCh1c2VyLmlkLCB1c2VyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkYXRhLnByZXNlbmNlcyA9IGRhdGEucHJlc2VuY2VzIHx8IFtdO1xuICAgIGZvciAoY29uc3QgcHJlc2VuY2Ugb2YgZGF0YS5wcmVzZW5jZXMpIHtcbiAgICAgIGNsaWVudC5kYXRhTWFuYWdlci5uZXdVc2VyKHByZXNlbmNlLnVzZXIpO1xuICAgICAgY2xpZW50Ll9zZXRQcmVzZW5jZShwcmVzZW5jZS51c2VyLmlkLCBwcmVzZW5jZSk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEubm90ZXMpIHtcbiAgICAgIGZvciAoY29uc3QgdXNlciBpbiBkYXRhLm5vdGVzKSB7XG4gICAgICAgIGxldCBub3RlID0gZGF0YS5ub3Rlc1t1c2VyXTtcbiAgICAgICAgaWYgKCFub3RlLmxlbmd0aCkgbm90ZSA9IG51bGw7XG5cbiAgICAgICAgY2xpZW50LnVzZXIubm90ZXMuc2V0KHVzZXIsIG5vdGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghY2xpZW50LnVzZXIuYm90ICYmIGNsaWVudC5vcHRpb25zLnN5bmMpIGNsaWVudC5zZXRJbnRlcnZhbChjbGllbnQuc3luY0d1aWxkcy5iaW5kKGNsaWVudCksIDMwMDAwKTtcblxuICAgIGlmICghY2xpZW50LnVzZXJzLmhhcygnMScpKSB7XG4gICAgICBjbGllbnQuZGF0YU1hbmFnZXIubmV3VXNlcih7XG4gICAgICAgIGlkOiAnMScsXG4gICAgICAgIHVzZXJuYW1lOiAnQ2x5ZGUnLFxuICAgICAgICBkaXNjcmltaW5hdG9yOiAnMDAwMCcsXG4gICAgICAgIGF2YXRhcjogJ2h0dHBzOi8vZGlzY29yZGFwcC5jb20vYXNzZXRzL2Y3ODQyNmEwNjRiYzlkZDI0ODQ3NTE5MjU5YmM0MmFmLnBuZycsXG4gICAgICAgIGJvdDogdHJ1ZSxcbiAgICAgICAgc3RhdHVzOiAnb25saW5lJyxcbiAgICAgICAgZ2FtZTogbnVsbCxcbiAgICAgICAgdmVyaWZpZWQ6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB0ID0gY2xpZW50LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2xpZW50LndzLmNvbm5lY3Rpb24udHJpZ2dlclJlYWR5KCk7XG4gICAgfSwgMTIwMCAqIGRhdGEuZ3VpbGRzLmxlbmd0aCk7XG5cbiAgICBjbGllbnQuc2V0TWF4TGlzdGVuZXJzKGRhdGEuZ3VpbGRzLmxlbmd0aCArIDEwKTtcblxuICAgIGNsaWVudC5vbmNlKCdyZWFkeScsICgpID0+IHtcbiAgICAgIGNsaWVudC5zeW5jR3VpbGRzKCk7XG4gICAgICBjbGllbnQuc2V0TWF4TGlzdGVuZXJzKDEwKTtcbiAgICAgIGNsaWVudC5jbGVhclRpbWVvdXQodCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCB3cyA9IHRoaXMucGFja2V0TWFuYWdlci53cztcblxuICAgIHdzLnNlc3Npb25JRCA9IGRhdGEuc2Vzc2lvbl9pZDtcbiAgICB3cy5fdHJhY2UgPSBkYXRhLl90cmFjZTtcbiAgICBjbGllbnQuZW1pdCgnZGVidWcnLCBgUkVBRFkgJHt3cy5fdHJhY2Uuam9pbignIC0+ICcpfSAke3dzLnNlc3Npb25JRH1gKTtcbiAgICB3cy5jaGVja0lmUmVhZHkoKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWR5SGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9SZWFkeS5qc1xuLy8gbW9kdWxlIGlkID0gMTA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///108\n");

/***/ }),
/* 109 */
/*!*****************************************************************************!*\
  !*** ./node_modules/discord.js/src/structures/ClientUserChannelOverride.js ***!
  \*****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../util/Constants */ 0);\n\n/**\n * A wrapper around the ClientUser's channel overrides.\n */\nclass ClientUserChannelOverride {\n  constructor(data) {\n    this.patch(data);\n  }\n\n  /**\n   * Patch the data contained in this class with new partial data.\n   * @param {Object} data Data to patch this with\n   * @returns {void}\n   * @private\n   */\n  patch(data) {\n    for (const key of Object.keys(Constants.UserChannelOverrideMap)) {\n      const value = Constants.UserChannelOverrideMap[key];\n      if (!data.hasOwnProperty(key)) continue;\n      if (typeof value === 'function') {\n        this[value.name] = value(data[key]);\n      } else {\n        this[value] = data[key];\n      }\n    }\n  }\n}\n\nmodule.exports = ClientUserChannelOverride;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL3N0cnVjdHVyZXMvQ2xpZW50VXNlckNoYW5uZWxPdmVycmlkZS5qcz8wYjVkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbi8qKlxuICogQSB3cmFwcGVyIGFyb3VuZCB0aGUgQ2xpZW50VXNlcidzIGNoYW5uZWwgb3ZlcnJpZGVzLlxuICovXG5jbGFzcyBDbGllbnRVc2VyQ2hhbm5lbE92ZXJyaWRlIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMucGF0Y2goZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogUGF0Y2ggdGhlIGRhdGEgY29udGFpbmVkIGluIHRoaXMgY2xhc3Mgd2l0aCBuZXcgcGFydGlhbCBkYXRhLlxuICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSBEYXRhIHRvIHBhdGNoIHRoaXMgd2l0aFxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIHBhdGNoKGRhdGEpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhDb25zdGFudHMuVXNlckNoYW5uZWxPdmVycmlkZU1hcCkpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gQ29uc3RhbnRzLlVzZXJDaGFubmVsT3ZlcnJpZGVNYXBba2V5XTtcbiAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpc1t2YWx1ZS5uYW1lXSA9IHZhbHVlKGRhdGFba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW3ZhbHVlXSA9IGRhdGFba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnRVc2VyQ2hhbm5lbE92ZXJyaWRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvc3RydWN0dXJlcy9DbGllbnRVc2VyQ2hhbm5lbE92ZXJyaWRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///109\n");

/***/ }),
/* 110 */
/*!**********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/Resumed.js ***!
  \**********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\n\nclass ResumedHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const ws = client.ws.connection;\n\n    ws._trace = packet.d._trace;\n\n    ws.status = Constants.Status.READY;\n    this.packetManager.handleQueue();\n\n    const replayed = ws.sequence - ws.closeSequence;\n\n    ws.debug(`RESUMED ${ws._trace.join(' -> ')} | replayed ${replayed} events.`);\n    client.emit(Constants.Events.RESUME, replayed);\n    ws.heartbeat();\n  }\n}\n\n/**\n * Emitted whenever a WebSocket resumes.\n * @event Client#resume\n * @param {number} replayed The number of events that were replayed\n */\n\nmodule.exports = ResumedHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9SZXN1bWVkLmpzPzI1ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWJzdHJhY3RIYW5kbGVyID0gcmVxdWlyZSgnLi9BYnN0cmFjdEhhbmRsZXInKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbmNsYXNzIFJlc3VtZWRIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3Qgd3MgPSBjbGllbnQud3MuY29ubmVjdGlvbjtcblxuICAgIHdzLl90cmFjZSA9IHBhY2tldC5kLl90cmFjZTtcblxuICAgIHdzLnN0YXR1cyA9IENvbnN0YW50cy5TdGF0dXMuUkVBRFk7XG4gICAgdGhpcy5wYWNrZXRNYW5hZ2VyLmhhbmRsZVF1ZXVlKCk7XG5cbiAgICBjb25zdCByZXBsYXllZCA9IHdzLnNlcXVlbmNlIC0gd3MuY2xvc2VTZXF1ZW5jZTtcblxuICAgIHdzLmRlYnVnKGBSRVNVTUVEICR7d3MuX3RyYWNlLmpvaW4oJyAtPiAnKX0gfCByZXBsYXllZCAke3JlcGxheWVkfSBldmVudHMuYCk7XG4gICAgY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5SRVNVTUUsIHJlcGxheWVkKTtcbiAgICB3cy5oZWFydGJlYXQoKTtcbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbmV2ZXIgYSBXZWJTb2NrZXQgcmVzdW1lcy5cbiAqIEBldmVudCBDbGllbnQjcmVzdW1lXG4gKiBAcGFyYW0ge251bWJlcn0gcmVwbGF5ZWQgVGhlIG51bWJlciBvZiBldmVudHMgdGhhdCB3ZXJlIHJlcGxheWVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBSZXN1bWVkSGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9SZXN1bWVkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///110\n");

/***/ }),
/* 111 */
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildCreate.js ***!
  \**************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildCreateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n\n    const guild = client.guilds.get(data.id);\n    if (guild) {\n      if (!guild.available && !data.unavailable) {\n        // A newly available guild\n        guild.setup(data);\n        this.packetManager.ws.checkIfReady();\n      }\n    } else {\n      // A new guild\n      client.dataManager.newGuild(data);\n    }\n  }\n}\n\nmodule.exports = GuildCreateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTExLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZENyZWF0ZS5qcz80ZjRiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbmNsYXNzIEd1aWxkQ3JlYXRlSGFuZGxlciBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNvbnN0IGRhdGEgPSBwYWNrZXQuZDtcblxuICAgIGNvbnN0IGd1aWxkID0gY2xpZW50Lmd1aWxkcy5nZXQoZGF0YS5pZCk7XG4gICAgaWYgKGd1aWxkKSB7XG4gICAgICBpZiAoIWd1aWxkLmF2YWlsYWJsZSAmJiAhZGF0YS51bmF2YWlsYWJsZSkge1xuICAgICAgICAvLyBBIG5ld2x5IGF2YWlsYWJsZSBndWlsZFxuICAgICAgICBndWlsZC5zZXR1cChkYXRhKTtcbiAgICAgICAgdGhpcy5wYWNrZXRNYW5hZ2VyLndzLmNoZWNrSWZSZWFkeSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBIG5ldyBndWlsZFxuICAgICAgY2xpZW50LmRhdGFNYW5hZ2VyLm5ld0d1aWxkKGRhdGEpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEd1aWxkQ3JlYXRlSGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZENyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///111\n");

/***/ }),
/* 112 */
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildDelete.js ***!
  \**************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\n\nclass GuildDeleteHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    const response = client.actions.GuildDelete.handle(data);\n    if (response.guild) client.emit(Constants.Events.GUILD_DELETE, response.guild);\n  }\n}\n\n/**\n * Emitted whenever a guild is deleted/left.\n * @event Client#guildDelete\n * @param {Guild} guild The guild that was deleted\n */\n\nmodule.exports = GuildDeleteHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZERlbGV0ZS5qcz84ZTBmIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsL0NvbnN0YW50cycpO1xuXG5jbGFzcyBHdWlsZERlbGV0ZUhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBjbGllbnQuYWN0aW9ucy5HdWlsZERlbGV0ZS5oYW5kbGUoZGF0YSk7XG4gICAgaWYgKHJlc3BvbnNlLmd1aWxkKSBjbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLkdVSUxEX0RFTEVURSwgcmVzcG9uc2UuZ3VpbGQpO1xuICB9XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuZXZlciBhIGd1aWxkIGlzIGRlbGV0ZWQvbGVmdC5cbiAqIEBldmVudCBDbGllbnQjZ3VpbGREZWxldGVcbiAqIEBwYXJhbSB7R3VpbGR9IGd1aWxkIFRoZSBndWlsZCB0aGF0IHdhcyBkZWxldGVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZERlbGV0ZUhhbmRsZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvd2Vic29ja2V0L3BhY2tldHMvaGFuZGxlcnMvR3VpbGREZWxldGUuanNcbi8vIG1vZHVsZSBpZCA9IDExMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///112\n");

/***/ }),
/* 113 */
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildUpdate.js ***!
  \**************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.GuildUpdate.handle(data);\n  }\n}\n\nmodule.exports = GuildUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZFVwZGF0ZS5qcz8zNmY1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbmNsYXNzIEd1aWxkVXBkYXRlSGFuZGxlciBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNvbnN0IGRhdGEgPSBwYWNrZXQuZDtcbiAgICBjbGllbnQuYWN0aW9ucy5HdWlsZFVwZGF0ZS5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZFVwZGF0ZUhhbmRsZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvd2Vic29ja2V0L3BhY2tldHMvaGFuZGxlcnMvR3VpbGRVcGRhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDExM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///113\n");

/***/ }),
/* 114 */
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildBanAdd.js ***!
  \**************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("// ##untested handler##\n\nconst AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\n\nclass GuildBanAddHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    const guild = client.guilds.get(data.guild_id);\n    const user = client.users.get(data.user.id);\n    if (guild && user) client.emit(Constants.Events.GUILD_BAN_ADD, guild, user);\n  }\n}\n\n/**\n * Emitted whenever a member is banned from a guild.\n * @event Client#guildBanAdd\n * @param {Guild} guild The guild that the ban occurred in\n * @param {User} user The user that was banned\n */\n\nmodule.exports = GuildBanAddHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZEJhbkFkZC5qcz85NTcxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICMjdW50ZXN0ZWQgaGFuZGxlciMjXG5cbmNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsL0NvbnN0YW50cycpO1xuXG5jbGFzcyBHdWlsZEJhbkFkZEhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY29uc3QgZ3VpbGQgPSBjbGllbnQuZ3VpbGRzLmdldChkYXRhLmd1aWxkX2lkKTtcbiAgICBjb25zdCB1c2VyID0gY2xpZW50LnVzZXJzLmdldChkYXRhLnVzZXIuaWQpO1xuICAgIGlmIChndWlsZCAmJiB1c2VyKSBjbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLkdVSUxEX0JBTl9BREQsIGd1aWxkLCB1c2VyKTtcbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbmV2ZXIgYSBtZW1iZXIgaXMgYmFubmVkIGZyb20gYSBndWlsZC5cbiAqIEBldmVudCBDbGllbnQjZ3VpbGRCYW5BZGRcbiAqIEBwYXJhbSB7R3VpbGR9IGd1aWxkIFRoZSBndWlsZCB0aGF0IHRoZSBiYW4gb2NjdXJyZWQgaW5cbiAqIEBwYXJhbSB7VXNlcn0gdXNlciBUaGUgdXNlciB0aGF0IHdhcyBiYW5uZWRcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IEd1aWxkQmFuQWRkSGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZEJhbkFkZC5qc1xuLy8gbW9kdWxlIGlkID0gMTE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///114\n");

/***/ }),
/* 115 */
/*!*****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildBanRemove.js ***!
  \*****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("// ##untested handler##\n\nconst AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildBanRemoveHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.GuildBanRemove.handle(data);\n  }\n}\n\n/**\n * Emitted whenever a member is unbanned from a guild.\n * @event Client#guildBanRemove\n * @param {Guild} guild The guild that the unban occurred in\n * @param {User} user The user that was unbanned\n */\n\nmodule.exports = GuildBanRemoveHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZEJhblJlbW92ZS5qcz9kOTRiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICMjdW50ZXN0ZWQgaGFuZGxlciMjXG5cbmNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbmNsYXNzIEd1aWxkQmFuUmVtb3ZlSGFuZGxlciBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNvbnN0IGRhdGEgPSBwYWNrZXQuZDtcbiAgICBjbGllbnQuYWN0aW9ucy5HdWlsZEJhblJlbW92ZS5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgbWVtYmVyIGlzIHVuYmFubmVkIGZyb20gYSBndWlsZC5cbiAqIEBldmVudCBDbGllbnQjZ3VpbGRCYW5SZW1vdmVcbiAqIEBwYXJhbSB7R3VpbGR9IGd1aWxkIFRoZSBndWlsZCB0aGF0IHRoZSB1bmJhbiBvY2N1cnJlZCBpblxuICogQHBhcmFtIHtVc2VyfSB1c2VyIFRoZSB1c2VyIHRoYXQgd2FzIHVuYmFubmVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZEJhblJlbW92ZUhhbmRsZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvd2Vic29ja2V0L3BhY2tldHMvaGFuZGxlcnMvR3VpbGRCYW5SZW1vdmUuanNcbi8vIG1vZHVsZSBpZCA9IDExNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///115\n");

/***/ }),
/* 116 */
/*!*****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberAdd.js ***!
  \*****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("// ##untested handler##\n\nconst AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildMemberAddHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    const guild = client.guilds.get(data.guild_id);\n    if (guild) {\n      guild.memberCount++;\n      guild._addMember(data);\n    }\n  }\n}\n\nmodule.exports = GuildMemberAddHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZE1lbWJlckFkZC5qcz80ODQ2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vICMjdW50ZXN0ZWQgaGFuZGxlciMjXG5cbmNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbmNsYXNzIEd1aWxkTWVtYmVyQWRkSGFuZGxlciBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNvbnN0IGRhdGEgPSBwYWNrZXQuZDtcbiAgICBjb25zdCBndWlsZCA9IGNsaWVudC5ndWlsZHMuZ2V0KGRhdGEuZ3VpbGRfaWQpO1xuICAgIGlmIChndWlsZCkge1xuICAgICAgZ3VpbGQubWVtYmVyQ291bnQrKztcbiAgICAgIGd1aWxkLl9hZGRNZW1iZXIoZGF0YSk7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR3VpbGRNZW1iZXJBZGRIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL0d1aWxkTWVtYmVyQWRkLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///116\n");

/***/ }),
/* 117 */
/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberRemove.js ***!
  \********************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("// ##untested handler##\n\nconst AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildMemberRemoveHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.GuildMemberRemove.handle(data);\n  }\n}\n\nmodule.exports = GuildMemberRemoveHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZE1lbWJlclJlbW92ZS5qcz9kZDk1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vICMjdW50ZXN0ZWQgaGFuZGxlciMjXG5cbmNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbmNsYXNzIEd1aWxkTWVtYmVyUmVtb3ZlSGFuZGxlciBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNvbnN0IGRhdGEgPSBwYWNrZXQuZDtcbiAgICBjbGllbnQuYWN0aW9ucy5HdWlsZE1lbWJlclJlbW92ZS5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZE1lbWJlclJlbW92ZUhhbmRsZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvd2Vic29ja2V0L3BhY2tldHMvaGFuZGxlcnMvR3VpbGRNZW1iZXJSZW1vdmUuanNcbi8vIG1vZHVsZSBpZCA9IDExN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///117\n");

/***/ }),
/* 118 */
/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMemberUpdate.js ***!
  \********************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("// ##untested handler##\n\nconst AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildMemberUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n\n    const guild = client.guilds.get(data.guild_id);\n    if (guild) {\n      const member = guild.members.get(data.user.id);\n      if (member) guild._updateMember(member, data);\n    }\n  }\n}\n\nmodule.exports = GuildMemberUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZE1lbWJlclVwZGF0ZS5qcz9hNzE1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vICMjdW50ZXN0ZWQgaGFuZGxlciMjXG5cbmNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbmNsYXNzIEd1aWxkTWVtYmVyVXBkYXRlSGFuZGxlciBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNvbnN0IGRhdGEgPSBwYWNrZXQuZDtcblxuICAgIGNvbnN0IGd1aWxkID0gY2xpZW50Lmd1aWxkcy5nZXQoZGF0YS5ndWlsZF9pZCk7XG4gICAgaWYgKGd1aWxkKSB7XG4gICAgICBjb25zdCBtZW1iZXIgPSBndWlsZC5tZW1iZXJzLmdldChkYXRhLnVzZXIuaWQpO1xuICAgICAgaWYgKG1lbWJlcikgZ3VpbGQuX3VwZGF0ZU1lbWJlcihtZW1iZXIsIGRhdGEpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEd1aWxkTWVtYmVyVXBkYXRlSGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZE1lbWJlclVwZGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///118\n");

/***/ }),
/* 119 */
/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleCreate.js ***!
  \******************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildRoleCreateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.GuildRoleCreate.handle(data);\n  }\n}\n\nmodule.exports = GuildRoleCreateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZFJvbGVDcmVhdGUuanM/OGYzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBYnN0cmFjdEhhbmRsZXIgPSByZXF1aXJlKCcuL0Fic3RyYWN0SGFuZGxlcicpO1xuXG5jbGFzcyBHdWlsZFJvbGVDcmVhdGVIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuICAgIGNsaWVudC5hY3Rpb25zLkd1aWxkUm9sZUNyZWF0ZS5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZFJvbGVDcmVhdGVIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL0d1aWxkUm9sZUNyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTE5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///119\n");

/***/ }),
/* 120 */
/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleDelete.js ***!
  \******************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildRoleDeleteHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.GuildRoleDelete.handle(data);\n  }\n}\n\nmodule.exports = GuildRoleDeleteHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZFJvbGVEZWxldGUuanM/YTk5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBYnN0cmFjdEhhbmRsZXIgPSByZXF1aXJlKCcuL0Fic3RyYWN0SGFuZGxlcicpO1xuXG5jbGFzcyBHdWlsZFJvbGVEZWxldGVIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuICAgIGNsaWVudC5hY3Rpb25zLkd1aWxkUm9sZURlbGV0ZS5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZFJvbGVEZWxldGVIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL0d1aWxkUm9sZURlbGV0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///120\n");

/***/ }),
/* 121 */
/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildRoleUpdate.js ***!
  \******************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildRoleUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.GuildRoleUpdate.handle(data);\n  }\n}\n\nmodule.exports = GuildRoleUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZFJvbGVVcGRhdGUuanM/ODkzYyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBYnN0cmFjdEhhbmRsZXIgPSByZXF1aXJlKCcuL0Fic3RyYWN0SGFuZGxlcicpO1xuXG5jbGFzcyBHdWlsZFJvbGVVcGRhdGVIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuICAgIGNsaWVudC5hY3Rpb25zLkd1aWxkUm9sZVVwZGF0ZS5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZFJvbGVVcGRhdGVIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL0d1aWxkUm9sZVVwZGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///121\n");

/***/ }),
/* 122 */
/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildEmojisUpdate.js ***!
  \********************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildEmojisUpdate extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.GuildEmojisUpdate.handle(data);\n  }\n}\n\nmodule.exports = GuildEmojisUpdate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZEVtb2ppc1VwZGF0ZS5qcz8xMTBkIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbmNsYXNzIEd1aWxkRW1vamlzVXBkYXRlIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuICAgIGNsaWVudC5hY3Rpb25zLkd1aWxkRW1vamlzVXBkYXRlLmhhbmRsZShkYXRhKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEd1aWxkRW1vamlzVXBkYXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL0d1aWxkRW1vamlzVXBkYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///122\n");

/***/ }),
/* 123 */
/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildMembersChunk.js ***!
  \********************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\n// Uncomment in v12\n// const Collection = require('../../../../util/Collection');\n\nclass GuildMembersChunkHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    const guild = client.guilds.get(data.guild_id);\n    if (!guild) return;\n\n    // Uncomment in v12\n    // const members = new Collection();\n    //\n    // for (const member of data.members) members.set(member.id, guild._addMember(member, false));\n\n    const members = data.members.map(member => guild._addMember(member, false));\n\n    client.emit(Constants.Events.GUILD_MEMBERS_CHUNK, members, guild);\n\n    client.ws.lastHeartbeatAck = true;\n  }\n}\n\n/**\n * Emitted whenever a chunk of guild members is received (all members come from the same guild).\n * @event Client#guildMembersChunk\n * @param {GuildMember[]} members The members in the chunk\n * @param {Guild} guild The guild related to the member chunk\n */\n\nmodule.exports = GuildMembersChunkHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZE1lbWJlcnNDaHVuay5qcz9lMGJjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsL0NvbnN0YW50cycpO1xuLy8gVW5jb21tZW50IGluIHYxMlxuLy8gY29uc3QgQ29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3V0aWwvQ29sbGVjdGlvbicpO1xuXG5jbGFzcyBHdWlsZE1lbWJlcnNDaHVua0hhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY29uc3QgZ3VpbGQgPSBjbGllbnQuZ3VpbGRzLmdldChkYXRhLmd1aWxkX2lkKTtcbiAgICBpZiAoIWd1aWxkKSByZXR1cm47XG5cbiAgICAvLyBVbmNvbW1lbnQgaW4gdjEyXG4gICAgLy8gY29uc3QgbWVtYmVycyA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgLy9cbiAgICAvLyBmb3IgKGNvbnN0IG1lbWJlciBvZiBkYXRhLm1lbWJlcnMpIG1lbWJlcnMuc2V0KG1lbWJlci5pZCwgZ3VpbGQuX2FkZE1lbWJlcihtZW1iZXIsIGZhbHNlKSk7XG5cbiAgICBjb25zdCBtZW1iZXJzID0gZGF0YS5tZW1iZXJzLm1hcChtZW1iZXIgPT4gZ3VpbGQuX2FkZE1lbWJlcihtZW1iZXIsIGZhbHNlKSk7XG5cbiAgICBjbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLkdVSUxEX01FTUJFUlNfQ0hVTkssIG1lbWJlcnMsIGd1aWxkKTtcblxuICAgIGNsaWVudC53cy5sYXN0SGVhcnRiZWF0QWNrID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbmV2ZXIgYSBjaHVuayBvZiBndWlsZCBtZW1iZXJzIGlzIHJlY2VpdmVkIChhbGwgbWVtYmVycyBjb21lIGZyb20gdGhlIHNhbWUgZ3VpbGQpLlxuICogQGV2ZW50IENsaWVudCNndWlsZE1lbWJlcnNDaHVua1xuICogQHBhcmFtIHtHdWlsZE1lbWJlcltdfSBtZW1iZXJzIFRoZSBtZW1iZXJzIGluIHRoZSBjaHVua1xuICogQHBhcmFtIHtHdWlsZH0gZ3VpbGQgVGhlIGd1aWxkIHJlbGF0ZWQgdG8gdGhlIG1lbWJlciBjaHVua1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gR3VpbGRNZW1iZXJzQ2h1bmtIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL0d1aWxkTWVtYmVyc0NodW5rLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///123\n");

/***/ }),
/* 124 */
/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelCreate.js ***!
  \****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass ChannelCreateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.ChannelCreate.handle(data);\n  }\n}\n\n/**\n * Emitted whenever a channel is created.\n * @event Client#channelCreate\n * @param {Channel} channel The channel that was created\n */\n\nmodule.exports = ChannelCreateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9DaGFubmVsQ3JlYXRlLmpzPzRiNWQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWJzdHJhY3RIYW5kbGVyID0gcmVxdWlyZSgnLi9BYnN0cmFjdEhhbmRsZXInKTtcblxuY2xhc3MgQ2hhbm5lbENyZWF0ZUhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY2xpZW50LmFjdGlvbnMuQ2hhbm5lbENyZWF0ZS5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgY2hhbm5lbCBpcyBjcmVhdGVkLlxuICogQGV2ZW50IENsaWVudCNjaGFubmVsQ3JlYXRlXG4gKiBAcGFyYW0ge0NoYW5uZWx9IGNoYW5uZWwgVGhlIGNoYW5uZWwgdGhhdCB3YXMgY3JlYXRlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhbm5lbENyZWF0ZUhhbmRsZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvd2Vic29ja2V0L3BhY2tldHMvaGFuZGxlcnMvQ2hhbm5lbENyZWF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///124\n");

/***/ }),
/* 125 */
/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelDelete.js ***!
  \****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\n\nclass ChannelDeleteHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    const response = client.actions.ChannelDelete.handle(data);\n    if (response.channel) client.emit(Constants.Events.CHANNEL_DELETE, response.channel);\n  }\n}\n\n/**\n * Emitted whenever a channel is deleted.\n * @event Client#channelDelete\n * @param {Channel} channel The channel that was deleted\n */\n\nmodule.exports = ChannelDeleteHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9DaGFubmVsRGVsZXRlLmpzP2U2OTciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWJzdHJhY3RIYW5kbGVyID0gcmVxdWlyZSgnLi9BYnN0cmFjdEhhbmRsZXInKTtcblxuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbC9Db25zdGFudHMnKTtcblxuY2xhc3MgQ2hhbm5lbERlbGV0ZUhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBjbGllbnQuYWN0aW9ucy5DaGFubmVsRGVsZXRlLmhhbmRsZShkYXRhKTtcbiAgICBpZiAocmVzcG9uc2UuY2hhbm5lbCkgY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5DSEFOTkVMX0RFTEVURSwgcmVzcG9uc2UuY2hhbm5lbCk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgY2hhbm5lbCBpcyBkZWxldGVkLlxuICogQGV2ZW50IENsaWVudCNjaGFubmVsRGVsZXRlXG4gKiBAcGFyYW0ge0NoYW5uZWx9IGNoYW5uZWwgVGhlIGNoYW5uZWwgdGhhdCB3YXMgZGVsZXRlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhbm5lbERlbGV0ZUhhbmRsZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvd2Vic29ja2V0L3BhY2tldHMvaGFuZGxlcnMvQ2hhbm5lbERlbGV0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///125\n");

/***/ }),
/* 126 */
/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelUpdate.js ***!
  \****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass ChannelUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.ChannelUpdate.handle(data);\n  }\n}\n\nmodule.exports = ChannelUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9DaGFubmVsVXBkYXRlLmpzP2IzMmYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWJzdHJhY3RIYW5kbGVyID0gcmVxdWlyZSgnLi9BYnN0cmFjdEhhbmRsZXInKTtcblxuY2xhc3MgQ2hhbm5lbFVwZGF0ZUhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY2xpZW50LmFjdGlvbnMuQ2hhbm5lbFVwZGF0ZS5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaGFubmVsVXBkYXRlSGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9DaGFubmVsVXBkYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///126\n");

/***/ }),
/* 127 */
/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/ChannelPinsUpdate.js ***!
  \********************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\n\n/*\n{ t: 'CHANNEL_PINS_UPDATE',\n  s: 666,\n  op: 0,\n  d:\n   { last_pin_timestamp: '2016-08-28T17:37:13.171774+00:00',\n     channel_id: '314866471639044027' } }\n*/\n\nclass ChannelPinsUpdate extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    const channel = client.channels.get(data.channel_id);\n    const time = new Date(data.last_pin_timestamp);\n    if (channel && time) client.emit(Constants.Events.CHANNEL_PINS_UPDATE, channel, time);\n  }\n}\n\n/**\n * Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event, not much information\n * can be provided easily here - you need to manually check the pins yourself.\n * @event Client#channelPinsUpdate\n * @param {Channel} channel The channel that the pins update occured in\n * @param {Date} time The time of the pins update\n */\n\nmodule.exports = ChannelPinsUpdate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9DaGFubmVsUGluc1VwZGF0ZS5qcz8wZGYxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsL0NvbnN0YW50cycpO1xuXG4vKlxueyB0OiAnQ0hBTk5FTF9QSU5TX1VQREFURScsXG4gIHM6IDY2NixcbiAgb3A6IDAsXG4gIGQ6XG4gICB7IGxhc3RfcGluX3RpbWVzdGFtcDogJzIwMTYtMDgtMjhUMTc6Mzc6MTMuMTcxNzc0KzAwOjAwJyxcbiAgICAgY2hhbm5lbF9pZDogJzMxNDg2NjQ3MTYzOTA0NDAyNycgfSB9XG4qL1xuXG5jbGFzcyBDaGFubmVsUGluc1VwZGF0ZSBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNvbnN0IGRhdGEgPSBwYWNrZXQuZDtcbiAgICBjb25zdCBjaGFubmVsID0gY2xpZW50LmNoYW5uZWxzLmdldChkYXRhLmNoYW5uZWxfaWQpO1xuICAgIGNvbnN0IHRpbWUgPSBuZXcgRGF0ZShkYXRhLmxhc3RfcGluX3RpbWVzdGFtcCk7XG4gICAgaWYgKGNoYW5uZWwgJiYgdGltZSkgY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5DSEFOTkVMX1BJTlNfVVBEQVRFLCBjaGFubmVsLCB0aW1lKTtcbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbmV2ZXIgdGhlIHBpbnMgb2YgYSBjaGFubmVsIGFyZSB1cGRhdGVkLiBEdWUgdG8gdGhlIG5hdHVyZSBvZiB0aGUgV2ViU29ja2V0IGV2ZW50LCBub3QgbXVjaCBpbmZvcm1hdGlvblxuICogY2FuIGJlIHByb3ZpZGVkIGVhc2lseSBoZXJlIC0geW91IG5lZWQgdG8gbWFudWFsbHkgY2hlY2sgdGhlIHBpbnMgeW91cnNlbGYuXG4gKiBAZXZlbnQgQ2xpZW50I2NoYW5uZWxQaW5zVXBkYXRlXG4gKiBAcGFyYW0ge0NoYW5uZWx9IGNoYW5uZWwgVGhlIGNoYW5uZWwgdGhhdCB0aGUgcGlucyB1cGRhdGUgb2NjdXJlZCBpblxuICogQHBhcmFtIHtEYXRlfSB0aW1lIFRoZSB0aW1lIG9mIHRoZSBwaW5zIHVwZGF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhbm5lbFBpbnNVcGRhdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvd2Vic29ja2V0L3BhY2tldHMvaGFuZGxlcnMvQ2hhbm5lbFBpbnNVcGRhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDEyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///127\n");

/***/ }),
/* 128 */
/*!*****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/PresenceUpdate.js ***!
  \*****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\nconst Util = __webpack_require__(/*! ../../../../util/Util */ 4);\n\nclass PresenceUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    let user = client.users.get(data.user.id);\n    const guild = client.guilds.get(data.guild_id);\n\n    // Step 1\n    if (!user) {\n      if (data.user.username) {\n        user = client.dataManager.newUser(data.user);\n      } else {\n        return;\n      }\n    }\n\n    const oldUser = Util.cloneObject(user);\n    user.patch(data.user);\n    if (!user.equals(oldUser)) {\n      client.emit(Constants.Events.USER_UPDATE, oldUser, user);\n    }\n\n    if (guild) {\n      let member = guild.members.get(user.id);\n      if (!member && data.status !== 'offline') {\n        member = guild._addMember({\n          user,\n          roles: data.roles,\n          deaf: false,\n          mute: false,\n        }, false);\n        client.emit(Constants.Events.GUILD_MEMBER_AVAILABLE, member);\n      }\n      if (member) {\n        if (client.listenerCount(Constants.Events.PRESENCE_UPDATE) === 0) {\n          guild._setPresence(user.id, data);\n          return;\n        }\n        const oldMember = Util.cloneObject(member);\n        if (member.presence) {\n          oldMember.frozenPresence = Util.cloneObject(member.presence);\n        }\n        guild._setPresence(user.id, data);\n        client.emit(Constants.Events.PRESENCE_UPDATE, oldMember, member);\n      } else {\n        guild._setPresence(user.id, data);\n      }\n    }\n  }\n}\n\n/**\n * Emitted whenever a guild member's presence changes, or they change one of their details.\n * @event Client#presenceUpdate\n * @param {GuildMember} oldMember The member before the presence update\n * @param {GuildMember} newMember The member after the presence update\n */\n\n/**\n * Emitted whenever a user's details (e.g. username) are changed.\n * @event Client#userUpdate\n * @param {User} oldUser The user before the update\n * @param {User} newUser The user after the update\n */\n\n/**\n * Emitted whenever a member becomes available in a large guild.\n * @event Client#guildMemberAvailable\n * @param {GuildMember} member The member that became available\n */\n\nmodule.exports = PresenceUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9QcmVzZW5jZVVwZGF0ZS5qcz9mYWE4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsL0NvbnN0YW50cycpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3V0aWwvVXRpbCcpO1xuXG5jbGFzcyBQcmVzZW5jZVVwZGF0ZUhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgbGV0IHVzZXIgPSBjbGllbnQudXNlcnMuZ2V0KGRhdGEudXNlci5pZCk7XG4gICAgY29uc3QgZ3VpbGQgPSBjbGllbnQuZ3VpbGRzLmdldChkYXRhLmd1aWxkX2lkKTtcblxuICAgIC8vIFN0ZXAgMVxuICAgIGlmICghdXNlcikge1xuICAgICAgaWYgKGRhdGEudXNlci51c2VybmFtZSkge1xuICAgICAgICB1c2VyID0gY2xpZW50LmRhdGFNYW5hZ2VyLm5ld1VzZXIoZGF0YS51c2VyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBvbGRVc2VyID0gVXRpbC5jbG9uZU9iamVjdCh1c2VyKTtcbiAgICB1c2VyLnBhdGNoKGRhdGEudXNlcik7XG4gICAgaWYgKCF1c2VyLmVxdWFscyhvbGRVc2VyKSkge1xuICAgICAgY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5VU0VSX1VQREFURSwgb2xkVXNlciwgdXNlcik7XG4gICAgfVxuXG4gICAgaWYgKGd1aWxkKSB7XG4gICAgICBsZXQgbWVtYmVyID0gZ3VpbGQubWVtYmVycy5nZXQodXNlci5pZCk7XG4gICAgICBpZiAoIW1lbWJlciAmJiBkYXRhLnN0YXR1cyAhPT0gJ29mZmxpbmUnKSB7XG4gICAgICAgIG1lbWJlciA9IGd1aWxkLl9hZGRNZW1iZXIoe1xuICAgICAgICAgIHVzZXIsXG4gICAgICAgICAgcm9sZXM6IGRhdGEucm9sZXMsXG4gICAgICAgICAgZGVhZjogZmFsc2UsXG4gICAgICAgICAgbXV0ZTogZmFsc2UsXG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5HVUlMRF9NRU1CRVJfQVZBSUxBQkxFLCBtZW1iZXIpO1xuICAgICAgfVxuICAgICAgaWYgKG1lbWJlcikge1xuICAgICAgICBpZiAoY2xpZW50Lmxpc3RlbmVyQ291bnQoQ29uc3RhbnRzLkV2ZW50cy5QUkVTRU5DRV9VUERBVEUpID09PSAwKSB7XG4gICAgICAgICAgZ3VpbGQuX3NldFByZXNlbmNlKHVzZXIuaWQsIGRhdGEpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvbGRNZW1iZXIgPSBVdGlsLmNsb25lT2JqZWN0KG1lbWJlcik7XG4gICAgICAgIGlmIChtZW1iZXIucHJlc2VuY2UpIHtcbiAgICAgICAgICBvbGRNZW1iZXIuZnJvemVuUHJlc2VuY2UgPSBVdGlsLmNsb25lT2JqZWN0KG1lbWJlci5wcmVzZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgZ3VpbGQuX3NldFByZXNlbmNlKHVzZXIuaWQsIGRhdGEpO1xuICAgICAgICBjbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLlBSRVNFTkNFX1VQREFURSwgb2xkTWVtYmVyLCBtZW1iZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3VpbGQuX3NldFByZXNlbmNlKHVzZXIuaWQsIGRhdGEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbmV2ZXIgYSBndWlsZCBtZW1iZXIncyBwcmVzZW5jZSBjaGFuZ2VzLCBvciB0aGV5IGNoYW5nZSBvbmUgb2YgdGhlaXIgZGV0YWlscy5cbiAqIEBldmVudCBDbGllbnQjcHJlc2VuY2VVcGRhdGVcbiAqIEBwYXJhbSB7R3VpbGRNZW1iZXJ9IG9sZE1lbWJlciBUaGUgbWVtYmVyIGJlZm9yZSB0aGUgcHJlc2VuY2UgdXBkYXRlXG4gKiBAcGFyYW0ge0d1aWxkTWVtYmVyfSBuZXdNZW1iZXIgVGhlIG1lbWJlciBhZnRlciB0aGUgcHJlc2VuY2UgdXBkYXRlXG4gKi9cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgdXNlcidzIGRldGFpbHMgKGUuZy4gdXNlcm5hbWUpIGFyZSBjaGFuZ2VkLlxuICogQGV2ZW50IENsaWVudCN1c2VyVXBkYXRlXG4gKiBAcGFyYW0ge1VzZXJ9IG9sZFVzZXIgVGhlIHVzZXIgYmVmb3JlIHRoZSB1cGRhdGVcbiAqIEBwYXJhbSB7VXNlcn0gbmV3VXNlciBUaGUgdXNlciBhZnRlciB0aGUgdXBkYXRlXG4gKi9cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgbWVtYmVyIGJlY29tZXMgYXZhaWxhYmxlIGluIGEgbGFyZ2UgZ3VpbGQuXG4gKiBAZXZlbnQgQ2xpZW50I2d1aWxkTWVtYmVyQXZhaWxhYmxlXG4gKiBAcGFyYW0ge0d1aWxkTWVtYmVyfSBtZW1iZXIgVGhlIG1lbWJlciB0aGF0IGJlY2FtZSBhdmFpbGFibGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByZXNlbmNlVXBkYXRlSGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9QcmVzZW5jZVVwZGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///128\n");

/***/ }),
/* 129 */
/*!*************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/UserUpdate.js ***!
  \*************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass UserUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.UserUpdate.handle(data);\n  }\n}\n\nmodule.exports = UserUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9Vc2VyVXBkYXRlLmpzP2RhOGEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWJzdHJhY3RIYW5kbGVyID0gcmVxdWlyZSgnLi9BYnN0cmFjdEhhbmRsZXInKTtcblxuY2xhc3MgVXNlclVwZGF0ZUhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY2xpZW50LmFjdGlvbnMuVXNlclVwZGF0ZS5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBVc2VyVXBkYXRlSGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9Vc2VyVXBkYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///129\n");

/***/ }),
/* 130 */
/*!*****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/UserNoteUpdate.js ***!
  \*****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass UserNoteUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n\n    client.actions.UserNoteUpdate.handle(data);\n  }\n}\n\nmodule.exports = UserNoteUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9Vc2VyTm90ZVVwZGF0ZS5qcz9hYjcyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbmNsYXNzIFVzZXJOb3RlVXBkYXRlSGFuZGxlciBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNvbnN0IGRhdGEgPSBwYWNrZXQuZDtcblxuICAgIGNsaWVudC5hY3Rpb25zLlVzZXJOb3RlVXBkYXRlLmhhbmRsZShkYXRhKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFVzZXJOb3RlVXBkYXRlSGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9Vc2VyTm90ZVVwZGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTMwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///130\n");

/***/ }),
/* 131 */
/*!*********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/UserSettingsUpdate.js ***!
  \*********************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\n\nclass UserSettingsUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    client.user.settings.patch(packet.d);\n    client.emit(Constants.Events.USER_SETTINGS_UPDATE, client.user.settings);\n  }\n}\n\n/**\n * Emitted when the client user's settings update.\n * @event Client#clientUserSettingsUpdate\n * @param {ClientUserSettings} clientUserSettings The new client user settings\n */\n\nmodule.exports = UserSettingsUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9Vc2VyU2V0dGluZ3NVcGRhdGUuanM/MTI3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBYnN0cmFjdEhhbmRsZXIgPSByZXF1aXJlKCcuL0Fic3RyYWN0SGFuZGxlcicpO1xuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbC9Db25zdGFudHMnKTtcblxuY2xhc3MgVXNlclNldHRpbmdzVXBkYXRlSGFuZGxlciBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNsaWVudC51c2VyLnNldHRpbmdzLnBhdGNoKHBhY2tldC5kKTtcbiAgICBjbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLlVTRVJfU0VUVElOR1NfVVBEQVRFLCBjbGllbnQudXNlci5zZXR0aW5ncyk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW4gdGhlIGNsaWVudCB1c2VyJ3Mgc2V0dGluZ3MgdXBkYXRlLlxuICogQGV2ZW50IENsaWVudCNjbGllbnRVc2VyU2V0dGluZ3NVcGRhdGVcbiAqIEBwYXJhbSB7Q2xpZW50VXNlclNldHRpbmdzfSBjbGllbnRVc2VyU2V0dGluZ3MgVGhlIG5ldyBjbGllbnQgdXNlciBzZXR0aW5nc1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVXNlclNldHRpbmdzVXBkYXRlSGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9Vc2VyU2V0dGluZ3NVcGRhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///131\n");

/***/ }),
/* 132 */
/*!**************************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/UserGuildSettingsUpdate.js ***!
  \**************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\nconst ClientUserGuildSettings = __webpack_require__(/*! ../../../../structures/ClientUserGuildSettings */ 69);\n\nclass UserGuildSettingsUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const settings = client.user.guildSettings.get(packet.d.guild_id);\n    if (settings) settings.patch(packet.d);\n    else client.user.guildSettings.set(packet.d.guild_id, new ClientUserGuildSettings(packet.d, client));\n    client.emit(Constants.Events.USER_GUILD_SETTINGS_UPDATE, client.user.guildSettings.get(packet.d.guild_id));\n  }\n}\n\n/**\n * Emitted whenever the client user's settings update.\n * @event Client#clientUserGuildSettingsUpdate\n * @param {ClientUserGuildSettings} clientUserGuildSettings The new client user guild settings\n */\n\nmodule.exports = UserGuildSettingsUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9Vc2VyR3VpbGRTZXR0aW5nc1VwZGF0ZS5qcz8xNmYwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsL0NvbnN0YW50cycpO1xuY29uc3QgQ2xpZW50VXNlckd1aWxkU2V0dGluZ3MgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi9zdHJ1Y3R1cmVzL0NsaWVudFVzZXJHdWlsZFNldHRpbmdzJyk7XG5cbmNsYXNzIFVzZXJHdWlsZFNldHRpbmdzVXBkYXRlSGFuZGxlciBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNvbnN0IHNldHRpbmdzID0gY2xpZW50LnVzZXIuZ3VpbGRTZXR0aW5ncy5nZXQocGFja2V0LmQuZ3VpbGRfaWQpO1xuICAgIGlmIChzZXR0aW5ncykgc2V0dGluZ3MucGF0Y2gocGFja2V0LmQpO1xuICAgIGVsc2UgY2xpZW50LnVzZXIuZ3VpbGRTZXR0aW5ncy5zZXQocGFja2V0LmQuZ3VpbGRfaWQsIG5ldyBDbGllbnRVc2VyR3VpbGRTZXR0aW5ncyhwYWNrZXQuZCwgY2xpZW50KSk7XG4gICAgY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5VU0VSX0dVSUxEX1NFVFRJTkdTX1VQREFURSwgY2xpZW50LnVzZXIuZ3VpbGRTZXR0aW5ncy5nZXQocGFja2V0LmQuZ3VpbGRfaWQpKTtcbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbmV2ZXIgdGhlIGNsaWVudCB1c2VyJ3Mgc2V0dGluZ3MgdXBkYXRlLlxuICogQGV2ZW50IENsaWVudCNjbGllbnRVc2VyR3VpbGRTZXR0aW5nc1VwZGF0ZVxuICogQHBhcmFtIHtDbGllbnRVc2VyR3VpbGRTZXR0aW5nc30gY2xpZW50VXNlckd1aWxkU2V0dGluZ3MgVGhlIG5ldyBjbGllbnQgdXNlciBndWlsZCBzZXR0aW5nc1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVXNlckd1aWxkU2V0dGluZ3NVcGRhdGVIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL1VzZXJHdWlsZFNldHRpbmdzVXBkYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///132\n");

/***/ }),
/* 133 */
/*!*******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/VoiceStateUpdate.js ***!
  \*******************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\nconst Util = __webpack_require__(/*! ../../../../util/Util */ 4);\n\nclass VoiceStateUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n\n    const guild = client.guilds.get(data.guild_id);\n    if (guild) {\n      const member = guild.members.get(data.user_id);\n      if (member) {\n        const oldVoiceChannelMember = Util.cloneObject(member);\n        if (member.voiceChannel && member.voiceChannel.id !== data.channel_id) {\n          member.voiceChannel.members.delete(oldVoiceChannelMember.id);\n        }\n\n        // If the member left the voice channel, unset their speaking property\n        if (!data.channel_id) member.speaking = null;\n\n        if (member.user.id === client.user.id && data.channel_id) {\n          client.emit('self.voiceStateUpdate', data);\n        }\n\n        const newChannel = client.channels.get(data.channel_id);\n        if (newChannel) {\n          newChannel.members.set(member.id, member);\n          member.guild.channels.set(data.channel_id, newChannel);\n        }\n\n        member.serverMute = data.mute;\n        member.serverDeaf = data.deaf;\n        member.selfMute = data.self_mute;\n        member.selfDeaf = data.self_deaf;\n        member.voiceSessionID = data.session_id;\n        member.voiceChannelID = data.channel_id;\n        client.emit(Constants.Events.VOICE_STATE_UPDATE, oldVoiceChannelMember, member);\n      }\n    }\n  }\n}\n\n/**\n * Emitted whenever a user changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n * @event Client#voiceStateUpdate\n * @param {GuildMember} oldMember The member before the voice state update\n * @param {GuildMember} newMember The member after the voice state update\n */\n\nmodule.exports = VoiceStateUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9Wb2ljZVN0YXRlVXBkYXRlLmpzPzE3ODYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWJzdHJhY3RIYW5kbGVyID0gcmVxdWlyZSgnLi9BYnN0cmFjdEhhbmRsZXInKTtcblxuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbC9Db25zdGFudHMnKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsL1V0aWwnKTtcblxuY2xhc3MgVm9pY2VTdGF0ZVVwZGF0ZUhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG5cbiAgICBjb25zdCBndWlsZCA9IGNsaWVudC5ndWlsZHMuZ2V0KGRhdGEuZ3VpbGRfaWQpO1xuICAgIGlmIChndWlsZCkge1xuICAgICAgY29uc3QgbWVtYmVyID0gZ3VpbGQubWVtYmVycy5nZXQoZGF0YS51c2VyX2lkKTtcbiAgICAgIGlmIChtZW1iZXIpIHtcbiAgICAgICAgY29uc3Qgb2xkVm9pY2VDaGFubmVsTWVtYmVyID0gVXRpbC5jbG9uZU9iamVjdChtZW1iZXIpO1xuICAgICAgICBpZiAobWVtYmVyLnZvaWNlQ2hhbm5lbCAmJiBtZW1iZXIudm9pY2VDaGFubmVsLmlkICE9PSBkYXRhLmNoYW5uZWxfaWQpIHtcbiAgICAgICAgICBtZW1iZXIudm9pY2VDaGFubmVsLm1lbWJlcnMuZGVsZXRlKG9sZFZvaWNlQ2hhbm5lbE1lbWJlci5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGUgbWVtYmVyIGxlZnQgdGhlIHZvaWNlIGNoYW5uZWwsIHVuc2V0IHRoZWlyIHNwZWFraW5nIHByb3BlcnR5XG4gICAgICAgIGlmICghZGF0YS5jaGFubmVsX2lkKSBtZW1iZXIuc3BlYWtpbmcgPSBudWxsO1xuXG4gICAgICAgIGlmIChtZW1iZXIudXNlci5pZCA9PT0gY2xpZW50LnVzZXIuaWQgJiYgZGF0YS5jaGFubmVsX2lkKSB7XG4gICAgICAgICAgY2xpZW50LmVtaXQoJ3NlbGYudm9pY2VTdGF0ZVVwZGF0ZScsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3Q2hhbm5lbCA9IGNsaWVudC5jaGFubmVscy5nZXQoZGF0YS5jaGFubmVsX2lkKTtcbiAgICAgICAgaWYgKG5ld0NoYW5uZWwpIHtcbiAgICAgICAgICBuZXdDaGFubmVsLm1lbWJlcnMuc2V0KG1lbWJlci5pZCwgbWVtYmVyKTtcbiAgICAgICAgICBtZW1iZXIuZ3VpbGQuY2hhbm5lbHMuc2V0KGRhdGEuY2hhbm5lbF9pZCwgbmV3Q2hhbm5lbCk7XG4gICAgICAgIH1cblxuICAgICAgICBtZW1iZXIuc2VydmVyTXV0ZSA9IGRhdGEubXV0ZTtcbiAgICAgICAgbWVtYmVyLnNlcnZlckRlYWYgPSBkYXRhLmRlYWY7XG4gICAgICAgIG1lbWJlci5zZWxmTXV0ZSA9IGRhdGEuc2VsZl9tdXRlO1xuICAgICAgICBtZW1iZXIuc2VsZkRlYWYgPSBkYXRhLnNlbGZfZGVhZjtcbiAgICAgICAgbWVtYmVyLnZvaWNlU2Vzc2lvbklEID0gZGF0YS5zZXNzaW9uX2lkO1xuICAgICAgICBtZW1iZXIudm9pY2VDaGFubmVsSUQgPSBkYXRhLmNoYW5uZWxfaWQ7XG4gICAgICAgIGNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuVk9JQ0VfU1RBVEVfVVBEQVRFLCBvbGRWb2ljZUNoYW5uZWxNZW1iZXIsIG1lbWJlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuZXZlciBhIHVzZXIgY2hhbmdlcyB2b2ljZSBzdGF0ZSAtIGUuZy4gam9pbnMvbGVhdmVzIGEgY2hhbm5lbCwgbXV0ZXMvdW5tdXRlcy5cbiAqIEBldmVudCBDbGllbnQjdm9pY2VTdGF0ZVVwZGF0ZVxuICogQHBhcmFtIHtHdWlsZE1lbWJlcn0gb2xkTWVtYmVyIFRoZSBtZW1iZXIgYmVmb3JlIHRoZSB2b2ljZSBzdGF0ZSB1cGRhdGVcbiAqIEBwYXJhbSB7R3VpbGRNZW1iZXJ9IG5ld01lbWJlciBUaGUgbWVtYmVyIGFmdGVyIHRoZSB2b2ljZSBzdGF0ZSB1cGRhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZvaWNlU3RhdGVVcGRhdGVIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL1ZvaWNlU3RhdGVVcGRhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///133\n");

/***/ }),
/* 134 */
/*!**************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/TypingStart.js ***!
  \**************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\n\nclass TypingStartHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    const channel = client.channels.get(data.channel_id);\n    const user = client.users.get(data.user_id);\n    const timestamp = new Date(data.timestamp * 1000);\n\n    if (channel && user) {\n      if (channel.type === 'voice') {\n        client.emit(Constants.Events.WARN, `Discord sent a typing packet to voice channel ${channel.id}`);\n        return;\n      }\n      if (channel._typing.has(user.id)) {\n        const typing = channel._typing.get(user.id);\n        typing.lastTimestamp = timestamp;\n        typing.resetTimeout(tooLate(channel, user));\n      } else {\n        channel._typing.set(user.id, new TypingData(client, timestamp, timestamp, tooLate(channel, user)));\n        client.emit(Constants.Events.TYPING_START, channel, user);\n      }\n    }\n  }\n}\n\nclass TypingData {\n  constructor(client, since, lastTimestamp, _timeout) {\n    this.client = client;\n    this.since = since;\n    this.lastTimestamp = lastTimestamp;\n    this._timeout = _timeout;\n  }\n\n  resetTimeout(_timeout) {\n    this.client.clearTimeout(this._timeout);\n    this._timeout = _timeout;\n  }\n\n  get elapsedTime() {\n    return Date.now() - this.since;\n  }\n}\n\nfunction tooLate(channel, user) {\n  return channel.client.setTimeout(() => {\n    channel.client.emit(Constants.Events.TYPING_STOP, channel, user, channel._typing.get(user.id));\n    channel._typing.delete(user.id);\n  }, 6000);\n}\n\n/**\n * Emitted whenever a user starts typing in a channel.\n * @event Client#typingStart\n * @param {Channel} channel The channel the user started typing in\n * @param {User} user The user that started typing\n */\n\n/**\n * Emitted whenever a user stops typing in a channel.\n * @event Client#typingStop\n * @param {Channel} channel The channel the user stopped typing in\n * @param {User} user The user that stopped typing\n */\n\nmodule.exports = TypingStartHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9UeXBpbmdTdGFydC5qcz80ODE2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlsL0NvbnN0YW50cycpO1xuXG5jbGFzcyBUeXBpbmdTdGFydEhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY29uc3QgY2hhbm5lbCA9IGNsaWVudC5jaGFubmVscy5nZXQoZGF0YS5jaGFubmVsX2lkKTtcbiAgICBjb25zdCB1c2VyID0gY2xpZW50LnVzZXJzLmdldChkYXRhLnVzZXJfaWQpO1xuICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKGRhdGEudGltZXN0YW1wICogMTAwMCk7XG5cbiAgICBpZiAoY2hhbm5lbCAmJiB1c2VyKSB7XG4gICAgICBpZiAoY2hhbm5lbC50eXBlID09PSAndm9pY2UnKSB7XG4gICAgICAgIGNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuV0FSTiwgYERpc2NvcmQgc2VudCBhIHR5cGluZyBwYWNrZXQgdG8gdm9pY2UgY2hhbm5lbCAke2NoYW5uZWwuaWR9YCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjaGFubmVsLl90eXBpbmcuaGFzKHVzZXIuaWQpKSB7XG4gICAgICAgIGNvbnN0IHR5cGluZyA9IGNoYW5uZWwuX3R5cGluZy5nZXQodXNlci5pZCk7XG4gICAgICAgIHR5cGluZy5sYXN0VGltZXN0YW1wID0gdGltZXN0YW1wO1xuICAgICAgICB0eXBpbmcucmVzZXRUaW1lb3V0KHRvb0xhdGUoY2hhbm5lbCwgdXNlcikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hhbm5lbC5fdHlwaW5nLnNldCh1c2VyLmlkLCBuZXcgVHlwaW5nRGF0YShjbGllbnQsIHRpbWVzdGFtcCwgdGltZXN0YW1wLCB0b29MYXRlKGNoYW5uZWwsIHVzZXIpKSk7XG4gICAgICAgIGNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuVFlQSU5HX1NUQVJULCBjaGFubmVsLCB1c2VyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgVHlwaW5nRGF0YSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgc2luY2UsIGxhc3RUaW1lc3RhbXAsIF90aW1lb3V0KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5zaW5jZSA9IHNpbmNlO1xuICAgIHRoaXMubGFzdFRpbWVzdGFtcCA9IGxhc3RUaW1lc3RhbXA7XG4gICAgdGhpcy5fdGltZW91dCA9IF90aW1lb3V0O1xuICB9XG5cbiAgcmVzZXRUaW1lb3V0KF90aW1lb3V0KSB7XG4gICAgdGhpcy5jbGllbnQuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgIHRoaXMuX3RpbWVvdXQgPSBfdGltZW91dDtcbiAgfVxuXG4gIGdldCBlbGFwc2VkVGltZSgpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKSAtIHRoaXMuc2luY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gdG9vTGF0ZShjaGFubmVsLCB1c2VyKSB7XG4gIHJldHVybiBjaGFubmVsLmNsaWVudC5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICBjaGFubmVsLmNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuVFlQSU5HX1NUT1AsIGNoYW5uZWwsIHVzZXIsIGNoYW5uZWwuX3R5cGluZy5nZXQodXNlci5pZCkpO1xuICAgIGNoYW5uZWwuX3R5cGluZy5kZWxldGUodXNlci5pZCk7XG4gIH0sIDYwMDApO1xufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbmV2ZXIgYSB1c2VyIHN0YXJ0cyB0eXBpbmcgaW4gYSBjaGFubmVsLlxuICogQGV2ZW50IENsaWVudCN0eXBpbmdTdGFydFxuICogQHBhcmFtIHtDaGFubmVsfSBjaGFubmVsIFRoZSBjaGFubmVsIHRoZSB1c2VyIHN0YXJ0ZWQgdHlwaW5nIGluXG4gKiBAcGFyYW0ge1VzZXJ9IHVzZXIgVGhlIHVzZXIgdGhhdCBzdGFydGVkIHR5cGluZ1xuICovXG5cbi8qKlxuICogRW1pdHRlZCB3aGVuZXZlciBhIHVzZXIgc3RvcHMgdHlwaW5nIGluIGEgY2hhbm5lbC5cbiAqIEBldmVudCBDbGllbnQjdHlwaW5nU3RvcFxuICogQHBhcmFtIHtDaGFubmVsfSBjaGFubmVsIFRoZSBjaGFubmVsIHRoZSB1c2VyIHN0b3BwZWQgdHlwaW5nIGluXG4gKiBAcGFyYW0ge1VzZXJ9IHVzZXIgVGhlIHVzZXIgdGhhdCBzdG9wcGVkIHR5cGluZ1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVHlwaW5nU3RhcnRIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL1R5cGluZ1N0YXJ0LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///134\n");

/***/ }),
/* 135 */
/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageCreate.js ***!
  \****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\n\nclass MessageCreateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    const response = client.actions.MessageCreate.handle(data);\n    if (response.message) client.emit(Constants.Events.MESSAGE_CREATE, response.message);\n  }\n}\n\n/**\n * Emitted whenever a message is created.\n * @event Client#message\n * @param {Message} message The created message\n */\n\nmodule.exports = MessageCreateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9NZXNzYWdlQ3JlYXRlLmpzPzcyZmUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWJzdHJhY3RIYW5kbGVyID0gcmVxdWlyZSgnLi9BYnN0cmFjdEhhbmRsZXInKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbmNsYXNzIE1lc3NhZ2VDcmVhdGVIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gY2xpZW50LmFjdGlvbnMuTWVzc2FnZUNyZWF0ZS5oYW5kbGUoZGF0YSk7XG4gICAgaWYgKHJlc3BvbnNlLm1lc3NhZ2UpIGNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuTUVTU0FHRV9DUkVBVEUsIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICB9XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuZXZlciBhIG1lc3NhZ2UgaXMgY3JlYXRlZC5cbiAqIEBldmVudCBDbGllbnQjbWVzc2FnZVxuICogQHBhcmFtIHtNZXNzYWdlfSBtZXNzYWdlIFRoZSBjcmVhdGVkIG1lc3NhZ2VcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2VDcmVhdGVIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL01lc3NhZ2VDcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///135\n");

/***/ }),
/* 136 */
/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageDelete.js ***!
  \****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\nconst Constants = __webpack_require__(/*! ../../../../util/Constants */ 0);\n\nclass MessageDeleteHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    const response = client.actions.MessageDelete.handle(data);\n    if (response.message) client.emit(Constants.Events.MESSAGE_DELETE, response.message);\n  }\n}\n\n/**\n * Emitted whenever a message is deleted.\n * @event Client#messageDelete\n * @param {Message} message The deleted message\n */\n\nmodule.exports = MessageDeleteHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9NZXNzYWdlRGVsZXRlLmpzP2E5ODEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWJzdHJhY3RIYW5kbGVyID0gcmVxdWlyZSgnLi9BYnN0cmFjdEhhbmRsZXInKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbmNsYXNzIE1lc3NhZ2VEZWxldGVIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gY2xpZW50LmFjdGlvbnMuTWVzc2FnZURlbGV0ZS5oYW5kbGUoZGF0YSk7XG4gICAgaWYgKHJlc3BvbnNlLm1lc3NhZ2UpIGNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuTUVTU0FHRV9ERUxFVEUsIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICB9XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuZXZlciBhIG1lc3NhZ2UgaXMgZGVsZXRlZC5cbiAqIEBldmVudCBDbGllbnQjbWVzc2FnZURlbGV0ZVxuICogQHBhcmFtIHtNZXNzYWdlfSBtZXNzYWdlIFRoZSBkZWxldGVkIG1lc3NhZ2VcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2VEZWxldGVIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL01lc3NhZ2VEZWxldGUuanNcbi8vIG1vZHVsZSBpZCA9IDEzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///136\n");

/***/ }),
/* 137 */
/*!****************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageUpdate.js ***!
  \****************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass MessageUpdateHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.MessageUpdate.handle(data);\n  }\n}\n\nmodule.exports = MessageUpdateHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9NZXNzYWdlVXBkYXRlLmpzPzI3MDUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWJzdHJhY3RIYW5kbGVyID0gcmVxdWlyZSgnLi9BYnN0cmFjdEhhbmRsZXInKTtcblxuY2xhc3MgTWVzc2FnZVVwZGF0ZUhhbmRsZXIgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY2xpZW50LmFjdGlvbnMuTWVzc2FnZVVwZGF0ZS5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlVXBkYXRlSGFuZGxlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9NZXNzYWdlVXBkYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///137\n");

/***/ }),
/* 138 */
/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageDeleteBulk.js ***!
  \********************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass MessageDeleteBulkHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.MessageDeleteBulk.handle(data);\n  }\n}\n\n/**\n * Emitted whenever messages are deleted in bulk.\n * @event Client#messageDeleteBulk\n * @param {Collection<Snowflake, Message>} messages The deleted messages, mapped by their ID\n */\n\nmodule.exports = MessageDeleteBulkHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9NZXNzYWdlRGVsZXRlQnVsay5qcz9iYzU5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbmNsYXNzIE1lc3NhZ2VEZWxldGVCdWxrSGFuZGxlciBleHRlbmRzIEFic3RyYWN0SGFuZGxlciB7XG4gIGhhbmRsZShwYWNrZXQpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLnBhY2tldE1hbmFnZXIuY2xpZW50O1xuICAgIGNvbnN0IGRhdGEgPSBwYWNrZXQuZDtcbiAgICBjbGllbnQuYWN0aW9ucy5NZXNzYWdlRGVsZXRlQnVsay5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIG1lc3NhZ2VzIGFyZSBkZWxldGVkIGluIGJ1bGsuXG4gKiBAZXZlbnQgQ2xpZW50I21lc3NhZ2VEZWxldGVCdWxrXG4gKiBAcGFyYW0ge0NvbGxlY3Rpb248U25vd2ZsYWtlLCBNZXNzYWdlPn0gbWVzc2FnZXMgVGhlIGRlbGV0ZWQgbWVzc2FnZXMsIG1hcHBlZCBieSB0aGVpciBJRFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gTWVzc2FnZURlbGV0ZUJ1bGtIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL01lc3NhZ2VEZWxldGVCdWxrLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///138\n");

/***/ }),
/* 139 */
/*!********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/VoiceServerUpdate.js ***!
  \********************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\n/*\n{\n    \"token\": \"my_token\",\n    \"guild_id\": \"41771983423143937\",\n    \"endpoint\": \"smart.loyal.discord.gg\"\n}\n*/\n\nclass VoiceServerUpdate extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.emit('self.voiceServer', data);\n  }\n}\n\nmodule.exports = VoiceServerUpdate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9Wb2ljZVNlcnZlclVwZGF0ZS5qcz8wNjAwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFic3RyYWN0SGFuZGxlciA9IHJlcXVpcmUoJy4vQWJzdHJhY3RIYW5kbGVyJyk7XG5cbi8qXG57XG4gICAgXCJ0b2tlblwiOiBcIm15X3Rva2VuXCIsXG4gICAgXCJndWlsZF9pZFwiOiBcIjQxNzcxOTgzNDIzMTQzOTM3XCIsXG4gICAgXCJlbmRwb2ludFwiOiBcInNtYXJ0LmxveWFsLmRpc2NvcmQuZ2dcIlxufVxuKi9cblxuY2xhc3MgVm9pY2VTZXJ2ZXJVcGRhdGUgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY2xpZW50LmVtaXQoJ3NlbGYudm9pY2VTZXJ2ZXInLCBkYXRhKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZvaWNlU2VydmVyVXBkYXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL1ZvaWNlU2VydmVyVXBkYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///139\n");

/***/ }),
/* 140 */
/*!************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/GuildSync.js ***!
  \************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass GuildSyncHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.GuildSync.handle(data);\n  }\n}\n\nmodule.exports = GuildSyncHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9HdWlsZFN5bmMuanM/YjRkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBYnN0cmFjdEhhbmRsZXIgPSByZXF1aXJlKCcuL0Fic3RyYWN0SGFuZGxlcicpO1xuXG5jbGFzcyBHdWlsZFN5bmNIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuICAgIGNsaWVudC5hY3Rpb25zLkd1aWxkU3luYy5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZFN5bmNIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL0d1aWxkU3luYy5qc1xuLy8gbW9kdWxlIGlkID0gMTQwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///140\n");

/***/ }),
/* 141 */
/*!******************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/RelationshipAdd.js ***!
  \******************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass RelationshipAddHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    if (data.type === 1) {\n      client.fetchUser(data.id).then(user => {\n        client.user.friends.set(user.id, user);\n      });\n    } else if (data.type === 2) {\n      client.fetchUser(data.id).then(user => {\n        client.user.blocked.set(user.id, user);\n      });\n    }\n  }\n}\n\nmodule.exports = RelationshipAddHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9SZWxhdGlvbnNoaXBBZGQuanM/ZTNmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBYnN0cmFjdEhhbmRsZXIgPSByZXF1aXJlKCcuL0Fic3RyYWN0SGFuZGxlcicpO1xuXG5jbGFzcyBSZWxhdGlvbnNoaXBBZGRIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuICAgIGlmIChkYXRhLnR5cGUgPT09IDEpIHtcbiAgICAgIGNsaWVudC5mZXRjaFVzZXIoZGF0YS5pZCkudGhlbih1c2VyID0+IHtcbiAgICAgICAgY2xpZW50LnVzZXIuZnJpZW5kcy5zZXQodXNlci5pZCwgdXNlcik7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gMikge1xuICAgICAgY2xpZW50LmZldGNoVXNlcihkYXRhLmlkKS50aGVuKHVzZXIgPT4ge1xuICAgICAgICBjbGllbnQudXNlci5ibG9ja2VkLnNldCh1c2VyLmlkLCB1c2VyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF0aW9uc2hpcEFkZEhhbmRsZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvd2Vic29ja2V0L3BhY2tldHMvaGFuZGxlcnMvUmVsYXRpb25zaGlwQWRkLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///141\n");

/***/ }),
/* 142 */
/*!*********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/RelationshipRemove.js ***!
  \*********************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass RelationshipRemoveHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    if (data.type === 2) {\n      if (client.user.blocked.has(data.id)) {\n        client.user.blocked.delete(data.id);\n      }\n    } else if (data.type === 1) {\n      if (client.user.friends.has(data.id)) {\n        client.user.friends.delete(data.id);\n      }\n    }\n  }\n}\n\nmodule.exports = RelationshipRemoveHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9SZWxhdGlvbnNoaXBSZW1vdmUuanM/MDA2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBYnN0cmFjdEhhbmRsZXIgPSByZXF1aXJlKCcuL0Fic3RyYWN0SGFuZGxlcicpO1xuXG5jbGFzcyBSZWxhdGlvbnNoaXBSZW1vdmVIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuICAgIGlmIChkYXRhLnR5cGUgPT09IDIpIHtcbiAgICAgIGlmIChjbGllbnQudXNlci5ibG9ja2VkLmhhcyhkYXRhLmlkKSkge1xuICAgICAgICBjbGllbnQudXNlci5ibG9ja2VkLmRlbGV0ZShkYXRhLmlkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gMSkge1xuICAgICAgaWYgKGNsaWVudC51c2VyLmZyaWVuZHMuaGFzKGRhdGEuaWQpKSB7XG4gICAgICAgIGNsaWVudC51c2VyLmZyaWVuZHMuZGVsZXRlKGRhdGEuaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF0aW9uc2hpcFJlbW92ZUhhbmRsZXI7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvd2Vic29ja2V0L3BhY2tldHMvaGFuZGxlcnMvUmVsYXRpb25zaGlwUmVtb3ZlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///142\n");

/***/ }),
/* 143 */
/*!*********************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionAdd.js ***!
  \*********************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass MessageReactionAddHandler extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.MessageReactionAdd.handle(data);\n  }\n}\n\nmodule.exports = MessageReactionAddHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9NZXNzYWdlUmVhY3Rpb25BZGQuanM/MmE4YyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBYnN0cmFjdEhhbmRsZXIgPSByZXF1aXJlKCcuL0Fic3RyYWN0SGFuZGxlcicpO1xuXG5jbGFzcyBNZXNzYWdlUmVhY3Rpb25BZGRIYW5kbGVyIGV4dGVuZHMgQWJzdHJhY3RIYW5kbGVyIHtcbiAgaGFuZGxlKHBhY2tldCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMucGFja2V0TWFuYWdlci5jbGllbnQ7XG4gICAgY29uc3QgZGF0YSA9IHBhY2tldC5kO1xuICAgIGNsaWVudC5hY3Rpb25zLk1lc3NhZ2VSZWFjdGlvbkFkZC5oYW5kbGUoZGF0YSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlUmVhY3Rpb25BZGRIYW5kbGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3dlYnNvY2tldC9wYWNrZXRzL2hhbmRsZXJzL01lc3NhZ2VSZWFjdGlvbkFkZC5qc1xuLy8gbW9kdWxlIGlkID0gMTQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///143\n");

/***/ }),
/* 144 */
/*!************************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionRemove.js ***!
  \************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass MessageReactionRemove extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.MessageReactionRemove.handle(data);\n  }\n}\n\nmodule.exports = MessageReactionRemove;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9NZXNzYWdlUmVhY3Rpb25SZW1vdmUuanM/MDhjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBYnN0cmFjdEhhbmRsZXIgPSByZXF1aXJlKCcuL0Fic3RyYWN0SGFuZGxlcicpO1xuXG5jbGFzcyBNZXNzYWdlUmVhY3Rpb25SZW1vdmUgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY2xpZW50LmFjdGlvbnMuTWVzc2FnZVJlYWN0aW9uUmVtb3ZlLmhhbmRsZShkYXRhKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2VSZWFjdGlvblJlbW92ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9NZXNzYWdlUmVhY3Rpb25SZW1vdmUuanNcbi8vIG1vZHVsZSBpZCA9IDE0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///144\n");

/***/ }),
/* 145 */
/*!***************************************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/packets/handlers/MessageReactionRemoveAll.js ***!
  \***************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const AbstractHandler = __webpack_require__(/*! ./AbstractHandler */ 1);\n\nclass MessageReactionRemoveAll extends AbstractHandler {\n  handle(packet) {\n    const client = this.packetManager.client;\n    const data = packet.d;\n    client.actions.MessageReactionRemoveAll.handle(data);\n  }\n}\n\nmodule.exports = MessageReactionRemoveAll;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9NZXNzYWdlUmVhY3Rpb25SZW1vdmVBbGwuanM/MzRlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBYnN0cmFjdEhhbmRsZXIgPSByZXF1aXJlKCcuL0Fic3RyYWN0SGFuZGxlcicpO1xuXG5jbGFzcyBNZXNzYWdlUmVhY3Rpb25SZW1vdmVBbGwgZXh0ZW5kcyBBYnN0cmFjdEhhbmRsZXIge1xuICBoYW5kbGUocGFja2V0KSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5wYWNrZXRNYW5hZ2VyLmNsaWVudDtcbiAgICBjb25zdCBkYXRhID0gcGFja2V0LmQ7XG4gICAgY2xpZW50LmFjdGlvbnMuTWVzc2FnZVJlYWN0aW9uUmVtb3ZlQWxsLmhhbmRsZShkYXRhKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2VSZWFjdGlvblJlbW92ZUFsbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvcGFja2V0cy9oYW5kbGVycy9NZXNzYWdlUmVhY3Rpb25SZW1vdmVBbGwuanNcbi8vIG1vZHVsZSBpZCA9IDE0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///145\n");

/***/ }),
/* 146 */
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"buffer\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYnVmZmVyXCI/NTdkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJidWZmZXJcIlxuLy8gbW9kdWxlIGlkID0gMTQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///146\n");

/***/ }),
/* 147 */
/*!*********************************************!*\
  !*** ./node_modules/async-limiter/index.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction Queue(options) {\n  if (!(this instanceof Queue)) {\n    return new Queue(options);\n  }\n\n  options = options || {};\n  this.concurrency = options.concurrency || Infinity;\n  this.pending = 0;\n  this.jobs = [];\n  this.cbs = [];\n  this._done = done.bind(this);\n}\n\nvar arrayAddMethods = [\n  'push',\n  'unshift',\n  'splice'\n];\n\narrayAddMethods.forEach(function(method) {\n  Queue.prototype[method] = function() {\n    var methodResult = Array.prototype[method].apply(this.jobs, arguments);\n    this._run();\n    return methodResult;\n  };\n});\n\nObject.defineProperty(Queue.prototype, 'length', {\n  get: function() {\n    return this.pending + this.jobs.length;\n  }\n});\n\nQueue.prototype._run = function() {\n  if (this.pending === this.concurrency) {\n    return;\n  }\n  if (this.jobs.length) {\n    var job = this.jobs.shift();\n    this.pending++;\n    job(this._done);\n    this._run();\n  }\n\n  if (this.pending === 0) {\n    while (this.cbs.length !== 0) {\n      var cb = this.cbs.pop();\n      process.nextTick(cb);\n    }\n  }\n};\n\nQueue.prototype.onDone = function(cb) {\n  if (typeof cb === 'function') {\n    this.cbs.push(cb);\n    this._run();\n  }\n};\n\nfunction done() {\n  this.pending--;\n  this._run();\n}\n\nmodule.exports = Queue;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FzeW5jLWxpbWl0ZXIvaW5kZXguanM/NDg4NCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIFF1ZXVlKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFF1ZXVlKSkge1xuICAgIHJldHVybiBuZXcgUXVldWUob3B0aW9ucyk7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdGhpcy5jb25jdXJyZW5jeSA9IG9wdGlvbnMuY29uY3VycmVuY3kgfHwgSW5maW5pdHk7XG4gIHRoaXMucGVuZGluZyA9IDA7XG4gIHRoaXMuam9icyA9IFtdO1xuICB0aGlzLmNicyA9IFtdO1xuICB0aGlzLl9kb25lID0gZG9uZS5iaW5kKHRoaXMpO1xufVxuXG52YXIgYXJyYXlBZGRNZXRob2RzID0gW1xuICAncHVzaCcsXG4gICd1bnNoaWZ0JyxcbiAgJ3NwbGljZSdcbl07XG5cbmFycmF5QWRkTWV0aG9kcy5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICBRdWV1ZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBtZXRob2RSZXN1bHQgPSBBcnJheS5wcm90b3R5cGVbbWV0aG9kXS5hcHBseSh0aGlzLmpvYnMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5fcnVuKCk7XG4gICAgcmV0dXJuIG1ldGhvZFJlc3VsdDtcbiAgfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUXVldWUucHJvdG90eXBlLCAnbGVuZ3RoJywge1xuICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBlbmRpbmcgKyB0aGlzLmpvYnMubGVuZ3RoO1xuICB9XG59KTtcblxuUXVldWUucHJvdG90eXBlLl9ydW4gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMucGVuZGluZyA9PT0gdGhpcy5jb25jdXJyZW5jeSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodGhpcy5qb2JzLmxlbmd0aCkge1xuICAgIHZhciBqb2IgPSB0aGlzLmpvYnMuc2hpZnQoKTtcbiAgICB0aGlzLnBlbmRpbmcrKztcbiAgICBqb2IodGhpcy5fZG9uZSk7XG4gICAgdGhpcy5fcnVuKCk7XG4gIH1cblxuICBpZiAodGhpcy5wZW5kaW5nID09PSAwKSB7XG4gICAgd2hpbGUgKHRoaXMuY2JzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdmFyIGNiID0gdGhpcy5jYnMucG9wKCk7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGNiKTtcbiAgICB9XG4gIH1cbn07XG5cblF1ZXVlLnByb3RvdHlwZS5vbkRvbmUgPSBmdW5jdGlvbihjYikge1xuICBpZiAodHlwZW9mIGNiID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5jYnMucHVzaChjYik7XG4gICAgdGhpcy5fcnVuKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRvbmUoKSB7XG4gIHRoaXMucGVuZGluZy0tO1xuICB0aGlzLl9ydW4oKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBRdWV1ZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2FzeW5jLWxpbWl0ZXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///147\n");

/***/ }),
/* 148 */
/*!*********************************************!*\
  !*** ./node_modules/ws/lib/event-target.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor (type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (target) {\n    super('open', target);\n  }\n}\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (error, target) {\n    super('error', target);\n\n    this.message = error.message;\n    this.error = error;\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener (method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage (data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose (code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError (error) {\n      listener.call(this, new ErrorEvent(error, this));\n    }\n\n    function onOpen () {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener (method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dzL2xpYi9ldmVudC10YXJnZXQuanM/ZjZlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGFuIGV2ZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEV2ZW50IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBgRXZlbnRgLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBBIHJlZmVyZW5jZSB0byB0aGUgdGFyZ2V0IHRvIHdoaWNoIHRoZSBldmVudCB3YXMgZGlzcGF0Y2hlZFxuICAgKi9cbiAgY29uc3RydWN0b3IgKHR5cGUsIHRhcmdldCkge1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSBtZXNzYWdlIGV2ZW50LlxuICpcbiAqIEBleHRlbmRzIEV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBNZXNzYWdlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYE1lc3NhZ2VFdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7KFN0cmluZ3xCdWZmZXJ8QXJyYXlCdWZmZXJ8QnVmZmVyW10pfSBkYXRhIFRoZSByZWNlaXZlZCBkYXRhXG4gICAqIEBwYXJhbSB7V2ViU29ja2V0fSB0YXJnZXQgQSByZWZlcmVuY2UgdG8gdGhlIHRhcmdldCB0byB3aGljaCB0aGUgZXZlbnQgd2FzIGRpc3BhdGNoZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChkYXRhLCB0YXJnZXQpIHtcbiAgICBzdXBlcignbWVzc2FnZScsIHRhcmdldCk7XG5cbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICB9XG59XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgY2xvc2UgZXZlbnQuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENsb3NlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYENsb3NlRXZlbnRgLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gY29kZSBUaGUgc3RhdHVzIGNvZGUgZXhwbGFpbmluZyB3aHkgdGhlIGNvbm5lY3Rpb24gaXMgYmVpbmcgY2xvc2VkXG4gICAqIEBwYXJhbSB7U3RyaW5nfSByZWFzb24gQSBodW1hbi1yZWFkYWJsZSBzdHJpbmcgZXhwbGFpbmluZyB3aHkgdGhlIGNvbm5lY3Rpb24gaXMgY2xvc2luZ1xuICAgKiBAcGFyYW0ge1dlYlNvY2tldH0gdGFyZ2V0IEEgcmVmZXJlbmNlIHRvIHRoZSB0YXJnZXQgdG8gd2hpY2ggdGhlIGV2ZW50IHdhcyBkaXNwYXRjaGVkXG4gICAqL1xuICBjb25zdHJ1Y3RvciAoY29kZSwgcmVhc29uLCB0YXJnZXQpIHtcbiAgICBzdXBlcignY2xvc2UnLCB0YXJnZXQpO1xuXG4gICAgdGhpcy53YXNDbGVhbiA9IHRhcmdldC5fY2xvc2VGcmFtZVJlY2VpdmVkICYmIHRhcmdldC5fY2xvc2VGcmFtZVNlbnQ7XG4gICAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgfVxufVxuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBvcGVuIGV2ZW50LlxuICpcbiAqIEBleHRlbmRzIEV2ZW50XG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBPcGVuRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYE9wZW5FdmVudGAuXG4gICAqXG4gICAqIEBwYXJhbSB7V2ViU29ja2V0fSB0YXJnZXQgQSByZWZlcmVuY2UgdG8gdGhlIHRhcmdldCB0byB3aGljaCB0aGUgZXZlbnQgd2FzIGRpc3BhdGNoZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yICh0YXJnZXQpIHtcbiAgICBzdXBlcignb3BlbicsIHRhcmdldCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYW4gZXJyb3IgZXZlbnQuXG4gKlxuICogQGV4dGVuZHMgRXZlbnRcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEVycm9yRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYEVycm9yRXZlbnRgLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXJyb3IgVGhlIGVycm9yIHRoYXQgZ2VuZXJhdGVkIHRoaXMgZXZlbnRcbiAgICogQHBhcmFtIHtXZWJTb2NrZXR9IHRhcmdldCBBIHJlZmVyZW5jZSB0byB0aGUgdGFyZ2V0IHRvIHdoaWNoIHRoZSBldmVudCB3YXMgZGlzcGF0Y2hlZFxuICAgKi9cbiAgY29uc3RydWN0b3IgKGVycm9yLCB0YXJnZXQpIHtcbiAgICBzdXBlcignZXJyb3InLCB0YXJnZXQpO1xuXG4gICAgdGhpcy5tZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHByb3ZpZGVzIG1ldGhvZHMgZm9yIGVtdWxhdGluZyB0aGUgYEV2ZW50VGFyZ2V0YCBpbnRlcmZhY2UuIEl0J3Mgbm90XG4gKiBtZWFudCB0byBiZSB1c2VkIGRpcmVjdGx5LlxuICpcbiAqIEBtaXhpblxuICovXG5jb25zdCBFdmVudFRhcmdldCA9IHtcbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGFuIGV2ZW50IGxpc3RlbmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgZXZlbnQgdHlwZSB0byBsaXN0ZW4gZm9yXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIFRoZSBsaXN0ZW5lciB0byBhZGRcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lciAobWV0aG9kLCBsaXN0ZW5lcikge1xuICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHJldHVybjtcblxuICAgIGZ1bmN0aW9uIG9uTWVzc2FnZSAoZGF0YSkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBuZXcgTWVzc2FnZUV2ZW50KGRhdGEsIHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNsb3NlIChjb2RlLCBtZXNzYWdlKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIG5ldyBDbG9zZUV2ZW50KGNvZGUsIG1lc3NhZ2UsIHRoaXMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkVycm9yIChlcnJvcikge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBuZXcgRXJyb3JFdmVudChlcnJvciwgdGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uT3BlbiAoKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIG5ldyBPcGVuRXZlbnQodGhpcykpO1xuICAgIH1cblxuICAgIGlmIChtZXRob2QgPT09ICdtZXNzYWdlJykge1xuICAgICAgb25NZXNzYWdlLl9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgICAgdGhpcy5vbihtZXRob2QsIG9uTWVzc2FnZSk7XG4gICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdjbG9zZScpIHtcbiAgICAgIG9uQ2xvc2UuX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICB0aGlzLm9uKG1ldGhvZCwgb25DbG9zZSk7XG4gICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdlcnJvcicpIHtcbiAgICAgIG9uRXJyb3IuX2xpc3RlbmVyID0gbGlzdGVuZXI7XG4gICAgICB0aGlzLm9uKG1ldGhvZCwgb25FcnJvcik7XG4gICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdvcGVuJykge1xuICAgICAgb25PcGVuLl9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgICAgdGhpcy5vbihtZXRob2QsIG9uT3Blbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub24obWV0aG9kLCBsaXN0ZW5lcik7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2QgQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBldmVudCB0eXBlIHRvIHJlbW92ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgdG8gcmVtb3ZlXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIgKG1ldGhvZCwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycyhtZXRob2QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChsaXN0ZW5lcnNbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RlbmVyc1tpXS5fbGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIobWV0aG9kLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFRhcmdldDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3dzL2xpYi9ldmVudC10YXJnZXQuanNcbi8vIG1vZHVsZSBpZCA9IDE0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///148\n");

/***/ }),
/* 149 */
/*!*************************************************!*\
  !*** ./node_modules/ws/lib/websocket-server.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst safeBuffer = __webpack_require__(/*! safe-buffer */ 14);\nconst EventEmitter = __webpack_require__(/*! events */ 5);\nconst crypto = __webpack_require__(/*! crypto */ 24);\nconst http = __webpack_require__(/*! http */ 29);\nconst url = __webpack_require__(/*! url */ 30);\n\nconst PerMessageDeflate = __webpack_require__(/*! ./permessage-deflate */ 25);\nconst extension = __webpack_require__(/*! ./extension */ 72);\nconst constants = __webpack_require__(/*! ./constants */ 26);\nconst WebSocket = __webpack_require__(/*! ./websocket */ 71);\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient An hook to reject connections\n   * @param {Function} options.handleProtocols An hook to handle protocols\n   * @param {String} options.path Accept only connections matching this path\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {Boolean} options.clientTracking Specifies whether or not to track clients\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor (options, callback) {\n    super();\n\n    options = Object.assign({\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null\n    }, options);\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError(\n        'One of the \"port\", \"server\", or \"noServer\" options must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(options.port, options.host, options.backlog, callback);\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, (ws) => {\n            this.emit('connection', ws, req);\n          });\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address () {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  close (cb) {\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) return server.close(cb);\n    }\n\n    if (cb) cb();\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle (req) {\n    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade (req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (\n      req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !req.headers['sec-websocket-key'] || (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortConnection(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = extension.parse(\n          req.headers['sec-websocket-extensions']\n        );\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortConnection(socket, 400);\n      }\n    }\n\n    var protocol = (req.headers['sec-websocket-protocol'] || '').split(/, */);\n\n    //\n    // Optionally call external protocol selection handler.\n    //\n    if (this.options.handleProtocols) {\n      protocol = this.options.handleProtocols(protocol, req);\n      if (protocol === false) return abortConnection(socket, 401);\n    } else {\n      protocol = protocol[0];\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message) => {\n          if (!verified) return abortConnection(socket, code || 401, message);\n\n          this.completeUpgrade(protocol, extensions, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortConnection(socket, 401);\n    }\n\n    this.completeUpgrade(protocol, extensions, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} protocol The chosen subprotocol\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */\n  completeUpgrade (protocol, extensions, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    const key = crypto.createHash('sha1')\n      .update(req.headers['sec-websocket-key'] + constants.GUID, 'binary')\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${key}`\n    ];\n\n    const ws = new WebSocket(null);\n\n    if (protocol) {\n      headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n      ws.protocol = protocol;\n    }\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = extension.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, this.options.maxPayload);\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => this.clients.delete(ws));\n    }\n\n    cb(ws);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when called\n * @private\n */\nfunction addListeners (server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners () {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError () {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @private\n */\nfunction abortConnection (socket, code, message) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      'Connection: close\\r\\n' +\n      'Content-type: text/html\\r\\n' +\n      `Content-Length: ${Buffer.byteLength(message)}\\r\\n` +\n      '\\r\\n' +\n      message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dzL2xpYi93ZWJzb2NrZXQtc2VydmVyLmpzP2FlYzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzYWZlQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKTtcbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5jb25zdCBodHRwID0gcmVxdWlyZSgnaHR0cCcpO1xuY29uc3QgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbmNvbnN0IFBlck1lc3NhZ2VEZWZsYXRlID0gcmVxdWlyZSgnLi9wZXJtZXNzYWdlLWRlZmxhdGUnKTtcbmNvbnN0IGV4dGVuc2lvbiA9IHJlcXVpcmUoJy4vZXh0ZW5zaW9uJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuY29uc3QgV2ViU29ja2V0ID0gcmVxdWlyZSgnLi93ZWJzb2NrZXQnKTtcblxuY29uc3QgQnVmZmVyID0gc2FmZUJ1ZmZlci5CdWZmZXI7XG5cbi8qKlxuICogQ2xhc3MgcmVwcmVzZW50aW5nIGEgV2ViU29ja2V0IHNlcnZlci5cbiAqXG4gKiBAZXh0ZW5kcyBFdmVudEVtaXR0ZXJcbiAqL1xuY2xhc3MgV2ViU29ja2V0U2VydmVyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIGBXZWJTb2NrZXRTZXJ2ZXJgIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBDb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuaG9zdCBUaGUgaG9zdG5hbWUgd2hlcmUgdG8gYmluZCB0aGUgc2VydmVyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnBvcnQgVGhlIHBvcnQgd2hlcmUgdG8gYmluZCB0aGUgc2VydmVyXG4gICAqIEBwYXJhbSB7aHR0cC5TZXJ2ZXJ9IG9wdGlvbnMuc2VydmVyIEEgcHJlLWNyZWF0ZWQgSFRUUC9TIHNlcnZlciB0byB1c2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy52ZXJpZnlDbGllbnQgQW4gaG9vayB0byByZWplY3QgY29ubmVjdGlvbnNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gb3B0aW9ucy5oYW5kbGVQcm90b2NvbHMgQW4gaG9vayB0byBoYW5kbGUgcHJvdG9jb2xzXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLnBhdGggQWNjZXB0IG9ubHkgY29ubmVjdGlvbnMgbWF0Y2hpbmcgdGhpcyBwYXRoXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5ub1NlcnZlciBFbmFibGUgbm8gc2VydmVyIG1vZGVcbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmNsaWVudFRyYWNraW5nIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byB0cmFjayBjbGllbnRzXG4gICAqIEBwYXJhbSB7KEJvb2xlYW58T2JqZWN0KX0gb3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSBFbmFibGUvZGlzYWJsZSBwZXJtZXNzYWdlLWRlZmxhdGVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMubWF4UGF5bG9hZCBUaGUgbWF4aW11bSBhbGxvd2VkIG1lc3NhZ2Ugc2l6ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBBIGxpc3RlbmVyIGZvciB0aGUgYGxpc3RlbmluZ2AgZXZlbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yIChvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHN1cGVyKCk7XG5cbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICBtYXhQYXlsb2FkOiAxMDAgKiAxMDI0ICogMTAyNCxcbiAgICAgIHBlck1lc3NhZ2VEZWZsYXRlOiBmYWxzZSxcbiAgICAgIGhhbmRsZVByb3RvY29sczogbnVsbCxcbiAgICAgIGNsaWVudFRyYWNraW5nOiB0cnVlLFxuICAgICAgdmVyaWZ5Q2xpZW50OiBudWxsLFxuICAgICAgbm9TZXJ2ZXI6IGZhbHNlLFxuICAgICAgYmFja2xvZzogbnVsbCwgLy8gdXNlIGRlZmF1bHQgKDUxMSBhcyBpbXBsZW1lbnRlZCBpbiBuZXQuanMpXG4gICAgICBzZXJ2ZXI6IG51bGwsXG4gICAgICBob3N0OiBudWxsLFxuICAgICAgcGF0aDogbnVsbCxcbiAgICAgIHBvcnQ6IG51bGxcbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGlmIChvcHRpb25zLnBvcnQgPT0gbnVsbCAmJiAhb3B0aW9ucy5zZXJ2ZXIgJiYgIW9wdGlvbnMubm9TZXJ2ZXIpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdPbmUgb2YgdGhlIFwicG9ydFwiLCBcInNlcnZlclwiLCBvciBcIm5vU2VydmVyXCIgb3B0aW9ucyBtdXN0IGJlIHNwZWNpZmllZCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucG9ydCAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9zZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcigocmVxLCByZXMpID0+IHtcbiAgICAgICAgY29uc3QgYm9keSA9IGh0dHAuU1RBVFVTX0NPREVTWzQyNl07XG5cbiAgICAgICAgcmVzLndyaXRlSGVhZCg0MjYsIHtcbiAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiBib2R5Lmxlbmd0aCxcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW4nXG4gICAgICAgIH0pO1xuICAgICAgICByZXMuZW5kKGJvZHkpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9zZXJ2ZXIubGlzdGVuKG9wdGlvbnMucG9ydCwgb3B0aW9ucy5ob3N0LCBvcHRpb25zLmJhY2tsb2csIGNhbGxiYWNrKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuc2VydmVyKSB7XG4gICAgICB0aGlzLl9zZXJ2ZXIgPSBvcHRpb25zLnNlcnZlcjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc2VydmVyKSB7XG4gICAgICB0aGlzLl9yZW1vdmVMaXN0ZW5lcnMgPSBhZGRMaXN0ZW5lcnModGhpcy5fc2VydmVyLCB7XG4gICAgICAgIGxpc3RlbmluZzogdGhpcy5lbWl0LmJpbmQodGhpcywgJ2xpc3RlbmluZycpLFxuICAgICAgICBlcnJvcjogdGhpcy5lbWl0LmJpbmQodGhpcywgJ2Vycm9yJyksXG4gICAgICAgIHVwZ3JhZGU6IChyZXEsIHNvY2tldCwgaGVhZCkgPT4ge1xuICAgICAgICAgIHRoaXMuaGFuZGxlVXBncmFkZShyZXEsIHNvY2tldCwgaGVhZCwgKHdzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Nvbm5lY3Rpb24nLCB3cywgcmVxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUgPT09IHRydWUpIG9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUgPSB7fTtcbiAgICBpZiAob3B0aW9ucy5jbGllbnRUcmFja2luZykgdGhpcy5jbGllbnRzID0gbmV3IFNldCgpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYm91bmQgYWRkcmVzcywgdGhlIGFkZHJlc3MgZmFtaWx5IG5hbWUsIGFuZCBwb3J0IG9mIHRoZSBzZXJ2ZXJcbiAgICogYXMgcmVwb3J0ZWQgYnkgdGhlIG9wZXJhdGluZyBzeXN0ZW0gaWYgbGlzdGVuaW5nIG9uIGFuIElQIHNvY2tldC5cbiAgICogSWYgdGhlIHNlcnZlciBpcyBsaXN0ZW5pbmcgb24gYSBwaXBlIG9yIFVOSVggZG9tYWluIHNvY2tldCwgdGhlIG5hbWUgaXNcbiAgICogcmV0dXJuZWQgYXMgYSBzdHJpbmcuXG4gICAqXG4gICAqIEByZXR1cm4geyhPYmplY3R8U3RyaW5nfG51bGwpfSBUaGUgYWRkcmVzcyBvZiB0aGUgc2VydmVyXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFkZHJlc3MgKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMubm9TZXJ2ZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHNlcnZlciBpcyBvcGVyYXRpbmcgaW4gXCJub1NlcnZlclwiIG1vZGUnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX3NlcnZlcikgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHRoaXMuX3NlcnZlci5hZGRyZXNzKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2UgdGhlIHNlcnZlci5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY2xvc2UgKGNiKSB7XG4gICAgLy9cbiAgICAvLyBUZXJtaW5hdGUgYWxsIGFzc29jaWF0ZWQgY2xpZW50cy5cbiAgICAvL1xuICAgIGlmICh0aGlzLmNsaWVudHMpIHtcbiAgICAgIGZvciAoY29uc3QgY2xpZW50IG9mIHRoaXMuY2xpZW50cykgY2xpZW50LnRlcm1pbmF0ZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IHNlcnZlciA9IHRoaXMuX3NlcnZlcjtcblxuICAgIGlmIChzZXJ2ZXIpIHtcbiAgICAgIHRoaXMuX3JlbW92ZUxpc3RlbmVycygpO1xuICAgICAgdGhpcy5fcmVtb3ZlTGlzdGVuZXJzID0gdGhpcy5fc2VydmVyID0gbnVsbDtcblxuICAgICAgLy9cbiAgICAgIC8vIENsb3NlIHRoZSBodHRwIHNlcnZlciBpZiBpdCB3YXMgaW50ZXJuYWxseSBjcmVhdGVkLlxuICAgICAgLy9cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMucG9ydCAhPSBudWxsKSByZXR1cm4gc2VydmVyLmNsb3NlKGNiKTtcbiAgICB9XG5cbiAgICBpZiAoY2IpIGNiKCk7XG4gIH1cblxuICAvKipcbiAgICogU2VlIGlmIGEgZ2l2ZW4gcmVxdWVzdCBzaG91bGQgYmUgaGFuZGxlZCBieSB0aGlzIHNlcnZlciBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtodHRwLkluY29taW5nTWVzc2FnZX0gcmVxIFJlcXVlc3Qgb2JqZWN0IHRvIGluc3BlY3RcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gYHRydWVgIGlmIHRoZSByZXF1ZXN0IGlzIHZhbGlkLCBlbHNlIGBmYWxzZWBcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2hvdWxkSGFuZGxlIChyZXEpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLnBhdGggJiYgdXJsLnBhcnNlKHJlcS51cmwpLnBhdGhuYW1lICE9PSB0aGlzLm9wdGlvbnMucGF0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBhIEhUVFAgVXBncmFkZSByZXF1ZXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge2h0dHAuSW5jb21pbmdNZXNzYWdlfSByZXEgVGhlIHJlcXVlc3Qgb2JqZWN0XG4gICAqIEBwYXJhbSB7bmV0LlNvY2tldH0gc29ja2V0IFRoZSBuZXR3b3JrIHNvY2tldCBiZXR3ZWVuIHRoZSBzZXJ2ZXIgYW5kIGNsaWVudFxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gaGVhZCBUaGUgZmlyc3QgcGFja2V0IG9mIHRoZSB1cGdyYWRlZCBzdHJlYW1cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgQ2FsbGJhY2tcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgaGFuZGxlVXBncmFkZSAocmVxLCBzb2NrZXQsIGhlYWQsIGNiKSB7XG4gICAgc29ja2V0Lm9uKCdlcnJvcicsIHNvY2tldE9uRXJyb3IpO1xuXG4gICAgY29uc3QgdmVyc2lvbiA9ICtyZXEuaGVhZGVyc1snc2VjLXdlYnNvY2tldC12ZXJzaW9uJ107XG4gICAgY29uc3QgZXh0ZW5zaW9ucyA9IHt9O1xuXG4gICAgaWYgKFxuICAgICAgcmVxLm1ldGhvZCAhPT0gJ0dFVCcgfHwgcmVxLmhlYWRlcnMudXBncmFkZS50b0xvd2VyQ2FzZSgpICE9PSAnd2Vic29ja2V0JyB8fFxuICAgICAgIXJlcS5oZWFkZXJzWydzZWMtd2Vic29ja2V0LWtleSddIHx8ICh2ZXJzaW9uICE9PSA4ICYmIHZlcnNpb24gIT09IDEzKSB8fFxuICAgICAgIXRoaXMuc2hvdWxkSGFuZGxlKHJlcSlcbiAgICApIHtcbiAgICAgIHJldHVybiBhYm9ydENvbm5lY3Rpb24oc29ja2V0LCA0MDApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgIGNvbnN0IHBlck1lc3NhZ2VEZWZsYXRlID0gbmV3IFBlck1lc3NhZ2VEZWZsYXRlKFxuICAgICAgICB0aGlzLm9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUsXG4gICAgICAgIHRydWUsXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYXhQYXlsb2FkXG4gICAgICApO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBvZmZlcnMgPSBleHRlbnNpb24ucGFyc2UoXG4gICAgICAgICAgcmVxLmhlYWRlcnNbJ3NlYy13ZWJzb2NrZXQtZXh0ZW5zaW9ucyddXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKG9mZmVyc1tQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXSkge1xuICAgICAgICAgIHBlck1lc3NhZ2VEZWZsYXRlLmFjY2VwdChvZmZlcnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV0pO1xuICAgICAgICAgIGV4dGVuc2lvbnNbUGVyTWVzc2FnZURlZmxhdGUuZXh0ZW5zaW9uTmFtZV0gPSBwZXJNZXNzYWdlRGVmbGF0ZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJldHVybiBhYm9ydENvbm5lY3Rpb24oc29ja2V0LCA0MDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcm90b2NvbCA9IChyZXEuaGVhZGVyc1snc2VjLXdlYnNvY2tldC1wcm90b2NvbCddIHx8ICcnKS5zcGxpdCgvLCAqLyk7XG5cbiAgICAvL1xuICAgIC8vIE9wdGlvbmFsbHkgY2FsbCBleHRlcm5hbCBwcm90b2NvbCBzZWxlY3Rpb24gaGFuZGxlci5cbiAgICAvL1xuICAgIGlmICh0aGlzLm9wdGlvbnMuaGFuZGxlUHJvdG9jb2xzKSB7XG4gICAgICBwcm90b2NvbCA9IHRoaXMub3B0aW9ucy5oYW5kbGVQcm90b2NvbHMocHJvdG9jb2wsIHJlcSk7XG4gICAgICBpZiAocHJvdG9jb2wgPT09IGZhbHNlKSByZXR1cm4gYWJvcnRDb25uZWN0aW9uKHNvY2tldCwgNDAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvdG9jb2wgPSBwcm90b2NvbFswXTtcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIE9wdGlvbmFsbHkgY2FsbCBleHRlcm5hbCBjbGllbnQgdmVyaWZpY2F0aW9uIGhhbmRsZXIuXG4gICAgLy9cbiAgICBpZiAodGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudCkge1xuICAgICAgY29uc3QgaW5mbyA9IHtcbiAgICAgICAgb3JpZ2luOiByZXEuaGVhZGVyc1tgJHt2ZXJzaW9uID09PSA4ID8gJ3NlYy13ZWJzb2NrZXQtb3JpZ2luJyA6ICdvcmlnaW4nfWBdLFxuICAgICAgICBzZWN1cmU6ICEhKHJlcS5jb25uZWN0aW9uLmF1dGhvcml6ZWQgfHwgcmVxLmNvbm5lY3Rpb24uZW5jcnlwdGVkKSxcbiAgICAgICAgcmVxXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudChpbmZvLCAodmVyaWZpZWQsIGNvZGUsIG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICBpZiAoIXZlcmlmaWVkKSByZXR1cm4gYWJvcnRDb25uZWN0aW9uKHNvY2tldCwgY29kZSB8fCA0MDEsIG1lc3NhZ2UpO1xuXG4gICAgICAgICAgdGhpcy5jb21wbGV0ZVVwZ3JhZGUocHJvdG9jb2wsIGV4dGVuc2lvbnMsIHJlcSwgc29ja2V0LCBoZWFkLCBjYik7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudChpbmZvKSkgcmV0dXJuIGFib3J0Q29ubmVjdGlvbihzb2NrZXQsIDQwMSk7XG4gICAgfVxuXG4gICAgdGhpcy5jb21wbGV0ZVVwZ3JhZGUocHJvdG9jb2wsIGV4dGVuc2lvbnMsIHJlcSwgc29ja2V0LCBoZWFkLCBjYik7XG4gIH1cblxuICAvKipcbiAgICogVXBncmFkZSB0aGUgY29ubmVjdGlvbiB0byBXZWJTb2NrZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwcm90b2NvbCBUaGUgY2hvc2VuIHN1YnByb3RvY29sXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBleHRlbnNpb25zIFRoZSBhY2NlcHRlZCBleHRlbnNpb25zXG4gICAqIEBwYXJhbSB7aHR0cC5JbmNvbWluZ01lc3NhZ2V9IHJlcSBUaGUgcmVxdWVzdCBvYmplY3RcbiAgICogQHBhcmFtIHtuZXQuU29ja2V0fSBzb2NrZXQgVGhlIG5ldHdvcmsgc29ja2V0IGJldHdlZW4gdGhlIHNlcnZlciBhbmQgY2xpZW50XG4gICAqIEBwYXJhbSB7QnVmZmVyfSBoZWFkIFRoZSBmaXJzdCBwYWNrZXQgb2YgdGhlIHVwZ3JhZGVkIHN0cmVhbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiBDYWxsYmFja1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY29tcGxldGVVcGdyYWRlIChwcm90b2NvbCwgZXh0ZW5zaW9ucywgcmVxLCBzb2NrZXQsIGhlYWQsIGNiKSB7XG4gICAgLy9cbiAgICAvLyBEZXN0cm95IHRoZSBzb2NrZXQgaWYgdGhlIGNsaWVudCBoYXMgYWxyZWFkeSBzZW50IGEgRklOIHBhY2tldC5cbiAgICAvL1xuICAgIGlmICghc29ja2V0LnJlYWRhYmxlIHx8ICFzb2NrZXQud3JpdGFibGUpIHJldHVybiBzb2NrZXQuZGVzdHJveSgpO1xuXG4gICAgY29uc3Qga2V5ID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTEnKVxuICAgICAgLnVwZGF0ZShyZXEuaGVhZGVyc1snc2VjLXdlYnNvY2tldC1rZXknXSArIGNvbnN0YW50cy5HVUlELCAnYmluYXJ5JylcbiAgICAgIC5kaWdlc3QoJ2Jhc2U2NCcpO1xuXG4gICAgY29uc3QgaGVhZGVycyA9IFtcbiAgICAgICdIVFRQLzEuMSAxMDEgU3dpdGNoaW5nIFByb3RvY29scycsXG4gICAgICAnVXBncmFkZTogd2Vic29ja2V0JyxcbiAgICAgICdDb25uZWN0aW9uOiBVcGdyYWRlJyxcbiAgICAgIGBTZWMtV2ViU29ja2V0LUFjY2VwdDogJHtrZXl9YFxuICAgIF07XG5cbiAgICBjb25zdCB3cyA9IG5ldyBXZWJTb2NrZXQobnVsbCk7XG5cbiAgICBpZiAocHJvdG9jb2wpIHtcbiAgICAgIGhlYWRlcnMucHVzaChgU2VjLVdlYlNvY2tldC1Qcm90b2NvbDogJHtwcm90b2NvbH1gKTtcbiAgICAgIHdzLnByb3RvY29sID0gcHJvdG9jb2w7XG4gICAgfVxuICAgIGlmIChleHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdKSB7XG4gICAgICBjb25zdCBwYXJhbXMgPSBleHRlbnNpb25zW1Blck1lc3NhZ2VEZWZsYXRlLmV4dGVuc2lvbk5hbWVdLnBhcmFtcztcbiAgICAgIGNvbnN0IHZhbHVlID0gZXh0ZW5zaW9uLmZvcm1hdCh7XG4gICAgICAgIFtQZXJNZXNzYWdlRGVmbGF0ZS5leHRlbnNpb25OYW1lXTogW3BhcmFtc11cbiAgICAgIH0pO1xuICAgICAgaGVhZGVycy5wdXNoKGBTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnM6ICR7dmFsdWV9YCk7XG4gICAgICB3cy5fZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG4gICAgfVxuXG4gICAgLy9cbiAgICAvLyBBbGxvdyBleHRlcm5hbCBtb2RpZmljYXRpb24vaW5zcGVjdGlvbiBvZiBoYW5kc2hha2UgaGVhZGVycy5cbiAgICAvL1xuICAgIHRoaXMuZW1pdCgnaGVhZGVycycsIGhlYWRlcnMsIHJlcSk7XG5cbiAgICBzb2NrZXQud3JpdGUoaGVhZGVycy5jb25jYXQoJ1xcclxcbicpLmpvaW4oJ1xcclxcbicpKTtcbiAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgc29ja2V0T25FcnJvcik7XG5cbiAgICB3cy5zZXRTb2NrZXQoc29ja2V0LCBoZWFkLCB0aGlzLm9wdGlvbnMubWF4UGF5bG9hZCk7XG5cbiAgICBpZiAodGhpcy5jbGllbnRzKSB7XG4gICAgICB0aGlzLmNsaWVudHMuYWRkKHdzKTtcbiAgICAgIHdzLm9uKCdjbG9zZScsICgpID0+IHRoaXMuY2xpZW50cy5kZWxldGUod3MpKTtcbiAgICB9XG5cbiAgICBjYih3cyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXRTZXJ2ZXI7XG5cbi8qKlxuICogQWRkIGV2ZW50IGxpc3RlbmVycyBvbiBhbiBgRXZlbnRFbWl0dGVyYCB1c2luZyBhIG1hcCBvZiA8ZXZlbnQsIGxpc3RlbmVyPlxuICogcGFpcnMuXG4gKlxuICogQHBhcmFtIHtFdmVudEVtaXR0ZXJ9IHNlcnZlciBUaGUgZXZlbnQgZW1pdHRlclxuICogQHBhcmFtIHtPYmplY3QuPFN0cmluZywgRnVuY3Rpb24+fSBtYXAgVGhlIGxpc3RlbmVycyB0byBhZGRcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgd2lsbCByZW1vdmUgdGhlIGFkZGVkIGxpc3RlbmVycyB3aGVuIGNhbGxlZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRkTGlzdGVuZXJzIChzZXJ2ZXIsIG1hcCkge1xuICBmb3IgKGNvbnN0IGV2ZW50IG9mIE9iamVjdC5rZXlzKG1hcCkpIHNlcnZlci5vbihldmVudCwgbWFwW2V2ZW50XSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVycyAoKSB7XG4gICAgZm9yIChjb25zdCBldmVudCBvZiBPYmplY3Qua2V5cyhtYXApKSB7XG4gICAgICBzZXJ2ZXIucmVtb3ZlTGlzdGVuZXIoZXZlbnQsIG1hcFtldmVudF0pO1xuICAgIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBIYW5kbGUgcHJlbWF0dXJlIHNvY2tldCBlcnJvcnMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc29ja2V0T25FcnJvciAoKSB7XG4gIHRoaXMuZGVzdHJveSgpO1xufVxuXG4vKipcbiAqIENsb3NlIHRoZSBjb25uZWN0aW9uIHdoZW4gcHJlY29uZGl0aW9ucyBhcmUgbm90IGZ1bGZpbGxlZC5cbiAqXG4gKiBAcGFyYW0ge25ldC5Tb2NrZXR9IHNvY2tldCBUaGUgc29ja2V0IG9mIHRoZSB1cGdyYWRlIHJlcXVlc3RcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlIFRoZSBIVFRQIHJlc3BvbnNlIHN0YXR1cyBjb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gW21lc3NhZ2VdIFRoZSBIVFRQIHJlc3BvbnNlIGJvZHlcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFib3J0Q29ubmVjdGlvbiAoc29ja2V0LCBjb2RlLCBtZXNzYWdlKSB7XG4gIGlmIChzb2NrZXQud3JpdGFibGUpIHtcbiAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCBodHRwLlNUQVRVU19DT0RFU1tjb2RlXTtcbiAgICBzb2NrZXQud3JpdGUoXG4gICAgICBgSFRUUC8xLjEgJHtjb2RlfSAke2h0dHAuU1RBVFVTX0NPREVTW2NvZGVdfVxcclxcbmAgK1xuICAgICAgJ0Nvbm5lY3Rpb246IGNsb3NlXFxyXFxuJyArXG4gICAgICAnQ29udGVudC10eXBlOiB0ZXh0L2h0bWxcXHJcXG4nICtcbiAgICAgIGBDb250ZW50LUxlbmd0aDogJHtCdWZmZXIuYnl0ZUxlbmd0aChtZXNzYWdlKX1cXHJcXG5gICtcbiAgICAgICdcXHJcXG4nICtcbiAgICAgIG1lc3NhZ2VcbiAgICApO1xuICB9XG5cbiAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIHNvY2tldE9uRXJyb3IpO1xuICBzb2NrZXQuZGVzdHJveSgpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvd3MvbGliL3dlYnNvY2tldC1zZXJ2ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE0OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///149\n");

/***/ }),
/* 150 */
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/ClientVoiceManager.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Collection = __webpack_require__(/*! ../../util/Collection */ 3);\nconst VoiceConnection = __webpack_require__(/*! ./VoiceConnection */ 151);\n\n/**\n * Manages all the voice stuff for the client.\n * @private\n */\nclass ClientVoiceManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this voice manager\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * A collection mapping connection IDs to the Connection objects\n     * @type {Collection<Snowflake, VoiceConnection>}\n     */\n    this.connections = new Collection();\n\n    this.client.on('self.voiceServer', this.onVoiceServer.bind(this));\n    this.client.on('self.voiceStateUpdate', this.onVoiceStateUpdate.bind(this));\n  }\n\n  onVoiceServer({ guild_id, token, endpoint }) {\n    const connection = this.connections.get(guild_id);\n    if (connection) connection.setTokenAndEndpoint(token, endpoint);\n  }\n\n  onVoiceStateUpdate({ guild_id, session_id, channel_id }) {\n    const connection = this.connections.get(guild_id);\n    if (connection) {\n      connection.channel = this.client.channels.get(channel_id);\n      connection.setSessionID(session_id);\n    }\n  }\n\n  /**\n   * Sets up a request to join a voice channel.\n   * @param {VoiceChannel} channel The voice channel to join\n   * @returns {Promise<VoiceConnection>}\n   */\n  joinChannel(channel) {\n    return new Promise((resolve, reject) => {\n      if (!channel.joinable) {\n        if (channel.full) {\n          throw new Error('You do not have permission to join this voice channel; it is full.');\n        } else {\n          throw new Error('You do not have permission to join this voice channel.');\n        }\n      }\n\n      let connection = this.connections.get(channel.guild.id);\n\n      if (connection) {\n        if (connection.channel.id !== channel.id) {\n          this.connections.get(channel.guild.id).updateChannel(channel);\n        }\n        resolve(connection);\n        return;\n      } else {\n        connection = new VoiceConnection(this, channel);\n        this.connections.set(channel.guild.id, connection);\n      }\n\n      connection.once('failed', reason => {\n        this.connections.delete(channel.guild.id);\n        reject(reason);\n      });\n\n      connection.once('authenticated', () => {\n        connection.once('ready', () => resolve(connection));\n        connection.once('error', reject);\n        connection.once('disconnect', () => this.connections.delete(channel.guild.id));\n      });\n    });\n  }\n}\n\nmodule.exports = ClientVoiceManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS9DbGllbnRWb2ljZU1hbmFnZXIuanM/NTljMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9Db2xsZWN0aW9uJyk7XG5jb25zdCBWb2ljZUNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL1ZvaWNlQ29ubmVjdGlvbicpO1xuXG4vKipcbiAqIE1hbmFnZXMgYWxsIHRoZSB2b2ljZSBzdHVmZiBmb3IgdGhlIGNsaWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENsaWVudFZvaWNlTWFuYWdlciB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQgdGhhdCBpbnN0YW50aWF0ZWQgdGhpcyB2b2ljZSBtYW5hZ2VyXG4gICAgICogQHR5cGUge0NsaWVudH1cbiAgICAgKi9cbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIEEgY29sbGVjdGlvbiBtYXBwaW5nIGNvbm5lY3Rpb24gSURzIHRvIHRoZSBDb25uZWN0aW9uIG9iamVjdHNcbiAgICAgKiBAdHlwZSB7Q29sbGVjdGlvbjxTbm93Zmxha2UsIFZvaWNlQ29ubmVjdGlvbj59XG4gICAgICovXG4gICAgdGhpcy5jb25uZWN0aW9ucyA9IG5ldyBDb2xsZWN0aW9uKCk7XG5cbiAgICB0aGlzLmNsaWVudC5vbignc2VsZi52b2ljZVNlcnZlcicsIHRoaXMub25Wb2ljZVNlcnZlci5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmNsaWVudC5vbignc2VsZi52b2ljZVN0YXRlVXBkYXRlJywgdGhpcy5vblZvaWNlU3RhdGVVcGRhdGUuYmluZCh0aGlzKSk7XG4gIH1cblxuICBvblZvaWNlU2VydmVyKHsgZ3VpbGRfaWQsIHRva2VuLCBlbmRwb2ludCB9KSB7XG4gICAgY29uc3QgY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbnMuZ2V0KGd1aWxkX2lkKTtcbiAgICBpZiAoY29ubmVjdGlvbikgY29ubmVjdGlvbi5zZXRUb2tlbkFuZEVuZHBvaW50KHRva2VuLCBlbmRwb2ludCk7XG4gIH1cblxuICBvblZvaWNlU3RhdGVVcGRhdGUoeyBndWlsZF9pZCwgc2Vzc2lvbl9pZCwgY2hhbm5lbF9pZCB9KSB7XG4gICAgY29uc3QgY29ubmVjdGlvbiA9IHRoaXMuY29ubmVjdGlvbnMuZ2V0KGd1aWxkX2lkKTtcbiAgICBpZiAoY29ubmVjdGlvbikge1xuICAgICAgY29ubmVjdGlvbi5jaGFubmVsID0gdGhpcy5jbGllbnQuY2hhbm5lbHMuZ2V0KGNoYW5uZWxfaWQpO1xuICAgICAgY29ubmVjdGlvbi5zZXRTZXNzaW9uSUQoc2Vzc2lvbl9pZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgYSByZXF1ZXN0IHRvIGpvaW4gYSB2b2ljZSBjaGFubmVsLlxuICAgKiBAcGFyYW0ge1ZvaWNlQ2hhbm5lbH0gY2hhbm5lbCBUaGUgdm9pY2UgY2hhbm5lbCB0byBqb2luXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPFZvaWNlQ29ubmVjdGlvbj59XG4gICAqL1xuICBqb2luQ2hhbm5lbChjaGFubmVsKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICghY2hhbm5lbC5qb2luYWJsZSkge1xuICAgICAgICBpZiAoY2hhbm5lbC5mdWxsKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgZG8gbm90IGhhdmUgcGVybWlzc2lvbiB0byBqb2luIHRoaXMgdm9pY2UgY2hhbm5lbDsgaXQgaXMgZnVsbC4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGpvaW4gdGhpcyB2b2ljZSBjaGFubmVsLicpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxldCBjb25uZWN0aW9uID0gdGhpcy5jb25uZWN0aW9ucy5nZXQoY2hhbm5lbC5ndWlsZC5pZCk7XG5cbiAgICAgIGlmIChjb25uZWN0aW9uKSB7XG4gICAgICAgIGlmIChjb25uZWN0aW9uLmNoYW5uZWwuaWQgIT09IGNoYW5uZWwuaWQpIHtcbiAgICAgICAgICB0aGlzLmNvbm5lY3Rpb25zLmdldChjaGFubmVsLmd1aWxkLmlkKS51cGRhdGVDaGFubmVsKGNoYW5uZWwpO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoY29ubmVjdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbm5lY3Rpb24gPSBuZXcgVm9pY2VDb25uZWN0aW9uKHRoaXMsIGNoYW5uZWwpO1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25zLnNldChjaGFubmVsLmd1aWxkLmlkLCBjb25uZWN0aW9uKTtcbiAgICAgIH1cblxuICAgICAgY29ubmVjdGlvbi5vbmNlKCdmYWlsZWQnLCByZWFzb24gPT4ge1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25zLmRlbGV0ZShjaGFubmVsLmd1aWxkLmlkKTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcblxuICAgICAgY29ubmVjdGlvbi5vbmNlKCdhdXRoZW50aWNhdGVkJywgKCkgPT4ge1xuICAgICAgICBjb25uZWN0aW9uLm9uY2UoJ3JlYWR5JywgKCkgPT4gcmVzb2x2ZShjb25uZWN0aW9uKSk7XG4gICAgICAgIGNvbm5lY3Rpb24ub25jZSgnZXJyb3InLCByZWplY3QpO1xuICAgICAgICBjb25uZWN0aW9uLm9uY2UoJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB0aGlzLmNvbm5lY3Rpb25zLmRlbGV0ZShjaGFubmVsLmd1aWxkLmlkKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENsaWVudFZvaWNlTWFuYWdlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS9DbGllbnRWb2ljZU1hbmFnZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///150\n");

/***/ }),
/* 151 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/VoiceConnection.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const VoiceWebSocket = __webpack_require__(/*! ./VoiceWebSocket */ 152);\nconst VoiceUDP = __webpack_require__(/*! ./VoiceUDPClient */ 154);\nconst Util = __webpack_require__(/*! ../../util/Util */ 4);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst AudioPlayer = __webpack_require__(/*! ./player/AudioPlayer */ 157);\nconst VoiceReceiver = __webpack_require__(/*! ./receiver/VoiceReceiver */ 166);\nconst EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter;\nconst Prism = __webpack_require__(/*! prism-media */ 42);\n\n/**\n * Represents a connection to a guild's voice server.\n * ```js\n * // Obtained using:\n * voiceChannel.join()\n *   .then(connection => {\n *\n *   });\n * ```\n * @extends {EventEmitter}\n */\nclass VoiceConnection extends EventEmitter {\n  constructor(voiceManager, channel) {\n    super();\n\n    /**\n     * The voice manager that instantiated this connection\n     * @type {ClientVoiceManager}\n     */\n    this.voiceManager = voiceManager;\n\n    /**\n     * The client that instantiated this connection\n     * @type {Client}\n     */\n    this.client = voiceManager.client;\n\n    /**\n     * @external Prism\n     * @see {@link https://github.com/hydrabolt/prism-media}\n     */\n\n    /**\n     * The audio transcoder for this connection\n     * @type {Prism}\n     */\n    this.prism = new Prism();\n\n    /**\n     * The voice channel this connection is currently serving\n     * @type {VoiceChannel}\n     */\n    this.channel = channel;\n\n    /**\n     * The current status of the voice connection\n     * @type {number}\n     */\n    this.status = Constants.VoiceStatus.AUTHENTICATING;\n\n    /**\n     * Whether we're currently transmitting audio\n     * @type {boolean}\n     */\n    this.speaking = false;\n\n    /**\n     * An array of Voice Receivers that have been created for this connection\n     * @type {VoiceReceiver[]}\n     */\n    this.receivers = [];\n\n    /**\n     * The authentication data needed to connect to the voice server\n     * @type {Object}\n     * @private\n     */\n    this.authentication = {};\n\n    /**\n     * The audio player for this voice connection\n     * @type {AudioPlayer}\n     */\n    this.player = new AudioPlayer(this);\n\n    this.player.on('debug', m => {\n      /**\n       * Debug info from the connection.\n       * @event VoiceConnection#debug\n       * @param {string} message The debug message\n       */\n      this.emit('debug', `audio player - ${m}`);\n    });\n\n    this.player.on('error', e => {\n      /**\n       * Warning info from the connection.\n       * @event VoiceConnection#warn\n       * @param {string|Error} warning The warning\n       */\n      this.emit('warn', e);\n    });\n\n    /**\n     * Map SSRC to speaking values\n     * @type {Map<number, boolean>}\n     * @private\n     */\n    this.ssrcMap = new Map();\n\n    /**\n     * Object that wraps contains the `ws` and `udp` sockets of this voice connection\n     * @type {Object}\n     * @private\n     */\n    this.sockets = {};\n\n    this.authenticate();\n  }\n\n  /**\n   * The current stream dispatcher (if any)\n   * @type {?StreamDispatcher}\n   * @readonly\n   */\n  get dispatcher() {\n    return this.player.dispatcher;\n  }\n\n  /**\n   * Sets whether the voice connection should display as \"speaking\" or not.\n   * @param {boolean} value Whether or not to speak\n   * @private\n   */\n  setSpeaking(value) {\n    if (this.speaking === value) return;\n    if (this.status !== Constants.VoiceStatus.CONNECTED) return;\n    this.speaking = value;\n    this.sockets.ws.sendPacket({\n      op: Constants.VoiceOPCodes.SPEAKING,\n      d: {\n        speaking: true,\n        delay: 0,\n      },\n    }).catch(e => {\n      this.emit('debug', e);\n    });\n  }\n\n  /**\n   * Sends a request to the main gateway to join a voice channel.\n   * @param {Object} [options] The options to provide\n   */\n  sendVoiceStateUpdate(options = {}) {\n    options = Util.mergeDefault({\n      guild_id: this.channel.guild.id,\n      channel_id: this.channel.id,\n      self_mute: false,\n      self_deaf: false,\n    }, options);\n\n    this.client.ws.send({\n      op: Constants.OPCodes.VOICE_STATE_UPDATE,\n      d: options,\n    });\n  }\n\n  /**\n   * Set the token and endpoint required to connect to the voice servers.\n   * @param {string} token The voice token\n   * @param {string} endpoint The voice endpoint\n   * @returns {void}\n   */\n  setTokenAndEndpoint(token, endpoint) {\n    if (!endpoint) {\n      // Signifies awaiting endpoint stage\n      return;\n    }\n\n    if (!token) {\n      this.authenticateFailed('Token not provided from voice server packet.');\n      return;\n    }\n\n    endpoint = endpoint.match(/([^:]*)/)[0];\n\n    if (!endpoint) {\n      this.authenticateFailed('Invalid endpoint received.');\n      return;\n    }\n\n    if (this.status === Constants.VoiceStatus.AUTHENTICATING) {\n      this.authentication.token = token;\n      this.authentication.endpoint = endpoint;\n      this.checkAuthenticated();\n    } else if (token !== this.authentication.token || endpoint !== this.authentication.endpoint) {\n      this.reconnect(token, endpoint);\n    }\n  }\n\n  /**\n   * Sets the Session ID for the connection.\n   * @param {string} sessionID The voice session ID\n   */\n  setSessionID(sessionID) {\n    if (!sessionID) {\n      this.authenticateFailed('Session ID not supplied.');\n      return;\n    }\n\n    if (this.status === Constants.VoiceStatus.AUTHENTICATING) {\n      this.authentication.sessionID = sessionID;\n      this.checkAuthenticated();\n    } else if (sessionID !== this.authentication.sessionID) {\n      this.authentication.sessionID = sessionID;\n      /**\n       * Emitted when a new session ID is received.\n       * @event VoiceConnection#newSession\n       * @private\n       */\n      this.emit('newSession', sessionID);\n    }\n  }\n\n  /**\n   * Checks whether the voice connection is authenticated.\n   * @private\n   */\n  checkAuthenticated() {\n    const { token, endpoint, sessionID } = this.authentication;\n\n    if (token && endpoint && sessionID) {\n      clearTimeout(this.connectTimeout);\n      this.status = Constants.VoiceStatus.CONNECTING;\n      /**\n       * Emitted when we successfully initiate a voice connection.\n       * @event VoiceConnection#authenticated\n       */\n      this.emit('authenticated');\n      this.connect();\n    }\n  }\n\n  /**\n   * Invoked when we fail to initiate a voice connection.\n   * @param {string} reason The reason for failure\n   * @private\n   */\n  authenticateFailed(reason) {\n    clearTimeout(this.connectTimeout);\n    if (this.status === Constants.VoiceStatus.AUTHENTICATING) {\n      /**\n       * Emitted when we fail to initiate a voice connection.\n       * @event VoiceConnection#failed\n       * @param {Error} error The encountered error\n       */\n      this.emit('failed', new Error(reason));\n    } else {\n      this.emit('error', new Error(reason));\n    }\n    this.status = Constants.VoiceStatus.DISCONNECTED;\n  }\n\n  /**\n   * Move to a different voice channel in the same guild.\n   * @param {VoiceChannel} channel The channel to move to\n   * @private\n   */\n  updateChannel(channel) {\n    this.channel = channel;\n    this.sendVoiceStateUpdate();\n  }\n\n  /**\n   * Attempts to authenticate to the voice server.\n   * @private\n   */\n  authenticate() {\n    this.sendVoiceStateUpdate();\n    this.connectTimeout = this.client.setTimeout(\n      () => this.authenticateFailed(new Error('Connection not established within 15 seconds.')), 15000);\n  }\n\n  /**\n   * Attempts to reconnect to the voice server (typically after a region change).\n   * @param {string} token The voice token\n   * @param {string} endpoint The voice endpoint\n   * @private\n   */\n  reconnect(token, endpoint) {\n    this.authentication.token = token;\n    this.authentication.endpoint = endpoint;\n\n    this.status = Constants.VoiceStatus.RECONNECTING;\n    /**\n     * Emitted when the voice connection is reconnecting (typically after a region change).\n     * @event VoiceConnection#reconnecting\n     */\n    this.emit('reconnecting');\n    this.connect();\n  }\n\n  /**\n   * Disconnect the voice connection, causing a disconnect and closing event to be emitted.\n   */\n  disconnect() {\n    this.emit('closing');\n    this.sendVoiceStateUpdate({\n      channel_id: null,\n    });\n    this.player.destroy();\n    this.cleanup();\n    this.status = Constants.VoiceStatus.DISCONNECTED;\n    /**\n     * Emitted when the voice connection disconnects.\n     * @event VoiceConnection#disconnect\n     */\n    this.emit('disconnect');\n  }\n\n  /**\n   * Cleans up after disconnect.\n   * @private\n   */\n  cleanup() {\n    const { ws, udp } = this.sockets;\n\n    if (ws) {\n      ws.removeAllListeners('error');\n      ws.removeAllListeners('ready');\n      ws.removeAllListeners('sessionDescription');\n      ws.removeAllListeners('speaking');\n    }\n\n    if (udp) udp.removeAllListeners('error');\n\n    this.sockets.ws = null;\n    this.sockets.udp = null;\n  }\n\n  /**\n   * Connect the voice connection.\n   * @private\n   */\n  connect() {\n    if (this.status !== Constants.VoiceStatus.RECONNECTING) {\n      if (this.sockets.ws) throw new Error('There is already an existing WebSocket connection.');\n      if (this.sockets.udp) throw new Error('There is already an existing UDP connection.');\n    }\n\n    if (this.sockets.ws) this.sockets.ws.shutdown();\n    if (this.sockets.udp) this.sockets.udp.shutdown();\n\n    this.sockets.ws = new VoiceWebSocket(this);\n    this.sockets.udp = new VoiceUDP(this);\n\n    const { ws, udp } = this.sockets;\n\n    ws.on('error', err => this.emit('error', err));\n    udp.on('error', err => this.emit('error', err));\n    ws.on('ready', this.onReady.bind(this));\n    ws.on('sessionDescription', this.onSessionDescription.bind(this));\n    ws.on('speaking', this.onSpeaking.bind(this));\n  }\n\n  /**\n   * Invoked when the voice websocket is ready.\n   * @param {Object} data The received data\n   * @private\n   */\n  onReady({ port, ssrc }) {\n    this.authentication.port = port;\n    this.authentication.ssrc = ssrc;\n\n    const udp = this.sockets.udp;\n    /**\n     * Emitted whenever the connection encounters an error.\n     * @event VoiceConnection#error\n     * @param {Error} error The encountered error\n     */\n    udp.findEndpointAddress()\n      .then(address => {\n        udp.createUDPSocket(address);\n      }, e => this.emit('error', e));\n  }\n\n  /**\n   * Invoked when a session description is received.\n   * @param {string} mode The encryption mode\n   * @param {string} secret The secret key\n   * @private\n   */\n  onSessionDescription(mode, secret) {\n    this.authentication.encryptionMode = mode;\n    this.authentication.secretKey = secret;\n\n    this.status = Constants.VoiceStatus.CONNECTED;\n    /**\n     * Emitted once the connection is ready, when a promise to join a voice channel resolves,\n     * the connection will already be ready.\n     * @event VoiceConnection#ready\n     */\n    this.emit('ready');\n  }\n\n  /**\n   * Invoked when a speaking event is received.\n   * @param {Object} data The received data\n   * @private\n   */\n  onSpeaking({ user_id, ssrc, speaking }) {\n    const guild = this.channel.guild;\n    const user = this.client.users.get(user_id);\n    this.ssrcMap.set(+ssrc, user);\n    if (!speaking) {\n      for (const receiver of this.receivers) {\n        receiver.stoppedSpeaking(user);\n      }\n    }\n    /**\n     * Emitted whenever a user starts/stops speaking.\n     * @event VoiceConnection#speaking\n     * @param {User} user The user that has started/stopped speaking\n     * @param {boolean} speaking Whether or not the user is speaking\n     */\n    if (this.status === Constants.VoiceStatus.CONNECTED) this.emit('speaking', user, speaking);\n    guild._memberSpeakUpdate(user_id, speaking);\n  }\n\n  /**\n   * Options that can be passed to stream-playing methods:\n   * @typedef {Object} StreamOptions\n   * @property {number} [seek=0] The time to seek to\n   * @property {number} [volume=1] The volume to play at\n   * @property {number} [passes=1] How many times to send the voice packet to reduce packet loss\n   * @property {number|string} [bitrate=48000] The bitrate (quality) of the audio.\n   * If set to 'auto', the voice channel's bitrate will be used\n   */\n\n  /**\n   * Play the given file in the voice connection.\n   * @param {string} file The absolute path to the file\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   * @example\n   * // Play files natively\n   * voiceChannel.join()\n   *   .then(connection => {\n   *     const dispatcher = connection.playFile('C:/Users/Discord/Desktop/music.mp3');\n   *   })\n   *   .catch(console.error);\n   */\n  playFile(file, options) {\n    return this.player.playUnknownStream(`file:${file}`, options);\n  }\n\n  /**\n   * Play an arbitrary input that can be [handled by ffmpeg](https://ffmpeg.org/ffmpeg-protocols.html#Description)\n   * @param {string} input the arbitrary input\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   */\n  playArbitraryInput(input, options) {\n    return this.player.playUnknownStream(input, options);\n  }\n\n  /**\n   * Plays and converts an audio stream in the voice connection.\n   * @param {ReadableStream} stream The audio stream to play\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   * @example\n   * // Play streams using ytdl-core\n   * const ytdl = require('ytdl-core');\n   * const streamOptions = { seek: 0, volume: 1 };\n   * voiceChannel.join()\n   *   .then(connection => {\n   *     const stream = ytdl('https://www.youtube.com/watch?v=XAWgeLF9EVQ', { filter : 'audioonly' });\n   *     const dispatcher = connection.playStream(stream, streamOptions);\n   *   })\n   *   .catch(console.error);\n   */\n  playStream(stream, options) {\n    return this.player.playUnknownStream(stream, options);\n  }\n\n  /**\n   * Plays a stream of 16-bit signed stereo PCM.\n   * @param {ReadableStream} stream The audio stream to play\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   */\n  playConvertedStream(stream, options) {\n    return this.player.playPCMStream(stream, options);\n  }\n\n  /**\n   * Plays an Opus encoded stream.\n   * <warn>Note that inline volume is not compatible with this method.</warn>\n   * @param {ReadableStream} stream The Opus audio stream to play\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   */\n  playOpusStream(stream, options) {\n    return this.player.playOpusStream(stream, options);\n  }\n\n  /**\n   * Plays a voice broadcast.\n   * @param {VoiceBroadcast} broadcast The broadcast to play\n   * @param {StreamOptions} [options] Options for playing the stream\n   * @returns {StreamDispatcher}\n   * @example\n   * // Play a broadcast\n   * const broadcast = client\n   *   .createVoiceBroadcast()\n   *   .playFile('./test.mp3');\n   * const dispatcher = voiceConnection.playBroadcast(broadcast);\n   */\n  playBroadcast(broadcast, options) {\n    return this.player.playBroadcast(broadcast, options);\n  }\n\n  /**\n   * Creates a VoiceReceiver so you can start listening to voice data.\n   * It's recommended to only create one of these.\n   * @returns {VoiceReceiver}\n   */\n  createReceiver() {\n    const receiver = new VoiceReceiver(this);\n    this.receivers.push(receiver);\n    return receiver;\n  }\n}\n\nmodule.exports = VoiceConnection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///151\n");

/***/ }),
/* 152 */
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/VoiceWebSocket.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst SecretKey = __webpack_require__(/*! ./util/SecretKey */ 153);\nconst EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter;\n\nlet WebSocket;\ntry {\n  WebSocket = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"uws\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n} catch (err) {\n  WebSocket = __webpack_require__(/*! ws */ 70);\n}\n\n/**\n * Represents a Voice Connection's WebSocket.\n * @extends {EventEmitter}\n * @private\n */\nclass VoiceWebSocket extends EventEmitter {\n  constructor(voiceConnection) {\n    super();\n\n    /**\n     * The client of this voice WebSocket\n     * @type {Client}\n     */\n    this.client = voiceConnection.voiceManager.client;\n\n    /**\n     * The Voice Connection that this WebSocket serves\n     * @type {VoiceConnection}\n     */\n    this.voiceConnection = voiceConnection;\n\n    /**\n     * How many connection attempts have been made\n     * @type {number}\n     */\n    this.attempts = 0;\n\n    this.connect();\n    this.dead = false;\n    this.voiceConnection.on('closing', this.shutdown.bind(this));\n  }\n\n  shutdown() {\n    this.dead = true;\n    this.reset();\n  }\n\n  /**\n   * Resets the current WebSocket.\n   */\n  reset() {\n    if (this.ws) {\n      if (this.ws.readyState !== WebSocket.CLOSED) this.ws.close();\n      this.ws = null;\n    }\n    this.clearHeartbeat();\n  }\n\n  /**\n   * Starts connecting to the Voice WebSocket Server.\n   */\n  connect() {\n    if (this.dead) return;\n    if (this.ws) this.reset();\n    if (this.attempts >= 5) {\n      this.emit('debug', new Error(`Too many connection attempts (${this.attempts}).`));\n      return;\n    }\n\n    this.attempts++;\n\n    /**\n     * The actual WebSocket used to connect to the Voice WebSocket Server.\n     * @type {WebSocket}\n     */\n    this.ws = new WebSocket(`wss://${this.voiceConnection.authentication.endpoint}`);\n    this.ws.onopen = this.onOpen.bind(this);\n    this.ws.onmessage = this.onMessage.bind(this);\n    this.ws.onclose = this.onClose.bind(this);\n    this.ws.onerror = this.onError.bind(this);\n  }\n\n  /**\n   * Sends data to the WebSocket if it is open.\n   * @param {string} data The data to send to the WebSocket\n   * @returns {Promise<string>}\n   */\n  send(data) {\n    return new Promise((resolve, reject) => {\n      if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n        throw new Error(`Voice websocket not open to send ${data}.`);\n      }\n      this.ws.send(data, null, error => {\n        if (error) reject(error); else resolve(data);\n      });\n    });\n  }\n\n  /**\n   * JSON.stringify's a packet and then sends it to the WebSocket Server.\n   * @param {Object} packet The packet to send\n   * @returns {Promise<string>}\n   */\n  sendPacket(packet) {\n    try {\n      packet = JSON.stringify(packet);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    return this.send(packet);\n  }\n\n  /**\n   * Called whenever the WebSocket opens.\n   */\n  onOpen() {\n    this.sendPacket({\n      op: Constants.OPCodes.DISPATCH,\n      d: {\n        server_id: this.voiceConnection.channel.guild.id,\n        user_id: this.client.user.id,\n        token: this.voiceConnection.authentication.token,\n        session_id: this.voiceConnection.authentication.sessionID,\n      },\n    }).catch(() => {\n      this.emit('error', new Error('Tried to send join packet, but the WebSocket is not open.'));\n    });\n  }\n\n  /**\n   * Called whenever a message is received from the WebSocket.\n   * @param {MessageEvent} event The message event that was received\n   * @returns {void}\n   */\n  onMessage(event) {\n    try {\n      return this.onPacket(JSON.parse(event.data));\n    } catch (error) {\n      return this.onError(error);\n    }\n  }\n\n  /**\n   * Called whenever the connection to the WebSocket server is lost.\n   */\n  onClose() {\n    if (!this.dead) this.client.setTimeout(this.connect.bind(this), this.attempts * 1000);\n  }\n\n  /**\n   * Called whenever an error occurs with the WebSocket.\n   * @param {Error} error The error that occurred\n   */\n  onError(error) {\n    this.emit('error', error);\n  }\n\n  /**\n   * Called whenever a valid packet is received from the WebSocket.\n   * @param {Object} packet The received packet\n   */\n  onPacket(packet) {\n    switch (packet.op) {\n      case Constants.VoiceOPCodes.READY:\n        this.setHeartbeat(packet.d.heartbeat_interval);\n        /**\n         * Emitted once the voice WebSocket receives the ready packet.\n         * @param {Object} packet The received packet\n         * @event VoiceWebSocket#ready\n         */\n        this.emit('ready', packet.d);\n        break;\n      case Constants.VoiceOPCodes.SESSION_DESCRIPTION:\n        /**\n         * Emitted once the Voice Websocket receives a description of this voice session.\n         * @param {string} encryptionMode The type of encryption being used\n         * @param {SecretKey} secretKey The secret key used for encryption\n         * @event VoiceWebSocket#sessionDescription\n         */\n        this.emit('sessionDescription', packet.d.mode, new SecretKey(packet.d.secret_key));\n        break;\n      case Constants.VoiceOPCodes.SPEAKING:\n        /**\n         * Emitted whenever a speaking packet is received.\n         * @param {Object} data\n         * @event VoiceWebSocket#speaking\n         */\n        this.emit('speaking', packet.d);\n        break;\n      default:\n        /**\n         * Emitted when an unhandled packet is received.\n         * @param {Object} packet\n         * @event VoiceWebSocket#unknownPacket\n         */\n        this.emit('unknownPacket', packet);\n        break;\n    }\n  }\n\n  /**\n   * Sets an interval at which to send a heartbeat packet to the WebSocket.\n   * @param {number} interval The interval at which to send a heartbeat packet\n   */\n  setHeartbeat(interval) {\n    if (!interval || isNaN(interval)) {\n      this.onError(new Error('Tried to set voice heartbeat but no valid interval was specified.'));\n      return;\n    }\n    if (this.heartbeatInterval) {\n      /**\n       * Emitted whenver the voice WebSocket encounters a non-fatal error.\n       * @param {string} warn The warning\n       * @event VoiceWebSocket#warn\n       */\n      this.emit('warn', 'A voice heartbeat interval is being overwritten');\n      clearInterval(this.heartbeatInterval);\n    }\n    this.heartbeatInterval = this.client.setInterval(this.sendHeartbeat.bind(this), interval);\n  }\n\n  /**\n   * Clears a heartbeat interval, if one exists.\n   */\n  clearHeartbeat() {\n    if (!this.heartbeatInterval) {\n      this.emit('warn', 'Tried to clear a heartbeat interval that does not exist');\n      return;\n    }\n    clearInterval(this.heartbeatInterval);\n    this.heartbeatInterval = null;\n  }\n\n  /**\n   * Sends a heartbeat packet.\n   */\n  sendHeartbeat() {\n    this.sendPacket({ op: Constants.VoiceOPCodes.HEARTBEAT, d: null }).catch(() => {\n      this.emit('warn', 'Tried to send heartbeat, but connection is not open');\n      this.clearHeartbeat();\n    });\n  }\n}\n\nmodule.exports = VoiceWebSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///152\n");

/***/ }),
/* 153 */
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/util/SecretKey.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("/**\n * Represents a Secret Key used in encryption over voice.\n * @private\n */\nclass SecretKey {\n  constructor(key) {\n    /**\n     * The key used for encryption\n     * @type {Uint8Array}\n     */\n    this.key = new Uint8Array(new ArrayBuffer(key.length));\n    for (const index in key) this.key[index] = key[index];\n  }\n}\n\nmodule.exports = SecretKey;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS91dGlsL1NlY3JldEtleS5qcz81ZTFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVwcmVzZW50cyBhIFNlY3JldCBLZXkgdXNlZCBpbiBlbmNyeXB0aW9uIG92ZXIgdm9pY2UuXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBTZWNyZXRLZXkge1xuICBjb25zdHJ1Y3RvcihrZXkpIHtcbiAgICAvKipcbiAgICAgKiBUaGUga2V5IHVzZWQgZm9yIGVuY3J5cHRpb25cbiAgICAgKiBAdHlwZSB7VWludDhBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmtleSA9IG5ldyBVaW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcihrZXkubGVuZ3RoKSk7XG4gICAgZm9yIChjb25zdCBpbmRleCBpbiBrZXkpIHRoaXMua2V5W2luZGV4XSA9IGtleVtpbmRleF07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZWNyZXRLZXk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvdm9pY2UvdXRpbC9TZWNyZXRLZXkuanNcbi8vIG1vZHVsZSBpZCA9IDE1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///153\n");

/***/ }),
/* 154 */
/*!********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/VoiceUDPClient.js ***!
  \********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const udp = __webpack_require__(/*! dgram */ 155);\nconst dns = __webpack_require__(/*! dns */ 156);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter;\n\n/**\n * Represents a UDP client for a Voice Connection.\n * @extends {EventEmitter}\n * @private\n */\nclass VoiceConnectionUDPClient extends EventEmitter {\n  constructor(voiceConnection) {\n    super();\n\n    /**\n     * The voice connection that this UDP client serves\n     * @type {VoiceConnection}\n     */\n    this.voiceConnection = voiceConnection;\n\n    /**\n     * The UDP socket\n     * @type {?Socket}\n     */\n    this.socket = null;\n\n    /**\n     * The address of the Discord voice server\n     * @type {?string}\n     */\n    this.discordAddress = null;\n\n    /**\n     * The local IP address\n     * @type {?string}\n     */\n    this.localAddress = null;\n\n    /**\n     * The local port\n     * @type {?string}\n     */\n    this.localPort = null;\n\n    this.voiceConnection.on('closing', this.shutdown.bind(this));\n  }\n\n  shutdown() {\n    if (this.socket) {\n      this.socket.removeAllListeners('message');\n      try {\n        this.socket.close();\n      } finally {\n        this.socket = null;\n      }\n    }\n  }\n\n  /**\n   * The port of the Discord voice server\n   * @type {number}\n   * @readonly\n   */\n  get discordPort() {\n    return this.voiceConnection.authentication.port;\n  }\n\n  /**\n   * Tries to resolve the voice server endpoint to an address.\n   * @returns {Promise<string>}\n   */\n  findEndpointAddress() {\n    return new Promise((resolve, reject) => {\n      dns.lookup(this.voiceConnection.authentication.endpoint, (error, address) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        this.discordAddress = address;\n        resolve(address);\n      });\n    });\n  }\n\n  /**\n   * Send a packet to the UDP client.\n   * @param {Object} packet The packet to send\n   * @returns {Promise<Object>}\n   */\n  send(packet) {\n    return new Promise((resolve, reject) => {\n      if (!this.socket) throw new Error('Tried to send a UDP packet, but there is no socket available.');\n      if (!this.discordAddress || !this.discordPort) throw new Error('Malformed UDP address or port.');\n      this.socket.send(packet, 0, packet.length, this.discordPort, this.discordAddress, error => {\n        if (error) reject(error); else resolve(packet);\n      });\n    });\n  }\n\n  createUDPSocket(address) {\n    this.discordAddress = address;\n    const socket = this.socket = udp.createSocket('udp4');\n\n    socket.once('message', message => {\n      const packet = parseLocalPacket(message);\n      if (packet.error) {\n        this.emit('error', packet.error);\n        return;\n      }\n\n      this.localAddress = packet.address;\n      this.localPort = packet.port;\n\n      this.voiceConnection.sockets.ws.sendPacket({\n        op: Constants.VoiceOPCodes.SELECT_PROTOCOL,\n        d: {\n          protocol: 'udp',\n          data: {\n            address: packet.address,\n            port: packet.port,\n            mode: 'xsalsa20_poly1305',\n          },\n        },\n      });\n    });\n\n    const blankMessage = Buffer.alloc(70);\n    blankMessage.writeUIntBE(this.voiceConnection.authentication.ssrc, 0, 4);\n    this.send(blankMessage);\n  }\n}\n\nfunction parseLocalPacket(message) {\n  try {\n    const packet = Buffer.from(message);\n    let address = '';\n    for (let i = 4; i < packet.indexOf(0, i); i++) address += String.fromCharCode(packet[i]);\n    const port = parseInt(packet.readUIntLE(packet.length - 2, 2).toString(10), 10);\n    return { address, port };\n  } catch (error) {\n    return { error };\n  }\n}\n\nmodule.exports = VoiceConnectionUDPClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS9Wb2ljZVVEUENsaWVudC5qcz9mNjY0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHVkcCA9IHJlcXVpcmUoJ2RncmFtJyk7XG5jb25zdCBkbnMgPSByZXF1aXJlKCdkbnMnKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIFVEUCBjbGllbnQgZm9yIGEgVm9pY2UgQ29ubmVjdGlvbi5cbiAqIEBleHRlbmRzIHtFdmVudEVtaXR0ZXJ9XG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBWb2ljZUNvbm5lY3Rpb25VRFBDbGllbnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3Rvcih2b2ljZUNvbm5lY3Rpb24pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHZvaWNlIGNvbm5lY3Rpb24gdGhhdCB0aGlzIFVEUCBjbGllbnQgc2VydmVzXG4gICAgICogQHR5cGUge1ZvaWNlQ29ubmVjdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLnZvaWNlQ29ubmVjdGlvbiA9IHZvaWNlQ29ubmVjdGlvbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBVRFAgc29ja2V0XG4gICAgICogQHR5cGUgez9Tb2NrZXR9XG4gICAgICovXG4gICAgdGhpcy5zb2NrZXQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFkZHJlc3Mgb2YgdGhlIERpc2NvcmQgdm9pY2Ugc2VydmVyXG4gICAgICogQHR5cGUgez9zdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5kaXNjb3JkQWRkcmVzcyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYWwgSVAgYWRkcmVzc1xuICAgICAqIEB0eXBlIHs/c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMubG9jYWxBZGRyZXNzID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb2NhbCBwb3J0XG4gICAgICogQHR5cGUgez9zdHJpbmd9XG4gICAgICovXG4gICAgdGhpcy5sb2NhbFBvcnQgPSBudWxsO1xuXG4gICAgdGhpcy52b2ljZUNvbm5lY3Rpb24ub24oJ2Nsb3NpbmcnLCB0aGlzLnNodXRkb3duLmJpbmQodGhpcykpO1xuICB9XG5cbiAgc2h1dGRvd24oKSB7XG4gICAgaWYgKHRoaXMuc29ja2V0KSB7XG4gICAgICB0aGlzLnNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ21lc3NhZ2UnKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuc29ja2V0LmNsb3NlKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnNvY2tldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBwb3J0IG9mIHRoZSBEaXNjb3JkIHZvaWNlIHNlcnZlclxuICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBkaXNjb3JkUG9ydCgpIHtcbiAgICByZXR1cm4gdGhpcy52b2ljZUNvbm5lY3Rpb24uYXV0aGVudGljYXRpb24ucG9ydDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmllcyB0byByZXNvbHZlIHRoZSB2b2ljZSBzZXJ2ZXIgZW5kcG9pbnQgdG8gYW4gYWRkcmVzcy5cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIGZpbmRFbmRwb2ludEFkZHJlc3MoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRucy5sb29rdXAodGhpcy52b2ljZUNvbm5lY3Rpb24uYXV0aGVudGljYXRpb24uZW5kcG9pbnQsIChlcnJvciwgYWRkcmVzcykgPT4ge1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc2NvcmRBZGRyZXNzID0gYWRkcmVzcztcbiAgICAgICAgcmVzb2x2ZShhZGRyZXNzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgYSBwYWNrZXQgdG8gdGhlIFVEUCBjbGllbnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgVGhlIHBhY2tldCB0byBzZW5kXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59XG4gICAqL1xuICBzZW5kKHBhY2tldCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAoIXRoaXMuc29ja2V0KSB0aHJvdyBuZXcgRXJyb3IoJ1RyaWVkIHRvIHNlbmQgYSBVRFAgcGFja2V0LCBidXQgdGhlcmUgaXMgbm8gc29ja2V0IGF2YWlsYWJsZS4nKTtcbiAgICAgIGlmICghdGhpcy5kaXNjb3JkQWRkcmVzcyB8fCAhdGhpcy5kaXNjb3JkUG9ydCkgdGhyb3cgbmV3IEVycm9yKCdNYWxmb3JtZWQgVURQIGFkZHJlc3Mgb3IgcG9ydC4nKTtcbiAgICAgIHRoaXMuc29ja2V0LnNlbmQocGFja2V0LCAwLCBwYWNrZXQubGVuZ3RoLCB0aGlzLmRpc2NvcmRQb3J0LCB0aGlzLmRpc2NvcmRBZGRyZXNzLCBlcnJvciA9PiB7XG4gICAgICAgIGlmIChlcnJvcikgcmVqZWN0KGVycm9yKTsgZWxzZSByZXNvbHZlKHBhY2tldCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZVVEUFNvY2tldChhZGRyZXNzKSB7XG4gICAgdGhpcy5kaXNjb3JkQWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgY29uc3Qgc29ja2V0ID0gdGhpcy5zb2NrZXQgPSB1ZHAuY3JlYXRlU29ja2V0KCd1ZHA0Jyk7XG5cbiAgICBzb2NrZXQub25jZSgnbWVzc2FnZScsIG1lc3NhZ2UgPT4ge1xuICAgICAgY29uc3QgcGFja2V0ID0gcGFyc2VMb2NhbFBhY2tldChtZXNzYWdlKTtcbiAgICAgIGlmIChwYWNrZXQuZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHBhY2tldC5lcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2NhbEFkZHJlc3MgPSBwYWNrZXQuYWRkcmVzcztcbiAgICAgIHRoaXMubG9jYWxQb3J0ID0gcGFja2V0LnBvcnQ7XG5cbiAgICAgIHRoaXMudm9pY2VDb25uZWN0aW9uLnNvY2tldHMud3Muc2VuZFBhY2tldCh7XG4gICAgICAgIG9wOiBDb25zdGFudHMuVm9pY2VPUENvZGVzLlNFTEVDVF9QUk9UT0NPTCxcbiAgICAgICAgZDoge1xuICAgICAgICAgIHByb3RvY29sOiAndWRwJyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhZGRyZXNzOiBwYWNrZXQuYWRkcmVzcyxcbiAgICAgICAgICAgIHBvcnQ6IHBhY2tldC5wb3J0LFxuICAgICAgICAgICAgbW9kZTogJ3hzYWxzYTIwX3BvbHkxMzA1JyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBibGFua01lc3NhZ2UgPSBCdWZmZXIuYWxsb2MoNzApO1xuICAgIGJsYW5rTWVzc2FnZS53cml0ZVVJbnRCRSh0aGlzLnZvaWNlQ29ubmVjdGlvbi5hdXRoZW50aWNhdGlvbi5zc3JjLCAwLCA0KTtcbiAgICB0aGlzLnNlbmQoYmxhbmtNZXNzYWdlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZUxvY2FsUGFja2V0KG1lc3NhZ2UpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYWNrZXQgPSBCdWZmZXIuZnJvbShtZXNzYWdlKTtcbiAgICBsZXQgYWRkcmVzcyA9ICcnO1xuICAgIGZvciAobGV0IGkgPSA0OyBpIDwgcGFja2V0LmluZGV4T2YoMCwgaSk7IGkrKykgYWRkcmVzcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhY2tldFtpXSk7XG4gICAgY29uc3QgcG9ydCA9IHBhcnNlSW50KHBhY2tldC5yZWFkVUludExFKHBhY2tldC5sZW5ndGggLSAyLCAyKS50b1N0cmluZygxMCksIDEwKTtcbiAgICByZXR1cm4geyBhZGRyZXNzLCBwb3J0IH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHsgZXJyb3IgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZvaWNlQ29ubmVjdGlvblVEUENsaWVudDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS9Wb2ljZVVEUENsaWVudC5qc1xuLy8gbW9kdWxlIGlkID0gMTU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///154\n");

/***/ }),
/* 155 */
/*!************************!*\
  !*** external "dgram" ***!
  \************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"dgram\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZGdyYW1cIj8zN2VjIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImRncmFtXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiZGdyYW1cIlxuLy8gbW9kdWxlIGlkID0gMTU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///155\n");

/***/ }),
/* 156 */
/*!**********************!*\
  !*** external "dns" ***!
  \**********************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = require(\"dns\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiZG5zXCI/MTNhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJkbnNcIik7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJkbnNcIlxuLy8gbW9kdWxlIGlkID0gMTU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///156\n");

/***/ }),
/* 157 */
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/player/AudioPlayer.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter;\nconst Prism = __webpack_require__(/*! prism-media */ 42);\nconst StreamDispatcher = __webpack_require__(/*! ../dispatcher/StreamDispatcher */ 161);\nconst Collection = __webpack_require__(/*! ../../../util/Collection */ 3);\nconst OpusEncoders = __webpack_require__(/*! ../opus/OpusEngineList */ 44);\n\nconst ffmpegArguments = [\n  '-analyzeduration', '0',\n  '-loglevel', '0',\n  '-f', 's16le',\n  '-ar', '48000',\n  '-ac', '2',\n];\n\n/**\n * An Audio Player for a Voice Connection.\n * @private\n * @extends {EventEmitter}\n */\nclass AudioPlayer extends EventEmitter {\n  constructor(voiceConnection) {\n    super();\n    /**\n     * The voice connection that the player serves\n     * @type {VoiceConnection}\n     */\n    this.voiceConnection = voiceConnection;\n    /**\n     * The prism transcoder that the player uses\n     * @type {Prism}\n     */\n    this.prism = new Prism();\n    this.streams = new Collection();\n    this.currentStream = {};\n    this.streamingData = {\n      channels: 2,\n      count: 0,\n      sequence: 0,\n      timestamp: 0,\n      pausedTime: 0,\n    };\n    this.voiceConnection.once('closing', () => this.destroyCurrentStream());\n  }\n\n  /**\n   * The current transcoder\n   * @type {?Object}\n   * @readonly\n   */\n  get transcoder() {\n    return this.currentStream.transcoder;\n  }\n\n  /**\n   * The current dispatcher\n   * @type {?StreamDispatcher}\n   * @readonly\n   */\n  get dispatcher() {\n    return this.currentStream.dispatcher;\n  }\n\n  destroy() {\n    if (this.opusEncoder) this.opusEncoder.destroy();\n    this.opusEncoder = null;\n  }\n\n  destroyCurrentStream() {\n    const transcoder = this.transcoder;\n    const dispatcher = this.dispatcher;\n    if (transcoder) transcoder.kill();\n    if (dispatcher) {\n      const end = dispatcher.listeners('end')[0];\n      const error = dispatcher.listeners('error')[0];\n      if (end) dispatcher.removeListener('end', end);\n      if (error) dispatcher.removeListener('error', error);\n      dispatcher.destroy('end');\n    }\n    this.currentStream = {};\n  }\n\n  /**\n   * Set the bitrate of the current Opus encoder.\n   * @param {number} value New bitrate, in kbps\n   * If set to 'auto', the voice channel's bitrate will be used\n   */\n  setBitrate(value) {\n    if (!value) return;\n    if (!this.opusEncoder) return;\n    const bitrate = value === 'auto' ? this.voiceConnection.channel.bitrate : value;\n    this.opusEncoder.setBitrate(bitrate);\n  }\n\n  playUnknownStream(stream, options = {}) {\n    this.destroy();\n    this.opusEncoder = OpusEncoders.fetch(options);\n    const transcoder = this.prism.transcode({\n      type: 'ffmpeg',\n      media: stream,\n      ffmpegArguments: ffmpegArguments.concat(['-ss', String(options.seek || 0)]),\n    });\n    this.destroyCurrentStream();\n    this.currentStream = {\n      transcoder: transcoder,\n      output: transcoder.output,\n      input: stream,\n    };\n    transcoder.on('error', e => {\n      this.destroyCurrentStream();\n      if (this.listenerCount('error') > 0) this.emit('error', e);\n      this.emit('warn', `prism transcoder error - ${e}`);\n    });\n    return this.playPCMStream(transcoder.output, options, true);\n  }\n\n  playPCMStream(stream, options = {}, fromUnknown = false) {\n    this.destroy();\n    this.opusEncoder = OpusEncoders.fetch(options);\n    this.setBitrate(options.bitrate);\n    const dispatcher = this.createDispatcher(stream, options);\n    if (fromUnknown) {\n      this.currentStream.dispatcher = dispatcher;\n    } else {\n      this.destroyCurrentStream();\n      this.currentStream = {\n        dispatcher,\n        input: stream,\n        output: stream,\n      };\n    }\n    return dispatcher;\n  }\n\n  playOpusStream(stream, options = {}) {\n    options.opus = true;\n    this.destroyCurrentStream();\n    const dispatcher = this.createDispatcher(stream, options);\n    this.currentStream = {\n      dispatcher,\n      input: stream,\n      output: stream,\n    };\n    return dispatcher;\n  }\n\n  playBroadcast(broadcast, options) {\n    this.destroyCurrentStream();\n    const dispatcher = this.createDispatcher(broadcast, options);\n    this.currentStream = {\n      dispatcher,\n      broadcast,\n      input: broadcast,\n      output: broadcast,\n    };\n    broadcast.registerDispatcher(dispatcher);\n    return dispatcher;\n  }\n\n  createDispatcher(stream, { seek = 0, volume = 1, passes = 1, opus } = {}) {\n    const options = { seek, volume, passes, opus };\n\n    const dispatcher = new StreamDispatcher(this, stream, options);\n    dispatcher.on('end', () => this.destroyCurrentStream());\n    dispatcher.on('error', () => this.destroyCurrentStream());\n    dispatcher.on('speaking', value => this.voiceConnection.setSpeaking(value));\n    return dispatcher;\n  }\n}\n\nmodule.exports = AudioPlayer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS9wbGF5ZXIvQXVkaW9QbGF5ZXIuanM/MTA1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5jb25zdCBQcmlzbSA9IHJlcXVpcmUoJ3ByaXNtLW1lZGlhJyk7XG5jb25zdCBTdHJlYW1EaXNwYXRjaGVyID0gcmVxdWlyZSgnLi4vZGlzcGF0Y2hlci9TdHJlYW1EaXNwYXRjaGVyJyk7XG5jb25zdCBDb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vLi4vLi4vdXRpbC9Db2xsZWN0aW9uJyk7XG5jb25zdCBPcHVzRW5jb2RlcnMgPSByZXF1aXJlKCcuLi9vcHVzL09wdXNFbmdpbmVMaXN0Jyk7XG5cbmNvbnN0IGZmbXBlZ0FyZ3VtZW50cyA9IFtcbiAgJy1hbmFseXplZHVyYXRpb24nLCAnMCcsXG4gICctbG9nbGV2ZWwnLCAnMCcsXG4gICctZicsICdzMTZsZScsXG4gICctYXInLCAnNDgwMDAnLFxuICAnLWFjJywgJzInLFxuXTtcblxuLyoqXG4gKiBBbiBBdWRpbyBQbGF5ZXIgZm9yIGEgVm9pY2UgQ29ubmVjdGlvbi5cbiAqIEBwcml2YXRlXG4gKiBAZXh0ZW5kcyB7RXZlbnRFbWl0dGVyfVxuICovXG5jbGFzcyBBdWRpb1BsYXllciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGNvbnN0cnVjdG9yKHZvaWNlQ29ubmVjdGlvbikge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqXG4gICAgICogVGhlIHZvaWNlIGNvbm5lY3Rpb24gdGhhdCB0aGUgcGxheWVyIHNlcnZlc1xuICAgICAqIEB0eXBlIHtWb2ljZUNvbm5lY3Rpb259XG4gICAgICovXG4gICAgdGhpcy52b2ljZUNvbm5lY3Rpb24gPSB2b2ljZUNvbm5lY3Rpb247XG4gICAgLyoqXG4gICAgICogVGhlIHByaXNtIHRyYW5zY29kZXIgdGhhdCB0aGUgcGxheWVyIHVzZXNcbiAgICAgKiBAdHlwZSB7UHJpc219XG4gICAgICovXG4gICAgdGhpcy5wcmlzbSA9IG5ldyBQcmlzbSgpO1xuICAgIHRoaXMuc3RyZWFtcyA9IG5ldyBDb2xsZWN0aW9uKCk7XG4gICAgdGhpcy5jdXJyZW50U3RyZWFtID0ge307XG4gICAgdGhpcy5zdHJlYW1pbmdEYXRhID0ge1xuICAgICAgY2hhbm5lbHM6IDIsXG4gICAgICBjb3VudDogMCxcbiAgICAgIHNlcXVlbmNlOiAwLFxuICAgICAgdGltZXN0YW1wOiAwLFxuICAgICAgcGF1c2VkVGltZTogMCxcbiAgICB9O1xuICAgIHRoaXMudm9pY2VDb25uZWN0aW9uLm9uY2UoJ2Nsb3NpbmcnLCAoKSA9PiB0aGlzLmRlc3Ryb3lDdXJyZW50U3RyZWFtKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHRyYW5zY29kZXJcbiAgICogQHR5cGUgez9PYmplY3R9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHRyYW5zY29kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFN0cmVhbS50cmFuc2NvZGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGRpc3BhdGNoZXJcbiAgICogQHR5cGUgez9TdHJlYW1EaXNwYXRjaGVyfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBkaXNwYXRjaGVyKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRTdHJlYW0uZGlzcGF0Y2hlcjtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMub3B1c0VuY29kZXIpIHRoaXMub3B1c0VuY29kZXIuZGVzdHJveSgpO1xuICAgIHRoaXMub3B1c0VuY29kZXIgPSBudWxsO1xuICB9XG5cbiAgZGVzdHJveUN1cnJlbnRTdHJlYW0oKSB7XG4gICAgY29uc3QgdHJhbnNjb2RlciA9IHRoaXMudHJhbnNjb2RlcjtcbiAgICBjb25zdCBkaXNwYXRjaGVyID0gdGhpcy5kaXNwYXRjaGVyO1xuICAgIGlmICh0cmFuc2NvZGVyKSB0cmFuc2NvZGVyLmtpbGwoKTtcbiAgICBpZiAoZGlzcGF0Y2hlcikge1xuICAgICAgY29uc3QgZW5kID0gZGlzcGF0Y2hlci5saXN0ZW5lcnMoJ2VuZCcpWzBdO1xuICAgICAgY29uc3QgZXJyb3IgPSBkaXNwYXRjaGVyLmxpc3RlbmVycygnZXJyb3InKVswXTtcbiAgICAgIGlmIChlbmQpIGRpc3BhdGNoZXIucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGVuZCk7XG4gICAgICBpZiAoZXJyb3IpIGRpc3BhdGNoZXIucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgZGlzcGF0Y2hlci5kZXN0cm95KCdlbmQnKTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50U3RyZWFtID0ge307XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBiaXRyYXRlIG9mIHRoZSBjdXJyZW50IE9wdXMgZW5jb2Rlci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIE5ldyBiaXRyYXRlLCBpbiBrYnBzXG4gICAqIElmIHNldCB0byAnYXV0bycsIHRoZSB2b2ljZSBjaGFubmVsJ3MgYml0cmF0ZSB3aWxsIGJlIHVzZWRcbiAgICovXG4gIHNldEJpdHJhdGUodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLm9wdXNFbmNvZGVyKSByZXR1cm47XG4gICAgY29uc3QgYml0cmF0ZSA9IHZhbHVlID09PSAnYXV0bycgPyB0aGlzLnZvaWNlQ29ubmVjdGlvbi5jaGFubmVsLmJpdHJhdGUgOiB2YWx1ZTtcbiAgICB0aGlzLm9wdXNFbmNvZGVyLnNldEJpdHJhdGUoYml0cmF0ZSk7XG4gIH1cblxuICBwbGF5VW5rbm93blN0cmVhbShzdHJlYW0sIG9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIHRoaXMub3B1c0VuY29kZXIgPSBPcHVzRW5jb2RlcnMuZmV0Y2gob3B0aW9ucyk7XG4gICAgY29uc3QgdHJhbnNjb2RlciA9IHRoaXMucHJpc20udHJhbnNjb2RlKHtcbiAgICAgIHR5cGU6ICdmZm1wZWcnLFxuICAgICAgbWVkaWE6IHN0cmVhbSxcbiAgICAgIGZmbXBlZ0FyZ3VtZW50czogZmZtcGVnQXJndW1lbnRzLmNvbmNhdChbJy1zcycsIFN0cmluZyhvcHRpb25zLnNlZWsgfHwgMCldKSxcbiAgICB9KTtcbiAgICB0aGlzLmRlc3Ryb3lDdXJyZW50U3RyZWFtKCk7XG4gICAgdGhpcy5jdXJyZW50U3RyZWFtID0ge1xuICAgICAgdHJhbnNjb2RlcjogdHJhbnNjb2RlcixcbiAgICAgIG91dHB1dDogdHJhbnNjb2Rlci5vdXRwdXQsXG4gICAgICBpbnB1dDogc3RyZWFtLFxuICAgIH07XG4gICAgdHJhbnNjb2Rlci5vbignZXJyb3InLCBlID0+IHtcbiAgICAgIHRoaXMuZGVzdHJveUN1cnJlbnRTdHJlYW0oKTtcbiAgICAgIGlmICh0aGlzLmxpc3RlbmVyQ291bnQoJ2Vycm9yJykgPiAwKSB0aGlzLmVtaXQoJ2Vycm9yJywgZSk7XG4gICAgICB0aGlzLmVtaXQoJ3dhcm4nLCBgcHJpc20gdHJhbnNjb2RlciBlcnJvciAtICR7ZX1gKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5wbGF5UENNU3RyZWFtKHRyYW5zY29kZXIub3V0cHV0LCBvcHRpb25zLCB0cnVlKTtcbiAgfVxuXG4gIHBsYXlQQ01TdHJlYW0oc3RyZWFtLCBvcHRpb25zID0ge30sIGZyb21Vbmtub3duID0gZmFsc2UpIHtcbiAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB0aGlzLm9wdXNFbmNvZGVyID0gT3B1c0VuY29kZXJzLmZldGNoKG9wdGlvbnMpO1xuICAgIHRoaXMuc2V0Qml0cmF0ZShvcHRpb25zLmJpdHJhdGUpO1xuICAgIGNvbnN0IGRpc3BhdGNoZXIgPSB0aGlzLmNyZWF0ZURpc3BhdGNoZXIoc3RyZWFtLCBvcHRpb25zKTtcbiAgICBpZiAoZnJvbVVua25vd24pIHtcbiAgICAgIHRoaXMuY3VycmVudFN0cmVhbS5kaXNwYXRjaGVyID0gZGlzcGF0Y2hlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kZXN0cm95Q3VycmVudFN0cmVhbSgpO1xuICAgICAgdGhpcy5jdXJyZW50U3RyZWFtID0ge1xuICAgICAgICBkaXNwYXRjaGVyLFxuICAgICAgICBpbnB1dDogc3RyZWFtLFxuICAgICAgICBvdXRwdXQ6IHN0cmVhbSxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBkaXNwYXRjaGVyO1xuICB9XG5cbiAgcGxheU9wdXNTdHJlYW0oc3RyZWFtLCBvcHRpb25zID0ge30pIHtcbiAgICBvcHRpb25zLm9wdXMgPSB0cnVlO1xuICAgIHRoaXMuZGVzdHJveUN1cnJlbnRTdHJlYW0oKTtcbiAgICBjb25zdCBkaXNwYXRjaGVyID0gdGhpcy5jcmVhdGVEaXNwYXRjaGVyKHN0cmVhbSwgb3B0aW9ucyk7XG4gICAgdGhpcy5jdXJyZW50U3RyZWFtID0ge1xuICAgICAgZGlzcGF0Y2hlcixcbiAgICAgIGlucHV0OiBzdHJlYW0sXG4gICAgICBvdXRwdXQ6IHN0cmVhbSxcbiAgICB9O1xuICAgIHJldHVybiBkaXNwYXRjaGVyO1xuICB9XG5cbiAgcGxheUJyb2FkY2FzdChicm9hZGNhc3QsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlc3Ryb3lDdXJyZW50U3RyZWFtKCk7XG4gICAgY29uc3QgZGlzcGF0Y2hlciA9IHRoaXMuY3JlYXRlRGlzcGF0Y2hlcihicm9hZGNhc3QsIG9wdGlvbnMpO1xuICAgIHRoaXMuY3VycmVudFN0cmVhbSA9IHtcbiAgICAgIGRpc3BhdGNoZXIsXG4gICAgICBicm9hZGNhc3QsXG4gICAgICBpbnB1dDogYnJvYWRjYXN0LFxuICAgICAgb3V0cHV0OiBicm9hZGNhc3QsXG4gICAgfTtcbiAgICBicm9hZGNhc3QucmVnaXN0ZXJEaXNwYXRjaGVyKGRpc3BhdGNoZXIpO1xuICAgIHJldHVybiBkaXNwYXRjaGVyO1xuICB9XG5cbiAgY3JlYXRlRGlzcGF0Y2hlcihzdHJlYW0sIHsgc2VlayA9IDAsIHZvbHVtZSA9IDEsIHBhc3NlcyA9IDEsIG9wdXMgfSA9IHt9KSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgc2Vlaywgdm9sdW1lLCBwYXNzZXMsIG9wdXMgfTtcblxuICAgIGNvbnN0IGRpc3BhdGNoZXIgPSBuZXcgU3RyZWFtRGlzcGF0Y2hlcih0aGlzLCBzdHJlYW0sIG9wdGlvbnMpO1xuICAgIGRpc3BhdGNoZXIub24oJ2VuZCcsICgpID0+IHRoaXMuZGVzdHJveUN1cnJlbnRTdHJlYW0oKSk7XG4gICAgZGlzcGF0Y2hlci5vbignZXJyb3InLCAoKSA9PiB0aGlzLmRlc3Ryb3lDdXJyZW50U3RyZWFtKCkpO1xuICAgIGRpc3BhdGNoZXIub24oJ3NwZWFraW5nJywgdmFsdWUgPT4gdGhpcy52b2ljZUNvbm5lY3Rpb24uc2V0U3BlYWtpbmcodmFsdWUpKTtcbiAgICByZXR1cm4gZGlzcGF0Y2hlcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEF1ZGlvUGxheWVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL3BsYXllci9BdWRpb1BsYXllci5qc1xuLy8gbW9kdWxlIGlkID0gMTU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///157\n");

/***/ }),
/* 158 */
/*!***********************************************!*\
  !*** ./node_modules/prism-media/src/Prism.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const MediaTranscoder = __webpack_require__(/*! ./transcoders/MediaTranscoder */ 76);\r\n\r\nclass Prism {\r\n  constructor() {\r\n    this.transcoder = new MediaTranscoder(this);\r\n  }\r\n\r\n  createTranscoder(...args) {\r\n    return this.transcode(...args);\r\n  }\r\n\r\n  transcode(...args) {\r\n    return this.transcoder.transcode(...args);\r\n  }\r\n}\r\n\r\nmodule.exports = Prism;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByaXNtLW1lZGlhL3NyYy9QcmlzbS5qcz81NWZjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1lZGlhVHJhbnNjb2RlciA9IHJlcXVpcmUoJy4vdHJhbnNjb2RlcnMvTWVkaWFUcmFuc2NvZGVyJyk7XHJcblxyXG5jbGFzcyBQcmlzbSB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnRyYW5zY29kZXIgPSBuZXcgTWVkaWFUcmFuc2NvZGVyKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlVHJhbnNjb2RlciguLi5hcmdzKSB7XHJcbiAgICByZXR1cm4gdGhpcy50cmFuc2NvZGUoLi4uYXJncyk7XHJcbiAgfVxyXG5cclxuICB0cmFuc2NvZGUoLi4uYXJncykge1xyXG4gICAgcmV0dXJuIHRoaXMudHJhbnNjb2Rlci50cmFuc2NvZGUoLi4uYXJncyk7XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFByaXNtO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wcmlzbS1tZWRpYS9zcmMvUHJpc20uanNcbi8vIG1vZHVsZSBpZCA9IDE1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///158\n");

/***/ }),
/* 159 */
/*!*******************************************************************!*\
  !*** ./node_modules/prism-media/src/transcoders/ffmpeg/Ffmpeg.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const ChildProcess = __webpack_require__(/*! child_process */ 43);\r\nconst FfmpegProcess = __webpack_require__(/*! ./FfmpegProcess */ 160);\r\n\r\nclass FfmpegTranscoder {\r\n  constructor(mediaTranscoder) {\r\n    this.mediaTranscoder = mediaTranscoder;\r\n    this.command = FfmpegTranscoder.selectFfmpegCommand();\r\n    this.processes = [];\r\n  }\r\n\r\n  static verifyOptions(options) {\r\n    if (!options) throw new Error('Options not provided!');\r\n    if (!options.media) throw new Error('Media must be provided');\r\n    if (!options.ffmpegArguments || !(options.ffmpegArguments instanceof Array)) {\r\n      throw new Error('FFMPEG Arguments must be an array');\r\n    }\r\n    if (options.ffmpegArguments.includes('-i')) return options;\r\n    if (typeof options.media === 'string') {\r\n      options.ffmpegArguments = ['-i', `${options.media}`].concat(options.ffmpegArguments).concat(['pipe:1']);\r\n    } else {\r\n      options.ffmpegArguments = ['-i', '-'].concat(options.ffmpegArguments).concat(['pipe:1']);\r\n    }\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Transcodes an input using FFMPEG\r\n   * @param {FfmpegTranscoderOptions} options the options to use\r\n   * @returns {FfmpegProcess} the created FFMPEG process\r\n   * @throws {FFMPEGOptionsError}\r\n   */\r\n  transcode(options) {\r\n    if (!this.command) this.command = FfmpegTranscoder.selectFfmpegCommand();\r\n    const proc = new FfmpegProcess(this, FfmpegTranscoder.verifyOptions(options));\r\n    this.processes.push(proc);\r\n    return proc;\r\n  }\r\n\r\n  static selectFfmpegCommand() {\r\n    try {\r\n      return __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"ffmpeg-binaries\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())).ffmpegPath();\r\n    } catch (err) {\r\n      for (const command of ['ffmpeg', 'avconv', './ffmpeg', './avconv']) {\r\n        if (!ChildProcess.spawnSync(command, ['-h']).error) return command;\r\n      }\r\n      throw new Error('FFMPEG not found');\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = FfmpegTranscoder;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTU5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByaXNtLW1lZGlhL3NyYy90cmFuc2NvZGVycy9mZm1wZWcvRmZtcGVnLmpzP2IyMjciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ2hpbGRQcm9jZXNzID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xyXG5jb25zdCBGZm1wZWdQcm9jZXNzID0gcmVxdWlyZSgnLi9GZm1wZWdQcm9jZXNzJyk7XHJcblxyXG5jbGFzcyBGZm1wZWdUcmFuc2NvZGVyIHtcclxuICBjb25zdHJ1Y3RvcihtZWRpYVRyYW5zY29kZXIpIHtcclxuICAgIHRoaXMubWVkaWFUcmFuc2NvZGVyID0gbWVkaWFUcmFuc2NvZGVyO1xyXG4gICAgdGhpcy5jb21tYW5kID0gRmZtcGVnVHJhbnNjb2Rlci5zZWxlY3RGZm1wZWdDb21tYW5kKCk7XHJcbiAgICB0aGlzLnByb2Nlc3NlcyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHZlcmlmeU9wdGlvbnMob3B0aW9ucykge1xyXG4gICAgaWYgKCFvcHRpb25zKSB0aHJvdyBuZXcgRXJyb3IoJ09wdGlvbnMgbm90IHByb3ZpZGVkIScpO1xyXG4gICAgaWYgKCFvcHRpb25zLm1lZGlhKSB0aHJvdyBuZXcgRXJyb3IoJ01lZGlhIG11c3QgYmUgcHJvdmlkZWQnKTtcclxuICAgIGlmICghb3B0aW9ucy5mZm1wZWdBcmd1bWVudHMgfHwgIShvcHRpb25zLmZmbXBlZ0FyZ3VtZW50cyBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZGTVBFRyBBcmd1bWVudHMgbXVzdCBiZSBhbiBhcnJheScpO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMuZmZtcGVnQXJndW1lbnRzLmluY2x1ZGVzKCctaScpKSByZXR1cm4gb3B0aW9ucztcclxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5tZWRpYSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgb3B0aW9ucy5mZm1wZWdBcmd1bWVudHMgPSBbJy1pJywgYCR7b3B0aW9ucy5tZWRpYX1gXS5jb25jYXQob3B0aW9ucy5mZm1wZWdBcmd1bWVudHMpLmNvbmNhdChbJ3BpcGU6MSddKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9wdGlvbnMuZmZtcGVnQXJndW1lbnRzID0gWyctaScsICctJ10uY29uY2F0KG9wdGlvbnMuZmZtcGVnQXJndW1lbnRzKS5jb25jYXQoWydwaXBlOjEnXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3B0aW9ucztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYW5zY29kZXMgYW4gaW5wdXQgdXNpbmcgRkZNUEVHXHJcbiAgICogQHBhcmFtIHtGZm1wZWdUcmFuc2NvZGVyT3B0aW9uc30gb3B0aW9ucyB0aGUgb3B0aW9ucyB0byB1c2VcclxuICAgKiBAcmV0dXJucyB7RmZtcGVnUHJvY2Vzc30gdGhlIGNyZWF0ZWQgRkZNUEVHIHByb2Nlc3NcclxuICAgKiBAdGhyb3dzIHtGRk1QRUdPcHRpb25zRXJyb3J9XHJcbiAgICovXHJcbiAgdHJhbnNjb2RlKG9wdGlvbnMpIHtcclxuICAgIGlmICghdGhpcy5jb21tYW5kKSB0aGlzLmNvbW1hbmQgPSBGZm1wZWdUcmFuc2NvZGVyLnNlbGVjdEZmbXBlZ0NvbW1hbmQoKTtcclxuICAgIGNvbnN0IHByb2MgPSBuZXcgRmZtcGVnUHJvY2Vzcyh0aGlzLCBGZm1wZWdUcmFuc2NvZGVyLnZlcmlmeU9wdGlvbnMob3B0aW9ucykpO1xyXG4gICAgdGhpcy5wcm9jZXNzZXMucHVzaChwcm9jKTtcclxuICAgIHJldHVybiBwcm9jO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNlbGVjdEZmbXBlZ0NvbW1hbmQoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gcmVxdWlyZSgnZmZtcGVnLWJpbmFyaWVzJykuZmZtcGVnUGF0aCgpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGZvciAoY29uc3QgY29tbWFuZCBvZiBbJ2ZmbXBlZycsICdhdmNvbnYnLCAnLi9mZm1wZWcnLCAnLi9hdmNvbnYnXSkge1xyXG4gICAgICAgIGlmICghQ2hpbGRQcm9jZXNzLnNwYXduU3luYyhjb21tYW5kLCBbJy1oJ10pLmVycm9yKSByZXR1cm4gY29tbWFuZDtcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZGTVBFRyBub3QgZm91bmQnKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gRmZtcGVnVHJhbnNjb2RlcjtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHJpc20tbWVkaWEvc3JjL3RyYW5zY29kZXJzL2ZmbXBlZy9GZm1wZWcuanNcbi8vIG1vZHVsZSBpZCA9IDE1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///159\n");

/***/ }),
/* 160 */
/*!**************************************************************************!*\
  !*** ./node_modules/prism-media/src/transcoders/ffmpeg/FfmpegProcess.js ***!
  \**************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter;\r\nconst ChildProcess = __webpack_require__(/*! child_process */ 43);\r\n\r\n/**\r\n * A spawned FFMPEG process\r\n */\r\nclass FfmpegProcess extends EventEmitter {\r\n  constructor(ffmpegTranscoder, options) {\r\n    super();\r\n    /**\r\n     * The ffmpeg process\r\n     * @type {ChildProcess}\r\n     */\r\n    this.process = ChildProcess.spawn(ffmpegTranscoder.command, options.ffmpegArguments);\r\n    /**\r\n     * The FFMPEG transcoder that created this process\r\n     * @type {FfmpegTranscoder}\r\n     */\r\n    this.transcoder = ffmpegTranscoder;\r\n    /**\r\n     * The input media\r\n     * @type {?ReadableStream|string}\r\n     */\r\n    this.inputMedia = options.media;\r\n\r\n    if (typeof this.inputMedia !== 'string') {\r\n      try {\r\n        this.connectStream(this.inputMedia);\r\n      } catch (e) {\r\n        this.emit('error', e, 'instantiation');\r\n      }\r\n    } else {\r\n      this.attachErrorHandlers();\r\n    }\r\n\r\n    this.on('error', this.kill.bind(this));\r\n    this.once('end', this.kill.bind(this));\r\n  }\r\n\r\n  /**\r\n   * The ffmpeg output stream\r\n   * @type {?ReadableStream}\r\n   */\r\n  get output() {\r\n    return this.process ? this.process.stdout : null;\r\n  }\r\n\r\n  attachErrorHandlers() {\r\n    this.process.stdin.on('error', e => {\r\n      // if not killed\r\n      if (this.process) {\r\n        this.emit('error', e, 'ffmpegProcess.stdin');\r\n      }\r\n    });\r\n    this.process.stdout.on('error', e => {\r\n      // if not killed\r\n      if (this.process) {\r\n        this.emit('error', e, 'ffmpegProcess.stdout');\r\n      }\r\n    });\r\n    this.process.on('error', e => this.emit('error', e, 'ffmpegProcess'));\r\n    this.process.stdout.on('end', () => this.emit('end'));\r\n  }\r\n\r\n  /**\r\n   * Connects an input stream to the ffmpeg process\r\n   * @param {ReadableStream} inputMedia the stream to pass to ffmpeg\r\n   * @returns {ReadableStream} the ffmpeg output stream\r\n   */\r\n  connectStream(inputMedia) {\r\n    if (!this.process) throw new Error('No FFMPEG process available');\r\n    this.inputMedia = inputMedia;\r\n    this.inputMedia.pipe(this.process.stdin, { end: false });\r\n\r\n    inputMedia.on('error', e => this.emit('error', e, 'inputstream', inputMedia));\r\n\r\n    this.attachErrorHandlers();\r\n\r\n    return this.process.stdout;\r\n  }\r\n\r\n  /**\r\n   * Kills the ffmpeg process\r\n   */\r\n  kill() {\r\n    if (!this.process) return;\r\n    if (this.inputMedia && this.inputMedia.unpipe) {\r\n      this.inputMedia.unpipe(this.process.stdin);\r\n    }\r\n    this.process.kill('SIGKILL');\r\n    this.process = null;\r\n  }\r\n}\r\n\r\nmodule.exports = FfmpegProcess;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3ByaXNtLW1lZGlhL3NyYy90cmFuc2NvZGVycy9mZm1wZWcvRmZtcGVnUHJvY2Vzcy5qcz83YzMzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcclxuY29uc3QgQ2hpbGRQcm9jZXNzID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpO1xyXG5cclxuLyoqXHJcbiAqIEEgc3Bhd25lZCBGRk1QRUcgcHJvY2Vzc1xyXG4gKi9cclxuY2xhc3MgRmZtcGVnUHJvY2VzcyBleHRlbmRzIEV2ZW50RW1pdHRlciB7XHJcbiAgY29uc3RydWN0b3IoZmZtcGVnVHJhbnNjb2Rlciwgb3B0aW9ucykge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGZmbXBlZyBwcm9jZXNzXHJcbiAgICAgKiBAdHlwZSB7Q2hpbGRQcm9jZXNzfVxyXG4gICAgICovXHJcbiAgICB0aGlzLnByb2Nlc3MgPSBDaGlsZFByb2Nlc3Muc3Bhd24oZmZtcGVnVHJhbnNjb2Rlci5jb21tYW5kLCBvcHRpb25zLmZmbXBlZ0FyZ3VtZW50cyk7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBGRk1QRUcgdHJhbnNjb2RlciB0aGF0IGNyZWF0ZWQgdGhpcyBwcm9jZXNzXHJcbiAgICAgKiBAdHlwZSB7RmZtcGVnVHJhbnNjb2Rlcn1cclxuICAgICAqL1xyXG4gICAgdGhpcy50cmFuc2NvZGVyID0gZmZtcGVnVHJhbnNjb2RlcjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGlucHV0IG1lZGlhXHJcbiAgICAgKiBAdHlwZSB7P1JlYWRhYmxlU3RyZWFtfHN0cmluZ31cclxuICAgICAqL1xyXG4gICAgdGhpcy5pbnB1dE1lZGlhID0gb3B0aW9ucy5tZWRpYTtcclxuXHJcbiAgICBpZiAodHlwZW9mIHRoaXMuaW5wdXRNZWRpYSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB0aGlzLmNvbm5lY3RTdHJlYW0odGhpcy5pbnB1dE1lZGlhKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlLCAnaW5zdGFudGlhdGlvbicpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmF0dGFjaEVycm9ySGFuZGxlcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm9uKCdlcnJvcicsIHRoaXMua2lsbC5iaW5kKHRoaXMpKTtcclxuICAgIHRoaXMub25jZSgnZW5kJywgdGhpcy5raWxsLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVGhlIGZmbXBlZyBvdXRwdXQgc3RyZWFtXHJcbiAgICogQHR5cGUgez9SZWFkYWJsZVN0cmVhbX1cclxuICAgKi9cclxuICBnZXQgb3V0cHV0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvY2VzcyA/IHRoaXMucHJvY2Vzcy5zdGRvdXQgOiBudWxsO1xyXG4gIH1cclxuXHJcbiAgYXR0YWNoRXJyb3JIYW5kbGVycygpIHtcclxuICAgIHRoaXMucHJvY2Vzcy5zdGRpbi5vbignZXJyb3InLCBlID0+IHtcclxuICAgICAgLy8gaWYgbm90IGtpbGxlZFxyXG4gICAgICBpZiAodGhpcy5wcm9jZXNzKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGUsICdmZm1wZWdQcm9jZXNzLnN0ZGluJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy5wcm9jZXNzLnN0ZG91dC5vbignZXJyb3InLCBlID0+IHtcclxuICAgICAgLy8gaWYgbm90IGtpbGxlZFxyXG4gICAgICBpZiAodGhpcy5wcm9jZXNzKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGUsICdmZm1wZWdQcm9jZXNzLnN0ZG91dCcpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMucHJvY2Vzcy5vbignZXJyb3InLCBlID0+IHRoaXMuZW1pdCgnZXJyb3InLCBlLCAnZmZtcGVnUHJvY2VzcycpKTtcclxuICAgIHRoaXMucHJvY2Vzcy5zdGRvdXQub24oJ2VuZCcsICgpID0+IHRoaXMuZW1pdCgnZW5kJykpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ29ubmVjdHMgYW4gaW5wdXQgc3RyZWFtIHRvIHRoZSBmZm1wZWcgcHJvY2Vzc1xyXG4gICAqIEBwYXJhbSB7UmVhZGFibGVTdHJlYW19IGlucHV0TWVkaWEgdGhlIHN0cmVhbSB0byBwYXNzIHRvIGZmbXBlZ1xyXG4gICAqIEByZXR1cm5zIHtSZWFkYWJsZVN0cmVhbX0gdGhlIGZmbXBlZyBvdXRwdXQgc3RyZWFtXHJcbiAgICovXHJcbiAgY29ubmVjdFN0cmVhbShpbnB1dE1lZGlhKSB7XHJcbiAgICBpZiAoIXRoaXMucHJvY2VzcykgdGhyb3cgbmV3IEVycm9yKCdObyBGRk1QRUcgcHJvY2VzcyBhdmFpbGFibGUnKTtcclxuICAgIHRoaXMuaW5wdXRNZWRpYSA9IGlucHV0TWVkaWE7XHJcbiAgICB0aGlzLmlucHV0TWVkaWEucGlwZSh0aGlzLnByb2Nlc3Muc3RkaW4sIHsgZW5kOiBmYWxzZSB9KTtcclxuXHJcbiAgICBpbnB1dE1lZGlhLm9uKCdlcnJvcicsIGUgPT4gdGhpcy5lbWl0KCdlcnJvcicsIGUsICdpbnB1dHN0cmVhbScsIGlucHV0TWVkaWEpKTtcclxuXHJcbiAgICB0aGlzLmF0dGFjaEVycm9ySGFuZGxlcnMoKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzLnN0ZG91dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEtpbGxzIHRoZSBmZm1wZWcgcHJvY2Vzc1xyXG4gICAqL1xyXG4gIGtpbGwoKSB7XHJcbiAgICBpZiAoIXRoaXMucHJvY2VzcykgcmV0dXJuO1xyXG4gICAgaWYgKHRoaXMuaW5wdXRNZWRpYSAmJiB0aGlzLmlucHV0TWVkaWEudW5waXBlKSB7XHJcbiAgICAgIHRoaXMuaW5wdXRNZWRpYS51bnBpcGUodGhpcy5wcm9jZXNzLnN0ZGluKTtcclxuICAgIH1cclxuICAgIHRoaXMucHJvY2Vzcy5raWxsKCdTSUdLSUxMJyk7XHJcbiAgICB0aGlzLnByb2Nlc3MgPSBudWxsO1xyXG4gIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGZm1wZWdQcm9jZXNzO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9wcmlzbS1tZWRpYS9zcmMvdHJhbnNjb2RlcnMvZmZtcGVnL0ZmbXBlZ1Byb2Nlc3MuanNcbi8vIG1vZHVsZSBpZCA9IDE2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///160\n");

/***/ }),
/* 161 */
/*!*********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/dispatcher/StreamDispatcher.js ***!
  \*********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const VolumeInterface = __webpack_require__(/*! ../util/VolumeInterface */ 77);\nconst VoiceBroadcast = __webpack_require__(/*! ../VoiceBroadcast */ 78);\nconst Constants = __webpack_require__(/*! ../../../util/Constants */ 0);\n\nconst secretbox = __webpack_require__(/*! ../util/Secretbox */ 80);\n\nconst nonce = Buffer.alloc(24);\nnonce.fill(0);\n\n/**\n * The class that sends voice packet data to the voice connection.\n * ```js\n * // Obtained using:\n * voiceChannel.join().then(connection => {\n *   // You can play a file or a stream here:\n *   const dispatcher = connection.playFile('./file.mp3');\n * });\n * ```\n * @implements {VolumeInterface}\n */\nclass StreamDispatcher extends VolumeInterface {\n  constructor(player, stream, streamOptions) {\n    super(streamOptions);\n    /**\n     * The Audio Player that controls this dispatcher\n     * @type {AudioPlayer}\n     */\n    this.player = player;\n    /**\n     * The stream that the dispatcher plays\n     * @type {ReadableStream|VoiceBroadcast}\n     */\n    this.stream = stream;\n    if (!(this.stream instanceof VoiceBroadcast)) this.startStreaming();\n    this.streamOptions = streamOptions;\n\n    const data = this.streamingData;\n    data.length = 20;\n    data.missed = 0;\n\n    /**\n     * Whether playing is paused\n     * @type {boolean}\n     */\n    this.paused = false;\n    /**\n     * Whether this dispatcher has been destroyed\n     * @type {boolean}\n     */\n    this.destroyed = false;\n\n    this._opus = streamOptions.opus;\n  }\n\n  /**\n   * How many passes the dispatcher should take when sending packets to reduce packet loss. Values over 5\n   * aren't recommended, as it means you are using 5x more bandwidth. You _can_ edit this at runtime\n   * @type {number}\n   * @readonly\n   */\n  get passes() {\n    return this.streamOptions.passes || 1;\n  }\n\n  set passes(n) {\n    this.streamOptions.passes = n;\n  }\n\n  get streamingData() {\n    return this.player.streamingData;\n  }\n\n  /**\n   * How long the stream dispatcher has been \"speaking\" for\n   * @type {number}\n   * @readonly\n   */\n  get time() {\n    return this.streamingData.count * (this.streamingData.length || 0);\n  }\n\n  /**\n   * The total time, taking into account pauses and skips, that the dispatcher has been streaming for\n   * @type {number}\n   * @readonly\n   */\n  get totalStreamTime() {\n    return this.time + this.streamingData.pausedTime;\n  }\n\n  /**\n   * Stops sending voice packets to the voice connection (stream may still progress however).\n   */\n  pause() { this.setPaused(true); }\n\n  /**\n   * Resumes sending voice packets to the voice connection (may be further on in the stream than when paused).\n   */\n  resume() { this.setPaused(false); }\n\n\n  /**\n   * Stops the current stream permanently and emits an `end` event.\n   * @param {string} [reason='user'] An optional reason for stopping the dispatcher\n   */\n  end(reason = 'user') {\n    this.destroy('end', reason);\n  }\n\n  setSpeaking(value) {\n    if (this.speaking === value) return;\n    if (this.player.voiceConnection.status !== Constants.VoiceStatus.CONNECTED) return;\n    this.speaking = value;\n    /**\n     * Emitted when the dispatcher starts/stops speaking.\n     * @event StreamDispatcher#speaking\n     * @param {boolean} value Whether or not the dispatcher is speaking\n     */\n    this.emit('speaking', value);\n  }\n\n\n  /**\n   * Set the bitrate of the current Opus encoder.\n   * @param {number} bitrate New bitrate, in kbps\n   * If set to 'auto', the voice channel's bitrate will be used\n   */\n  setBitrate(bitrate) {\n    this.player.setBitrate(bitrate);\n  }\n\n  sendBuffer(buffer, sequence, timestamp, opusPacket) {\n    opusPacket = opusPacket || this.player.opusEncoder.encode(buffer);\n    const packet = this.createPacket(sequence, timestamp, opusPacket);\n    this.sendPacket(packet);\n  }\n\n  sendPacket(packet) {\n    let repeats = this.passes;\n    /**\n     * Emitted whenever the dispatcher has debug information.\n     * @event StreamDispatcher#debug\n     * @param {string} info The debug info\n     */\n    this.setSpeaking(true);\n    while (repeats--) {\n      this.player.voiceConnection.sockets.udp.send(packet)\n        .catch(e => {\n          this.setSpeaking(false);\n          this.emit('debug', `Failed to send a packet ${e}`);\n        });\n    }\n  }\n\n  createPacket(sequence, timestamp, buffer) {\n    const packetBuffer = Buffer.alloc(buffer.length + 28);\n    packetBuffer.fill(0);\n    packetBuffer[0] = 0x80;\n    packetBuffer[1] = 0x78;\n\n    packetBuffer.writeUIntBE(sequence, 2, 2);\n    packetBuffer.writeUIntBE(timestamp, 4, 4);\n    packetBuffer.writeUIntBE(this.player.voiceConnection.authentication.ssrc, 8, 4);\n\n    packetBuffer.copy(nonce, 0, 0, 12);\n    buffer = secretbox.methods.close(buffer, nonce, this.player.voiceConnection.authentication.secretKey.key);\n    for (let i = 0; i < buffer.length; i++) packetBuffer[i + 12] = buffer[i];\n\n    return packetBuffer;\n  }\n\n  processPacket(packet) {\n    try {\n      if (this.destroyed) {\n        this.setSpeaking(false);\n        return;\n      }\n\n      const data = this.streamingData;\n\n      if (this.paused) {\n        this.setSpeaking(false);\n        data.pausedTime = data.length * 10;\n        return;\n      }\n\n      if (!packet) {\n        data.missed++;\n        data.pausedTime += data.length * 10;\n        return;\n      }\n\n      this.started();\n      this.missed = 0;\n\n      this.stepStreamingData();\n      this.sendBuffer(null, data.sequence, data.timestamp, packet);\n    } catch (e) {\n      this.destroy('error', e);\n    }\n  }\n\n  process() {\n    try {\n      if (this.destroyed) {\n        this.setSpeaking(false);\n        return;\n      }\n\n      const data = this.streamingData;\n\n      if (data.missed >= 5) {\n        this.destroy('end', 'Stream is not generating quickly enough.');\n        return;\n      }\n\n      if (this.paused) {\n        this.setSpeaking(false);\n        // Old code?\n        // data.timestamp = data.timestamp + 4294967295 ? data.timestamp + 960 : 0;\n        data.pausedTime += data.length * 10;\n        this.player.voiceConnection.voiceManager.client.setTimeout(() => this.process(), data.length * 10);\n        return;\n      }\n\n      this.started();\n\n      const buffer = this.readStreamBuffer();\n      if (!buffer) {\n        data.missed++;\n        data.pausedTime += data.length * 10;\n        this.player.voiceConnection.voiceManager.client.setTimeout(() => this.process(), data.length * 10);\n        return;\n      }\n\n      data.missed = 0;\n\n      this.stepStreamingData();\n\n      if (this._opus) {\n        this.sendBuffer(null, data.sequence, data.timestamp, buffer);\n      } else {\n        this.sendBuffer(buffer, data.sequence, data.timestamp);\n      }\n\n      const nextTime = data.length + (data.startTime + data.pausedTime + (data.count * data.length) - Date.now());\n      this.player.voiceConnection.voiceManager.client.setTimeout(() => this.process(), nextTime);\n    } catch (e) {\n      this.destroy('error', e);\n    }\n  }\n\n  readStreamBuffer() {\n    const data = this.streamingData;\n    const bufferLength = (this._opus ? 80 : 1920) * data.channels;\n    let buffer = this.stream.read(bufferLength);\n    if (this._opus) return buffer;\n    if (!buffer) return null;\n\n    if (buffer.length !== bufferLength) {\n      const newBuffer = Buffer.alloc(bufferLength).fill(0);\n      buffer.copy(newBuffer);\n      buffer = newBuffer;\n    }\n\n    buffer = this.applyVolume(buffer);\n    return buffer;\n  }\n\n  started() {\n    const data = this.streamingData;\n\n    if (!data.startTime) {\n      /**\n       * Emitted once the dispatcher starts streaming.\n       * @event StreamDispatcher#start\n       */\n      this.emit('start');\n      data.startTime = Date.now();\n    }\n  }\n\n  stepStreamingData() {\n    const data = this.streamingData;\n    data.count++;\n    data.sequence = data.sequence < 65535 ? data.sequence + 1 : 0;\n    data.timestamp = (data.timestamp + 960) < 4294967295 ? data.timestamp + 960 : 0;\n  }\n\n  destroy(type, reason) {\n    if (this.destroyed) return;\n    this.destroyed = true;\n    this.setSpeaking(false);\n    this.emit(type, reason);\n    /**\n     * Emitted once the dispatcher ends.\n     * @param {string} [reason] The reason the dispatcher ended\n     * @event StreamDispatcher#end\n     */\n    if (type !== 'end') this.emit('end', `destroyed due to ${type} - ${reason}`);\n  }\n\n  startStreaming() {\n    if (!this.stream) {\n      /**\n       * Emitted if the dispatcher encounters an error.\n       * @event StreamDispatcher#error\n       * @param {string} error The error message\n       */\n      this.emit('error', 'No stream');\n      return;\n    }\n\n    this.stream.on('end', err => this.destroy('end', err || 'stream'));\n    this.stream.on('error', err => this.destroy('error', err));\n\n    const data = this.streamingData;\n    data.length = 20;\n    data.missed = 0;\n\n    this.stream.once('readable', () => {\n      data.startTime = null;\n      data.count = 0;\n      this.process();\n    });\n  }\n\n  setPaused(paused) { this.setSpeaking(!(this.paused = paused)); }\n}\n\nmodule.exports = StreamDispatcher;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///161\n");

/***/ }),
/* 162 */
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/opus/NodeOpusEngine.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const OpusEngine = __webpack_require__(/*! ./BaseOpusEngine */ 79);\n\nlet opus;\n\nclass NodeOpusEngine extends OpusEngine {\n  constructor(player) {\n    super(player);\n    try {\n      opus = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"node-opus\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    } catch (err) {\n      throw err;\n    }\n    this.encoder = new opus.OpusEncoder(this.samplingRate, this.channels);\n    super.init();\n  }\n\n  setBitrate(bitrate) {\n    this.encoder.applyEncoderCTL(this.ctl.BITRATE, Math.min(128, Math.max(16, bitrate)) * 1000);\n  }\n\n  setFEC(enabled) {\n    this.encoder.applyEncoderCTL(this.ctl.FEC, enabled ? 1 : 0);\n  }\n\n  setPLP(percent) {\n    this.encoder.applyEncoderCTL(this.ctl.PLP, Math.min(100, Math.max(0, percent * 100)));\n  }\n\n  encode(buffer) {\n    super.encode(buffer);\n    return this.encoder.encode(buffer, 1920);\n  }\n\n  decode(buffer) {\n    super.decode(buffer);\n    return this.encoder.decode(buffer, 1920);\n  }\n}\n\nmodule.exports = NodeOpusEngine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS9vcHVzL05vZGVPcHVzRW5naW5lLmpzPzVhMjQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgT3B1c0VuZ2luZSA9IHJlcXVpcmUoJy4vQmFzZU9wdXNFbmdpbmUnKTtcblxubGV0IG9wdXM7XG5cbmNsYXNzIE5vZGVPcHVzRW5naW5lIGV4dGVuZHMgT3B1c0VuZ2luZSB7XG4gIGNvbnN0cnVjdG9yKHBsYXllcikge1xuICAgIHN1cGVyKHBsYXllcik7XG4gICAgdHJ5IHtcbiAgICAgIG9wdXMgPSByZXF1aXJlKCdub2RlLW9wdXMnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gICAgdGhpcy5lbmNvZGVyID0gbmV3IG9wdXMuT3B1c0VuY29kZXIodGhpcy5zYW1wbGluZ1JhdGUsIHRoaXMuY2hhbm5lbHMpO1xuICAgIHN1cGVyLmluaXQoKTtcbiAgfVxuXG4gIHNldEJpdHJhdGUoYml0cmF0ZSkge1xuICAgIHRoaXMuZW5jb2Rlci5hcHBseUVuY29kZXJDVEwodGhpcy5jdGwuQklUUkFURSwgTWF0aC5taW4oMTI4LCBNYXRoLm1heCgxNiwgYml0cmF0ZSkpICogMTAwMCk7XG4gIH1cblxuICBzZXRGRUMoZW5hYmxlZCkge1xuICAgIHRoaXMuZW5jb2Rlci5hcHBseUVuY29kZXJDVEwodGhpcy5jdGwuRkVDLCBlbmFibGVkID8gMSA6IDApO1xuICB9XG5cbiAgc2V0UExQKHBlcmNlbnQpIHtcbiAgICB0aGlzLmVuY29kZXIuYXBwbHlFbmNvZGVyQ1RMKHRoaXMuY3RsLlBMUCwgTWF0aC5taW4oMTAwLCBNYXRoLm1heCgwLCBwZXJjZW50ICogMTAwKSkpO1xuICB9XG5cbiAgZW5jb2RlKGJ1ZmZlcikge1xuICAgIHN1cGVyLmVuY29kZShidWZmZXIpO1xuICAgIHJldHVybiB0aGlzLmVuY29kZXIuZW5jb2RlKGJ1ZmZlciwgMTkyMCk7XG4gIH1cblxuICBkZWNvZGUoYnVmZmVyKSB7XG4gICAgc3VwZXIuZGVjb2RlKGJ1ZmZlcik7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2Rlci5kZWNvZGUoYnVmZmVyLCAxOTIwKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGVPcHVzRW5naW5lO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL29wdXMvTm9kZU9wdXNFbmdpbmUuanNcbi8vIG1vZHVsZSBpZCA9IDE2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///162\n");

/***/ }),
/* 163 */
/*!***************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/opus/OpusScriptEngine.js ***!
  \***************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const OpusEngine = __webpack_require__(/*! ./BaseOpusEngine */ 79);\n\nlet OpusScript;\n\nclass OpusScriptEngine extends OpusEngine {\n  constructor(player) {\n    super(player);\n    try {\n      OpusScript = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"opusscript\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n    } catch (err) {\n      throw err;\n    }\n    this.encoder = new OpusScript(this.samplingRate, this.channels);\n    super.init();\n  }\n\n  setBitrate(bitrate) {\n    this.encoder.encoderCTL(this.ctl.BITRATE, Math.min(128, Math.max(16, bitrate)) * 1000);\n  }\n\n  setFEC(enabled) {\n    this.encoder.encoderCTL(this.ctl.FEC, enabled ? 1 : 0);\n  }\n\n  setPLP(percent) {\n    this.encoder.encoderCTL(this.ctl.PLP, Math.min(100, Math.max(0, percent * 100)));\n  }\n\n  encode(buffer) {\n    super.encode(buffer);\n    return this.encoder.encode(buffer, 960);\n  }\n\n  decode(buffer) {\n    super.decode(buffer);\n    return this.encoder.decode(buffer);\n  }\n\n  destroy() {\n    super.destroy();\n    this.encoder.delete();\n  }\n}\n\nmodule.exports = OpusScriptEngine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTYzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS9vcHVzL09wdXNTY3JpcHRFbmdpbmUuanM/Y2NjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBPcHVzRW5naW5lID0gcmVxdWlyZSgnLi9CYXNlT3B1c0VuZ2luZScpO1xuXG5sZXQgT3B1c1NjcmlwdDtcblxuY2xhc3MgT3B1c1NjcmlwdEVuZ2luZSBleHRlbmRzIE9wdXNFbmdpbmUge1xuICBjb25zdHJ1Y3RvcihwbGF5ZXIpIHtcbiAgICBzdXBlcihwbGF5ZXIpO1xuICAgIHRyeSB7XG4gICAgICBPcHVzU2NyaXB0ID0gcmVxdWlyZSgnb3B1c3NjcmlwdCcpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICB0aGlzLmVuY29kZXIgPSBuZXcgT3B1c1NjcmlwdCh0aGlzLnNhbXBsaW5nUmF0ZSwgdGhpcy5jaGFubmVscyk7XG4gICAgc3VwZXIuaW5pdCgpO1xuICB9XG5cbiAgc2V0Qml0cmF0ZShiaXRyYXRlKSB7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZXJDVEwodGhpcy5jdGwuQklUUkFURSwgTWF0aC5taW4oMTI4LCBNYXRoLm1heCgxNiwgYml0cmF0ZSkpICogMTAwMCk7XG4gIH1cblxuICBzZXRGRUMoZW5hYmxlZCkge1xuICAgIHRoaXMuZW5jb2Rlci5lbmNvZGVyQ1RMKHRoaXMuY3RsLkZFQywgZW5hYmxlZCA/IDEgOiAwKTtcbiAgfVxuXG4gIHNldFBMUChwZXJjZW50KSB7XG4gICAgdGhpcy5lbmNvZGVyLmVuY29kZXJDVEwodGhpcy5jdGwuUExQLCBNYXRoLm1pbigxMDAsIE1hdGgubWF4KDAsIHBlcmNlbnQgKiAxMDApKSk7XG4gIH1cblxuICBlbmNvZGUoYnVmZmVyKSB7XG4gICAgc3VwZXIuZW5jb2RlKGJ1ZmZlcik7XG4gICAgcmV0dXJuIHRoaXMuZW5jb2Rlci5lbmNvZGUoYnVmZmVyLCA5NjApO1xuICB9XG5cbiAgZGVjb2RlKGJ1ZmZlcikge1xuICAgIHN1cGVyLmRlY29kZShidWZmZXIpO1xuICAgIHJldHVybiB0aGlzLmVuY29kZXIuZGVjb2RlKGJ1ZmZlcik7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLmVuY29kZXIuZGVsZXRlKCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBPcHVzU2NyaXB0RW5naW5lO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL29wdXMvT3B1c1NjcmlwdEVuZ2luZS5qc1xuLy8gbW9kdWxlIGlkID0gMTYzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///163\n");

/***/ }),
/* 164 */
/*!*******************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/util ***!
  \*******************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

eval("function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 164;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS91dGlsPzhlMWEiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd2VicGFja0VtcHR5Q29udGV4dChyZXEpIHtcblx0dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJy5cIik7XG59XG53ZWJwYWNrRW1wdHlDb250ZXh0LmtleXMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIFtdOyB9O1xud2VicGFja0VtcHR5Q29udGV4dC5yZXNvbHZlID0gd2VicGFja0VtcHR5Q29udGV4dDtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0VtcHR5Q29udGV4dDtcbndlYnBhY2tFbXB0eUNvbnRleHQuaWQgPSAxNjQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL3V0aWxcbi8vIG1vZHVsZSBpZCA9IDE2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///164\n");

/***/ }),
/* 165 */
/*!*********************************************!*\
  !*** ./node_modules/tweetnacl/nacl-fast.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("(function(nacl) {\n'use strict';\n\n// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.\n// Public domain.\n//\n// Implementation derived from TweetNaCl version 20140427.\n// See for details: http://tweetnacl.cr.yp.to/\n\nvar gf = function(init) {\n  var i, r = new Float64Array(16);\n  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];\n  return r;\n};\n\n//  Pluggable, initialized in high-level API below.\nvar randombytes = function(/* x, n */) { throw new Error('no PRNG'); };\n\nvar _0 = new Uint8Array(16);\nvar _9 = new Uint8Array(32); _9[0] = 9;\n\nvar gf0 = gf(),\n    gf1 = gf([1]),\n    _121665 = gf([0xdb41, 1]),\n    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),\n    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),\n    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),\n    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),\n    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction ts64(x, i, h, l) {\n  x[i]   = (h >> 24) & 0xff;\n  x[i+1] = (h >> 16) & 0xff;\n  x[i+2] = (h >>  8) & 0xff;\n  x[i+3] = h & 0xff;\n  x[i+4] = (l >> 24)  & 0xff;\n  x[i+5] = (l >> 16)  & 0xff;\n  x[i+6] = (l >>  8)  & 0xff;\n  x[i+7] = l & 0xff;\n}\n\nfunction vn(x, xi, y, yi, n) {\n  var i,d = 0;\n  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];\n  return (1 & ((d - 1) >>> 8)) - 1;\n}\n\nfunction crypto_verify_16(x, xi, y, yi) {\n  return vn(x,xi,y,yi,16);\n}\n\nfunction crypto_verify_32(x, xi, y, yi) {\n  return vn(x,xi,y,yi,32);\n}\n\nfunction core_salsa20(o, p, k, c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n   x0 =  x0 +  j0 | 0;\n   x1 =  x1 +  j1 | 0;\n   x2 =  x2 +  j2 | 0;\n   x3 =  x3 +  j3 | 0;\n   x4 =  x4 +  j4 | 0;\n   x5 =  x5 +  j5 | 0;\n   x6 =  x6 +  j6 | 0;\n   x7 =  x7 +  j7 | 0;\n   x8 =  x8 +  j8 | 0;\n   x9 =  x9 +  j9 | 0;\n  x10 = x10 + j10 | 0;\n  x11 = x11 + j11 | 0;\n  x12 = x12 + j12 | 0;\n  x13 = x13 + j13 | 0;\n  x14 = x14 + j14 | 0;\n  x15 = x15 + j15 | 0;\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x1 >>>  0 & 0xff;\n  o[ 5] = x1 >>>  8 & 0xff;\n  o[ 6] = x1 >>> 16 & 0xff;\n  o[ 7] = x1 >>> 24 & 0xff;\n\n  o[ 8] = x2 >>>  0 & 0xff;\n  o[ 9] = x2 >>>  8 & 0xff;\n  o[10] = x2 >>> 16 & 0xff;\n  o[11] = x2 >>> 24 & 0xff;\n\n  o[12] = x3 >>>  0 & 0xff;\n  o[13] = x3 >>>  8 & 0xff;\n  o[14] = x3 >>> 16 & 0xff;\n  o[15] = x3 >>> 24 & 0xff;\n\n  o[16] = x4 >>>  0 & 0xff;\n  o[17] = x4 >>>  8 & 0xff;\n  o[18] = x4 >>> 16 & 0xff;\n  o[19] = x4 >>> 24 & 0xff;\n\n  o[20] = x5 >>>  0 & 0xff;\n  o[21] = x5 >>>  8 & 0xff;\n  o[22] = x5 >>> 16 & 0xff;\n  o[23] = x5 >>> 24 & 0xff;\n\n  o[24] = x6 >>>  0 & 0xff;\n  o[25] = x6 >>>  8 & 0xff;\n  o[26] = x6 >>> 16 & 0xff;\n  o[27] = x6 >>> 24 & 0xff;\n\n  o[28] = x7 >>>  0 & 0xff;\n  o[29] = x7 >>>  8 & 0xff;\n  o[30] = x7 >>> 16 & 0xff;\n  o[31] = x7 >>> 24 & 0xff;\n\n  o[32] = x8 >>>  0 & 0xff;\n  o[33] = x8 >>>  8 & 0xff;\n  o[34] = x8 >>> 16 & 0xff;\n  o[35] = x8 >>> 24 & 0xff;\n\n  o[36] = x9 >>>  0 & 0xff;\n  o[37] = x9 >>>  8 & 0xff;\n  o[38] = x9 >>> 16 & 0xff;\n  o[39] = x9 >>> 24 & 0xff;\n\n  o[40] = x10 >>>  0 & 0xff;\n  o[41] = x10 >>>  8 & 0xff;\n  o[42] = x10 >>> 16 & 0xff;\n  o[43] = x10 >>> 24 & 0xff;\n\n  o[44] = x11 >>>  0 & 0xff;\n  o[45] = x11 >>>  8 & 0xff;\n  o[46] = x11 >>> 16 & 0xff;\n  o[47] = x11 >>> 24 & 0xff;\n\n  o[48] = x12 >>>  0 & 0xff;\n  o[49] = x12 >>>  8 & 0xff;\n  o[50] = x12 >>> 16 & 0xff;\n  o[51] = x12 >>> 24 & 0xff;\n\n  o[52] = x13 >>>  0 & 0xff;\n  o[53] = x13 >>>  8 & 0xff;\n  o[54] = x13 >>> 16 & 0xff;\n  o[55] = x13 >>> 24 & 0xff;\n\n  o[56] = x14 >>>  0 & 0xff;\n  o[57] = x14 >>>  8 & 0xff;\n  o[58] = x14 >>> 16 & 0xff;\n  o[59] = x14 >>> 24 & 0xff;\n\n  o[60] = x15 >>>  0 & 0xff;\n  o[61] = x15 >>>  8 & 0xff;\n  o[62] = x15 >>> 16 & 0xff;\n  o[63] = x15 >>> 24 & 0xff;\n}\n\nfunction core_hsalsa20(o,p,k,c) {\n  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,\n      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,\n      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,\n      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,\n      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,\n      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,\n      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,\n      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,\n      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,\n      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,\n      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,\n      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,\n      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,\n      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,\n      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,\n      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;\n\n  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,\n      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,\n      x15 = j15, u;\n\n  for (var i = 0; i < 20; i += 2) {\n    u = x0 + x12 | 0;\n    x4 ^= u<<7 | u>>>(32-7);\n    u = x4 + x0 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x4 | 0;\n    x12 ^= u<<13 | u>>>(32-13);\n    u = x12 + x8 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x1 | 0;\n    x9 ^= u<<7 | u>>>(32-7);\n    u = x9 + x5 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x9 | 0;\n    x1 ^= u<<13 | u>>>(32-13);\n    u = x1 + x13 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x6 | 0;\n    x14 ^= u<<7 | u>>>(32-7);\n    u = x14 + x10 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x14 | 0;\n    x6 ^= u<<13 | u>>>(32-13);\n    u = x6 + x2 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x11 | 0;\n    x3 ^= u<<7 | u>>>(32-7);\n    u = x3 + x15 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x3 | 0;\n    x11 ^= u<<13 | u>>>(32-13);\n    u = x11 + x7 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n\n    u = x0 + x3 | 0;\n    x1 ^= u<<7 | u>>>(32-7);\n    u = x1 + x0 | 0;\n    x2 ^= u<<9 | u>>>(32-9);\n    u = x2 + x1 | 0;\n    x3 ^= u<<13 | u>>>(32-13);\n    u = x3 + x2 | 0;\n    x0 ^= u<<18 | u>>>(32-18);\n\n    u = x5 + x4 | 0;\n    x6 ^= u<<7 | u>>>(32-7);\n    u = x6 + x5 | 0;\n    x7 ^= u<<9 | u>>>(32-9);\n    u = x7 + x6 | 0;\n    x4 ^= u<<13 | u>>>(32-13);\n    u = x4 + x7 | 0;\n    x5 ^= u<<18 | u>>>(32-18);\n\n    u = x10 + x9 | 0;\n    x11 ^= u<<7 | u>>>(32-7);\n    u = x11 + x10 | 0;\n    x8 ^= u<<9 | u>>>(32-9);\n    u = x8 + x11 | 0;\n    x9 ^= u<<13 | u>>>(32-13);\n    u = x9 + x8 | 0;\n    x10 ^= u<<18 | u>>>(32-18);\n\n    u = x15 + x14 | 0;\n    x12 ^= u<<7 | u>>>(32-7);\n    u = x12 + x15 | 0;\n    x13 ^= u<<9 | u>>>(32-9);\n    u = x13 + x12 | 0;\n    x14 ^= u<<13 | u>>>(32-13);\n    u = x14 + x13 | 0;\n    x15 ^= u<<18 | u>>>(32-18);\n  }\n\n  o[ 0] = x0 >>>  0 & 0xff;\n  o[ 1] = x0 >>>  8 & 0xff;\n  o[ 2] = x0 >>> 16 & 0xff;\n  o[ 3] = x0 >>> 24 & 0xff;\n\n  o[ 4] = x5 >>>  0 & 0xff;\n  o[ 5] = x5 >>>  8 & 0xff;\n  o[ 6] = x5 >>> 16 & 0xff;\n  o[ 7] = x5 >>> 24 & 0xff;\n\n  o[ 8] = x10 >>>  0 & 0xff;\n  o[ 9] = x10 >>>  8 & 0xff;\n  o[10] = x10 >>> 16 & 0xff;\n  o[11] = x10 >>> 24 & 0xff;\n\n  o[12] = x15 >>>  0 & 0xff;\n  o[13] = x15 >>>  8 & 0xff;\n  o[14] = x15 >>> 16 & 0xff;\n  o[15] = x15 >>> 24 & 0xff;\n\n  o[16] = x6 >>>  0 & 0xff;\n  o[17] = x6 >>>  8 & 0xff;\n  o[18] = x6 >>> 16 & 0xff;\n  o[19] = x6 >>> 24 & 0xff;\n\n  o[20] = x7 >>>  0 & 0xff;\n  o[21] = x7 >>>  8 & 0xff;\n  o[22] = x7 >>> 16 & 0xff;\n  o[23] = x7 >>> 24 & 0xff;\n\n  o[24] = x8 >>>  0 & 0xff;\n  o[25] = x8 >>>  8 & 0xff;\n  o[26] = x8 >>> 16 & 0xff;\n  o[27] = x8 >>> 24 & 0xff;\n\n  o[28] = x9 >>>  0 & 0xff;\n  o[29] = x9 >>>  8 & 0xff;\n  o[30] = x9 >>> 16 & 0xff;\n  o[31] = x9 >>> 24 & 0xff;\n}\n\nfunction crypto_core_salsa20(out,inp,k,c) {\n  core_salsa20(out,inp,k,c);\n}\n\nfunction crypto_core_hsalsa20(out,inp,k,c) {\n  core_hsalsa20(out,inp,k,c);\n}\n\nvar sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);\n            // \"expand 32-byte k\"\n\nfunction crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n    mpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream_salsa20(c,cpos,b,n,k) {\n  var z = new Uint8Array(16), x = new Uint8Array(64);\n  var u, i;\n  for (i = 0; i < 16; i++) z[i] = 0;\n  for (i = 0; i < 8; i++) z[i] = n[i];\n  while (b >= 64) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < 64; i++) c[cpos+i] = x[i];\n    u = 1;\n    for (i = 8; i < 16; i++) {\n      u = u + (z[i] & 0xff) | 0;\n      z[i] = u & 0xff;\n      u >>>= 8;\n    }\n    b -= 64;\n    cpos += 64;\n  }\n  if (b > 0) {\n    crypto_core_salsa20(x,z,k,sigma);\n    for (i = 0; i < b; i++) c[cpos+i] = x[i];\n  }\n  return 0;\n}\n\nfunction crypto_stream(c,cpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20(c,cpos,d,sn,s);\n}\n\nfunction crypto_stream_xor(c,cpos,m,mpos,d,n,k) {\n  var s = new Uint8Array(32);\n  crypto_core_hsalsa20(s,n,k,sigma);\n  var sn = new Uint8Array(8);\n  for (var i = 0; i < 8; i++) sn[i] = n[i+16];\n  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);\n}\n\n/*\n* Port of Andrew Moon's Poly1305-donna-16. Public domain.\n* https://github.com/floodyberry/poly1305-donna\n*/\n\nvar poly1305 = function(key) {\n  this.buffer = new Uint8Array(16);\n  this.r = new Uint16Array(10);\n  this.h = new Uint16Array(10);\n  this.pad = new Uint16Array(8);\n  this.leftover = 0;\n  this.fin = 0;\n\n  var t0, t1, t2, t3, t4, t5, t6, t7;\n\n  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;\n  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;\n  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;\n  this.r[5] = ((t4 >>>  1)) & 0x1ffe;\n  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;\n  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n  this.r[9] = ((t7 >>>  5)) & 0x007f;\n\n  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;\n  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;\n  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;\n  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;\n  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;\n  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;\n  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;\n  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;\n};\n\npoly1305.prototype.blocks = function(m, mpos, bytes) {\n  var hibit = this.fin ? 0 : (1 << 11);\n  var t0, t1, t2, t3, t4, t5, t6, t7, c;\n  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;\n\n  var h0 = this.h[0],\n      h1 = this.h[1],\n      h2 = this.h[2],\n      h3 = this.h[3],\n      h4 = this.h[4],\n      h5 = this.h[5],\n      h6 = this.h[6],\n      h7 = this.h[7],\n      h8 = this.h[8],\n      h9 = this.h[9];\n\n  var r0 = this.r[0],\n      r1 = this.r[1],\n      r2 = this.r[2],\n      r3 = this.r[3],\n      r4 = this.r[4],\n      r5 = this.r[5],\n      r6 = this.r[6],\n      r7 = this.r[7],\n      r8 = this.r[8],\n      r9 = this.r[9];\n\n  while (bytes >= 16) {\n    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;\n    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;\n    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;\n    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;\n    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;\n    h5 += ((t4 >>>  1)) & 0x1fff;\n    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;\n    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;\n    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;\n    h9 += ((t7 >>> 5)) | hibit;\n\n    c = 0;\n\n    d0 = c;\n    d0 += h0 * r0;\n    d0 += h1 * (5 * r9);\n    d0 += h2 * (5 * r8);\n    d0 += h3 * (5 * r7);\n    d0 += h4 * (5 * r6);\n    c = (d0 >>> 13); d0 &= 0x1fff;\n    d0 += h5 * (5 * r5);\n    d0 += h6 * (5 * r4);\n    d0 += h7 * (5 * r3);\n    d0 += h8 * (5 * r2);\n    d0 += h9 * (5 * r1);\n    c += (d0 >>> 13); d0 &= 0x1fff;\n\n    d1 = c;\n    d1 += h0 * r1;\n    d1 += h1 * r0;\n    d1 += h2 * (5 * r9);\n    d1 += h3 * (5 * r8);\n    d1 += h4 * (5 * r7);\n    c = (d1 >>> 13); d1 &= 0x1fff;\n    d1 += h5 * (5 * r6);\n    d1 += h6 * (5 * r5);\n    d1 += h7 * (5 * r4);\n    d1 += h8 * (5 * r3);\n    d1 += h9 * (5 * r2);\n    c += (d1 >>> 13); d1 &= 0x1fff;\n\n    d2 = c;\n    d2 += h0 * r2;\n    d2 += h1 * r1;\n    d2 += h2 * r0;\n    d2 += h3 * (5 * r9);\n    d2 += h4 * (5 * r8);\n    c = (d2 >>> 13); d2 &= 0x1fff;\n    d2 += h5 * (5 * r7);\n    d2 += h6 * (5 * r6);\n    d2 += h7 * (5 * r5);\n    d2 += h8 * (5 * r4);\n    d2 += h9 * (5 * r3);\n    c += (d2 >>> 13); d2 &= 0x1fff;\n\n    d3 = c;\n    d3 += h0 * r3;\n    d3 += h1 * r2;\n    d3 += h2 * r1;\n    d3 += h3 * r0;\n    d3 += h4 * (5 * r9);\n    c = (d3 >>> 13); d3 &= 0x1fff;\n    d3 += h5 * (5 * r8);\n    d3 += h6 * (5 * r7);\n    d3 += h7 * (5 * r6);\n    d3 += h8 * (5 * r5);\n    d3 += h9 * (5 * r4);\n    c += (d3 >>> 13); d3 &= 0x1fff;\n\n    d4 = c;\n    d4 += h0 * r4;\n    d4 += h1 * r3;\n    d4 += h2 * r2;\n    d4 += h3 * r1;\n    d4 += h4 * r0;\n    c = (d4 >>> 13); d4 &= 0x1fff;\n    d4 += h5 * (5 * r9);\n    d4 += h6 * (5 * r8);\n    d4 += h7 * (5 * r7);\n    d4 += h8 * (5 * r6);\n    d4 += h9 * (5 * r5);\n    c += (d4 >>> 13); d4 &= 0x1fff;\n\n    d5 = c;\n    d5 += h0 * r5;\n    d5 += h1 * r4;\n    d5 += h2 * r3;\n    d5 += h3 * r2;\n    d5 += h4 * r1;\n    c = (d5 >>> 13); d5 &= 0x1fff;\n    d5 += h5 * r0;\n    d5 += h6 * (5 * r9);\n    d5 += h7 * (5 * r8);\n    d5 += h8 * (5 * r7);\n    d5 += h9 * (5 * r6);\n    c += (d5 >>> 13); d5 &= 0x1fff;\n\n    d6 = c;\n    d6 += h0 * r6;\n    d6 += h1 * r5;\n    d6 += h2 * r4;\n    d6 += h3 * r3;\n    d6 += h4 * r2;\n    c = (d6 >>> 13); d6 &= 0x1fff;\n    d6 += h5 * r1;\n    d6 += h6 * r0;\n    d6 += h7 * (5 * r9);\n    d6 += h8 * (5 * r8);\n    d6 += h9 * (5 * r7);\n    c += (d6 >>> 13); d6 &= 0x1fff;\n\n    d7 = c;\n    d7 += h0 * r7;\n    d7 += h1 * r6;\n    d7 += h2 * r5;\n    d7 += h3 * r4;\n    d7 += h4 * r3;\n    c = (d7 >>> 13); d7 &= 0x1fff;\n    d7 += h5 * r2;\n    d7 += h6 * r1;\n    d7 += h7 * r0;\n    d7 += h8 * (5 * r9);\n    d7 += h9 * (5 * r8);\n    c += (d7 >>> 13); d7 &= 0x1fff;\n\n    d8 = c;\n    d8 += h0 * r8;\n    d8 += h1 * r7;\n    d8 += h2 * r6;\n    d8 += h3 * r5;\n    d8 += h4 * r4;\n    c = (d8 >>> 13); d8 &= 0x1fff;\n    d8 += h5 * r3;\n    d8 += h6 * r2;\n    d8 += h7 * r1;\n    d8 += h8 * r0;\n    d8 += h9 * (5 * r9);\n    c += (d8 >>> 13); d8 &= 0x1fff;\n\n    d9 = c;\n    d9 += h0 * r9;\n    d9 += h1 * r8;\n    d9 += h2 * r7;\n    d9 += h3 * r6;\n    d9 += h4 * r5;\n    c = (d9 >>> 13); d9 &= 0x1fff;\n    d9 += h5 * r4;\n    d9 += h6 * r3;\n    d9 += h7 * r2;\n    d9 += h8 * r1;\n    d9 += h9 * r0;\n    c += (d9 >>> 13); d9 &= 0x1fff;\n\n    c = (((c << 2) + c)) | 0;\n    c = (c + d0) | 0;\n    d0 = c & 0x1fff;\n    c = (c >>> 13);\n    d1 += c;\n\n    h0 = d0;\n    h1 = d1;\n    h2 = d2;\n    h3 = d3;\n    h4 = d4;\n    h5 = d5;\n    h6 = d6;\n    h7 = d7;\n    h8 = d8;\n    h9 = d9;\n\n    mpos += 16;\n    bytes -= 16;\n  }\n  this.h[0] = h0;\n  this.h[1] = h1;\n  this.h[2] = h2;\n  this.h[3] = h3;\n  this.h[4] = h4;\n  this.h[5] = h5;\n  this.h[6] = h6;\n  this.h[7] = h7;\n  this.h[8] = h8;\n  this.h[9] = h9;\n};\n\npoly1305.prototype.finish = function(mac, macpos) {\n  var g = new Uint16Array(10);\n  var c, mask, f, i;\n\n  if (this.leftover) {\n    i = this.leftover;\n    this.buffer[i++] = 1;\n    for (; i < 16; i++) this.buffer[i] = 0;\n    this.fin = 1;\n    this.blocks(this.buffer, 0, 16);\n  }\n\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  for (i = 2; i < 10; i++) {\n    this.h[i] += c;\n    c = this.h[i] >>> 13;\n    this.h[i] &= 0x1fff;\n  }\n  this.h[0] += (c * 5);\n  c = this.h[0] >>> 13;\n  this.h[0] &= 0x1fff;\n  this.h[1] += c;\n  c = this.h[1] >>> 13;\n  this.h[1] &= 0x1fff;\n  this.h[2] += c;\n\n  g[0] = this.h[0] + 5;\n  c = g[0] >>> 13;\n  g[0] &= 0x1fff;\n  for (i = 1; i < 10; i++) {\n    g[i] = this.h[i] + c;\n    c = g[i] >>> 13;\n    g[i] &= 0x1fff;\n  }\n  g[9] -= (1 << 13);\n\n  mask = (c ^ 1) - 1;\n  for (i = 0; i < 10; i++) g[i] &= mask;\n  mask = ~mask;\n  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];\n\n  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;\n  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;\n  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;\n  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;\n  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;\n  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;\n  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;\n  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;\n\n  f = this.h[0] + this.pad[0];\n  this.h[0] = f & 0xffff;\n  for (i = 1; i < 8; i++) {\n    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;\n    this.h[i] = f & 0xffff;\n  }\n\n  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;\n  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;\n  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;\n  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;\n  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;\n  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;\n  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;\n  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;\n  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;\n  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;\n  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;\n  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;\n  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;\n  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;\n  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;\n  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;\n};\n\npoly1305.prototype.update = function(m, mpos, bytes) {\n  var i, want;\n\n  if (this.leftover) {\n    want = (16 - this.leftover);\n    if (want > bytes)\n      want = bytes;\n    for (i = 0; i < want; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    bytes -= want;\n    mpos += want;\n    this.leftover += want;\n    if (this.leftover < 16)\n      return;\n    this.blocks(this.buffer, 0, 16);\n    this.leftover = 0;\n  }\n\n  if (bytes >= 16) {\n    want = bytes - (bytes % 16);\n    this.blocks(m, mpos, want);\n    mpos += want;\n    bytes -= want;\n  }\n\n  if (bytes) {\n    for (i = 0; i < bytes; i++)\n      this.buffer[this.leftover + i] = m[mpos+i];\n    this.leftover += bytes;\n  }\n};\n\nfunction crypto_onetimeauth(out, outpos, m, mpos, n, k) {\n  var s = new poly1305(k);\n  s.update(m, mpos, n);\n  s.finish(out, outpos);\n  return 0;\n}\n\nfunction crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {\n  var x = new Uint8Array(16);\n  crypto_onetimeauth(x,0,m,mpos,n,k);\n  return crypto_verify_16(h,hpos,x,0);\n}\n\nfunction crypto_secretbox(c,m,d,n,k) {\n  var i;\n  if (d < 32) return -1;\n  crypto_stream_xor(c,0,m,0,d,n,k);\n  crypto_onetimeauth(c, 16, c, 32, d - 32, c);\n  for (i = 0; i < 16; i++) c[i] = 0;\n  return 0;\n}\n\nfunction crypto_secretbox_open(m,c,d,n,k) {\n  var i;\n  var x = new Uint8Array(32);\n  if (d < 32) return -1;\n  crypto_stream(x,0,32,n,k);\n  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;\n  crypto_stream_xor(m,0,c,0,d,n,k);\n  for (i = 0; i < 32; i++) m[i] = 0;\n  return 0;\n}\n\nfunction set25519(r, a) {\n  var i;\n  for (i = 0; i < 16; i++) r[i] = a[i]|0;\n}\n\nfunction car25519(o) {\n  var i, v, c = 1;\n  for (i = 0; i < 16; i++) {\n    v = o[i] + c + 65535;\n    c = Math.floor(v / 65536);\n    o[i] = v - c * 65536;\n  }\n  o[0] += c-1 + 37 * (c-1);\n}\n\nfunction sel25519(p, q, b) {\n  var t, c = ~(b-1);\n  for (var i = 0; i < 16; i++) {\n    t = c & (p[i] ^ q[i]);\n    p[i] ^= t;\n    q[i] ^= t;\n  }\n}\n\nfunction pack25519(o, n) {\n  var i, j, b;\n  var m = gf(), t = gf();\n  for (i = 0; i < 16; i++) t[i] = n[i];\n  car25519(t);\n  car25519(t);\n  car25519(t);\n  for (j = 0; j < 2; j++) {\n    m[0] = t[0] - 0xffed;\n    for (i = 1; i < 15; i++) {\n      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);\n      m[i-1] &= 0xffff;\n    }\n    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);\n    b = (m[15]>>16) & 1;\n    m[14] &= 0xffff;\n    sel25519(t, m, 1-b);\n  }\n  for (i = 0; i < 16; i++) {\n    o[2*i] = t[i] & 0xff;\n    o[2*i+1] = t[i]>>8;\n  }\n}\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32), d = new Uint8Array(32);\n  pack25519(c, a);\n  pack25519(d, b);\n  return crypto_verify_32(c, 0, d, 0);\n}\n\nfunction par25519(a) {\n  var d = new Uint8Array(32);\n  pack25519(d, a);\n  return d[0] & 1;\n}\n\nfunction unpack25519(o, n) {\n  var i;\n  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);\n  o[15] &= 0x7fff;\n}\n\nfunction A(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];\n}\n\nfunction Z(o, a, b) {\n  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];\n}\n\nfunction M(o, a, b) {\n  var v, c,\n     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,\n     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,\n    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,\n    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,\n    b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7],\n    b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11],\n    b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  v = a[0];\n  t0 += v * b0;\n  t1 += v * b1;\n  t2 += v * b2;\n  t3 += v * b3;\n  t4 += v * b4;\n  t5 += v * b5;\n  t6 += v * b6;\n  t7 += v * b7;\n  t8 += v * b8;\n  t9 += v * b9;\n  t10 += v * b10;\n  t11 += v * b11;\n  t12 += v * b12;\n  t13 += v * b13;\n  t14 += v * b14;\n  t15 += v * b15;\n  v = a[1];\n  t1 += v * b0;\n  t2 += v * b1;\n  t3 += v * b2;\n  t4 += v * b3;\n  t5 += v * b4;\n  t6 += v * b5;\n  t7 += v * b6;\n  t8 += v * b7;\n  t9 += v * b8;\n  t10 += v * b9;\n  t11 += v * b10;\n  t12 += v * b11;\n  t13 += v * b12;\n  t14 += v * b13;\n  t15 += v * b14;\n  t16 += v * b15;\n  v = a[2];\n  t2 += v * b0;\n  t3 += v * b1;\n  t4 += v * b2;\n  t5 += v * b3;\n  t6 += v * b4;\n  t7 += v * b5;\n  t8 += v * b6;\n  t9 += v * b7;\n  t10 += v * b8;\n  t11 += v * b9;\n  t12 += v * b10;\n  t13 += v * b11;\n  t14 += v * b12;\n  t15 += v * b13;\n  t16 += v * b14;\n  t17 += v * b15;\n  v = a[3];\n  t3 += v * b0;\n  t4 += v * b1;\n  t5 += v * b2;\n  t6 += v * b3;\n  t7 += v * b4;\n  t8 += v * b5;\n  t9 += v * b6;\n  t10 += v * b7;\n  t11 += v * b8;\n  t12 += v * b9;\n  t13 += v * b10;\n  t14 += v * b11;\n  t15 += v * b12;\n  t16 += v * b13;\n  t17 += v * b14;\n  t18 += v * b15;\n  v = a[4];\n  t4 += v * b0;\n  t5 += v * b1;\n  t6 += v * b2;\n  t7 += v * b3;\n  t8 += v * b4;\n  t9 += v * b5;\n  t10 += v * b6;\n  t11 += v * b7;\n  t12 += v * b8;\n  t13 += v * b9;\n  t14 += v * b10;\n  t15 += v * b11;\n  t16 += v * b12;\n  t17 += v * b13;\n  t18 += v * b14;\n  t19 += v * b15;\n  v = a[5];\n  t5 += v * b0;\n  t6 += v * b1;\n  t7 += v * b2;\n  t8 += v * b3;\n  t9 += v * b4;\n  t10 += v * b5;\n  t11 += v * b6;\n  t12 += v * b7;\n  t13 += v * b8;\n  t14 += v * b9;\n  t15 += v * b10;\n  t16 += v * b11;\n  t17 += v * b12;\n  t18 += v * b13;\n  t19 += v * b14;\n  t20 += v * b15;\n  v = a[6];\n  t6 += v * b0;\n  t7 += v * b1;\n  t8 += v * b2;\n  t9 += v * b3;\n  t10 += v * b4;\n  t11 += v * b5;\n  t12 += v * b6;\n  t13 += v * b7;\n  t14 += v * b8;\n  t15 += v * b9;\n  t16 += v * b10;\n  t17 += v * b11;\n  t18 += v * b12;\n  t19 += v * b13;\n  t20 += v * b14;\n  t21 += v * b15;\n  v = a[7];\n  t7 += v * b0;\n  t8 += v * b1;\n  t9 += v * b2;\n  t10 += v * b3;\n  t11 += v * b4;\n  t12 += v * b5;\n  t13 += v * b6;\n  t14 += v * b7;\n  t15 += v * b8;\n  t16 += v * b9;\n  t17 += v * b10;\n  t18 += v * b11;\n  t19 += v * b12;\n  t20 += v * b13;\n  t21 += v * b14;\n  t22 += v * b15;\n  v = a[8];\n  t8 += v * b0;\n  t9 += v * b1;\n  t10 += v * b2;\n  t11 += v * b3;\n  t12 += v * b4;\n  t13 += v * b5;\n  t14 += v * b6;\n  t15 += v * b7;\n  t16 += v * b8;\n  t17 += v * b9;\n  t18 += v * b10;\n  t19 += v * b11;\n  t20 += v * b12;\n  t21 += v * b13;\n  t22 += v * b14;\n  t23 += v * b15;\n  v = a[9];\n  t9 += v * b0;\n  t10 += v * b1;\n  t11 += v * b2;\n  t12 += v * b3;\n  t13 += v * b4;\n  t14 += v * b5;\n  t15 += v * b6;\n  t16 += v * b7;\n  t17 += v * b8;\n  t18 += v * b9;\n  t19 += v * b10;\n  t20 += v * b11;\n  t21 += v * b12;\n  t22 += v * b13;\n  t23 += v * b14;\n  t24 += v * b15;\n  v = a[10];\n  t10 += v * b0;\n  t11 += v * b1;\n  t12 += v * b2;\n  t13 += v * b3;\n  t14 += v * b4;\n  t15 += v * b5;\n  t16 += v * b6;\n  t17 += v * b7;\n  t18 += v * b8;\n  t19 += v * b9;\n  t20 += v * b10;\n  t21 += v * b11;\n  t22 += v * b12;\n  t23 += v * b13;\n  t24 += v * b14;\n  t25 += v * b15;\n  v = a[11];\n  t11 += v * b0;\n  t12 += v * b1;\n  t13 += v * b2;\n  t14 += v * b3;\n  t15 += v * b4;\n  t16 += v * b5;\n  t17 += v * b6;\n  t18 += v * b7;\n  t19 += v * b8;\n  t20 += v * b9;\n  t21 += v * b10;\n  t22 += v * b11;\n  t23 += v * b12;\n  t24 += v * b13;\n  t25 += v * b14;\n  t26 += v * b15;\n  v = a[12];\n  t12 += v * b0;\n  t13 += v * b1;\n  t14 += v * b2;\n  t15 += v * b3;\n  t16 += v * b4;\n  t17 += v * b5;\n  t18 += v * b6;\n  t19 += v * b7;\n  t20 += v * b8;\n  t21 += v * b9;\n  t22 += v * b10;\n  t23 += v * b11;\n  t24 += v * b12;\n  t25 += v * b13;\n  t26 += v * b14;\n  t27 += v * b15;\n  v = a[13];\n  t13 += v * b0;\n  t14 += v * b1;\n  t15 += v * b2;\n  t16 += v * b3;\n  t17 += v * b4;\n  t18 += v * b5;\n  t19 += v * b6;\n  t20 += v * b7;\n  t21 += v * b8;\n  t22 += v * b9;\n  t23 += v * b10;\n  t24 += v * b11;\n  t25 += v * b12;\n  t26 += v * b13;\n  t27 += v * b14;\n  t28 += v * b15;\n  v = a[14];\n  t14 += v * b0;\n  t15 += v * b1;\n  t16 += v * b2;\n  t17 += v * b3;\n  t18 += v * b4;\n  t19 += v * b5;\n  t20 += v * b6;\n  t21 += v * b7;\n  t22 += v * b8;\n  t23 += v * b9;\n  t24 += v * b10;\n  t25 += v * b11;\n  t26 += v * b12;\n  t27 += v * b13;\n  t28 += v * b14;\n  t29 += v * b15;\n  v = a[15];\n  t15 += v * b0;\n  t16 += v * b1;\n  t17 += v * b2;\n  t18 += v * b3;\n  t19 += v * b4;\n  t20 += v * b5;\n  t21 += v * b6;\n  t22 += v * b7;\n  t23 += v * b8;\n  t24 += v * b9;\n  t25 += v * b10;\n  t26 += v * b11;\n  t27 += v * b12;\n  t28 += v * b13;\n  t29 += v * b14;\n  t30 += v * b15;\n\n  t0  += 38 * t16;\n  t1  += 38 * t17;\n  t2  += 38 * t18;\n  t3  += 38 * t19;\n  t4  += 38 * t20;\n  t5  += 38 * t21;\n  t6  += 38 * t22;\n  t7  += 38 * t23;\n  t8  += 38 * t24;\n  t9  += 38 * t25;\n  t10 += 38 * t26;\n  t11 += 38 * t27;\n  t12 += 38 * t28;\n  t13 += 38 * t29;\n  t14 += 38 * t30;\n  // t15 left as is\n\n  // first car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  // second car\n  c = 1;\n  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;\n  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;\n  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;\n  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;\n  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;\n  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;\n  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;\n  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;\n  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;\n  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;\n  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;\n  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;\n  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;\n  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;\n  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;\n  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;\n  t0 += c-1 + 37 * (c-1);\n\n  o[ 0] = t0;\n  o[ 1] = t1;\n  o[ 2] = t2;\n  o[ 3] = t3;\n  o[ 4] = t4;\n  o[ 5] = t5;\n  o[ 6] = t6;\n  o[ 7] = t7;\n  o[ 8] = t8;\n  o[ 9] = t9;\n  o[10] = t10;\n  o[11] = t11;\n  o[12] = t12;\n  o[13] = t13;\n  o[14] = t14;\n  o[15] = t15;\n}\n\nfunction S(o, a) {\n  M(o, a, a);\n}\n\nfunction inv25519(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 253; a >= 0; a--) {\n    S(c, c);\n    if(a !== 2 && a !== 4) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction pow2523(o, i) {\n  var c = gf();\n  var a;\n  for (a = 0; a < 16; a++) c[a] = i[a];\n  for (a = 250; a >= 0; a--) {\n      S(c, c);\n      if(a !== 1) M(c, c, i);\n  }\n  for (a = 0; a < 16; a++) o[a] = c[a];\n}\n\nfunction crypto_scalarmult(q, n, p) {\n  var z = new Uint8Array(32);\n  var x = new Float64Array(80), r, i;\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf();\n  for (i = 0; i < 31; i++) z[i] = n[i];\n  z[31]=(n[31]&127)|64;\n  z[0]&=248;\n  unpack25519(x,p);\n  for (i = 0; i < 16; i++) {\n    b[i]=x[i];\n    d[i]=a[i]=c[i]=0;\n  }\n  a[0]=d[0]=1;\n  for (i=254; i>=0; --i) {\n    r=(z[i>>>3]>>>(i&7))&1;\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n    A(e,a,c);\n    Z(a,a,c);\n    A(c,b,d);\n    Z(b,b,d);\n    S(d,e);\n    S(f,a);\n    M(a,c,a);\n    M(c,b,e);\n    A(e,a,c);\n    Z(a,a,c);\n    S(b,a);\n    Z(c,d,f);\n    M(a,c,_121665);\n    A(a,a,d);\n    M(c,c,a);\n    M(a,d,f);\n    M(d,b,x);\n    S(b,e);\n    sel25519(a,b,r);\n    sel25519(c,d,r);\n  }\n  for (i = 0; i < 16; i++) {\n    x[i+16]=a[i];\n    x[i+32]=c[i];\n    x[i+48]=b[i];\n    x[i+64]=d[i];\n  }\n  var x32 = x.subarray(32);\n  var x16 = x.subarray(16);\n  inv25519(x32,x32);\n  M(x16,x16,x32);\n  pack25519(q,x16);\n  return 0;\n}\n\nfunction crypto_scalarmult_base(q, n) {\n  return crypto_scalarmult(q, n, _9);\n}\n\nfunction crypto_box_keypair(y, x) {\n  randombytes(x, 32);\n  return crypto_scalarmult_base(y, x);\n}\n\nfunction crypto_box_beforenm(k, y, x) {\n  var s = new Uint8Array(32);\n  crypto_scalarmult(s, x, y);\n  return crypto_core_hsalsa20(k, _0, s, sigma);\n}\n\nvar crypto_box_afternm = crypto_secretbox;\nvar crypto_box_open_afternm = crypto_secretbox_open;\n\nfunction crypto_box(c, m, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_afternm(c, m, d, n, k);\n}\n\nfunction crypto_box_open(m, c, d, n, y, x) {\n  var k = new Uint8Array(32);\n  crypto_box_beforenm(k, y, x);\n  return crypto_box_open_afternm(m, c, d, n, k);\n}\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction crypto_hashblocks_hl(hh, hl, m, n) {\n  var wh = new Int32Array(16), wl = new Int32Array(16),\n      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,\n      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,\n      th, tl, i, j, h, l, a, b, c, d;\n\n  var ah0 = hh[0],\n      ah1 = hh[1],\n      ah2 = hh[2],\n      ah3 = hh[3],\n      ah4 = hh[4],\n      ah5 = hh[5],\n      ah6 = hh[6],\n      ah7 = hh[7],\n\n      al0 = hl[0],\n      al1 = hl[1],\n      al2 = hl[2],\n      al3 = hl[3],\n      al4 = hl[4],\n      al5 = hl[5],\n      al6 = hl[6],\n      al7 = hl[7];\n\n  var pos = 0;\n  while (n >= 128) {\n    for (i = 0; i < 16; i++) {\n      j = 8 * i + pos;\n      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];\n      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];\n    }\n    for (i = 0; i < 80; i++) {\n      bh0 = ah0;\n      bh1 = ah1;\n      bh2 = ah2;\n      bh3 = ah3;\n      bh4 = ah4;\n      bh5 = ah5;\n      bh6 = ah6;\n      bh7 = ah7;\n\n      bl0 = al0;\n      bl1 = al1;\n      bl2 = al2;\n      bl3 = al3;\n      bl4 = al4;\n      bl5 = al5;\n      bl6 = al6;\n      bl7 = al7;\n\n      // add\n      h = ah7;\n      l = al7;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma1\n      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));\n      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Ch\n      h = (ah4 & ah5) ^ (~ah4 & ah6);\n      l = (al4 & al5) ^ (~al4 & al6);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // K\n      h = K[i*2];\n      l = K[i*2+1];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // w\n      h = wh[i%16];\n      l = wl[i%16];\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      th = c & 0xffff | d << 16;\n      tl = a & 0xffff | b << 16;\n\n      // add\n      h = th;\n      l = tl;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      // Sigma0\n      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));\n      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      // Maj\n      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);\n      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh7 = (c & 0xffff) | (d << 16);\n      bl7 = (a & 0xffff) | (b << 16);\n\n      // add\n      h = bh3;\n      l = bl3;\n\n      a = l & 0xffff; b = l >>> 16;\n      c = h & 0xffff; d = h >>> 16;\n\n      h = th;\n      l = tl;\n\n      a += l & 0xffff; b += l >>> 16;\n      c += h & 0xffff; d += h >>> 16;\n\n      b += a >>> 16;\n      c += b >>> 16;\n      d += c >>> 16;\n\n      bh3 = (c & 0xffff) | (d << 16);\n      bl3 = (a & 0xffff) | (b << 16);\n\n      ah1 = bh0;\n      ah2 = bh1;\n      ah3 = bh2;\n      ah4 = bh3;\n      ah5 = bh4;\n      ah6 = bh5;\n      ah7 = bh6;\n      ah0 = bh7;\n\n      al1 = bl0;\n      al2 = bl1;\n      al3 = bl2;\n      al4 = bl3;\n      al5 = bl4;\n      al6 = bl5;\n      al7 = bl6;\n      al0 = bl7;\n\n      if (i%16 === 15) {\n        for (j = 0; j < 16; j++) {\n          // add\n          h = wh[j];\n          l = wl[j];\n\n          a = l & 0xffff; b = l >>> 16;\n          c = h & 0xffff; d = h >>> 16;\n\n          h = wh[(j+9)%16];\n          l = wl[(j+9)%16];\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma0\n          th = wh[(j+1)%16];\n          tl = wl[(j+1)%16];\n          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);\n          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          // sigma1\n          th = wh[(j+14)%16];\n          tl = wl[(j+14)%16];\n          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);\n          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));\n\n          a += l & 0xffff; b += l >>> 16;\n          c += h & 0xffff; d += h >>> 16;\n\n          b += a >>> 16;\n          c += b >>> 16;\n          d += c >>> 16;\n\n          wh[j] = (c & 0xffff) | (d << 16);\n          wl[j] = (a & 0xffff) | (b << 16);\n        }\n      }\n    }\n\n    // add\n    h = ah0;\n    l = al0;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[0];\n    l = hl[0];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[0] = ah0 = (c & 0xffff) | (d << 16);\n    hl[0] = al0 = (a & 0xffff) | (b << 16);\n\n    h = ah1;\n    l = al1;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[1];\n    l = hl[1];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[1] = ah1 = (c & 0xffff) | (d << 16);\n    hl[1] = al1 = (a & 0xffff) | (b << 16);\n\n    h = ah2;\n    l = al2;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[2];\n    l = hl[2];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[2] = ah2 = (c & 0xffff) | (d << 16);\n    hl[2] = al2 = (a & 0xffff) | (b << 16);\n\n    h = ah3;\n    l = al3;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[3];\n    l = hl[3];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[3] = ah3 = (c & 0xffff) | (d << 16);\n    hl[3] = al3 = (a & 0xffff) | (b << 16);\n\n    h = ah4;\n    l = al4;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[4];\n    l = hl[4];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[4] = ah4 = (c & 0xffff) | (d << 16);\n    hl[4] = al4 = (a & 0xffff) | (b << 16);\n\n    h = ah5;\n    l = al5;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[5];\n    l = hl[5];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[5] = ah5 = (c & 0xffff) | (d << 16);\n    hl[5] = al5 = (a & 0xffff) | (b << 16);\n\n    h = ah6;\n    l = al6;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[6];\n    l = hl[6];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[6] = ah6 = (c & 0xffff) | (d << 16);\n    hl[6] = al6 = (a & 0xffff) | (b << 16);\n\n    h = ah7;\n    l = al7;\n\n    a = l & 0xffff; b = l >>> 16;\n    c = h & 0xffff; d = h >>> 16;\n\n    h = hh[7];\n    l = hl[7];\n\n    a += l & 0xffff; b += l >>> 16;\n    c += h & 0xffff; d += h >>> 16;\n\n    b += a >>> 16;\n    c += b >>> 16;\n    d += c >>> 16;\n\n    hh[7] = ah7 = (c & 0xffff) | (d << 16);\n    hl[7] = al7 = (a & 0xffff) | (b << 16);\n\n    pos += 128;\n    n -= 128;\n  }\n\n  return n;\n}\n\nfunction crypto_hash(out, m, n) {\n  var hh = new Int32Array(8),\n      hl = new Int32Array(8),\n      x = new Uint8Array(256),\n      i, b = n;\n\n  hh[0] = 0x6a09e667;\n  hh[1] = 0xbb67ae85;\n  hh[2] = 0x3c6ef372;\n  hh[3] = 0xa54ff53a;\n  hh[4] = 0x510e527f;\n  hh[5] = 0x9b05688c;\n  hh[6] = 0x1f83d9ab;\n  hh[7] = 0x5be0cd19;\n\n  hl[0] = 0xf3bcc908;\n  hl[1] = 0x84caa73b;\n  hl[2] = 0xfe94f82b;\n  hl[3] = 0x5f1d36f1;\n  hl[4] = 0xade682d1;\n  hl[5] = 0x2b3e6c1f;\n  hl[6] = 0xfb41bd6b;\n  hl[7] = 0x137e2179;\n\n  crypto_hashblocks_hl(hh, hl, m, n);\n  n %= 128;\n\n  for (i = 0; i < n; i++) x[i] = m[b-n+i];\n  x[n] = 128;\n\n  n = 256-128*(n<112?1:0);\n  x[n-9] = 0;\n  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);\n  crypto_hashblocks_hl(hh, hl, x, n);\n\n  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);\n\n  return 0;\n}\n\nfunction add(p, q) {\n  var a = gf(), b = gf(), c = gf(),\n      d = gf(), e = gf(), f = gf(),\n      g = gf(), h = gf(), t = gf();\n\n  Z(a, p[1], p[0]);\n  Z(t, q[1], q[0]);\n  M(a, a, t);\n  A(b, p[0], p[1]);\n  A(t, q[0], q[1]);\n  M(b, b, t);\n  M(c, p[3], q[3]);\n  M(c, c, D2);\n  M(d, p[2], q[2]);\n  A(d, d, d);\n  Z(e, b, a);\n  Z(f, d, c);\n  A(g, d, c);\n  A(h, b, a);\n\n  M(p[0], e, f);\n  M(p[1], h, g);\n  M(p[2], g, f);\n  M(p[3], e, h);\n}\n\nfunction cswap(p, q, b) {\n  var i;\n  for (i = 0; i < 4; i++) {\n    sel25519(p[i], q[i], b);\n  }\n}\n\nfunction pack(r, p) {\n  var tx = gf(), ty = gf(), zi = gf();\n  inv25519(zi, p[2]);\n  M(tx, p[0], zi);\n  M(ty, p[1], zi);\n  pack25519(r, ty);\n  r[31] ^= par25519(tx) << 7;\n}\n\nfunction scalarmult(p, q, s) {\n  var b, i;\n  set25519(p[0], gf0);\n  set25519(p[1], gf1);\n  set25519(p[2], gf1);\n  set25519(p[3], gf0);\n  for (i = 255; i >= 0; --i) {\n    b = (s[(i/8)|0] >> (i&7)) & 1;\n    cswap(p, q, b);\n    add(q, p);\n    add(p, p);\n    cswap(p, q, b);\n  }\n}\n\nfunction scalarbase(p, s) {\n  var q = [gf(), gf(), gf(), gf()];\n  set25519(q[0], X);\n  set25519(q[1], Y);\n  set25519(q[2], gf1);\n  M(q[3], X, Y);\n  scalarmult(p, q, s);\n}\n\nfunction crypto_sign_keypair(pk, sk, seeded) {\n  var d = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n  var i;\n\n  if (!seeded) randombytes(sk, 32);\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  scalarbase(p, d);\n  pack(pk, p);\n\n  for (i = 0; i < 32; i++) sk[i+32] = pk[i];\n  return 0;\n}\n\nvar L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);\n\nfunction modL(r, x) {\n  var carry, i, j, k;\n  for (i = 63; i >= 32; --i) {\n    carry = 0;\n    for (j = i - 32, k = i - 12; j < k; ++j) {\n      x[j] += carry - 16 * x[i] * L[j - (i - 32)];\n      carry = (x[j] + 128) >> 8;\n      x[j] -= carry * 256;\n    }\n    x[j] += carry;\n    x[i] = 0;\n  }\n  carry = 0;\n  for (j = 0; j < 32; j++) {\n    x[j] += carry - (x[31] >> 4) * L[j];\n    carry = x[j] >> 8;\n    x[j] &= 255;\n  }\n  for (j = 0; j < 32; j++) x[j] -= carry * L[j];\n  for (i = 0; i < 32; i++) {\n    x[i+1] += x[i] >> 8;\n    r[i] = x[i] & 255;\n  }\n}\n\nfunction reduce(r) {\n  var x = new Float64Array(64), i;\n  for (i = 0; i < 64; i++) x[i] = r[i];\n  for (i = 0; i < 64; i++) r[i] = 0;\n  modL(r, x);\n}\n\n// Note: difference from C - smlen returned, not passed as argument.\nfunction crypto_sign(sm, m, n, sk) {\n  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);\n  var i, j, x = new Float64Array(64);\n  var p = [gf(), gf(), gf(), gf()];\n\n  crypto_hash(d, sk, 32);\n  d[0] &= 248;\n  d[31] &= 127;\n  d[31] |= 64;\n\n  var smlen = n + 64;\n  for (i = 0; i < n; i++) sm[64 + i] = m[i];\n  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];\n\n  crypto_hash(r, sm.subarray(32), n+32);\n  reduce(r);\n  scalarbase(p, r);\n  pack(sm, p);\n\n  for (i = 32; i < 64; i++) sm[i] = sk[i];\n  crypto_hash(h, sm, n + 64);\n  reduce(h);\n\n  for (i = 0; i < 64; i++) x[i] = 0;\n  for (i = 0; i < 32; i++) x[i] = r[i];\n  for (i = 0; i < 32; i++) {\n    for (j = 0; j < 32; j++) {\n      x[i+j] += h[i] * d[j];\n    }\n  }\n\n  modL(sm.subarray(32), x);\n  return smlen;\n}\n\nfunction unpackneg(r, p) {\n  var t = gf(), chk = gf(), num = gf(),\n      den = gf(), den2 = gf(), den4 = gf(),\n      den6 = gf();\n\n  set25519(r[2], gf1);\n  unpack25519(r[1], p);\n  S(num, r[1]);\n  M(den, num, D);\n  Z(num, num, r[2]);\n  A(den, r[2], den);\n\n  S(den2, den);\n  S(den4, den2);\n  M(den6, den4, den2);\n  M(t, den6, num);\n  M(t, t, den);\n\n  pow2523(t, t);\n  M(t, t, num);\n  M(t, t, den);\n  M(t, t, den);\n  M(r[0], t, den);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) M(r[0], r[0], I);\n\n  S(chk, r[0]);\n  M(chk, chk, den);\n  if (neq25519(chk, num)) return -1;\n\n  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);\n\n  M(r[3], r[0], r[1]);\n  return 0;\n}\n\nfunction crypto_sign_open(m, sm, n, pk) {\n  var i, mlen;\n  var t = new Uint8Array(32), h = new Uint8Array(64);\n  var p = [gf(), gf(), gf(), gf()],\n      q = [gf(), gf(), gf(), gf()];\n\n  mlen = -1;\n  if (n < 64) return -1;\n\n  if (unpackneg(q, pk)) return -1;\n\n  for (i = 0; i < n; i++) m[i] = sm[i];\n  for (i = 0; i < 32; i++) m[i+32] = pk[i];\n  crypto_hash(h, m, n);\n  reduce(h);\n  scalarmult(p, q, h);\n\n  scalarbase(q, sm.subarray(32));\n  add(p, q);\n  pack(t, p);\n\n  n -= 64;\n  if (crypto_verify_32(sm, 0, t, 0)) {\n    for (i = 0; i < n; i++) m[i] = 0;\n    return -1;\n  }\n\n  for (i = 0; i < n; i++) m[i] = sm[i + 64];\n  mlen = n;\n  return mlen;\n}\n\nvar crypto_secretbox_KEYBYTES = 32,\n    crypto_secretbox_NONCEBYTES = 24,\n    crypto_secretbox_ZEROBYTES = 32,\n    crypto_secretbox_BOXZEROBYTES = 16,\n    crypto_scalarmult_BYTES = 32,\n    crypto_scalarmult_SCALARBYTES = 32,\n    crypto_box_PUBLICKEYBYTES = 32,\n    crypto_box_SECRETKEYBYTES = 32,\n    crypto_box_BEFORENMBYTES = 32,\n    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,\n    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,\n    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,\n    crypto_sign_BYTES = 64,\n    crypto_sign_PUBLICKEYBYTES = 32,\n    crypto_sign_SECRETKEYBYTES = 64,\n    crypto_sign_SEEDBYTES = 32,\n    crypto_hash_BYTES = 64;\n\nnacl.lowlevel = {\n  crypto_core_hsalsa20: crypto_core_hsalsa20,\n  crypto_stream_xor: crypto_stream_xor,\n  crypto_stream: crypto_stream,\n  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,\n  crypto_stream_salsa20: crypto_stream_salsa20,\n  crypto_onetimeauth: crypto_onetimeauth,\n  crypto_onetimeauth_verify: crypto_onetimeauth_verify,\n  crypto_verify_16: crypto_verify_16,\n  crypto_verify_32: crypto_verify_32,\n  crypto_secretbox: crypto_secretbox,\n  crypto_secretbox_open: crypto_secretbox_open,\n  crypto_scalarmult: crypto_scalarmult,\n  crypto_scalarmult_base: crypto_scalarmult_base,\n  crypto_box_beforenm: crypto_box_beforenm,\n  crypto_box_afternm: crypto_box_afternm,\n  crypto_box: crypto_box,\n  crypto_box_open: crypto_box_open,\n  crypto_box_keypair: crypto_box_keypair,\n  crypto_hash: crypto_hash,\n  crypto_sign: crypto_sign,\n  crypto_sign_keypair: crypto_sign_keypair,\n  crypto_sign_open: crypto_sign_open,\n\n  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,\n  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,\n  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,\n  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,\n  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,\n  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,\n  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,\n  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,\n  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,\n  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,\n  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,\n  crypto_sign_BYTES: crypto_sign_BYTES,\n  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,\n  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,\n  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,\n  crypto_hash_BYTES: crypto_hash_BYTES\n};\n\n/* High-level API */\n\nfunction checkLengths(k, n) {\n  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');\n  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');\n}\n\nfunction checkBoxLengths(pk, sk) {\n  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');\n  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');\n}\n\nfunction checkArrayTypes() {\n  for (var i = 0; i < arguments.length; i++) {\n    if (!(arguments[i] instanceof Uint8Array))\n      throw new TypeError('unexpected type, use Uint8Array');\n  }\n}\n\nfunction cleanup(arr) {\n  for (var i = 0; i < arr.length; i++) arr[i] = 0;\n}\n\nnacl.randomBytes = function(n) {\n  var b = new Uint8Array(n);\n  randombytes(b, n);\n  return b;\n};\n\nnacl.secretbox = function(msg, nonce, key) {\n  checkArrayTypes(msg, nonce, key);\n  checkLengths(key, nonce);\n  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);\n  var c = new Uint8Array(m.length);\n  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];\n  crypto_secretbox(c, m, m.length, nonce, key);\n  return c.subarray(crypto_secretbox_BOXZEROBYTES);\n};\n\nnacl.secretbox.open = function(box, nonce, key) {\n  checkArrayTypes(box, nonce, key);\n  checkLengths(key, nonce);\n  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);\n  var m = new Uint8Array(c.length);\n  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];\n  if (c.length < 32) return null;\n  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;\n  return m.subarray(crypto_secretbox_ZEROBYTES);\n};\n\nnacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;\nnacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;\nnacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;\n\nnacl.scalarMult = function(n, p) {\n  checkArrayTypes(n, p);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult(q, n, p);\n  return q;\n};\n\nnacl.scalarMult.base = function(n) {\n  checkArrayTypes(n);\n  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');\n  var q = new Uint8Array(crypto_scalarmult_BYTES);\n  crypto_scalarmult_base(q, n);\n  return q;\n};\n\nnacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;\nnacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;\n\nnacl.box = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox(msg, nonce, k);\n};\n\nnacl.box.before = function(publicKey, secretKey) {\n  checkArrayTypes(publicKey, secretKey);\n  checkBoxLengths(publicKey, secretKey);\n  var k = new Uint8Array(crypto_box_BEFORENMBYTES);\n  crypto_box_beforenm(k, publicKey, secretKey);\n  return k;\n};\n\nnacl.box.after = nacl.secretbox;\n\nnacl.box.open = function(msg, nonce, publicKey, secretKey) {\n  var k = nacl.box.before(publicKey, secretKey);\n  return nacl.secretbox.open(msg, nonce, k);\n};\n\nnacl.box.open.after = nacl.secretbox.open;\n\nnacl.box.keyPair = function() {\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);\n  crypto_box_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.box.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_box_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);\n  crypto_scalarmult_base(pk, secretKey);\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;\nnacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;\nnacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;\nnacl.box.nonceLength = crypto_box_NONCEBYTES;\nnacl.box.overheadLength = nacl.secretbox.overheadLength;\n\nnacl.sign = function(msg, secretKey) {\n  checkArrayTypes(msg, secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);\n  crypto_sign(signedMsg, msg, msg.length, secretKey);\n  return signedMsg;\n};\n\nnacl.sign.open = function(signedMsg, publicKey) {\n  checkArrayTypes(signedMsg, publicKey);\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var tmp = new Uint8Array(signedMsg.length);\n  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);\n  if (mlen < 0) return null;\n  var m = new Uint8Array(mlen);\n  for (var i = 0; i < m.length; i++) m[i] = tmp[i];\n  return m;\n};\n\nnacl.sign.detached = function(msg, secretKey) {\n  var signedMsg = nacl.sign(msg, secretKey);\n  var sig = new Uint8Array(crypto_sign_BYTES);\n  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];\n  return sig;\n};\n\nnacl.sign.detached.verify = function(msg, sig, publicKey) {\n  checkArrayTypes(msg, sig, publicKey);\n  if (sig.length !== crypto_sign_BYTES)\n    throw new Error('bad signature size');\n  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)\n    throw new Error('bad public key size');\n  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var m = new Uint8Array(crypto_sign_BYTES + msg.length);\n  var i;\n  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];\n  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];\n  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);\n};\n\nnacl.sign.keyPair = function() {\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  crypto_sign_keypair(pk, sk);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.keyPair.fromSecretKey = function(secretKey) {\n  checkArrayTypes(secretKey);\n  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)\n    throw new Error('bad secret key size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];\n  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};\n};\n\nnacl.sign.keyPair.fromSeed = function(seed) {\n  checkArrayTypes(seed);\n  if (seed.length !== crypto_sign_SEEDBYTES)\n    throw new Error('bad seed size');\n  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);\n  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);\n  for (var i = 0; i < 32; i++) sk[i] = seed[i];\n  crypto_sign_keypair(pk, sk, true);\n  return {publicKey: pk, secretKey: sk};\n};\n\nnacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;\nnacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;\nnacl.sign.seedLength = crypto_sign_SEEDBYTES;\nnacl.sign.signatureLength = crypto_sign_BYTES;\n\nnacl.hash = function(msg) {\n  checkArrayTypes(msg);\n  var h = new Uint8Array(crypto_hash_BYTES);\n  crypto_hash(h, msg, msg.length);\n  return h;\n};\n\nnacl.hash.hashLength = crypto_hash_BYTES;\n\nnacl.verify = function(x, y) {\n  checkArrayTypes(x, y);\n  // Zero length arguments are considered not equal.\n  if (x.length === 0 || y.length === 0) return false;\n  if (x.length !== y.length) return false;\n  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;\n};\n\nnacl.setPRNG = function(fn) {\n  randombytes = fn;\n};\n\n(function() {\n  // Initialize PRNG if environment provides CSPRNG.\n  // If not, methods calling randombytes will throw.\n  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;\n  if (crypto && crypto.getRandomValues) {\n    // Browsers.\n    var QUOTA = 65536;\n    nacl.setPRNG(function(x, n) {\n      var i, v = new Uint8Array(n);\n      for (i = 0; i < n; i += QUOTA) {\n        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));\n      }\n      for (i = 0; i < n; i++) x[i] = v[i];\n      cleanup(v);\n    });\n  } else if (true) {\n    // Node.js.\n    crypto = __webpack_require__(/*! crypto */ 24);\n    if (crypto && crypto.randomBytes) {\n      nacl.setPRNG(function(x, n) {\n        var i, v = crypto.randomBytes(n);\n        for (i = 0; i < n; i++) x[i] = v[i];\n        cleanup(v);\n      });\n    }\n  }\n})();\n\n})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///165\n");

/***/ }),
/* 166 */
/*!****************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/receiver/VoiceReceiver.js ***!
  \****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter;\nconst secretbox = __webpack_require__(/*! ../util/Secretbox */ 80);\nconst Readable = __webpack_require__(/*! ./VoiceReadable */ 167);\nconst OpusEncoders = __webpack_require__(/*! ../opus/OpusEngineList */ 44);\n\nconst nonce = Buffer.alloc(24);\nnonce.fill(0);\n\n/**\n * Receives voice data from a voice connection.\n * ```js\n * // Obtained using:\n * voiceChannel.join()\n *   .then(connection => {\n *     const receiver = connection.createReceiver();\n *   });\n * ```\n * @extends {EventEmitter}\n */\nclass VoiceReceiver extends EventEmitter {\n  constructor(connection) {\n    super();\n    /*\n      Need a queue because we don't get the ssrc of the user speaking until after the first few packets,\n      so we queue up unknown SSRCs until they become known, then empty the queue\n    */\n    this.queues = new Map();\n    this.pcmStreams = new Map();\n    this.opusStreams = new Map();\n    this.opusEncoders = new Map();\n\n    /**\n     * Whether or not this receiver has been destroyed\n     * @type {boolean}\n     */\n    this.destroyed = false;\n\n    /**\n     * The VoiceConnection that instantiated this\n     * @type {VoiceConnection}\n     */\n    this.voiceConnection = connection;\n\n    this._listener = msg => {\n      const ssrc = +msg.readUInt32BE(8).toString(10);\n      const user = this.voiceConnection.ssrcMap.get(ssrc);\n      if (!user) {\n        if (!this.queues.has(ssrc)) this.queues.set(ssrc, []);\n        this.queues.get(ssrc).push(msg);\n      } else {\n        if (this.queues.get(ssrc)) {\n          this.queues.get(ssrc).push(msg);\n          this.queues.get(ssrc).map(m => this.handlePacket(m, user));\n          this.queues.delete(ssrc);\n          return;\n        }\n        this.handlePacket(msg, user);\n      }\n    };\n    this.voiceConnection.sockets.udp.socket.on('message', this._listener);\n  }\n\n  /**\n   * If this VoiceReceiver has been destroyed, running `recreate()` will recreate the listener.\n   * This avoids you having to create a new receiver.\n   * <info>Any streams that you had prior to destroying the receiver will not be recreated.</info>\n   */\n  recreate() {\n    if (!this.destroyed) return;\n    this.voiceConnection.sockets.udp.socket.on('message', this._listener);\n    this.destroyed = false;\n  }\n\n  /**\n   * Destroy this VoiceReceiver, also ending any streams that it may be controlling.\n   */\n  destroy() {\n    this.voiceConnection.sockets.udp.socket.removeListener('message', this._listener);\n    for (const [id, stream] of this.pcmStreams) {\n      stream._push(null);\n      this.pcmStreams.delete(id);\n    }\n    for (const [id, stream] of this.opusStreams) {\n      stream._push(null);\n      this.opusStreams.delete(id);\n    }\n    for (const [id, encoder] of this.opusEncoders) {\n      encoder.destroy();\n      this.opusEncoders.delete(id);\n    }\n    this.destroyed = true;\n  }\n\n  /**\n   * Invoked when a user stops speaking.\n   * @param {User} user The user that stopped speaking\n   * @private\n   */\n  stoppedSpeaking(user) {\n    const opusStream = this.opusStreams.get(user.id);\n    const pcmStream = this.pcmStreams.get(user.id);\n    const opusEncoder = this.opusEncoders.get(user.id);\n    if (opusStream) {\n      opusStream.push(null);\n      opusStream.open = false;\n      this.opusStreams.delete(user.id);\n    }\n    if (pcmStream) {\n      pcmStream.push(null);\n      pcmStream.open = false;\n      this.pcmStreams.delete(user.id);\n    }\n    if (opusEncoder) {\n      opusEncoder.destroy();\n    }\n  }\n\n  /**\n   * Creates a readable stream for a user that provides opus data while the user is speaking. When the user\n   * stops speaking, the stream is destroyed.\n   * @param {UserResolvable} user The user to create the stream for\n   * @returns {ReadableStream}\n   */\n  createOpusStream(user) {\n    user = this.voiceConnection.voiceManager.client.resolver.resolveUser(user);\n    if (!user) throw new Error('Couldn\\'t resolve the user to create Opus stream.');\n    if (this.opusStreams.get(user.id)) throw new Error('There is already an existing stream for that user.');\n    const stream = new Readable();\n    this.opusStreams.set(user.id, stream);\n    return stream;\n  }\n\n  /**\n   * Creates a readable stream for a user that provides PCM data while the user is speaking. When the user\n   * stops speaking, the stream is destroyed. The stream is 32-bit signed stereo PCM at 48KHz.\n   * @param {UserResolvable} user The user to create the stream for\n   * @returns {ReadableStream}\n   */\n  createPCMStream(user) {\n    user = this.voiceConnection.voiceManager.client.resolver.resolveUser(user);\n    if (!user) throw new Error('Couldn\\'t resolve the user to create PCM stream.');\n    if (this.pcmStreams.get(user.id)) throw new Error('There is already an existing stream for that user.');\n    const stream = new Readable();\n    this.pcmStreams.set(user.id, stream);\n    return stream;\n  }\n\n  handlePacket(msg, user) {\n    msg.copy(nonce, 0, 0, 12);\n    let data = secretbox.methods.open(msg.slice(12), nonce, this.voiceConnection.authentication.secretKey.key);\n    if (!data) {\n      /**\n       * Emitted whenever a voice packet experiences a problem.\n       * @event VoiceReceiver#warn\n       * @param {string} reason The reason for the warning. If it happened because the voice packet could not be\n       * decrypted, this would be `decrypt`. If it happened because the voice packet could not be decoded into\n       * PCM, this would be `decode`\n       * @param {string} message The warning message\n       */\n      this.emit('warn', 'decrypt', 'Failed to decrypt voice packet');\n      return;\n    }\n    data = Buffer.from(data);\n\n    // Strip RTP Header Extensions (one-byte only)\n    if (data[0] === 0xBE && data[1] === 0xDE && data.length > 4) {\n      const headerExtensionLength = data.readUInt16BE(2);\n      let offset = 4;\n      for (let i = 0; i < headerExtensionLength; i++) {\n        const byte = data[offset];\n        offset++;\n        if (byte === 0) {\n          continue;\n        }\n        offset += 1 + (0b1111 & (byte >> 4));\n      }\n      while (data[offset] === 0) {\n        offset++;\n      }\n      data = data.slice(offset);\n    }\n\n    if (this.opusStreams.get(user.id)) this.opusStreams.get(user.id)._push(data);\n    /**\n     * Emitted whenever voice data is received from the voice connection. This is _always_ emitted (unlike PCM).\n     * @event VoiceReceiver#opus\n     * @param {User} user The user that is sending the buffer (is speaking)\n     * @param {Buffer} buffer The opus buffer\n     */\n    this.emit('opus', user, data);\n    if (this.listenerCount('pcm') > 0 || this.pcmStreams.size > 0) {\n      if (!this.opusEncoders.get(user.id)) this.opusEncoders.set(user.id, OpusEncoders.fetch());\n      const { pcm, error } = VoiceReceiver._tryDecode(this.opusEncoders.get(user.id), data);\n      if (error) {\n        this.emit('warn', 'decode', `Failed to decode packet voice to PCM because: ${error.message}`);\n        return;\n      }\n      if (this.pcmStreams.get(user.id)) this.pcmStreams.get(user.id)._push(pcm);\n      /**\n       * Emits decoded voice data when it's received. For performance reasons, the decoding will only\n       * happen if there is at least one `pcm` listener on this receiver.\n       * @event VoiceReceiver#pcm\n       * @param {User} user The user that is sending the buffer (is speaking)\n       * @param {Buffer} buffer The decoded buffer\n       */\n      this.emit('pcm', user, pcm);\n    }\n  }\n\n  static _tryDecode(encoder, data) {\n    try {\n      return { pcm: encoder.decode(data) };\n    } catch (error) {\n      return { error };\n    }\n  }\n}\n\nmodule.exports = VoiceReceiver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///166\n");

/***/ }),
/* 167 */
/*!****************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/voice/receiver/VoiceReadable.js ***!
  \****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Readable = __webpack_require__(/*! stream */ 31).Readable;\n\nclass VoiceReadable extends Readable {\n  constructor() {\n    super();\n    this._packets = [];\n    this.open = true;\n  }\n\n  _read() {} // eslint-disable-line no-empty-function\n\n  _push(d) {\n    if (this.open) this.push(d);\n  }\n}\n\nmodule.exports = VoiceReadable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC92b2ljZS9yZWNlaXZlci9Wb2ljZVJlYWRhYmxlLmpzPzFmNTciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhZGFibGUgPSByZXF1aXJlKCdzdHJlYW0nKS5SZWFkYWJsZTtcblxuY2xhc3MgVm9pY2VSZWFkYWJsZSBleHRlbmRzIFJlYWRhYmxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9wYWNrZXRzID0gW107XG4gICAgdGhpcy5vcGVuID0gdHJ1ZTtcbiAgfVxuXG4gIF9yZWFkKCkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eS1mdW5jdGlvblxuXG4gIF9wdXNoKGQpIHtcbiAgICBpZiAodGhpcy5vcGVuKSB0aGlzLnB1c2goZCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBWb2ljZVJlYWRhYmxlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L3ZvaWNlL3JlY2VpdmVyL1ZvaWNlUmVhZGFibGUuanNcbi8vIG1vZHVsZSBpZCA9IDE2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///167\n");

/***/ }),
/* 168 */
/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/websocket/WebSocketManager.js ***!
  \**************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter;\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst WebSocketConnection = __webpack_require__(/*! ./WebSocketConnection */ 66);\n\n/**\n * WebSocket Manager of the client.\n * @private\n */\nclass WebSocketManager extends EventEmitter {\n  constructor(client) {\n    super();\n    /**\n     * The client that instantiated this WebSocketManager\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * The WebSocket connection of this manager\n     * @type {?WebSocketConnection}\n     */\n    this.connection = null;\n  }\n\n  /**\n   * Sends a heartbeat on the available connection.\n   * @returns {void}\n   */\n  heartbeat() {\n    if (!this.connection) return this.debug('No connection to heartbeat');\n    return this.connection.heartbeat();\n  }\n\n  /**\n   * Emits a debug event.\n   * @param {string} message Debug message\n   * @returns {void}\n   */\n  debug(message) {\n    return this.client.emit('debug', `[ws] ${message}`);\n  }\n\n  /**\n   * Destroy the client.\n   * @returns {void} Whether or not destruction was successful\n   */\n  destroy() {\n    if (!this.connection) {\n      this.debug('Attempted to destroy WebSocket but no connection exists!');\n      return false;\n    }\n    return this.connection.destroy();\n  }\n\n  /**\n   * Send a packet on the available WebSocket.\n   * @param {Object} packet Packet to send\n   * @returns {void}\n   */\n  send(packet) {\n    if (!this.connection) {\n      this.debug('No connection to websocket');\n      return;\n    }\n    this.connection.send(packet);\n  }\n\n  /**\n   * Connects the client to a gateway.\n   * @param {string} gateway The gateway to connect to\n   * @returns {boolean}\n   */\n  connect(gateway) {\n    if (!this.connection) {\n      this.connection = new WebSocketConnection(this, gateway);\n      return true;\n    }\n    switch (this.connection.status) {\n      case Constants.Status.IDLE:\n      case Constants.Status.DISCONNECTED:\n        this.connection.connect(gateway, 5500);\n        return true;\n      default:\n        this.debug(`Couldn't connect to ${gateway} as the websocket is at state ${this.connection.status}`);\n        return false;\n    }\n  }\n}\n\nmodule.exports = WebSocketManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvV2ViU29ja2V0TWFuYWdlci5qcz9hZWRjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlcjtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5jb25zdCBXZWJTb2NrZXRDb25uZWN0aW9uID0gcmVxdWlyZSgnLi9XZWJTb2NrZXRDb25uZWN0aW9uJyk7XG5cbi8qKlxuICogV2ViU29ja2V0IE1hbmFnZXIgb2YgdGhlIGNsaWVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFdlYlNvY2tldE1hbmFnZXIgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICBzdXBlcigpO1xuICAgIC8qKlxuICAgICAqIFRoZSBjbGllbnQgdGhhdCBpbnN0YW50aWF0ZWQgdGhpcyBXZWJTb2NrZXRNYW5hZ2VyXG4gICAgICogQHR5cGUge0NsaWVudH1cbiAgICAgKi9cbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBvZiB0aGlzIG1hbmFnZXJcbiAgICAgKiBAdHlwZSB7P1dlYlNvY2tldENvbm5lY3Rpb259XG4gICAgICovXG4gICAgdGhpcy5jb25uZWN0aW9uID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIGhlYXJ0YmVhdCBvbiB0aGUgYXZhaWxhYmxlIGNvbm5lY3Rpb24uXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgaGVhcnRiZWF0KCkge1xuICAgIGlmICghdGhpcy5jb25uZWN0aW9uKSByZXR1cm4gdGhpcy5kZWJ1ZygnTm8gY29ubmVjdGlvbiB0byBoZWFydGJlYXQnKTtcbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLmhlYXJ0YmVhdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEVtaXRzIGEgZGVidWcgZXZlbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIERlYnVnIG1lc3NhZ2VcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBkZWJ1ZyhtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50LmVtaXQoJ2RlYnVnJywgYFt3c10gJHttZXNzYWdlfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgdGhlIGNsaWVudC5cbiAgICogQHJldHVybnMge3ZvaWR9IFdoZXRoZXIgb3Igbm90IGRlc3RydWN0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGlmICghdGhpcy5jb25uZWN0aW9uKSB7XG4gICAgICB0aGlzLmRlYnVnKCdBdHRlbXB0ZWQgdG8gZGVzdHJveSBXZWJTb2NrZXQgYnV0IG5vIGNvbm5lY3Rpb24gZXhpc3RzIScpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb25uZWN0aW9uLmRlc3Ryb3koKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGEgcGFja2V0IG9uIHRoZSBhdmFpbGFibGUgV2ViU29ja2V0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IFBhY2tldCB0byBzZW5kXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgc2VuZChwYWNrZXQpIHtcbiAgICBpZiAoIXRoaXMuY29ubmVjdGlvbikge1xuICAgICAgdGhpcy5kZWJ1ZygnTm8gY29ubmVjdGlvbiB0byB3ZWJzb2NrZXQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jb25uZWN0aW9uLnNlbmQocGFja2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25uZWN0cyB0aGUgY2xpZW50IHRvIGEgZ2F0ZXdheS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGdhdGV3YXkgVGhlIGdhdGV3YXkgdG8gY29ubmVjdCB0b1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNvbm5lY3QoZ2F0ZXdheSkge1xuICAgIGlmICghdGhpcy5jb25uZWN0aW9uKSB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb24gPSBuZXcgV2ViU29ja2V0Q29ubmVjdGlvbih0aGlzLCBnYXRld2F5KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMuY29ubmVjdGlvbi5zdGF0dXMpIHtcbiAgICAgIGNhc2UgQ29uc3RhbnRzLlN0YXR1cy5JRExFOlxuICAgICAgY2FzZSBDb25zdGFudHMuU3RhdHVzLkRJU0NPTk5FQ1RFRDpcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uLmNvbm5lY3QoZ2F0ZXdheSwgNTUwMCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5kZWJ1ZyhgQ291bGRuJ3QgY29ubmVjdCB0byAke2dhdGV3YXl9IGFzIHRoZSB3ZWJzb2NrZXQgaXMgYXQgc3RhdGUgJHt0aGlzLmNvbm5lY3Rpb24uc3RhdHVzfWApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViU29ja2V0TWFuYWdlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC93ZWJzb2NrZXQvV2ViU29ja2V0TWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMTY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///168\n");

/***/ }),
/* 169 */
/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ActionsManager.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("class ActionsManager {\n  constructor(client) {\n    this.client = client;\n\n    this.register(__webpack_require__(/*! ./MessageCreate */ 170));\n    this.register(__webpack_require__(/*! ./MessageDelete */ 171));\n    this.register(__webpack_require__(/*! ./MessageDeleteBulk */ 172));\n    this.register(__webpack_require__(/*! ./MessageUpdate */ 173));\n    this.register(__webpack_require__(/*! ./MessageReactionAdd */ 174));\n    this.register(__webpack_require__(/*! ./MessageReactionRemove */ 175));\n    this.register(__webpack_require__(/*! ./MessageReactionRemoveAll */ 176));\n    this.register(__webpack_require__(/*! ./ChannelCreate */ 177));\n    this.register(__webpack_require__(/*! ./ChannelDelete */ 178));\n    this.register(__webpack_require__(/*! ./ChannelUpdate */ 179));\n    this.register(__webpack_require__(/*! ./GuildDelete */ 180));\n    this.register(__webpack_require__(/*! ./GuildUpdate */ 181));\n    this.register(__webpack_require__(/*! ./GuildMemberGet */ 182));\n    this.register(__webpack_require__(/*! ./GuildMemberRemove */ 183));\n    this.register(__webpack_require__(/*! ./GuildBanRemove */ 184));\n    this.register(__webpack_require__(/*! ./GuildRoleCreate */ 185));\n    this.register(__webpack_require__(/*! ./GuildRoleDelete */ 186));\n    this.register(__webpack_require__(/*! ./GuildRoleUpdate */ 187));\n    this.register(__webpack_require__(/*! ./UserGet */ 188));\n    this.register(__webpack_require__(/*! ./UserUpdate */ 189));\n    this.register(__webpack_require__(/*! ./UserNoteUpdate */ 190));\n    this.register(__webpack_require__(/*! ./GuildSync */ 191));\n    this.register(__webpack_require__(/*! ./GuildEmojiCreate */ 192));\n    this.register(__webpack_require__(/*! ./GuildEmojiDelete */ 193));\n    this.register(__webpack_require__(/*! ./GuildEmojiUpdate */ 194));\n    this.register(__webpack_require__(/*! ./GuildEmojisUpdate */ 195));\n    this.register(__webpack_require__(/*! ./GuildRolesPositionUpdate */ 196));\n    this.register(__webpack_require__(/*! ./GuildChannelsPositionUpdate */ 197));\n  }\n\n  register(Action) {\n    this[Action.name.replace(/Action$/, '')] = new Action(this.client);\n  }\n}\n\nmodule.exports = ActionsManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTY5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0FjdGlvbnNNYW5hZ2VyLmpzPzdiODEiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQWN0aW9uc01hbmFnZXIge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcblxuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9NZXNzYWdlQ3JlYXRlJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9NZXNzYWdlRGVsZXRlJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9NZXNzYWdlRGVsZXRlQnVsaycpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoJy4vTWVzc2FnZVVwZGF0ZScpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoJy4vTWVzc2FnZVJlYWN0aW9uQWRkJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9NZXNzYWdlUmVhY3Rpb25SZW1vdmUnKSk7XG4gICAgdGhpcy5yZWdpc3RlcihyZXF1aXJlKCcuL01lc3NhZ2VSZWFjdGlvblJlbW92ZUFsbCcpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoJy4vQ2hhbm5lbENyZWF0ZScpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoJy4vQ2hhbm5lbERlbGV0ZScpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoJy4vQ2hhbm5lbFVwZGF0ZScpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoJy4vR3VpbGREZWxldGUnKSk7XG4gICAgdGhpcy5yZWdpc3RlcihyZXF1aXJlKCcuL0d1aWxkVXBkYXRlJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9HdWlsZE1lbWJlckdldCcpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoJy4vR3VpbGRNZW1iZXJSZW1vdmUnKSk7XG4gICAgdGhpcy5yZWdpc3RlcihyZXF1aXJlKCcuL0d1aWxkQmFuUmVtb3ZlJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9HdWlsZFJvbGVDcmVhdGUnKSk7XG4gICAgdGhpcy5yZWdpc3RlcihyZXF1aXJlKCcuL0d1aWxkUm9sZURlbGV0ZScpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoJy4vR3VpbGRSb2xlVXBkYXRlJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9Vc2VyR2V0JykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9Vc2VyVXBkYXRlJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9Vc2VyTm90ZVVwZGF0ZScpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoJy4vR3VpbGRTeW5jJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9HdWlsZEVtb2ppQ3JlYXRlJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9HdWlsZEVtb2ppRGVsZXRlJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9HdWlsZEVtb2ppVXBkYXRlJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9HdWlsZEVtb2ppc1VwZGF0ZScpKTtcbiAgICB0aGlzLnJlZ2lzdGVyKHJlcXVpcmUoJy4vR3VpbGRSb2xlc1Bvc2l0aW9uVXBkYXRlJykpO1xuICAgIHRoaXMucmVnaXN0ZXIocmVxdWlyZSgnLi9HdWlsZENoYW5uZWxzUG9zaXRpb25VcGRhdGUnKSk7XG4gIH1cblxuICByZWdpc3RlcihBY3Rpb24pIHtcbiAgICB0aGlzW0FjdGlvbi5uYW1lLnJlcGxhY2UoL0FjdGlvbiQvLCAnJyldID0gbmV3IEFjdGlvbih0aGlzLmNsaWVudCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBY3Rpb25zTWFuYWdlcjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0FjdGlvbnNNYW5hZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///169\n");

/***/ }),
/* 170 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageCreate.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Message = __webpack_require__(/*! ../../structures/Message */ 16);\n\nclass MessageCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const channel = client.channels.get((data instanceof Array ? data[0] : data).channel_id);\n    const user = client.users.get((data instanceof Array ? data[0] : data).author.id);\n    if (channel) {\n      const member = channel.guild ? channel.guild.member(user) : null;\n      if (data instanceof Array) {\n        const messages = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n          messages[i] = channel._cacheMessage(new Message(channel, data[i], client));\n        }\n        const lastMessage = messages[messages.length - 1];\n        channel.lastMessageID = lastMessage.id;\n        channel.lastMessage = lastMessage;\n        if (user) {\n          user.lastMessageID = lastMessage.id;\n          user.lastMessage = lastMessage;\n        }\n        if (member) {\n          member.lastMessageID = lastMessage.id;\n          member.lastMessage = lastMessage;\n        }\n        return {\n          messages,\n        };\n      } else {\n        const message = channel._cacheMessage(new Message(channel, data, client));\n        channel.lastMessageID = data.id;\n        channel.lastMessage = message;\n        if (user) {\n          user.lastMessageID = data.id;\n          user.lastMessage = message;\n        }\n        if (member) {\n          member.lastMessageID = data.id;\n          member.lastMessage = message;\n        }\n        return {\n          message,\n        };\n      }\n    }\n\n    return {\n      message: null,\n    };\n  }\n}\n\nmodule.exports = MessageCreateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VDcmVhdGUuanM/NzEzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuY29uc3QgTWVzc2FnZSA9IHJlcXVpcmUoJy4uLy4uL3N0cnVjdHVyZXMvTWVzc2FnZScpO1xuXG5jbGFzcyBNZXNzYWdlQ3JlYXRlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgaGFuZGxlKGRhdGEpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcblxuICAgIGNvbnN0IGNoYW5uZWwgPSBjbGllbnQuY2hhbm5lbHMuZ2V0KChkYXRhIGluc3RhbmNlb2YgQXJyYXkgPyBkYXRhWzBdIDogZGF0YSkuY2hhbm5lbF9pZCk7XG4gICAgY29uc3QgdXNlciA9IGNsaWVudC51c2Vycy5nZXQoKGRhdGEgaW5zdGFuY2VvZiBBcnJheSA/IGRhdGFbMF0gOiBkYXRhKS5hdXRob3IuaWQpO1xuICAgIGlmIChjaGFubmVsKSB7XG4gICAgICBjb25zdCBtZW1iZXIgPSBjaGFubmVsLmd1aWxkID8gY2hhbm5lbC5ndWlsZC5tZW1iZXIodXNlcikgOiBudWxsO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlcyA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG1lc3NhZ2VzW2ldID0gY2hhbm5lbC5fY2FjaGVNZXNzYWdlKG5ldyBNZXNzYWdlKGNoYW5uZWwsIGRhdGFbaV0sIGNsaWVudCkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhc3RNZXNzYWdlID0gbWVzc2FnZXNbbWVzc2FnZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIGNoYW5uZWwubGFzdE1lc3NhZ2VJRCA9IGxhc3RNZXNzYWdlLmlkO1xuICAgICAgICBjaGFubmVsLmxhc3RNZXNzYWdlID0gbGFzdE1lc3NhZ2U7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgdXNlci5sYXN0TWVzc2FnZUlEID0gbGFzdE1lc3NhZ2UuaWQ7XG4gICAgICAgICAgdXNlci5sYXN0TWVzc2FnZSA9IGxhc3RNZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZW1iZXIpIHtcbiAgICAgICAgICBtZW1iZXIubGFzdE1lc3NhZ2VJRCA9IGxhc3RNZXNzYWdlLmlkO1xuICAgICAgICAgIG1lbWJlci5sYXN0TWVzc2FnZSA9IGxhc3RNZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWVzc2FnZXMsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gY2hhbm5lbC5fY2FjaGVNZXNzYWdlKG5ldyBNZXNzYWdlKGNoYW5uZWwsIGRhdGEsIGNsaWVudCkpO1xuICAgICAgICBjaGFubmVsLmxhc3RNZXNzYWdlSUQgPSBkYXRhLmlkO1xuICAgICAgICBjaGFubmVsLmxhc3RNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICB1c2VyLmxhc3RNZXNzYWdlSUQgPSBkYXRhLmlkO1xuICAgICAgICAgIHVzZXIubGFzdE1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZW1iZXIpIHtcbiAgICAgICAgICBtZW1iZXIubGFzdE1lc3NhZ2VJRCA9IGRhdGEuaWQ7XG4gICAgICAgICAgbWVtYmVyLmxhc3RNZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6IG51bGwsXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2VDcmVhdGVBY3Rpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9NZXNzYWdlQ3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///170\n");

/***/ }),
/* 171 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageDelete.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass MessageDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.get(data.channel_id);\n    let message;\n\n    if (channel) {\n      message = channel.messages.get(data.id);\n      if (message) {\n        channel.messages.delete(message.id);\n        this.deleted.set(channel.id + message.id, message);\n        this.scheduleForDeletion(channel.id, message.id);\n      } else {\n        message = this.deleted.get(channel.id + data.id) || null;\n      }\n    }\n\n    return { message };\n  }\n\n  scheduleForDeletion(channelID, messageID) {\n    this.client.setTimeout(() => this.deleted.delete(channelID + messageID),\n      this.client.options.restWsBridgeTimeout);\n  }\n}\n\nmodule.exports = MessageDeleteAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VEZWxldGUuanM/NDkxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuXG5jbGFzcyBNZXNzYWdlRGVsZXRlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KTtcbiAgICB0aGlzLmRlbGV0ZWQgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBoYW5kbGUoZGF0YSkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIGNvbnN0IGNoYW5uZWwgPSBjbGllbnQuY2hhbm5lbHMuZ2V0KGRhdGEuY2hhbm5lbF9pZCk7XG4gICAgbGV0IG1lc3NhZ2U7XG5cbiAgICBpZiAoY2hhbm5lbCkge1xuICAgICAgbWVzc2FnZSA9IGNoYW5uZWwubWVzc2FnZXMuZ2V0KGRhdGEuaWQpO1xuICAgICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgY2hhbm5lbC5tZXNzYWdlcy5kZWxldGUobWVzc2FnZS5pZCk7XG4gICAgICAgIHRoaXMuZGVsZXRlZC5zZXQoY2hhbm5lbC5pZCArIG1lc3NhZ2UuaWQsIG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLnNjaGVkdWxlRm9yRGVsZXRpb24oY2hhbm5lbC5pZCwgbWVzc2FnZS5pZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gdGhpcy5kZWxldGVkLmdldChjaGFubmVsLmlkICsgZGF0YS5pZCkgfHwgbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBtZXNzYWdlIH07XG4gIH1cblxuICBzY2hlZHVsZUZvckRlbGV0aW9uKGNoYW5uZWxJRCwgbWVzc2FnZUlEKSB7XG4gICAgdGhpcy5jbGllbnQuc2V0VGltZW91dCgoKSA9PiB0aGlzLmRlbGV0ZWQuZGVsZXRlKGNoYW5uZWxJRCArIG1lc3NhZ2VJRCksXG4gICAgICB0aGlzLmNsaWVudC5vcHRpb25zLnJlc3RXc0JyaWRnZVRpbWVvdXQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWVzc2FnZURlbGV0ZUFjdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VEZWxldGUuanNcbi8vIG1vZHVsZSBpZCA9IDE3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///171\n");

/***/ }),
/* 172 */
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageDeleteBulk.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Collection = __webpack_require__(/*! ../../util/Collection */ 3);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass MessageDeleteBulkAction extends Action {\n  handle(data) {\n    const messages = new Collection();\n\n    if (!data.messages) {\n      const channel = this.client.channels.get(data.channel_id);\n      for (const id of data.ids) {\n        const message = channel.messages.get(id);\n        if (message) messages.set(message.id, message);\n      }\n    } else {\n      for (const msg of data.messages) {\n        messages.set(msg.id, msg);\n      }\n    }\n\n    if (messages.size > 0) this.client.emit(Constants.Events.MESSAGE_BULK_DELETE, messages);\n    return { messages };\n  }\n}\n\nmodule.exports = MessageDeleteBulkAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VEZWxldGVCdWxrLmpzPzQzZjQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWN0aW9uID0gcmVxdWlyZSgnLi9BY3Rpb24nKTtcbmNvbnN0IENvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi8uLi91dGlsL0NvbGxlY3Rpb24nKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbmNsYXNzIE1lc3NhZ2VEZWxldGVCdWxrQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgaGFuZGxlKGRhdGEpIHtcbiAgICBjb25zdCBtZXNzYWdlcyA9IG5ldyBDb2xsZWN0aW9uKCk7XG5cbiAgICBpZiAoIWRhdGEubWVzc2FnZXMpIHtcbiAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmNsaWVudC5jaGFubmVscy5nZXQoZGF0YS5jaGFubmVsX2lkKTtcbiAgICAgIGZvciAoY29uc3QgaWQgb2YgZGF0YS5pZHMpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNoYW5uZWwubWVzc2FnZXMuZ2V0KGlkKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UpIG1lc3NhZ2VzLnNldChtZXNzYWdlLmlkLCBtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCBtc2cgb2YgZGF0YS5tZXNzYWdlcykge1xuICAgICAgICBtZXNzYWdlcy5zZXQobXNnLmlkLCBtc2cpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtZXNzYWdlcy5zaXplID4gMCkgdGhpcy5jbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLk1FU1NBR0VfQlVMS19ERUxFVEUsIG1lc3NhZ2VzKTtcbiAgICByZXR1cm4geyBtZXNzYWdlcyB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTWVzc2FnZURlbGV0ZUJ1bGtBY3Rpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9NZXNzYWdlRGVsZXRlQnVsay5qc1xuLy8gbW9kdWxlIGlkID0gMTcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///172\n");

/***/ }),
/* 173 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageUpdate.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass MessageUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const channel = client.channels.get(data.channel_id);\n    if (channel) {\n      const message = channel.messages.get(data.id);\n      if (message) {\n        message.patch(data);\n        client.emit(Constants.Events.MESSAGE_UPDATE, message._edits[0], message);\n        return {\n          old: message._edits[0],\n          updated: message,\n        };\n      }\n\n      return {\n        old: message,\n        updated: message,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\n/**\n * Emitted whenever a message is updated - e.g. embed or content change.\n * @event Client#messageUpdate\n * @param {Message} oldMessage The message before the update\n * @param {Message} newMessage The message after the update\n */\n\nmodule.exports = MessageUpdateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTczLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VVcGRhdGUuanM/M2FlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9Db25zdGFudHMnKTtcblxuY2xhc3MgTWVzc2FnZVVwZGF0ZUFjdGlvbiBleHRlbmRzIEFjdGlvbiB7XG4gIGhhbmRsZShkYXRhKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQ7XG5cbiAgICBjb25zdCBjaGFubmVsID0gY2xpZW50LmNoYW5uZWxzLmdldChkYXRhLmNoYW5uZWxfaWQpO1xuICAgIGlmIChjaGFubmVsKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gY2hhbm5lbC5tZXNzYWdlcy5nZXQoZGF0YS5pZCk7XG4gICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICBtZXNzYWdlLnBhdGNoKGRhdGEpO1xuICAgICAgICBjbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLk1FU1NBR0VfVVBEQVRFLCBtZXNzYWdlLl9lZGl0c1swXSwgbWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb2xkOiBtZXNzYWdlLl9lZGl0c1swXSxcbiAgICAgICAgICB1cGRhdGVkOiBtZXNzYWdlLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbGQ6IG1lc3NhZ2UsXG4gICAgICAgIHVwZGF0ZWQ6IG1lc3NhZ2UsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvbGQ6IG51bGwsXG4gICAgICB1cGRhdGVkOiBudWxsLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgbWVzc2FnZSBpcyB1cGRhdGVkIC0gZS5nLiBlbWJlZCBvciBjb250ZW50IGNoYW5nZS5cbiAqIEBldmVudCBDbGllbnQjbWVzc2FnZVVwZGF0ZVxuICogQHBhcmFtIHtNZXNzYWdlfSBvbGRNZXNzYWdlIFRoZSBtZXNzYWdlIGJlZm9yZSB0aGUgdXBkYXRlXG4gKiBAcGFyYW0ge01lc3NhZ2V9IG5ld01lc3NhZ2UgVGhlIG1lc3NhZ2UgYWZ0ZXIgdGhlIHVwZGF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gTWVzc2FnZVVwZGF0ZUFjdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VVcGRhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///173\n");

/***/ }),
/* 174 */
/*!**************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageReactionAdd.js ***!
  \**************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id' } }\n*/\n\nclass MessageReactionAdd extends Action {\n  handle(data) {\n    const user = this.client.users.get(data.user_id);\n    if (!user) return false;\n    // Verify channel\n    const channel = this.client.channels.get(data.channel_id);\n    if (!channel || channel.type === 'voice') return false;\n    // Verify message\n    const message = channel.messages.get(data.message_id);\n    if (!message) return false;\n    if (!data.emoji) return false;\n    // Verify reaction\n    const reaction = message._addReaction(data.emoji, user);\n    if (reaction) this.client.emit(Constants.Events.MESSAGE_REACTION_ADD, reaction, user);\n\n    return { message, reaction, user };\n  }\n}\n\n/**\n * Emitted whenever a reaction is added to a message.\n * @event Client#messageReactionAdd\n * @param {MessageReaction} messageReaction The reaction object\n * @param {User} user The user that applied the emoji or reaction emoji\n */\n\nmodule.exports = MessageReactionAdd;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VSZWFjdGlvbkFkZC5qcz80ZjUwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi91dGlsL0NvbnN0YW50cycpO1xuXG4vKlxueyB1c2VyX2lkOiAnaWQnLFxuICAgICBtZXNzYWdlX2lkOiAnaWQnLFxuICAgICBlbW9qaTogeyBuYW1lOiAn77+9JywgaWQ6IG51bGwgfSxcbiAgICAgY2hhbm5lbF9pZDogJ2lkJyB9IH1cbiovXG5cbmNsYXNzIE1lc3NhZ2VSZWFjdGlvbkFkZCBleHRlbmRzIEFjdGlvbiB7XG4gIGhhbmRsZShkYXRhKSB7XG4gICAgY29uc3QgdXNlciA9IHRoaXMuY2xpZW50LnVzZXJzLmdldChkYXRhLnVzZXJfaWQpO1xuICAgIGlmICghdXNlcikgcmV0dXJuIGZhbHNlO1xuICAgIC8vIFZlcmlmeSBjaGFubmVsXG4gICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuY2xpZW50LmNoYW5uZWxzLmdldChkYXRhLmNoYW5uZWxfaWQpO1xuICAgIGlmICghY2hhbm5lbCB8fCBjaGFubmVsLnR5cGUgPT09ICd2b2ljZScpIHJldHVybiBmYWxzZTtcbiAgICAvLyBWZXJpZnkgbWVzc2FnZVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjaGFubmVsLm1lc3NhZ2VzLmdldChkYXRhLm1lc3NhZ2VfaWQpO1xuICAgIGlmICghbWVzc2FnZSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghZGF0YS5lbW9qaSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIFZlcmlmeSByZWFjdGlvblxuICAgIGNvbnN0IHJlYWN0aW9uID0gbWVzc2FnZS5fYWRkUmVhY3Rpb24oZGF0YS5lbW9qaSwgdXNlcik7XG4gICAgaWYgKHJlYWN0aW9uKSB0aGlzLmNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuTUVTU0FHRV9SRUFDVElPTl9BREQsIHJlYWN0aW9uLCB1c2VyKTtcblxuICAgIHJldHVybiB7IG1lc3NhZ2UsIHJlYWN0aW9uLCB1c2VyIH07XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgcmVhY3Rpb24gaXMgYWRkZWQgdG8gYSBtZXNzYWdlLlxuICogQGV2ZW50IENsaWVudCNtZXNzYWdlUmVhY3Rpb25BZGRcbiAqIEBwYXJhbSB7TWVzc2FnZVJlYWN0aW9ufSBtZXNzYWdlUmVhY3Rpb24gVGhlIHJlYWN0aW9uIG9iamVjdFxuICogQHBhcmFtIHtVc2VyfSB1c2VyIFRoZSB1c2VyIHRoYXQgYXBwbGllZCB0aGUgZW1vamkgb3IgcmVhY3Rpb24gZW1vamlcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2VSZWFjdGlvbkFkZDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VSZWFjdGlvbkFkZC5qc1xuLy8gbW9kdWxlIGlkID0gMTc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///174\n");

/***/ }),
/* 175 */
/*!*****************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageReactionRemove.js ***!
  \*****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id' } }\n*/\n\nclass MessageReactionRemove extends Action {\n  handle(data) {\n    const user = this.client.users.get(data.user_id);\n    if (!user) return false;\n    // Verify channel\n    const channel = this.client.channels.get(data.channel_id);\n    if (!channel || channel.type === 'voice') return false;\n    // Verify message\n    const message = channel.messages.get(data.message_id);\n    if (!message) return false;\n    if (!data.emoji) return false;\n    // Verify reaction\n    const reaction = message._removeReaction(data.emoji, user);\n    if (reaction) this.client.emit(Constants.Events.MESSAGE_REACTION_REMOVE, reaction, user);\n\n    return { message, reaction, user };\n  }\n}\n\n/**\n * Emitted whenever a reaction is removed from a message.\n * @event Client#messageReactionRemove\n * @param {MessageReaction} messageReaction The reaction object\n * @param {User} user The user that removed the emoji or reaction emoji\n */\n\nmodule.exports = MessageReactionRemove;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VSZWFjdGlvblJlbW92ZS5qcz81MzgzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi91dGlsL0NvbnN0YW50cycpO1xuXG4vKlxueyB1c2VyX2lkOiAnaWQnLFxuICAgICBtZXNzYWdlX2lkOiAnaWQnLFxuICAgICBlbW9qaTogeyBuYW1lOiAn77+9JywgaWQ6IG51bGwgfSxcbiAgICAgY2hhbm5lbF9pZDogJ2lkJyB9IH1cbiovXG5cbmNsYXNzIE1lc3NhZ2VSZWFjdGlvblJlbW92ZSBleHRlbmRzIEFjdGlvbiB7XG4gIGhhbmRsZShkYXRhKSB7XG4gICAgY29uc3QgdXNlciA9IHRoaXMuY2xpZW50LnVzZXJzLmdldChkYXRhLnVzZXJfaWQpO1xuICAgIGlmICghdXNlcikgcmV0dXJuIGZhbHNlO1xuICAgIC8vIFZlcmlmeSBjaGFubmVsXG4gICAgY29uc3QgY2hhbm5lbCA9IHRoaXMuY2xpZW50LmNoYW5uZWxzLmdldChkYXRhLmNoYW5uZWxfaWQpO1xuICAgIGlmICghY2hhbm5lbCB8fCBjaGFubmVsLnR5cGUgPT09ICd2b2ljZScpIHJldHVybiBmYWxzZTtcbiAgICAvLyBWZXJpZnkgbWVzc2FnZVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBjaGFubmVsLm1lc3NhZ2VzLmdldChkYXRhLm1lc3NhZ2VfaWQpO1xuICAgIGlmICghbWVzc2FnZSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghZGF0YS5lbW9qaSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIFZlcmlmeSByZWFjdGlvblxuICAgIGNvbnN0IHJlYWN0aW9uID0gbWVzc2FnZS5fcmVtb3ZlUmVhY3Rpb24oZGF0YS5lbW9qaSwgdXNlcik7XG4gICAgaWYgKHJlYWN0aW9uKSB0aGlzLmNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuTUVTU0FHRV9SRUFDVElPTl9SRU1PVkUsIHJlYWN0aW9uLCB1c2VyKTtcblxuICAgIHJldHVybiB7IG1lc3NhZ2UsIHJlYWN0aW9uLCB1c2VyIH07XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgcmVhY3Rpb24gaXMgcmVtb3ZlZCBmcm9tIGEgbWVzc2FnZS5cbiAqIEBldmVudCBDbGllbnQjbWVzc2FnZVJlYWN0aW9uUmVtb3ZlXG4gKiBAcGFyYW0ge01lc3NhZ2VSZWFjdGlvbn0gbWVzc2FnZVJlYWN0aW9uIFRoZSByZWFjdGlvbiBvYmplY3RcbiAqIEBwYXJhbSB7VXNlcn0gdXNlciBUaGUgdXNlciB0aGF0IHJlbW92ZWQgdGhlIGVtb2ppIG9yIHJlYWN0aW9uIGVtb2ppXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlUmVhY3Rpb25SZW1vdmU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9NZXNzYWdlUmVhY3Rpb25SZW1vdmUuanNcbi8vIG1vZHVsZSBpZCA9IDE3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///175\n");

/***/ }),
/* 176 */
/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/MessageReactionRemoveAll.js ***!
  \********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass MessageReactionRemoveAll extends Action {\n  handle(data) {\n    const channel = this.client.channels.get(data.channel_id);\n    if (!channel || channel.type === 'voice') return false;\n\n    const message = channel.messages.get(data.message_id);\n    if (!message) return false;\n\n    message._clearReactions();\n    this.client.emit(Constants.Events.MESSAGE_REACTION_REMOVE_ALL, message);\n\n    return { message };\n  }\n}\n\n/**\n * Emitted whenever all reactions are removed from a message.\n * @event Client#messageReactionRemoveAll\n * @param {Message} message The message the reactions were removed from\n */\n\nmodule.exports = MessageReactionRemoveAll;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VSZWFjdGlvblJlbW92ZUFsbC5qcz84M2MxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi91dGlsL0NvbnN0YW50cycpO1xuXG5jbGFzcyBNZXNzYWdlUmVhY3Rpb25SZW1vdmVBbGwgZXh0ZW5kcyBBY3Rpb24ge1xuICBoYW5kbGUoZGF0YSkge1xuICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmNsaWVudC5jaGFubmVscy5nZXQoZGF0YS5jaGFubmVsX2lkKTtcbiAgICBpZiAoIWNoYW5uZWwgfHwgY2hhbm5lbC50eXBlID09PSAndm9pY2UnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBtZXNzYWdlID0gY2hhbm5lbC5tZXNzYWdlcy5nZXQoZGF0YS5tZXNzYWdlX2lkKTtcbiAgICBpZiAoIW1lc3NhZ2UpIHJldHVybiBmYWxzZTtcblxuICAgIG1lc3NhZ2UuX2NsZWFyUmVhY3Rpb25zKCk7XG4gICAgdGhpcy5jbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLk1FU1NBR0VfUkVBQ1RJT05fUkVNT1ZFX0FMTCwgbWVzc2FnZSk7XG5cbiAgICByZXR1cm4geyBtZXNzYWdlIH07XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGFsbCByZWFjdGlvbnMgYXJlIHJlbW92ZWQgZnJvbSBhIG1lc3NhZ2UuXG4gKiBAZXZlbnQgQ2xpZW50I21lc3NhZ2VSZWFjdGlvblJlbW92ZUFsbFxuICogQHBhcmFtIHtNZXNzYWdlfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRoZSByZWFjdGlvbnMgd2VyZSByZW1vdmVkIGZyb21cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2VSZWFjdGlvblJlbW92ZUFsbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL01lc3NhZ2VSZWFjdGlvblJlbW92ZUFsbC5qc1xuLy8gbW9kdWxlIGlkID0gMTc2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///176\n");

/***/ }),
/* 177 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ChannelCreate.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass ChannelCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.dataManager.newChannel(data);\n    return { channel };\n  }\n}\n\nmodule.exports = ChannelCreateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0NoYW5uZWxDcmVhdGUuanM/NWY5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuXG5jbGFzcyBDaGFubmVsQ3JlYXRlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgaGFuZGxlKGRhdGEpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcbiAgICBjb25zdCBjaGFubmVsID0gY2xpZW50LmRhdGFNYW5hZ2VyLm5ld0NoYW5uZWwoZGF0YSk7XG4gICAgcmV0dXJuIHsgY2hhbm5lbCB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhbm5lbENyZWF0ZUFjdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0NoYW5uZWxDcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///177\n");

/***/ }),
/* 178 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ChannelDelete.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass ChannelDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    let channel = client.channels.get(data.id);\n    if (channel) {\n      client.dataManager.killChannel(channel);\n      this.deleted.set(channel.id, channel);\n      this.scheduleForDeletion(channel.id);\n    } else {\n      channel = this.deleted.get(data.id) || null;\n    }\n\n    return { channel };\n  }\n\n  scheduleForDeletion(id) {\n    this.client.setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout);\n  }\n}\n\nmodule.exports = ChannelDeleteAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0NoYW5uZWxEZWxldGUuanM/Zjc4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuXG5jbGFzcyBDaGFubmVsRGVsZXRlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KTtcbiAgICB0aGlzLmRlbGV0ZWQgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBoYW5kbGUoZGF0YSkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50O1xuXG4gICAgbGV0IGNoYW5uZWwgPSBjbGllbnQuY2hhbm5lbHMuZ2V0KGRhdGEuaWQpO1xuICAgIGlmIChjaGFubmVsKSB7XG4gICAgICBjbGllbnQuZGF0YU1hbmFnZXIua2lsbENoYW5uZWwoY2hhbm5lbCk7XG4gICAgICB0aGlzLmRlbGV0ZWQuc2V0KGNoYW5uZWwuaWQsIGNoYW5uZWwpO1xuICAgICAgdGhpcy5zY2hlZHVsZUZvckRlbGV0aW9uKGNoYW5uZWwuaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGFubmVsID0gdGhpcy5kZWxldGVkLmdldChkYXRhLmlkKSB8fCBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7IGNoYW5uZWwgfTtcbiAgfVxuXG4gIHNjaGVkdWxlRm9yRGVsZXRpb24oaWQpIHtcbiAgICB0aGlzLmNsaWVudC5zZXRUaW1lb3V0KCgpID0+IHRoaXMuZGVsZXRlZC5kZWxldGUoaWQpLCB0aGlzLmNsaWVudC5vcHRpb25zLnJlc3RXc0JyaWRnZVRpbWVvdXQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhbm5lbERlbGV0ZUFjdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0NoYW5uZWxEZWxldGUuanNcbi8vIG1vZHVsZSBpZCA9IDE3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///178\n");

/***/ }),
/* 179 */
/*!*********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/ChannelUpdate.js ***!
  \*********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst Util = __webpack_require__(/*! ../../util/Util */ 4);\n\nclass ChannelUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const channel = client.channels.get(data.id);\n    if (channel) {\n      const oldChannel = Util.cloneObject(channel);\n      channel.setup(data);\n      client.emit(Constants.Events.CHANNEL_UPDATE, oldChannel, channel);\n      return {\n        old: oldChannel,\n        updated: channel,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\n/**\n * Emitted whenever a channel is updated - e.g. name change, topic change.\n * @event Client#channelUpdate\n * @param {Channel} oldChannel The channel before the update\n * @param {Channel} newChannel The channel after the update\n */\n\nmodule.exports = ChannelUpdateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTc5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0NoYW5uZWxVcGRhdGUuanM/ZmU5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9Db25zdGFudHMnKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCcuLi8uLi91dGlsL1V0aWwnKTtcblxuY2xhc3MgQ2hhbm5lbFVwZGF0ZUFjdGlvbiBleHRlbmRzIEFjdGlvbiB7XG4gIGhhbmRsZShkYXRhKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQ7XG5cbiAgICBjb25zdCBjaGFubmVsID0gY2xpZW50LmNoYW5uZWxzLmdldChkYXRhLmlkKTtcbiAgICBpZiAoY2hhbm5lbCkge1xuICAgICAgY29uc3Qgb2xkQ2hhbm5lbCA9IFV0aWwuY2xvbmVPYmplY3QoY2hhbm5lbCk7XG4gICAgICBjaGFubmVsLnNldHVwKGRhdGEpO1xuICAgICAgY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5DSEFOTkVMX1VQREFURSwgb2xkQ2hhbm5lbCwgY2hhbm5lbCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbGQ6IG9sZENoYW5uZWwsXG4gICAgICAgIHVwZGF0ZWQ6IGNoYW5uZWwsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvbGQ6IG51bGwsXG4gICAgICB1cGRhdGVkOiBudWxsLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgY2hhbm5lbCBpcyB1cGRhdGVkIC0gZS5nLiBuYW1lIGNoYW5nZSwgdG9waWMgY2hhbmdlLlxuICogQGV2ZW50IENsaWVudCNjaGFubmVsVXBkYXRlXG4gKiBAcGFyYW0ge0NoYW5uZWx9IG9sZENoYW5uZWwgVGhlIGNoYW5uZWwgYmVmb3JlIHRoZSB1cGRhdGVcbiAqIEBwYXJhbSB7Q2hhbm5lbH0gbmV3Q2hhbm5lbCBUaGUgY2hhbm5lbCBhZnRlciB0aGUgdXBkYXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBDaGFubmVsVXBkYXRlQWN0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L2FjdGlvbnMvQ2hhbm5lbFVwZGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///179\n");

/***/ }),
/* 180 */
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildDelete.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass GuildDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    let guild = client.guilds.get(data.id);\n    if (guild) {\n      for (const channel of guild.channels.values()) {\n        if (channel.type === 'text') channel.stopTyping(true);\n      }\n\n      if (guild.available && data.unavailable) {\n        // Guild is unavailable\n        guild.available = false;\n        client.emit(Constants.Events.GUILD_UNAVAILABLE, guild);\n\n        // Stops the GuildDelete packet thinking a guild was actually deleted,\n        // handles emitting of event itself\n        return {\n          guild: null,\n        };\n      }\n\n      for (const channel of guild.channels.values()) this.client.channels.delete(channel.id);\n      if (guild.voiceConnection) guild.voiceConnection.disconnect();\n\n      // Delete guild\n      client.guilds.delete(guild.id);\n      this.deleted.set(guild.id, guild);\n      this.scheduleForDeletion(guild.id);\n    } else {\n      guild = this.deleted.get(data.id) || null;\n    }\n\n    return { guild };\n  }\n\n  scheduleForDeletion(id) {\n    this.client.setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout);\n  }\n}\n\n/**\n * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n * @event Client#guildUnavailable\n * @param {Guild} guild The guild that has become unavailable\n */\n\nmodule.exports = GuildDeleteAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkRGVsZXRlLmpzP2RlNWUiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWN0aW9uID0gcmVxdWlyZSgnLi9BY3Rpb24nKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbmNsYXNzIEd1aWxkRGVsZXRlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KTtcbiAgICB0aGlzLmRlbGV0ZWQgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBoYW5kbGUoZGF0YSkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50O1xuXG4gICAgbGV0IGd1aWxkID0gY2xpZW50Lmd1aWxkcy5nZXQoZGF0YS5pZCk7XG4gICAgaWYgKGd1aWxkKSB7XG4gICAgICBmb3IgKGNvbnN0IGNoYW5uZWwgb2YgZ3VpbGQuY2hhbm5lbHMudmFsdWVzKCkpIHtcbiAgICAgICAgaWYgKGNoYW5uZWwudHlwZSA9PT0gJ3RleHQnKSBjaGFubmVsLnN0b3BUeXBpbmcodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChndWlsZC5hdmFpbGFibGUgJiYgZGF0YS51bmF2YWlsYWJsZSkge1xuICAgICAgICAvLyBHdWlsZCBpcyB1bmF2YWlsYWJsZVxuICAgICAgICBndWlsZC5hdmFpbGFibGUgPSBmYWxzZTtcbiAgICAgICAgY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5HVUlMRF9VTkFWQUlMQUJMRSwgZ3VpbGQpO1xuXG4gICAgICAgIC8vIFN0b3BzIHRoZSBHdWlsZERlbGV0ZSBwYWNrZXQgdGhpbmtpbmcgYSBndWlsZCB3YXMgYWN0dWFsbHkgZGVsZXRlZCxcbiAgICAgICAgLy8gaGFuZGxlcyBlbWl0dGluZyBvZiBldmVudCBpdHNlbGZcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBndWlsZDogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBjaGFubmVsIG9mIGd1aWxkLmNoYW5uZWxzLnZhbHVlcygpKSB0aGlzLmNsaWVudC5jaGFubmVscy5kZWxldGUoY2hhbm5lbC5pZCk7XG4gICAgICBpZiAoZ3VpbGQudm9pY2VDb25uZWN0aW9uKSBndWlsZC52b2ljZUNvbm5lY3Rpb24uZGlzY29ubmVjdCgpO1xuXG4gICAgICAvLyBEZWxldGUgZ3VpbGRcbiAgICAgIGNsaWVudC5ndWlsZHMuZGVsZXRlKGd1aWxkLmlkKTtcbiAgICAgIHRoaXMuZGVsZXRlZC5zZXQoZ3VpbGQuaWQsIGd1aWxkKTtcbiAgICAgIHRoaXMuc2NoZWR1bGVGb3JEZWxldGlvbihndWlsZC5pZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGd1aWxkID0gdGhpcy5kZWxldGVkLmdldChkYXRhLmlkKSB8fCBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7IGd1aWxkIH07XG4gIH1cblxuICBzY2hlZHVsZUZvckRlbGV0aW9uKGlkKSB7XG4gICAgdGhpcy5jbGllbnQuc2V0VGltZW91dCgoKSA9PiB0aGlzLmRlbGV0ZWQuZGVsZXRlKGlkKSwgdGhpcy5jbGllbnQub3B0aW9ucy5yZXN0V3NCcmlkZ2VUaW1lb3V0KTtcbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbmV2ZXIgYSBndWlsZCBiZWNvbWVzIHVuYXZhaWxhYmxlLCBsaWtlbHkgZHVlIHRvIGEgc2VydmVyIG91dGFnZS5cbiAqIEBldmVudCBDbGllbnQjZ3VpbGRVbmF2YWlsYWJsZVxuICogQHBhcmFtIHtHdWlsZH0gZ3VpbGQgVGhlIGd1aWxkIHRoYXQgaGFzIGJlY29tZSB1bmF2YWlsYWJsZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gR3VpbGREZWxldGVBY3Rpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9HdWlsZERlbGV0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///180\n");

/***/ }),
/* 181 */
/*!*******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildUpdate.js ***!
  \*******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst Util = __webpack_require__(/*! ../../util/Util */ 4);\n\nclass GuildUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.get(data.id);\n    if (guild) {\n      const oldGuild = Util.cloneObject(guild);\n      guild.setup(data);\n      client.emit(Constants.Events.GUILD_UPDATE, oldGuild, guild);\n      return {\n        old: oldGuild,\n        updated: guild,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\n/**\n * Emitted whenever a guild is updated - e.g. name change.\n * @event Client#guildUpdate\n * @param {Guild} oldGuild The guild before the update\n * @param {Guild} newGuild The guild after the update\n */\n\nmodule.exports = GuildUpdateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkVXBkYXRlLmpzPzJlNzQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWN0aW9uID0gcmVxdWlyZSgnLi9BY3Rpb24nKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9VdGlsJyk7XG5cbmNsYXNzIEd1aWxkVXBkYXRlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgaGFuZGxlKGRhdGEpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcblxuICAgIGNvbnN0IGd1aWxkID0gY2xpZW50Lmd1aWxkcy5nZXQoZGF0YS5pZCk7XG4gICAgaWYgKGd1aWxkKSB7XG4gICAgICBjb25zdCBvbGRHdWlsZCA9IFV0aWwuY2xvbmVPYmplY3QoZ3VpbGQpO1xuICAgICAgZ3VpbGQuc2V0dXAoZGF0YSk7XG4gICAgICBjbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLkdVSUxEX1VQREFURSwgb2xkR3VpbGQsIGd1aWxkKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9sZDogb2xkR3VpbGQsXG4gICAgICAgIHVwZGF0ZWQ6IGd1aWxkLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgb2xkOiBudWxsLFxuICAgICAgdXBkYXRlZDogbnVsbCxcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuZXZlciBhIGd1aWxkIGlzIHVwZGF0ZWQgLSBlLmcuIG5hbWUgY2hhbmdlLlxuICogQGV2ZW50IENsaWVudCNndWlsZFVwZGF0ZVxuICogQHBhcmFtIHtHdWlsZH0gb2xkR3VpbGQgVGhlIGd1aWxkIGJlZm9yZSB0aGUgdXBkYXRlXG4gKiBAcGFyYW0ge0d1aWxkfSBuZXdHdWlsZCBUaGUgZ3VpbGQgYWZ0ZXIgdGhlIHVwZGF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gR3VpbGRVcGRhdGVBY3Rpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9HdWlsZFVwZGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///181\n");

/***/ }),
/* 182 */
/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildMemberGet.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass GuildMemberGetAction extends Action {\n  handle(guild, data) {\n    const member = guild._addMember(data, false);\n    return { member };\n  }\n}\n\nmodule.exports = GuildMemberGetAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkTWVtYmVyR2V0LmpzPzQ3ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWN0aW9uID0gcmVxdWlyZSgnLi9BY3Rpb24nKTtcblxuY2xhc3MgR3VpbGRNZW1iZXJHZXRBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xuICBoYW5kbGUoZ3VpbGQsIGRhdGEpIHtcbiAgICBjb25zdCBtZW1iZXIgPSBndWlsZC5fYWRkTWVtYmVyKGRhdGEsIGZhbHNlKTtcbiAgICByZXR1cm4geyBtZW1iZXIgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEd1aWxkTWVtYmVyR2V0QWN0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L2FjdGlvbnMvR3VpbGRNZW1iZXJHZXQuanNcbi8vIG1vZHVsZSBpZCA9IDE4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///182\n");

/***/ }),
/* 183 */
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildMemberRemove.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass GuildMemberRemoveAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.get(data.guild_id);\n    let member = null;\n    if (guild) {\n      member = guild.members.get(data.user.id);\n      if (member) {\n        guild.memberCount--;\n        guild._removeMember(member);\n        this.deleted.set(guild.id + data.user.id, member);\n        if (client.status === Constants.Status.READY) client.emit(Constants.Events.GUILD_MEMBER_REMOVE, member);\n        this.scheduleForDeletion(guild.id, data.user.id);\n      } else {\n        member = this.deleted.get(guild.id + data.user.id) || null;\n      }\n    }\n    return { guild, member };\n  }\n\n  scheduleForDeletion(guildID, userID) {\n    this.client.setTimeout(() => this.deleted.delete(guildID + userID), this.client.options.restWsBridgeTimeout);\n  }\n}\n\n/**\n * Emitted whenever a member leaves a guild, or is kicked.\n * @event Client#guildMemberRemove\n * @param {GuildMember} member The member that has left/been kicked from the guild\n */\n\nmodule.exports = GuildMemberRemoveAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTgzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkTWVtYmVyUmVtb3ZlLmpzPzEzOGEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWN0aW9uID0gcmVxdWlyZSgnLi9BY3Rpb24nKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbmNsYXNzIEd1aWxkTWVtYmVyUmVtb3ZlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgc3VwZXIoY2xpZW50KTtcbiAgICB0aGlzLmRlbGV0ZWQgPSBuZXcgTWFwKCk7XG4gIH1cblxuICBoYW5kbGUoZGF0YSkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIGNvbnN0IGd1aWxkID0gY2xpZW50Lmd1aWxkcy5nZXQoZGF0YS5ndWlsZF9pZCk7XG4gICAgbGV0IG1lbWJlciA9IG51bGw7XG4gICAgaWYgKGd1aWxkKSB7XG4gICAgICBtZW1iZXIgPSBndWlsZC5tZW1iZXJzLmdldChkYXRhLnVzZXIuaWQpO1xuICAgICAgaWYgKG1lbWJlcikge1xuICAgICAgICBndWlsZC5tZW1iZXJDb3VudC0tO1xuICAgICAgICBndWlsZC5fcmVtb3ZlTWVtYmVyKG1lbWJlcik7XG4gICAgICAgIHRoaXMuZGVsZXRlZC5zZXQoZ3VpbGQuaWQgKyBkYXRhLnVzZXIuaWQsIG1lbWJlcik7XG4gICAgICAgIGlmIChjbGllbnQuc3RhdHVzID09PSBDb25zdGFudHMuU3RhdHVzLlJFQURZKSBjbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLkdVSUxEX01FTUJFUl9SRU1PVkUsIG1lbWJlcik7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVGb3JEZWxldGlvbihndWlsZC5pZCwgZGF0YS51c2VyLmlkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lbWJlciA9IHRoaXMuZGVsZXRlZC5nZXQoZ3VpbGQuaWQgKyBkYXRhLnVzZXIuaWQpIHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGd1aWxkLCBtZW1iZXIgfTtcbiAgfVxuXG4gIHNjaGVkdWxlRm9yRGVsZXRpb24oZ3VpbGRJRCwgdXNlcklEKSB7XG4gICAgdGhpcy5jbGllbnQuc2V0VGltZW91dCgoKSA9PiB0aGlzLmRlbGV0ZWQuZGVsZXRlKGd1aWxkSUQgKyB1c2VySUQpLCB0aGlzLmNsaWVudC5vcHRpb25zLnJlc3RXc0JyaWRnZVRpbWVvdXQpO1xuICB9XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuZXZlciBhIG1lbWJlciBsZWF2ZXMgYSBndWlsZCwgb3IgaXMga2lja2VkLlxuICogQGV2ZW50IENsaWVudCNndWlsZE1lbWJlclJlbW92ZVxuICogQHBhcmFtIHtHdWlsZE1lbWJlcn0gbWVtYmVyIFRoZSBtZW1iZXIgdGhhdCBoYXMgbGVmdC9iZWVuIGtpY2tlZCBmcm9tIHRoZSBndWlsZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gR3VpbGRNZW1iZXJSZW1vdmVBY3Rpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9HdWlsZE1lbWJlclJlbW92ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTgzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///183\n");

/***/ }),
/* 184 */
/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildBanRemove.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass GuildBanRemove extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.get(data.guild_id);\n    const user = client.dataManager.newUser(data.user);\n    if (guild && user) client.emit(Constants.Events.GUILD_BAN_REMOVE, guild, user);\n  }\n}\n\nmodule.exports = GuildBanRemove;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkQmFuUmVtb3ZlLmpzPzU1YzciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWN0aW9uID0gcmVxdWlyZSgnLi9BY3Rpb24nKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbmNsYXNzIEd1aWxkQmFuUmVtb3ZlIGV4dGVuZHMgQWN0aW9uIHtcbiAgaGFuZGxlKGRhdGEpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcbiAgICBjb25zdCBndWlsZCA9IGNsaWVudC5ndWlsZHMuZ2V0KGRhdGEuZ3VpbGRfaWQpO1xuICAgIGNvbnN0IHVzZXIgPSBjbGllbnQuZGF0YU1hbmFnZXIubmV3VXNlcihkYXRhLnVzZXIpO1xuICAgIGlmIChndWlsZCAmJiB1c2VyKSBjbGllbnQuZW1pdChDb25zdGFudHMuRXZlbnRzLkdVSUxEX0JBTl9SRU1PVkUsIGd1aWxkLCB1c2VyKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEd1aWxkQmFuUmVtb3ZlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L2FjdGlvbnMvR3VpbGRCYW5SZW1vdmUuanNcbi8vIG1vZHVsZSBpZCA9IDE4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///184\n");

/***/ }),
/* 185 */
/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRoleCreate.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst Role = __webpack_require__(/*! ../../structures/Role */ 10);\n\nclass GuildRoleCreate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.get(data.guild_id);\n    let role;\n    if (guild) {\n      const already = guild.roles.has(data.role.id);\n      role = new Role(guild, data.role);\n      guild.roles.set(role.id, role);\n      if (!already) client.emit(Constants.Events.GUILD_ROLE_CREATE, role);\n    }\n    return { role };\n  }\n}\n\n/**\n * Emitted whenever a role is created.\n * @event Client#roleCreate\n * @param {Role} role The role that was created\n */\n\nmodule.exports = GuildRoleCreate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkUm9sZUNyZWF0ZS5qcz8zYzgyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi91dGlsL0NvbnN0YW50cycpO1xuY29uc3QgUm9sZSA9IHJlcXVpcmUoJy4uLy4uL3N0cnVjdHVyZXMvUm9sZScpO1xuXG5jbGFzcyBHdWlsZFJvbGVDcmVhdGUgZXh0ZW5kcyBBY3Rpb24ge1xuICBoYW5kbGUoZGF0YSkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIGNvbnN0IGd1aWxkID0gY2xpZW50Lmd1aWxkcy5nZXQoZGF0YS5ndWlsZF9pZCk7XG4gICAgbGV0IHJvbGU7XG4gICAgaWYgKGd1aWxkKSB7XG4gICAgICBjb25zdCBhbHJlYWR5ID0gZ3VpbGQucm9sZXMuaGFzKGRhdGEucm9sZS5pZCk7XG4gICAgICByb2xlID0gbmV3IFJvbGUoZ3VpbGQsIGRhdGEucm9sZSk7XG4gICAgICBndWlsZC5yb2xlcy5zZXQocm9sZS5pZCwgcm9sZSk7XG4gICAgICBpZiAoIWFscmVhZHkpIGNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuR1VJTERfUk9MRV9DUkVBVEUsIHJvbGUpO1xuICAgIH1cbiAgICByZXR1cm4geyByb2xlIH07XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgcm9sZSBpcyBjcmVhdGVkLlxuICogQGV2ZW50IENsaWVudCNyb2xlQ3JlYXRlXG4gKiBAcGFyYW0ge1JvbGV9IHJvbGUgVGhlIHJvbGUgdGhhdCB3YXMgY3JlYXRlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gR3VpbGRSb2xlQ3JlYXRlO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L2FjdGlvbnMvR3VpbGRSb2xlQ3JlYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxODVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///185\n");

/***/ }),
/* 186 */
/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRoleDelete.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass GuildRoleDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.get(data.guild_id);\n    let role;\n\n    if (guild) {\n      role = guild.roles.get(data.role_id);\n      if (role) {\n        guild.roles.delete(data.role_id);\n        this.deleted.set(guild.id + data.role_id, role);\n        this.scheduleForDeletion(guild.id, data.role_id);\n        client.emit(Constants.Events.GUILD_ROLE_DELETE, role);\n      } else {\n        role = this.deleted.get(guild.id + data.role_id) || null;\n      }\n    }\n\n    return { role };\n  }\n\n  scheduleForDeletion(guildID, roleID) {\n    this.client.setTimeout(() => this.deleted.delete(guildID + roleID), this.client.options.restWsBridgeTimeout);\n  }\n}\n\n/**\n * Emitted whenever a guild role is deleted.\n * @event Client#roleDelete\n * @param {Role} role The role that was deleted\n */\n\nmodule.exports = GuildRoleDeleteAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkUm9sZURlbGV0ZS5qcz9hMjYwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi91dGlsL0NvbnN0YW50cycpO1xuXG5jbGFzcyBHdWlsZFJvbGVEZWxldGVBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICBzdXBlcihjbGllbnQpO1xuICAgIHRoaXMuZGVsZXRlZCA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIGhhbmRsZShkYXRhKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQ7XG4gICAgY29uc3QgZ3VpbGQgPSBjbGllbnQuZ3VpbGRzLmdldChkYXRhLmd1aWxkX2lkKTtcbiAgICBsZXQgcm9sZTtcblxuICAgIGlmIChndWlsZCkge1xuICAgICAgcm9sZSA9IGd1aWxkLnJvbGVzLmdldChkYXRhLnJvbGVfaWQpO1xuICAgICAgaWYgKHJvbGUpIHtcbiAgICAgICAgZ3VpbGQucm9sZXMuZGVsZXRlKGRhdGEucm9sZV9pZCk7XG4gICAgICAgIHRoaXMuZGVsZXRlZC5zZXQoZ3VpbGQuaWQgKyBkYXRhLnJvbGVfaWQsIHJvbGUpO1xuICAgICAgICB0aGlzLnNjaGVkdWxlRm9yRGVsZXRpb24oZ3VpbGQuaWQsIGRhdGEucm9sZV9pZCk7XG4gICAgICAgIGNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuR1VJTERfUk9MRV9ERUxFVEUsIHJvbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9sZSA9IHRoaXMuZGVsZXRlZC5nZXQoZ3VpbGQuaWQgKyBkYXRhLnJvbGVfaWQpIHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcm9sZSB9O1xuICB9XG5cbiAgc2NoZWR1bGVGb3JEZWxldGlvbihndWlsZElELCByb2xlSUQpIHtcbiAgICB0aGlzLmNsaWVudC5zZXRUaW1lb3V0KCgpID0+IHRoaXMuZGVsZXRlZC5kZWxldGUoZ3VpbGRJRCArIHJvbGVJRCksIHRoaXMuY2xpZW50Lm9wdGlvbnMucmVzdFdzQnJpZGdlVGltZW91dCk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgZ3VpbGQgcm9sZSBpcyBkZWxldGVkLlxuICogQGV2ZW50IENsaWVudCNyb2xlRGVsZXRlXG4gKiBAcGFyYW0ge1JvbGV9IHJvbGUgVGhlIHJvbGUgdGhhdCB3YXMgZGVsZXRlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gR3VpbGRSb2xlRGVsZXRlQWN0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L2FjdGlvbnMvR3VpbGRSb2xlRGVsZXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///186\n");

/***/ }),
/* 187 */
/*!***********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRoleUpdate.js ***!
  \***********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst Util = __webpack_require__(/*! ../../util/Util */ 4);\n\nclass GuildRoleUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.get(data.guild_id);\n\n    if (guild) {\n      const roleData = data.role;\n      let oldRole = null;\n\n      const role = guild.roles.get(roleData.id);\n      if (role) {\n        oldRole = Util.cloneObject(role);\n        role.setup(data.role);\n        client.emit(Constants.Events.GUILD_ROLE_UPDATE, oldRole, role);\n      }\n\n      return {\n        old: oldRole,\n        updated: role,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\n/**\n * Emitted whenever a guild role is updated.\n * @event Client#roleUpdate\n * @param {Role} oldRole The role before the update\n * @param {Role} newRole The role after the update\n */\n\nmodule.exports = GuildRoleUpdateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkUm9sZVVwZGF0ZS5qcz84NTk5Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi8uLi91dGlsL0NvbnN0YW50cycpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvVXRpbCcpO1xuXG5jbGFzcyBHdWlsZFJvbGVVcGRhdGVBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xuICBoYW5kbGUoZGF0YSkge1xuICAgIGNvbnN0IGNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIGNvbnN0IGd1aWxkID0gY2xpZW50Lmd1aWxkcy5nZXQoZGF0YS5ndWlsZF9pZCk7XG5cbiAgICBpZiAoZ3VpbGQpIHtcbiAgICAgIGNvbnN0IHJvbGVEYXRhID0gZGF0YS5yb2xlO1xuICAgICAgbGV0IG9sZFJvbGUgPSBudWxsO1xuXG4gICAgICBjb25zdCByb2xlID0gZ3VpbGQucm9sZXMuZ2V0KHJvbGVEYXRhLmlkKTtcbiAgICAgIGlmIChyb2xlKSB7XG4gICAgICAgIG9sZFJvbGUgPSBVdGlsLmNsb25lT2JqZWN0KHJvbGUpO1xuICAgICAgICByb2xlLnNldHVwKGRhdGEucm9sZSk7XG4gICAgICAgIGNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuR1VJTERfUk9MRV9VUERBVEUsIG9sZFJvbGUsIHJvbGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBvbGQ6IG9sZFJvbGUsXG4gICAgICAgIHVwZGF0ZWQ6IHJvbGUsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvbGQ6IG51bGwsXG4gICAgICB1cGRhdGVkOiBudWxsLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgZ3VpbGQgcm9sZSBpcyB1cGRhdGVkLlxuICogQGV2ZW50IENsaWVudCNyb2xlVXBkYXRlXG4gKiBAcGFyYW0ge1JvbGV9IG9sZFJvbGUgVGhlIHJvbGUgYmVmb3JlIHRoZSB1cGRhdGVcbiAqIEBwYXJhbSB7Um9sZX0gbmV3Um9sZSBUaGUgcm9sZSBhZnRlciB0aGUgdXBkYXRlXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZFJvbGVVcGRhdGVBY3Rpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9HdWlsZFJvbGVVcGRhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///187\n");

/***/ }),
/* 188 */
/*!***************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/UserGet.js ***!
  \***************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass UserGetAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const user = client.dataManager.newUser(data);\n    return { user };\n  }\n}\n\nmodule.exports = UserGetAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL1VzZXJHZXQuanM/MDhkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuXG5jbGFzcyBVc2VyR2V0QWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgaGFuZGxlKGRhdGEpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcbiAgICBjb25zdCB1c2VyID0gY2xpZW50LmRhdGFNYW5hZ2VyLm5ld1VzZXIoZGF0YSk7XG4gICAgcmV0dXJuIHsgdXNlciB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXNlckdldEFjdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL1VzZXJHZXQuanNcbi8vIG1vZHVsZSBpZCA9IDE4OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///188\n");

/***/ }),
/* 189 */
/*!******************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/UserUpdate.js ***!
  \******************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\nconst Util = __webpack_require__(/*! ../../util/Util */ 4);\n\nclass UserUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    if (client.user) {\n      if (client.user.equals(data)) {\n        return {\n          old: client.user,\n          updated: client.user,\n        };\n      }\n\n      const oldUser = Util.cloneObject(client.user);\n      client.user.patch(data);\n      client.emit(Constants.Events.USER_UPDATE, oldUser, client.user);\n      return {\n        old: oldUser,\n        updated: client.user,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\nmodule.exports = UserUpdateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTg5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL1VzZXJVcGRhdGUuanM/MjljMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuY29uc3QgQ29uc3RhbnRzID0gcmVxdWlyZSgnLi4vLi4vdXRpbC9Db25zdGFudHMnKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCcuLi8uLi91dGlsL1V0aWwnKTtcblxuY2xhc3MgVXNlclVwZGF0ZUFjdGlvbiBleHRlbmRzIEFjdGlvbiB7XG4gIGhhbmRsZShkYXRhKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQ7XG5cbiAgICBpZiAoY2xpZW50LnVzZXIpIHtcbiAgICAgIGlmIChjbGllbnQudXNlci5lcXVhbHMoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvbGQ6IGNsaWVudC51c2VyLFxuICAgICAgICAgIHVwZGF0ZWQ6IGNsaWVudC51c2VyLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBvbGRVc2VyID0gVXRpbC5jbG9uZU9iamVjdChjbGllbnQudXNlcik7XG4gICAgICBjbGllbnQudXNlci5wYXRjaChkYXRhKTtcbiAgICAgIGNsaWVudC5lbWl0KENvbnN0YW50cy5FdmVudHMuVVNFUl9VUERBVEUsIG9sZFVzZXIsIGNsaWVudC51c2VyKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9sZDogb2xkVXNlcixcbiAgICAgICAgdXBkYXRlZDogY2xpZW50LnVzZXIsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBvbGQ6IG51bGwsXG4gICAgICB1cGRhdGVkOiBudWxsLFxuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBVc2VyVXBkYXRlQWN0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L2FjdGlvbnMvVXNlclVwZGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///189\n");

/***/ }),
/* 190 */
/*!**********************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/UserNoteUpdate.js ***!
  \**********************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\nconst Constants = __webpack_require__(/*! ../../util/Constants */ 0);\n\nclass UserNoteUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const oldNote = client.user.notes.get(data.id);\n    const note = data.note.length ? data.note : null;\n\n    client.user.notes.set(data.id, note);\n\n    client.emit(Constants.Events.USER_NOTE_UPDATE, data.id, oldNote, note);\n\n    return {\n      old: oldNote,\n      updated: note,\n    };\n  }\n}\n\n/**\n * Emitted whenever a note is updated.\n * @event Client#userNoteUpdate\n * @param {User} user The user the note belongs to\n * @param {string} oldNote The note content before the update\n * @param {string} newNote The note content after the update\n */\n\nmodule.exports = UserNoteUpdateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL1VzZXJOb3RlVXBkYXRlLmpzPzU4MjQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWN0aW9uID0gcmVxdWlyZSgnLi9BY3Rpb24nKTtcbmNvbnN0IENvbnN0YW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWwvQ29uc3RhbnRzJyk7XG5cbmNsYXNzIFVzZXJOb3RlVXBkYXRlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgaGFuZGxlKGRhdGEpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcblxuICAgIGNvbnN0IG9sZE5vdGUgPSBjbGllbnQudXNlci5ub3Rlcy5nZXQoZGF0YS5pZCk7XG4gICAgY29uc3Qgbm90ZSA9IGRhdGEubm90ZS5sZW5ndGggPyBkYXRhLm5vdGUgOiBudWxsO1xuXG4gICAgY2xpZW50LnVzZXIubm90ZXMuc2V0KGRhdGEuaWQsIG5vdGUpO1xuXG4gICAgY2xpZW50LmVtaXQoQ29uc3RhbnRzLkV2ZW50cy5VU0VSX05PVEVfVVBEQVRFLCBkYXRhLmlkLCBvbGROb3RlLCBub3RlKTtcblxuICAgIHJldHVybiB7XG4gICAgICBvbGQ6IG9sZE5vdGUsXG4gICAgICB1cGRhdGVkOiBub3RlLFxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBFbWl0dGVkIHdoZW5ldmVyIGEgbm90ZSBpcyB1cGRhdGVkLlxuICogQGV2ZW50IENsaWVudCN1c2VyTm90ZVVwZGF0ZVxuICogQHBhcmFtIHtVc2VyfSB1c2VyIFRoZSB1c2VyIHRoZSBub3RlIGJlbG9uZ3MgdG9cbiAqIEBwYXJhbSB7c3RyaW5nfSBvbGROb3RlIFRoZSBub3RlIGNvbnRlbnQgYmVmb3JlIHRoZSB1cGRhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZXdOb3RlIFRoZSBub3RlIGNvbnRlbnQgYWZ0ZXIgdGhlIHVwZGF0ZVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gVXNlck5vdGVVcGRhdGVBY3Rpb247XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9Vc2VyTm90ZVVwZGF0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///190\n");

/***/ }),
/* 191 */
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildSync.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass GuildSync extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.get(data.id);\n    if (guild) {\n      if (data.presences) {\n        for (const presence of data.presences) guild._setPresence(presence.user.id, presence);\n      }\n\n      if (data.members) {\n        for (const syncMember of data.members) {\n          const member = guild.members.get(syncMember.user.id);\n          if (member) {\n            guild._updateMember(member, syncMember);\n          } else {\n            guild._addMember(syncMember, false);\n          }\n        }\n      }\n\n      if ('large' in data) guild.large = data.large;\n    }\n  }\n}\n\nmodule.exports = GuildSync;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkU3luYy5qcz9iNGRiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG5cbmNsYXNzIEd1aWxkU3luYyBleHRlbmRzIEFjdGlvbiB7XG4gIGhhbmRsZShkYXRhKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQ7XG5cbiAgICBjb25zdCBndWlsZCA9IGNsaWVudC5ndWlsZHMuZ2V0KGRhdGEuaWQpO1xuICAgIGlmIChndWlsZCkge1xuICAgICAgaWYgKGRhdGEucHJlc2VuY2VzKSB7XG4gICAgICAgIGZvciAoY29uc3QgcHJlc2VuY2Ugb2YgZGF0YS5wcmVzZW5jZXMpIGd1aWxkLl9zZXRQcmVzZW5jZShwcmVzZW5jZS51c2VyLmlkLCBwcmVzZW5jZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLm1lbWJlcnMpIHtcbiAgICAgICAgZm9yIChjb25zdCBzeW5jTWVtYmVyIG9mIGRhdGEubWVtYmVycykge1xuICAgICAgICAgIGNvbnN0IG1lbWJlciA9IGd1aWxkLm1lbWJlcnMuZ2V0KHN5bmNNZW1iZXIudXNlci5pZCk7XG4gICAgICAgICAgaWYgKG1lbWJlcikge1xuICAgICAgICAgICAgZ3VpbGQuX3VwZGF0ZU1lbWJlcihtZW1iZXIsIHN5bmNNZW1iZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBndWlsZC5fYWRkTWVtYmVyKHN5bmNNZW1iZXIsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCdsYXJnZScgaW4gZGF0YSkgZ3VpbGQubGFyZ2UgPSBkYXRhLmxhcmdlO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEd1aWxkU3luYztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkU3luYy5qc1xuLy8gbW9kdWxlIGlkID0gMTkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///191\n");

/***/ }),
/* 192 */
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojiCreate.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass GuildEmojiCreateAction extends Action {\n  handle(guild, createdEmoji) {\n    const client = this.client;\n    const emoji = client.dataManager.newEmoji(createdEmoji, guild);\n    return { emoji };\n  }\n}\n\n/**\n * Emitted whenever a custom emoji is created in a guild.\n * @event Client#emojiCreate\n * @param {Emoji} emoji The emoji that was created\n */\n\nmodule.exports = GuildEmojiCreateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkRW1vamlDcmVhdGUuanM/MjZmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuXG5jbGFzcyBHdWlsZEVtb2ppQ3JlYXRlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgaGFuZGxlKGd1aWxkLCBjcmVhdGVkRW1vamkpIHtcbiAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNsaWVudDtcbiAgICBjb25zdCBlbW9qaSA9IGNsaWVudC5kYXRhTWFuYWdlci5uZXdFbW9qaShjcmVhdGVkRW1vamksIGd1aWxkKTtcbiAgICByZXR1cm4geyBlbW9qaSB9O1xuICB9XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuZXZlciBhIGN1c3RvbSBlbW9qaSBpcyBjcmVhdGVkIGluIGEgZ3VpbGQuXG4gKiBAZXZlbnQgQ2xpZW50I2Vtb2ppQ3JlYXRlXG4gKiBAcGFyYW0ge0Vtb2ppfSBlbW9qaSBUaGUgZW1vamkgdGhhdCB3YXMgY3JlYXRlZFxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gR3VpbGRFbW9qaUNyZWF0ZUFjdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkRW1vamlDcmVhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///192\n");

/***/ }),
/* 193 */
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojiDelete.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass GuildEmojiDeleteAction extends Action {\n  handle(emoji) {\n    const client = this.client;\n    client.dataManager.killEmoji(emoji);\n    return { emoji };\n  }\n}\n\n/**\n * Emitted whenever a custom guild emoji is deleted.\n * @event Client#emojiDelete\n * @param {Emoji} emoji The emoji that was deleted\n */\n\nmodule.exports = GuildEmojiDeleteAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTkzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkRW1vamlEZWxldGUuanM/MTc1MSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuXG5jbGFzcyBHdWlsZEVtb2ppRGVsZXRlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgaGFuZGxlKGVtb2ppKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQ7XG4gICAgY2xpZW50LmRhdGFNYW5hZ2VyLmtpbGxFbW9qaShlbW9qaSk7XG4gICAgcmV0dXJuIHsgZW1vamkgfTtcbiAgfVxufVxuXG4vKipcbiAqIEVtaXR0ZWQgd2hlbmV2ZXIgYSBjdXN0b20gZ3VpbGQgZW1vamkgaXMgZGVsZXRlZC5cbiAqIEBldmVudCBDbGllbnQjZW1vamlEZWxldGVcbiAqIEBwYXJhbSB7RW1vaml9IGVtb2ppIFRoZSBlbW9qaSB0aGF0IHdhcyBkZWxldGVkXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZEVtb2ppRGVsZXRlQWN0aW9uO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvZGlzY29yZC5qcy9zcmMvY2xpZW50L2FjdGlvbnMvR3VpbGRFbW9qaURlbGV0ZS5qc1xuLy8gbW9kdWxlIGlkID0gMTkzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///193\n");

/***/ }),
/* 194 */
/*!************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojiUpdate.js ***!
  \************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass GuildEmojiUpdateAction extends Action {\n  handle(oldEmoji, newEmoji) {\n    const emoji = this.client.dataManager.updateEmoji(oldEmoji, newEmoji);\n    return { emoji };\n  }\n}\n\n/**\n * Emitted whenever a custom guild emoji is updated.\n * @event Client#emojiUpdate\n * @param {Emoji} oldEmoji The old emoji\n * @param {Emoji} newEmoji The new emoji\n */\n\nmodule.exports = GuildEmojiUpdateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkRW1vamlVcGRhdGUuanM/MjdhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBY3Rpb24gPSByZXF1aXJlKCcuL0FjdGlvbicpO1xuXG5jbGFzcyBHdWlsZEVtb2ppVXBkYXRlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcbiAgaGFuZGxlKG9sZEVtb2ppLCBuZXdFbW9qaSkge1xuICAgIGNvbnN0IGVtb2ppID0gdGhpcy5jbGllbnQuZGF0YU1hbmFnZXIudXBkYXRlRW1vamkob2xkRW1vamksIG5ld0Vtb2ppKTtcbiAgICByZXR1cm4geyBlbW9qaSB9O1xuICB9XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuZXZlciBhIGN1c3RvbSBndWlsZCBlbW9qaSBpcyB1cGRhdGVkLlxuICogQGV2ZW50IENsaWVudCNlbW9qaVVwZGF0ZVxuICogQHBhcmFtIHtFbW9qaX0gb2xkRW1vamkgVGhlIG9sZCBlbW9qaVxuICogQHBhcmFtIHtFbW9qaX0gbmV3RW1vamkgVGhlIG5ldyBlbW9qaVxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gR3VpbGRFbW9qaVVwZGF0ZUFjdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkRW1vamlVcGRhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///194\n");

/***/ }),
/* 195 */
/*!*************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildEmojisUpdate.js ***!
  \*************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nfunction mappify(iterable) {\n  const map = new Map();\n  for (const x of iterable) map.set(...x);\n  return map;\n}\n\nclass GuildEmojisUpdateAction extends Action {\n  handle(data) {\n    const guild = this.client.guilds.get(data.guild_id);\n    if (!guild || !guild.emojis) return;\n\n    const deletions = mappify(guild.emojis.entries());\n\n    for (const emoji of data.emojis) {\n      // Determine type of emoji event\n      const cachedEmoji = guild.emojis.get(emoji.id);\n      if (cachedEmoji) {\n        deletions.delete(emoji.id);\n        if (!cachedEmoji.equals(emoji, true)) {\n          // Emoji updated\n          this.client.actions.GuildEmojiUpdate.handle(cachedEmoji, emoji);\n        }\n      } else {\n        // Emoji added\n        this.client.actions.GuildEmojiCreate.handle(guild, emoji);\n      }\n    }\n\n    for (const emoji of deletions.values()) {\n      // Emoji deleted\n      this.client.actions.GuildEmojiDelete.handle(emoji);\n    }\n  }\n}\n\nmodule.exports = GuildEmojisUpdateAction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkRW1vamlzVXBkYXRlLmpzP2JjOTEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQWN0aW9uID0gcmVxdWlyZSgnLi9BY3Rpb24nKTtcblxuZnVuY3Rpb24gbWFwcGlmeShpdGVyYWJsZSkge1xuICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gIGZvciAoY29uc3QgeCBvZiBpdGVyYWJsZSkgbWFwLnNldCguLi54KTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuY2xhc3MgR3VpbGRFbW9qaXNVcGRhdGVBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xuICBoYW5kbGUoZGF0YSkge1xuICAgIGNvbnN0IGd1aWxkID0gdGhpcy5jbGllbnQuZ3VpbGRzLmdldChkYXRhLmd1aWxkX2lkKTtcbiAgICBpZiAoIWd1aWxkIHx8ICFndWlsZC5lbW9qaXMpIHJldHVybjtcblxuICAgIGNvbnN0IGRlbGV0aW9ucyA9IG1hcHBpZnkoZ3VpbGQuZW1vamlzLmVudHJpZXMoKSk7XG5cbiAgICBmb3IgKGNvbnN0IGVtb2ppIG9mIGRhdGEuZW1vamlzKSB7XG4gICAgICAvLyBEZXRlcm1pbmUgdHlwZSBvZiBlbW9qaSBldmVudFxuICAgICAgY29uc3QgY2FjaGVkRW1vamkgPSBndWlsZC5lbW9qaXMuZ2V0KGVtb2ppLmlkKTtcbiAgICAgIGlmIChjYWNoZWRFbW9qaSkge1xuICAgICAgICBkZWxldGlvbnMuZGVsZXRlKGVtb2ppLmlkKTtcbiAgICAgICAgaWYgKCFjYWNoZWRFbW9qaS5lcXVhbHMoZW1vamksIHRydWUpKSB7XG4gICAgICAgICAgLy8gRW1vamkgdXBkYXRlZFxuICAgICAgICAgIHRoaXMuY2xpZW50LmFjdGlvbnMuR3VpbGRFbW9qaVVwZGF0ZS5oYW5kbGUoY2FjaGVkRW1vamksIGVtb2ppKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRW1vamkgYWRkZWRcbiAgICAgICAgdGhpcy5jbGllbnQuYWN0aW9ucy5HdWlsZEVtb2ppQ3JlYXRlLmhhbmRsZShndWlsZCwgZW1vamkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoY29uc3QgZW1vamkgb2YgZGVsZXRpb25zLnZhbHVlcygpKSB7XG4gICAgICAvLyBFbW9qaSBkZWxldGVkXG4gICAgICB0aGlzLmNsaWVudC5hY3Rpb25zLkd1aWxkRW1vamlEZWxldGUuaGFuZGxlKGVtb2ppKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZEVtb2ppc1VwZGF0ZUFjdGlvbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkRW1vamlzVXBkYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///195\n");

/***/ }),
/* 196 */
/*!********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildRolesPositionUpdate.js ***!
  \********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass GuildRolesPositionUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.get(data.guild_id);\n    if (guild) {\n      for (const partialRole of data.roles) {\n        const role = guild.roles.get(partialRole.id);\n        if (role) role.position = partialRole.position;\n      }\n    }\n\n    return { guild };\n  }\n}\n\nmodule.exports = GuildRolesPositionUpdate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkUm9sZXNQb3NpdGlvblVwZGF0ZS5qcz9lMWE1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG5cbmNsYXNzIEd1aWxkUm9sZXNQb3NpdGlvblVwZGF0ZSBleHRlbmRzIEFjdGlvbiB7XG4gIGhhbmRsZShkYXRhKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQ7XG5cbiAgICBjb25zdCBndWlsZCA9IGNsaWVudC5ndWlsZHMuZ2V0KGRhdGEuZ3VpbGRfaWQpO1xuICAgIGlmIChndWlsZCkge1xuICAgICAgZm9yIChjb25zdCBwYXJ0aWFsUm9sZSBvZiBkYXRhLnJvbGVzKSB7XG4gICAgICAgIGNvbnN0IHJvbGUgPSBndWlsZC5yb2xlcy5nZXQocGFydGlhbFJvbGUuaWQpO1xuICAgICAgICBpZiAocm9sZSkgcm9sZS5wb3NpdGlvbiA9IHBhcnRpYWxSb2xlLnBvc2l0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IGd1aWxkIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZFJvbGVzUG9zaXRpb25VcGRhdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9HdWlsZFJvbGVzUG9zaXRpb25VcGRhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///196\n");

/***/ }),
/* 197 */
/*!***********************************************************************************!*\
  !*** ./node_modules/discord.js/src/client/actions/GuildChannelsPositionUpdate.js ***!
  \***********************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Action = __webpack_require__(/*! ./Action */ 2);\n\nclass GuildChannelsPositionUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.get(data.guild_id);\n    if (guild) {\n      for (const partialChannel of data.channels) {\n        const channel = guild.channels.get(partialChannel.id);\n        if (channel) channel.position = partialChannel.position;\n      }\n    }\n\n    return { guild };\n  }\n}\n\nmodule.exports = GuildChannelsPositionUpdate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9hY3Rpb25zL0d1aWxkQ2hhbm5lbHNQb3NpdGlvblVwZGF0ZS5qcz9mNTExIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFjdGlvbiA9IHJlcXVpcmUoJy4vQWN0aW9uJyk7XG5cbmNsYXNzIEd1aWxkQ2hhbm5lbHNQb3NpdGlvblVwZGF0ZSBleHRlbmRzIEFjdGlvbiB7XG4gIGhhbmRsZShkYXRhKSB7XG4gICAgY29uc3QgY2xpZW50ID0gdGhpcy5jbGllbnQ7XG5cbiAgICBjb25zdCBndWlsZCA9IGNsaWVudC5ndWlsZHMuZ2V0KGRhdGEuZ3VpbGRfaWQpO1xuICAgIGlmIChndWlsZCkge1xuICAgICAgZm9yIChjb25zdCBwYXJ0aWFsQ2hhbm5lbCBvZiBkYXRhLmNoYW5uZWxzKSB7XG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSBndWlsZC5jaGFubmVscy5nZXQocGFydGlhbENoYW5uZWwuaWQpO1xuICAgICAgICBpZiAoY2hhbm5lbCkgY2hhbm5lbC5wb3NpdGlvbiA9IHBhcnRpYWxDaGFubmVsLnBvc2l0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IGd1aWxkIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHdWlsZENoYW5uZWxzUG9zaXRpb25VcGRhdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9kaXNjb3JkLmpzL3NyYy9jbGllbnQvYWN0aW9ucy9HdWlsZENoYW5uZWxzUG9zaXRpb25VcGRhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDE5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///197\n");

/***/ }),
/* 198 */
/*!*****************************************************************!*\
  !*** ./node_modules/discord.js/src/sharding/ShardingManager.js ***!
  \*****************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const path = __webpack_require__(/*! path */ 8);\nconst fs = __webpack_require__(/*! fs */ 32);\nconst EventEmitter = __webpack_require__(/*! events */ 5).EventEmitter;\nconst Shard = __webpack_require__(/*! ./Shard */ 82);\nconst Collection = __webpack_require__(/*! ../util/Collection */ 3);\nconst Util = __webpack_require__(/*! ../util/Util */ 4);\n\n/**\n * This is a utility class that can be used to help you spawn shards of your client. Each shard is completely separate\n * from the other. The Shard Manager takes a path to a file and spawns it under the specified amount of shards safely.\n * If you do not select an amount of shards, the manager will automatically decide the best amount.\n * @extends {EventEmitter}\n */\nclass ShardingManager extends EventEmitter {\n  /**\n   * @param {string} file Path to your shard script file\n   * @param {Object} [options] Options for the sharding manager\n   * @param {number|string} [options.totalShards='auto'] Number of shards to spawn, or \"auto\"\n   * @param {boolean} [options.respawn=true] Whether shards should automatically respawn upon exiting\n   * @param {string[]} [options.shardArgs=[]] Arguments to pass to the shard script when spawning\n   * @param {string} [options.token] Token to use for automatic shard count and passing to shards\n   */\n  constructor(file, options = {}) {\n    super();\n    options = Util.mergeDefault({\n      totalShards: 'auto',\n      respawn: true,\n      shardArgs: [],\n      token: null,\n    }, options);\n\n    /**\n     * Path to the shard script file\n     * @type {string}\n     */\n    this.file = file;\n    if (!file) throw new Error('File must be specified.');\n    if (!path.isAbsolute(file)) this.file = path.resolve(process.cwd(), file);\n    const stats = fs.statSync(this.file);\n    if (!stats.isFile()) throw new Error('File path does not point to a file.');\n\n    /**\n     * Amount of shards that this manager is going to spawn\n     * @type {number|string}\n     */\n    this.totalShards = options.totalShards;\n    if (this.totalShards !== 'auto') {\n      if (typeof this.totalShards !== 'number' || isNaN(this.totalShards)) {\n        throw new TypeError('Amount of shards must be a number.');\n      }\n      if (this.totalShards < 1) throw new RangeError('Amount of shards must be at least 1.');\n      if (this.totalShards !== Math.floor(this.totalShards)) {\n        throw new RangeError('Amount of shards must be an integer.');\n      }\n    }\n\n    /**\n     * Whether shards should automatically respawn upon exiting\n     * @type {boolean}\n     */\n    this.respawn = options.respawn;\n\n    /**\n     * An array of arguments to pass to shards\n     * @type {string[]}\n     */\n    this.shardArgs = options.shardArgs;\n\n    /**\n     * Token to use for obtaining the automatic shard count, and passing to shards\n     * @type {?string}\n     */\n    this.token = options.token ? options.token.replace(/^Bot\\s*/i, '') : null;\n\n    /**\n     * A collection of shards that this manager has spawned\n     * @type {Collection<number, Shard>}\n     */\n    this.shards = new Collection();\n  }\n\n  /**\n   * Spawns a single shard.\n   * @param {number} id The ID of the shard to spawn. **This is usually not necessary**\n   * @returns {Promise<Shard>}\n   */\n  createShard(id = this.shards.size) {\n    const shard = new Shard(this, id, this.shardArgs);\n    this.shards.set(id, shard);\n    /**\n     * Emitted upon launching a shard.\n     * @event ShardingManager#launch\n     * @param {Shard} shard Shard that was launched\n     */\n    this.emit('launch', shard);\n    return Promise.resolve(shard);\n  }\n\n  /**\n   * Spawns multiple shards.\n   * @param {number} [amount=this.totalShards] Number of shards to spawn\n   * @param {number} [delay=7500] How long to wait in between spawning each shard (in milliseconds)\n   * @returns {Promise<Collection<number, Shard>>}\n   */\n  spawn(amount = this.totalShards, delay = 7500) {\n    if (amount === 'auto') {\n      return Util.fetchRecommendedShards(this.token).then(count => {\n        this.totalShards = count;\n        return this._spawn(count, delay);\n      });\n    } else {\n      if (typeof amount !== 'number' || isNaN(amount)) throw new TypeError('Amount of shards must be a number.');\n      if (amount < 1) throw new RangeError('Amount of shards must be at least 1.');\n      if (amount !== Math.floor(amount)) throw new TypeError('Amount of shards must be an integer.');\n      return this._spawn(amount, delay);\n    }\n  }\n\n  /**\n   * Actually spawns shards, unlike that poser above >:(\n   * @param {number} amount Number of shards to spawn\n   * @param {number} delay How long to wait in between spawning each shard (in milliseconds)\n   * @returns {Promise<Collection<number, Shard>>}\n   * @private\n   */\n  _spawn(amount, delay) {\n    return new Promise(resolve => {\n      if (this.shards.size >= amount) throw new Error(`Already spawned ${this.shards.size} shards.`);\n      this.totalShards = amount;\n\n      this.createShard();\n      if (this.shards.size >= this.totalShards) {\n        resolve(this.shards);\n        return;\n      }\n\n      if (delay <= 0) {\n        while (this.shards.size < this.totalShards) this.createShard();\n        resolve(this.shards);\n      } else {\n        const interval = setInterval(() => {\n          this.createShard();\n          if (this.shards.size >= this.totalShards) {\n            clearInterval(interval);\n            resolve(this.shards);\n          }\n        }, delay);\n      }\n    });\n  }\n\n  /**\n   * Send a message to all shards.\n   * @param {*} message Message to be sent to the shards\n   * @returns {Promise<Shard[]>}\n   */\n  broadcast(message) {\n    const promises = [];\n    for (const shard of this.shards.values()) promises.push(shard.send(message));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Evaluates a script on all shards, in the context of the Clients.\n   * @param {string} script JavaScript to run on each shard\n   * @returns {Promise<Array>} Results of the script execution\n   */\n  broadcastEval(script) {\n    const promises = [];\n    for (const shard of this.shards.values()) promises.push(shard.eval(script));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Fetches a client property value of each shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @returns {Promise<Array>}\n   * @example\n   * manager.fetchClientValues('guilds.size')\n   *   .then(results => {\n   *     console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`);\n   *   })\n   *   .catch(console.error);\n   */\n  fetchClientValues(prop) {\n    if (this.shards.size === 0) return Promise.reject(new Error('No shards have been spawned.'));\n    if (this.shards.size !== this.totalShards) return Promise.reject(new Error('Still spawning shards.'));\n    const promises = [];\n    for (const shard of this.shards.values()) promises.push(shard.fetchClientValue(prop));\n    return Promise.all(promises);\n  }\n}\n\nmodule.exports = ShardingManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///198\n");

/***/ }),
/* 199 */
/*!*************************************************************!*\
  !*** ./node_modules/discord.js/src/client/WebhookClient.js ***!
  \*************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("const Webhook = __webpack_require__(/*! ../structures/Webhook */ 23);\nconst RESTManager = __webpack_require__(/*! ./rest/RESTManager */ 50);\nconst ClientDataResolver = __webpack_require__(/*! ./ClientDataResolver */ 34);\nconst Constants = __webpack_require__(/*! ../util/Constants */ 0);\nconst Util = __webpack_require__(/*! ../util/Util */ 4);\n\n/**\n * The webhook client.\n * @extends {Webhook}\n */\nclass WebhookClient extends Webhook {\n  /**\n   * @param {Snowflake} id ID of the webhook\n   * @param {string} token Token of the webhook\n   * @param {ClientOptions} [options] Options for the client\n   * @example\n   * // Create a new webhook and send a message\n   * const hook = new Discord.WebhookClient('1234', 'abcdef');\n   * hook.sendMessage('This will send a message').catch(console.error);\n   */\n  constructor(id, token, options) {\n    super(null, id, token);\n\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n    this.options = Util.mergeDefault(Constants.DefaultOptions, options);\n\n    /**\n     * The REST manager of the client\n     * @type {RESTManager}\n     * @private\n     */\n    this.rest = new RESTManager(this);\n\n    /**\n     * The data resolver of the client\n     * @type {ClientDataResolver}\n     * @private\n     */\n    this.resolver = new ClientDataResolver(this);\n\n    /**\n     * Timeouts set by {@link WebhookClient#setTimeout} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n    this._timeouts = new Set();\n\n    /**\n     * Intervals set by {@link WebhookClient#setInterval} that are still active\n     * @type {Set<Timeout>}\n     * @private\n     */\n    this._intervals = new Set();\n  }\n\n  /**\n   * Sets a timeout that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n  setTimeout(fn, delay, ...args) {\n    const timeout = setTimeout(() => {\n      fn(...args);\n      this._timeouts.delete(timeout);\n    }, delay);\n    this._timeouts.add(timeout);\n    return timeout;\n  }\n\n  /**\n   * Clears a timeout.\n   * @param {Timeout} timeout Timeout to cancel\n   */\n  clearTimeout(timeout) {\n    clearTimeout(timeout);\n    this._timeouts.delete(timeout);\n  }\n\n  /**\n   * Sets an interval that will be automatically cancelled if the client is destroyed.\n   * @param {Function} fn Function to execute\n   * @param {number} delay Time to wait before executing (in milliseconds)\n   * @param {...*} args Arguments for the function\n   * @returns {Timeout}\n   */\n  setInterval(fn, delay, ...args) {\n    const interval = setInterval(fn, delay, ...args);\n    this._intervals.add(interval);\n    return interval;\n  }\n\n  /**\n   * Clears an interval.\n   * @param {Timeout} interval Interval to cancel\n   */\n  clearInterval(interval) {\n    clearInterval(interval);\n    this._intervals.delete(interval);\n  }\n\n\n  /**\n   * Destroys the client.\n   */\n  destroy() {\n    for (const t of this._timeouts) clearTimeout(t);\n    for (const i of this._intervals) clearInterval(i);\n    this._timeouts.clear();\n    this._intervals.clear();\n  }\n}\n\nmodule.exports = WebhookClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTk5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9XZWJob29rQ2xpZW50LmpzP2QzOTgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgV2ViaG9vayA9IHJlcXVpcmUoJy4uL3N0cnVjdHVyZXMvV2ViaG9vaycpO1xuY29uc3QgUkVTVE1hbmFnZXIgPSByZXF1aXJlKCcuL3Jlc3QvUkVTVE1hbmFnZXInKTtcbmNvbnN0IENsaWVudERhdGFSZXNvbHZlciA9IHJlcXVpcmUoJy4vQ2xpZW50RGF0YVJlc29sdmVyJyk7XG5jb25zdCBDb25zdGFudHMgPSByZXF1aXJlKCcuLi91dGlsL0NvbnN0YW50cycpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwvVXRpbCcpO1xuXG4vKipcbiAqIFRoZSB3ZWJob29rIGNsaWVudC5cbiAqIEBleHRlbmRzIHtXZWJob29rfVxuICovXG5jbGFzcyBXZWJob29rQ2xpZW50IGV4dGVuZHMgV2ViaG9vayB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1Nub3dmbGFrZX0gaWQgSUQgb2YgdGhlIHdlYmhvb2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuIFRva2VuIG9mIHRoZSB3ZWJob29rXG4gICAqIEBwYXJhbSB7Q2xpZW50T3B0aW9uc30gW29wdGlvbnNdIE9wdGlvbnMgZm9yIHRoZSBjbGllbnRcbiAgICogQGV4YW1wbGVcbiAgICogLy8gQ3JlYXRlIGEgbmV3IHdlYmhvb2sgYW5kIHNlbmQgYSBtZXNzYWdlXG4gICAqIGNvbnN0IGhvb2sgPSBuZXcgRGlzY29yZC5XZWJob29rQ2xpZW50KCcxMjM0JywgJ2FiY2RlZicpO1xuICAgKiBob29rLnNlbmRNZXNzYWdlKCdUaGlzIHdpbGwgc2VuZCBhIG1lc3NhZ2UnKS5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICovXG4gIGNvbnN0cnVjdG9yKGlkLCB0b2tlbiwgb3B0aW9ucykge1xuICAgIHN1cGVyKG51bGwsIGlkLCB0b2tlbik7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9ucyB0aGUgY2xpZW50IHdhcyBpbnN0YW50aWF0ZWQgd2l0aFxuICAgICAqIEB0eXBlIHtDbGllbnRPcHRpb25zfVxuICAgICAqL1xuICAgIHRoaXMub3B0aW9ucyA9IFV0aWwubWVyZ2VEZWZhdWx0KENvbnN0YW50cy5EZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgUkVTVCBtYW5hZ2VyIG9mIHRoZSBjbGllbnRcbiAgICAgKiBAdHlwZSB7UkVTVE1hbmFnZXJ9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLnJlc3QgPSBuZXcgUkVTVE1hbmFnZXIodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGF0YSByZXNvbHZlciBvZiB0aGUgY2xpZW50XG4gICAgICogQHR5cGUge0NsaWVudERhdGFSZXNvbHZlcn1cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHRoaXMucmVzb2x2ZXIgPSBuZXcgQ2xpZW50RGF0YVJlc29sdmVyKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogVGltZW91dHMgc2V0IGJ5IHtAbGluayBXZWJob29rQ2xpZW50I3NldFRpbWVvdXR9IHRoYXQgYXJlIHN0aWxsIGFjdGl2ZVxuICAgICAqIEB0eXBlIHtTZXQ8VGltZW91dD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl90aW1lb3V0cyA9IG5ldyBTZXQoKTtcblxuICAgIC8qKlxuICAgICAqIEludGVydmFscyBzZXQgYnkge0BsaW5rIFdlYmhvb2tDbGllbnQjc2V0SW50ZXJ2YWx9IHRoYXQgYXJlIHN0aWxsIGFjdGl2ZVxuICAgICAqIEB0eXBlIHtTZXQ8VGltZW91dD59XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0aGlzLl9pbnRlcnZhbHMgPSBuZXcgU2V0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhIHRpbWVvdXQgdGhhdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2FuY2VsbGVkIGlmIHRoZSBjbGllbnQgaXMgZGVzdHJveWVkLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBleGVjdXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBUaW1lIHRvIHdhaXQgYmVmb3JlIGV4ZWN1dGluZyAoaW4gbWlsbGlzZWNvbmRzKVxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzIGZvciB0aGUgZnVuY3Rpb25cbiAgICogQHJldHVybnMge1RpbWVvdXR9XG4gICAqL1xuICBzZXRUaW1lb3V0KGZuLCBkZWxheSwgLi4uYXJncykge1xuICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGZuKC4uLmFyZ3MpO1xuICAgICAgdGhpcy5fdGltZW91dHMuZGVsZXRlKHRpbWVvdXQpO1xuICAgIH0sIGRlbGF5KTtcbiAgICB0aGlzLl90aW1lb3V0cy5hZGQodGltZW91dCk7XG4gICAgcmV0dXJuIHRpbWVvdXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIGEgdGltZW91dC5cbiAgICogQHBhcmFtIHtUaW1lb3V0fSB0aW1lb3V0IFRpbWVvdXQgdG8gY2FuY2VsXG4gICAqL1xuICBjbGVhclRpbWVvdXQodGltZW91dCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aGlzLl90aW1lb3V0cy5kZWxldGUodGltZW91dCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBpbnRlcnZhbCB0aGF0IHdpbGwgYmUgYXV0b21hdGljYWxseSBjYW5jZWxsZWQgaWYgdGhlIGNsaWVudCBpcyBkZXN0cm95ZWQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGV4ZWN1dGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbGF5IFRpbWUgdG8gd2FpdCBiZWZvcmUgZXhlY3V0aW5nIChpbiBtaWxsaXNlY29uZHMpXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJncyBBcmd1bWVudHMgZm9yIHRoZSBmdW5jdGlvblxuICAgKiBAcmV0dXJucyB7VGltZW91dH1cbiAgICovXG4gIHNldEludGVydmFsKGZuLCBkZWxheSwgLi4uYXJncykge1xuICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoZm4sIGRlbGF5LCAuLi5hcmdzKTtcbiAgICB0aGlzLl9pbnRlcnZhbHMuYWRkKGludGVydmFsKTtcbiAgICByZXR1cm4gaW50ZXJ2YWw7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXJzIGFuIGludGVydmFsLlxuICAgKiBAcGFyYW0ge1RpbWVvdXR9IGludGVydmFsIEludGVydmFsIHRvIGNhbmNlbFxuICAgKi9cbiAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCkge1xuICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgIHRoaXMuX2ludGVydmFscy5kZWxldGUoaW50ZXJ2YWwpO1xuICB9XG5cblxuICAvKipcbiAgICogRGVzdHJveXMgdGhlIGNsaWVudC5cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgZm9yIChjb25zdCB0IG9mIHRoaXMuX3RpbWVvdXRzKSBjbGVhclRpbWVvdXQodCk7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMuX2ludGVydmFscykgY2xlYXJJbnRlcnZhbChpKTtcbiAgICB0aGlzLl90aW1lb3V0cy5jbGVhcigpO1xuICAgIHRoaXMuX2ludGVydmFscy5jbGVhcigpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gV2ViaG9va0NsaWVudDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Rpc2NvcmQuanMvc3JjL2NsaWVudC9XZWJob29rQ2xpZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///199\n");

/***/ }),
/* 200 */
/*!*****************************************!*\
  !*** ./src/components/CommandCenter.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar CommandCenter = function () {\n  function CommandCenter() {\n    _classCallCheck(this, CommandCenter);\n\n    this.prefix = 'nightwatch ';\n  }\n\n  _createClass(CommandCenter, [{\n    key: 'checkCommands',\n    value: function checkCommands(message) {\n      if (message.content.startsWith(this.prefix)) {\n        //  Trimming the message to receive the command.\n        var command = message.content.substring(this.prefix.length);\n\n        this.checkForPurge(message, command);\n\n        //  Checking for the different command-types.\n        switch (command) {\n          case 'test':\n            message.channel.send('I received the command!');\n            break;\n          case 'info':\n            message.channel.send('\\\nHello there! I am Nightwatch. A custom built \\\nbot by Zurkloyd for this server to aid with interaction and support \\\nfor people!\\\n          ');\n            break;\n          case 'ping':\n            message.channel.send('pong!');\n            break;\n\n          case 'name':\n            message.channel.send('\\\nMy name, Nightwatch, has been chosen because zurkloyd is a lazy bellend \\\nand could not think of anything better than \\\n(\"Hey! My bot watches the server at night while I am gone, let me call it nightwatch\") \\\nSeriously man, think of something better...\\\n          ');\n            break;\n        }\n      }\n    }\n  }, {\n    key: 'checkForPurge',\n    value: function checkForPurge(message, command) {\n      //  First things first, check if the user who requested the command\n      //  is actually a moderator.\n      if (!message.member.roles.has('425722321328930827')) return;\n\n      //  Checking if the command starts with PURGE\n      if (command.startsWith('purge')) {\n        //  Trimming the message to get the numbers\n        var amount = command.substring(6);\n\n        //  Checking of the trimmed message contains any letters.\n        if (amount.match(/[a-z]/)) return;\n\n        //  Checking for the amount of messages.\n        if (parseInt(amount) <= 100) message.channel.bulkDelete(parseInt(amount));else message.channel.send('Purging more than 100 messages is not allowed!');\n      }\n    }\n  }]);\n\n  return CommandCenter;\n}();\n\nexports.default = CommandCenter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjAwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9jb21wb25lbnRzL0NvbW1hbmRDZW50ZXIuanM/ZTNjNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tYW5kQ2VudGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5wcmVmaXggPSAnbmlnaHR3YXRjaCAnO1xuICB9XG5cbiAgY2hlY2tDb21tYW5kcyhtZXNzYWdlKSB7ICAgIFxuICAgIGlmIChtZXNzYWdlLmNvbnRlbnQuc3RhcnRzV2l0aCh0aGlzLnByZWZpeCkpXG4gICAge1xuICAgICAgLy8gIFRyaW1taW5nIHRoZSBtZXNzYWdlIHRvIHJlY2VpdmUgdGhlIGNvbW1hbmQuXG4gICAgICB2YXIgY29tbWFuZCA9IG1lc3NhZ2UuY29udGVudC5zdWJzdHJpbmcodGhpcy5wcmVmaXgubGVuZ3RoKTtcbiAgICBcbiAgICAgIHRoaXMuY2hlY2tGb3JQdXJnZShtZXNzYWdlLCBjb21tYW5kKTtcblxuICAgICAgLy8gIENoZWNraW5nIGZvciB0aGUgZGlmZmVyZW50IGNvbW1hbmQtdHlwZXMuXG4gICAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgICAgY2FzZSAndGVzdCc6XG4gICAgICAgICAgbWVzc2FnZS5jaGFubmVsLnNlbmQoJ0kgcmVjZWl2ZWQgdGhlIGNvbW1hbmQhJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2luZm8nOlxuICAgICAgICAgIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKCdcXFxuSGVsbG8gdGhlcmUhIEkgYW0gTmlnaHR3YXRjaC4gQSBjdXN0b20gYnVpbHQgXFxcbmJvdCBieSBadXJrbG95ZCBmb3IgdGhpcyBzZXJ2ZXIgdG8gYWlkIHdpdGggaW50ZXJhY3Rpb24gYW5kIHN1cHBvcnQgXFxcbmZvciBwZW9wbGUhXFxcbiAgICAgICAgICAnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncGluZyc6XG4gICAgICAgICAgbWVzc2FnZS5jaGFubmVsLnNlbmQoJ3BvbmchJyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgbWVzc2FnZS5jaGFubmVsLnNlbmQoJ1xcXG5NeSBuYW1lLCBOaWdodHdhdGNoLCBoYXMgYmVlbiBjaG9zZW4gYmVjYXVzZSB6dXJrbG95ZCBpcyBhIGxhenkgYmVsbGVuZCBcXFxuYW5kIGNvdWxkIG5vdCB0aGluayBvZiBhbnl0aGluZyBiZXR0ZXIgdGhhbiBcXFxuKFwiSGV5ISBNeSBib3Qgd2F0Y2hlcyB0aGUgc2VydmVyIGF0IG5pZ2h0IHdoaWxlIEkgYW0gZ29uZSwgbGV0IG1lIGNhbGwgaXQgbmlnaHR3YXRjaFwiKSBcXFxuU2VyaW91c2x5IG1hbiwgdGhpbmsgb2Ygc29tZXRoaW5nIGJldHRlci4uLlxcXG4gICAgICAgICAgJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2hlY2tGb3JQdXJnZShtZXNzYWdlLCBjb21tYW5kKSB7XG4gICAgLy8gIEZpcnN0IHRoaW5ncyBmaXJzdCwgY2hlY2sgaWYgdGhlIHVzZXIgd2hvIHJlcXVlc3RlZCB0aGUgY29tbWFuZFxuICAgIC8vICBpcyBhY3R1YWxseSBhIG1vZGVyYXRvci5cbiAgICBpZiAoIW1lc3NhZ2UubWVtYmVyLnJvbGVzLmhhcygnNDI1NzIyMzIxMzI4OTMwODI3JykpIHJldHVybjtcblxuICAgIC8vICBDaGVja2luZyBpZiB0aGUgY29tbWFuZCBzdGFydHMgd2l0aCBQVVJHRVxuICAgIGlmIChjb21tYW5kLnN0YXJ0c1dpdGgoJ3B1cmdlJykpIHtcbiAgICAgIC8vICBUcmltbWluZyB0aGUgbWVzc2FnZSB0byBnZXQgdGhlIG51bWJlcnNcbiAgICAgIHZhciBhbW91bnQgPSBjb21tYW5kLnN1YnN0cmluZyg2KTtcblxuICAgICAgLy8gIENoZWNraW5nIG9mIHRoZSB0cmltbWVkIG1lc3NhZ2UgY29udGFpbnMgYW55IGxldHRlcnMuXG4gICAgICBpZiAoYW1vdW50Lm1hdGNoKC9bYS16XS8pKSByZXR1cm47XG5cbiAgICAgIC8vICBDaGVja2luZyBmb3IgdGhlIGFtb3VudCBvZiBtZXNzYWdlcy5cbiAgICAgIGlmIChwYXJzZUludChhbW91bnQpIDw9IDEwMClcbiAgICAgICAgbWVzc2FnZS5jaGFubmVsLmJ1bGtEZWxldGUocGFyc2VJbnQoYW1vdW50KSk7XG4gICAgICBlbHNlXG4gICAgICAgIG1lc3NhZ2UuY2hhbm5lbC5zZW5kKCdQdXJnaW5nIG1vcmUgdGhhbiAxMDAgbWVzc2FnZXMgaXMgbm90IGFsbG93ZWQhJyk7XG4gICAgfVxuICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy9jb21wb25lbnRzL0NvbW1hbmRDZW50ZXIuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUFBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQUE7QUFNQTtBQXRCQTtBQXdCQTtBQUNBOzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBOzs7Ozs7QUE1REEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///200\n");

/***/ })
/******/ ]);